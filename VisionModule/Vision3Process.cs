using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Threading;
using System.IO;
using Common;
using ImageAcquisition;
using SharedMemory;
using VisionProcessing;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using IOMode;
using Lighting;
using Microsoft.Win32;
using System.Linq;
using System.Drawing.Imaging;
namespace VisionModule
{
    public class Vision3Process
    {
        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        #region constant variables

        //private const int BUFFERSIZE = 20;

        #endregion

        #region enum

        private enum ROIPartition
        {
            Center,
            Side,
            TopLeft,
            RightBottom
        }

        private enum PkgInspectionType
        {
            BrightField,
            DarkField
        }


        public enum ResulType
        {
            Pass, PassPH, FailOrient, FailPad, FailPin1, FailPosition, FailPackage, Timesout, FailPH, NotReady, FailCenterPadColorDefect, FailCenterPadOffset, FailCenterPadArea, FailCenterPadDimension,
            FailCenterPadPitchGap, FailCenterPadBroken, FailCenterPadExcess, FailCenterPadSmear, FailCenterPadEdgeLimit, FailCenterPadStandOff, FailCenterPadEdgeDistance, FailCenterPadSpan, FailCenterPadContamination, FailCenterPadMissing, FailSidePadOffset,
            FailSidePadColorDefect, FailSidePadArea, FailSidePadDimension, FailSidePadPitchGap, FailSidePadBroken, FailSidePadExcess, FailSidePadSmear, FailSidePadEdgeLimit, FailSidePadStandOff, FailSidePadEdgeDistance, FailSidePadSpan, FailSidePadContamination,
            FailSidePadMissing, FailCenterPkgDefect, FailCenterPkgDimension, FailSidePkgDefect, FailSidePkgDimension, FailEdgeNotFound
        };//, FailNoTemplate};


        public enum TCPIPResulID
        {
            Fail = 0, /*FailMark = 1, FailPackage = 2,*/ FailPosition = 0/*3*///, FailNotSeatProper = 4, FailCrack = 11, FailForeignMaterial = 12,
            //FailPackageDimension = 13, FailVoid = 14, FailChippedOffOrScractches = 15, FailCopper = 16, FailDiscolouration = 17, FailEmpty = 18,
            //FailNoMark = 19, Fail2DCodeNoFound = 20, Fail2DCodeVerification = 21
        };
        #endregion

        #region Member Variables
        private int m_intCounter = 0;
        private bool m_blnAuto;
        bool m_blnSetBefore = false;
        private bool m_blnPreviouslyIsPad = true;
        // Thread handle
        private readonly object m_objStopLock = new object();
        private bool m_blnStopping = false;
        private bool m_blnPause = false;
        private bool m_blnCustomWantPositioning = false;
        private bool m_blnCustomWantPackage = false;
        private bool m_blnCustomWantOrient = false;
        private bool m_blnCustomWantColor = false;
        private bool m_blnCustomWant5S = false;
        private bool m_blnCustomWantPad = false;
        private bool m_blnRotateImageUpdated = false;
        private bool m_blnForceStopProduction = false;
        private bool m_blnLoadRejectImageListPath = false;
        private bool[] m_arr5SFoundUnit = new bool[5];
        private bool[] m_arr5SFoundUnitPkg = new bool[5];
        private bool[] m_arr5SPackagedSizeChecked = new bool[5];
        private List<bool>[] m_arr5SImageRotated2 = new List<bool>[5];  // mean m_arr5SImageRotated2[5][] where 1st array index is center and side ROI index, 2nd array index is image index
        private int m_intPassStartNode = 0;
        private int m_intFailStartNode = 0;
        private int m_intPassEndNode = 0;
        private int m_intFailEndNode = 0;
        private int m_intGrabIndex = 0;
        private int m_intGrabRequire = 0;
        private int m_intFileIndex = 0;
        private uint m_intCameraGainPrev = 1;
        private int[] m_arrPassNoBuffer = null;
        private int[] m_arrFailNoBuffer = null;
        private string[] m_arrRejectNameBuffer = null;
        private string[] m_arrRejectMessageBuffer = null;
        private List<string> m_arrRejectImageListPath = new List<string>();
        private List<string> m_arrRejectImageErrorMessageListPath = new List<string>();
        private double m_dRedRatioPrev = 2.309997559;
        private double m_dBlueRatioPrev = 2.539978027;
        private float m_fCameraShuttlePrev = 1f;
        private int m_intCameraOutState = 1;
        private int[] m_arrCameraIntensityPrev = { -1, -1, -1, -1 }; // index == light source number. Maximum for each camera link to light source is only four
        private string[] m_arrErrorMessage = new string[5];

        private int[] m_arrPHCameraIntensityPrev = { -1, -1, -1 };//PH
        private float m_fPHCameraShuttlePrev = 1f;//PH
        private uint m_uintPHCameraGainPrev = 1;//PH

        private int m_intOrientAngle = 0;
        private string strTrackHeadName = "V1";

        private bool m_blnStopped = false, m_blnStopped_GrabImage = false, m_blnStopped_TransferImage = false, m_blnStopped_WaitFrame = false, m_blnStopped_AfterInspect, m_blnStopped_SaveImage;
        private bool m_blnStopped_CenterThread = false, m_blnStopped_OrientThread = false, m_blnStopped_SideTLThread = false, m_blnStopped_SideBRThread = false;
        private Thread m_thThread, m_thSubThread_GrabImage, m_thSubThread_TransferImage, m_thSubThread_WaitFrame, m_thSubThread_AfterInspect, m_thSubThread_SaveImage;
        private Thread m_thSubThread_Center, m_thSubThread_Orient, m_thSubThread_SideTL, m_thSubThread_SideBR;
        private VisionIO m_objVisionIO;
        private CustomOption m_smCustomizeInfo;
        private ProductionInfo m_smProductionInfo;
        private VisionInfo m_smVisionInfo;
        private AVTVimba m_objAVTFireGrab;
        private IDSuEyeCamera m_objIDSCamera;
        private TeliCamera m_objTeliCamera;
        private VisionComThread m_smComThread;
        private TCPIPIO m_smTCPIPIO;
        private RS232 m_thCOMMPort;

        List<BitmapData> m_arrBitmapData = new List<BitmapData>();
        List<IntPtr> m_arrBufferPointer = new List<IntPtr>();
        IntPtr m_ptrImagePointer = IntPtr.Zero;

        private ImageDrawing m_objTempImage;
        private ImageDrawing m_objGainImage;
        private ImageDrawing m_objDestImage;
        private ImageDrawing m_objTemporaryRotateSource;
        private ImageDrawing[] m_arrTempImage;              // 0=Center, 1=Top, 2=Right, 3=Bottom, 4=Left
        private ImageDrawing[] m_arrTempMoldFlashImage;
        private ImageDrawing[] m_arrGainImage;              // 0=Center, 1=Top, 2=Right, 3=Bottom, 4=Left
        private ImageDrawing[] m_arrTempGaugeImage;         // 0=Center, 1=Top, 2=Right, 3=Bottom, 4=Left   // Used to keep pre process image "Gradient, Prewitt, LowPass, HighPass, etc" before gauge measuremnt.
        private ImageDrawing[] m_arrTemporaryRotateSource;
        private ImageDrawing[] m_arrPassImage1Buffer = null;
        private ImageDrawing[] m_arrPassImage2Buffer = null;
        private ImageDrawing[] m_arrPassImage3Buffer = null;
        private ImageDrawing[] m_arrPassImage4Buffer = null;
        private ImageDrawing[] m_arrPassImage5Buffer = null;
        private ImageDrawing[] m_arrPassImage6Buffer = null;
        private ImageDrawing[] m_arrPassImage7Buffer = null;
        private ImageDrawing[] m_arrFailImage1Buffer = null;
        private ImageDrawing[] m_arrFailImage2Buffer = null;
        private ImageDrawing[] m_arrFailImage3Buffer = null;
        private ImageDrawing[] m_arrFailImage4Buffer = null;
        private ImageDrawing[] m_arrFailImage5Buffer = null;
        private ImageDrawing[] m_arrFailImage6Buffer = null;
        private ImageDrawing[] m_arrFailImage7Buffer = null;
        private CImageDrawing[] m_arrPassCImage1Buffer = null;
        private CImageDrawing[] m_arrPassCImage2Buffer = null;
        private CImageDrawing[] m_arrPassCImage3Buffer = null;
        private CImageDrawing[] m_arrPassCImage4Buffer = null;
        private CImageDrawing[] m_arrPassCImage5Buffer = null;
        private CImageDrawing[] m_arrPassCImage6Buffer = null;
        private CImageDrawing[] m_arrPassCImage7Buffer = null;
        private CImageDrawing[] m_arrFailCImage1Buffer = null;
        private CImageDrawing[] m_arrFailCImage2Buffer = null;
        private CImageDrawing[] m_arrFailCImage3Buffer = null;
        private CImageDrawing[] m_arrFailCImage4Buffer = null;
        private CImageDrawing[] m_arrFailCImage5Buffer = null;
        private CImageDrawing[] m_arrFailCImage6Buffer = null;
        private CImageDrawing[] m_arrFailCImage7Buffer = null;
        private ROI[] m_arrRotatedROI;
        private CROI[] m_arrRotatedColorROI;
        private ROI[] m_InspectROI;
        private ROI m_objImage2UnitROI; // Keep it null
        private ROI m_objImage3UnitROI; // Keep it null 

        TrackLog m_objPosTL;
        private int m_intDebugHour = 0;

        private float[] m_arrUnitCenterX, m_arrUnitCenterY;

        private bool m_bSubTh1_GrabImage = false;
        private bool m_bSubTh1_TransferImage = false;
        private bool m_bSubTh1_WaitFrame = false;
        private bool m_bSubTh2_SideTest = false;
        private bool m_bSubTh_CenterTest = false;
        private bool m_bSubTh_OrientTest = false;
        private bool m_bSubTh_SideTLTest = false;
        private bool m_bSubTh_SideBRTest = false;
        private bool m_bSubTh_StartAfterInspect = false;
        private bool m_bSubTh_PHTest = false;
        private bool m_bSubTh_PHTest_Result = false;
        private bool m_bWantPHTest = false;
        private bool m_bSubTh_CenterTest_Result = false;
        private bool m_bSubTh_OrientTest_Result = false;
        private bool m_bSubTh_SideTLTest_Result = false;
        private bool m_bSubTh_SideBRTest_Result = false;
        private bool m_bGrabImage1Done = false;
        private bool m_bGrabImage2Done = false;
        private bool m_bGrabImage3Done = false;
        private bool m_bGrabImage4Done = false;
        private bool m_bGrabImage5Done = false;
        private bool m_bGrabImage6Done = false;
        private bool m_bGrabImage7Done = false;
        private bool m_bGrabImage1Result = false;
        private bool m_bGrabImage2Result = false;
        private bool m_bGrabImage3Result = false;
        private bool m_bGrabImage4Result = false;
        private bool m_bGrabImage5Result = false;
        private bool m_bGrabImage6Result = false;
        private bool m_bGrabImage7Result = false;
        private bool m_bGrabImage1LoadDone = false;
        private bool m_bGrabImage2LoadDone = false;
        private bool m_bGrabImage3LoadDone = false;
        private bool m_bGrabImage4LoadDone = false;
        private bool m_bGrabImage5LoadDone = false;
        private bool m_bGrabImage6LoadDone = false;
        private bool m_bGrabImage7LoadDone = false;
        private bool m_bGrabImage1LoadResult = false;
        private bool m_bGrabImage2LoadResult = false;
        private bool m_bGrabImage3LoadResult = false;
        private bool m_bGrabImage4LoadResult = false;
        private bool m_bGrabImage5LoadResult = false;
        private bool m_bGrabImage6LoadResult = false;
        private bool m_bGrabImage7LoadResult = false;
        private bool m_bGrabImage1TriggerDone = false;
        private bool m_bGrabImage2TriggerDone = false;
        private bool m_bGrabImage3TriggerDone = false;
        private bool m_bGrabImage4TriggerDone = false;
        private bool m_bGrabImage5TriggerDone = false;
        private bool m_bGrabImage6TriggerDone = false;
        private bool m_bGrabImage7TriggerDone = false;
        private bool m_bGrabImage1TriggerResult = false;
        private bool m_bGrabImage2TriggerResult = false;
        private bool m_bGrabImage3TriggerResult = false;
        private bool m_bGrabImage4TriggerResult = false;
        private bool m_bGrabImage5TriggerResult = false;
        private bool m_bGrabImage6TriggerResult = false;
        private bool m_bGrabImage7TriggerResult = false;
        private bool m_bGrabImageFinalResult_Center = false;
        private bool m_bGrabImageFinalResult_Orient = false;
        private bool m_bGrabImageFinalResult_TL = false;
        private bool m_bGrabImageFinalResult_BR = false;
        private ResulType m_eInspectionResult_PH = ResulType.Pass;
        private ResulType m_eInspectionResult_Orient = ResulType.Pass;
        private ResulType m_eInspectionResult_Center = ResulType.Pass;
        private ResulType m_eInspectionResult_SideTL = ResulType.Pass;
        private ResulType m_eInspectionResult_SideBR = ResulType.Pass;


        //TCPIPIO
        private int m_intTCPIPResultID = -1;
        private float m_fOffsetX = 0;
        private float m_fOffsetY = 0;
        private float m_fOffsetAngle = 0;
        private bool m_blnStartVision_In = false;
        private bool m_blnEndVision_Out = true;
        private bool m_blnGrabbing_Out = false;
        private bool m_blnCheckOffset_In = false;
        private bool m_blnPass1_Out = true;
        private bool m_blnOrientResult2_Out = false;
        private bool m_blnOrientResult1_Out = false;
        private bool m_blnPackageFail_Out = false;        // Fail criteria: Package
        private bool m_blnPositionReject_Out = false;     // Fail criteria: Position Reject
        private bool m_blnCheckPH_In = false;

        #endregion

        HiPerfTimer m_T1 = new HiPerfTimer();
        HiPerfTimer m_T2 = new HiPerfTimer();
        string m_strTrack = "", m_strTrack_Center = "", m_strTrack_TL = "", m_strTrack_BR = "";
        float m_fTimingPrev = 0, m_fTimingPrev2 = 0;
        float m_fTiming = 0, m_fTiming2 = 0;
        private int m_intLightControlModel = 1; // 0=LEDi, 1=VTControl

        private int m_int_PadInspection_ViewImageIndex = 0;
        private int m_int_PackageInspection_ViewImageIndex = 1;

        int m_intPadRepeatTestCount = 0;
        bool m_blnRepeatTest = false;
        bool m_blnRepeatTestGrab = false;

        public Vision3Process(CustomOption objCustomOption, ProductionInfo smProductionInfo, VisionInfo objVisionInfo,
            AVTVimba objAVTFireGrab, VisionComThread smComThread, RS232 thCOMMPort, TCPIPIO smTCPIPIO)
        {
            m_smCustomizeInfo = objCustomOption;
            m_smProductionInfo = smProductionInfo;
            m_smVisionInfo = objVisionInfo;
            m_objAVTFireGrab = objAVTFireGrab;
            m_smComThread = smComThread;
            m_smTCPIPIO = smTCPIPIO;
            m_thCOMMPort = thCOMMPort;

            // 2019 09 12 - CCENG: Change to init this buffer during Init Camera.
            //if (m_smVisionInfo.g_blnViewColorImage)
            //{
            //    m_arrPassCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage5Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage5Buffer = new CImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage5Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage5Buffer[i] = new CImageDrawing(true);
            //    }
            //}
            //else
            //{
            //    m_arrPassImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage5Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage5Buffer = new ImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage5Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage5Buffer[i] = new ImageDrawing(true);
            //    }
            //}
            //m_arrPassNoBuffer = new int[BUFFERSIZE];
            //m_arrFailNoBuffer = new int[BUFFERSIZE];
            //m_arrRejectNameBuffer = new string[BUFFERSIZE];


            GetCustomTest();

            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                m_smTCPIPIO.ReceiveCommandEvent += new TCPIPIO.ReceiveCommandHandle(TakeAction_TCPIPIO);
            else
                m_smComThread.ReceiveCommandEvent += new VisionComThread.ReceiveCommandHandle(TakeAction);

            int intEnableGrabIOMask;
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                intEnableGrabIOMask = 0x03;
            else
                intEnableGrabIOMask = 0x00;

            //create vision io object
            m_objVisionIO = new VisionIO(m_smVisionInfo.g_strVisionName, m_smVisionInfo.g_strVisionDisplayName,
                                         m_smVisionInfo.g_intVisionIndex, m_smVisionInfo.g_intVisionSameCount,
                                         m_smVisionInfo.g_strVisionNameRemark, intEnableGrabIOMask);

            m_objTempImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objGainImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objTemporaryRotateSource = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);

            m_arrTempImage = new ImageDrawing[5];
            m_arrTempMoldFlashImage = new ImageDrawing[5]; 
            m_arrGainImage = new ImageDrawing[5];
            m_arrTempGaugeImage = new ImageDrawing[5];
            m_arrRotatedROI = new ROI[5];
            m_arrRotatedColorROI = new CROI[5];
            m_InspectROI = new ROI[5];
            m_arrUnitCenterX = new float[5];
            m_arrUnitCenterY = new float[5];
            m_arrTemporaryRotateSource = new ImageDrawing[5];
            for (int i = 0; i < 5; i++)
            {
                m_arrTempImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempMoldFlashImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrGainImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempGaugeImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTemporaryRotateSource[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrRotatedROI[i] = new ROI();
                m_arrRotatedColorROI[i] = new CROI();
                m_InspectROI[i] = new ROI();
            }

            //List<string> arrThreadNameBF = new List<string>();
            //List<string> arrThreadNameAF = new List<string>();
            //arrThreadNameBF = ProcessTh.GetThreadsName("SRMVision");

            m_thThread = new Thread(new ThreadStart(UpdateProgress));
            m_thThread.IsBackground = true;
            m_thThread.Priority = ThreadPriority.Highest;
            m_thThread.Start();

            m_thSubThread_GrabImage = new Thread(new ThreadStart(UpdateSubProgress_GrabImage));
            m_thSubThread_GrabImage.IsBackground = true;
            m_thSubThread_GrabImage.Priority = ThreadPriority.Highest;
            m_thSubThread_GrabImage.Start();

            if (m_blnCustomWantColor || m_smVisionInfo.g_intGrabMode == 2)
            {
                m_thSubThread_TransferImage = new Thread(new ThreadStart(UpdateSubProgress_TransferImage));
                m_thSubThread_TransferImage.IsBackground = true;
                m_thSubThread_TransferImage.Priority = ThreadPriority.Highest;
                m_thSubThread_TransferImage.Start();

                m_thSubThread_WaitFrame = new Thread(new ThreadStart(UpdateSubProgress_WaitFrame));
                m_thSubThread_WaitFrame.IsBackground = true;
                m_thSubThread_WaitFrame.Priority = ThreadPriority.Highest;
                m_thSubThread_WaitFrame.Start();
            }
            else
            {
                m_blnStopped_TransferImage = true;
                m_blnStopped_WaitFrame = true;
            }

            m_thSubThread_Center = new Thread(new ThreadStart(UpdateSubProgress_Center));
            m_thSubThread_Center.IsBackground = true;
            m_thSubThread_Center.Priority = ThreadPriority.Highest;
            m_thSubThread_Center.Start();

            m_thSubThread_Orient = new Thread(new ThreadStart(UpdateSubProgress_Orient));
            m_thSubThread_Orient.IsBackground = true;
            m_thSubThread_Orient.Priority = ThreadPriority.Highest;
            m_thSubThread_Orient.Start();

            m_thSubThread_SideTL = new Thread(new ThreadStart(UpdateSubProgress_SideTL));
            m_thSubThread_SideTL.IsBackground = true;
            m_thSubThread_SideTL.Priority = ThreadPriority.Highest;
            m_thSubThread_SideTL.Start();

            m_thSubThread_SideBR = new Thread(new ThreadStart(UpdateSubProgress_SideBR));
            m_thSubThread_SideBR.IsBackground = true;
            m_thSubThread_SideBR.Priority = ThreadPriority.Highest;
            m_thSubThread_SideBR.Start();

            m_thSubThread_AfterInspect = new Thread(new ThreadStart(UpdateSubProgress_AfterInspect));
            m_thSubThread_AfterInspect.IsBackground = true;
            m_thSubThread_AfterInspect.Priority = ThreadPriority.Normal;
            m_thSubThread_AfterInspect.Start();

            m_thSubThread_SaveImage = new Thread(new ThreadStart(UpdateSubProgress_SaveImage));
            m_thSubThread_SaveImage.IsBackground = true;
            m_thSubThread_SaveImage.Priority = ThreadPriority.Lowest;
            m_thSubThread_SaveImage.Start();

            //Thread.Sleep(500);
            //arrThreadNameAF = ProcessTh.GetThreadsName("SRMVision");
            //ProcessTh.GetDifferentThreadsName(arrThreadNameAF, arrThreadNameBF, "V3a", 0x02);
        }

        public Vision3Process(CustomOption objCustomOption, ProductionInfo smProductionInfo, VisionInfo objVisionInfo,
            IDSuEyeCamera objIDSCamera, VisionComThread smComThread, RS232 thCOMMPort, TCPIPIO smTCPIPIO)
        {
            m_smCustomizeInfo = objCustomOption;
            m_smProductionInfo = smProductionInfo;
            m_smVisionInfo = objVisionInfo;
            m_objIDSCamera = objIDSCamera;
            m_smComThread = smComThread;
            m_smTCPIPIO = smTCPIPIO;
            m_thCOMMPort = thCOMMPort;

            // 2019 09 12 - CCENG: Change to init this buffer during Init Camera.
            //if (m_smVisionInfo.g_blnViewColorImage)
            //{
            //    m_arrPassCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage5Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage5Buffer = new CImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage5Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage5Buffer[i] = new CImageDrawing(true);
            //    }
            //}
            //else
            //{
            //    m_arrPassImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage5Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage5Buffer = new ImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage5Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage5Buffer[i] = new ImageDrawing(true);
            //    }
            //}
            //m_arrPassNoBuffer = new int[BUFFERSIZE];
            //m_arrFailNoBuffer = new int[BUFFERSIZE];
            //m_arrRejectNameBuffer = new string[BUFFERSIZE];

            GetCustomTest();

            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                m_smTCPIPIO.ReceiveCommandEvent += new TCPIPIO.ReceiveCommandHandle(TakeAction_TCPIPIO);
            else
                m_smComThread.ReceiveCommandEvent += new VisionComThread.ReceiveCommandHandle(TakeAction);
            
            int intEnableGrabIOMask;
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                intEnableGrabIOMask = 0x03;
            else
                intEnableGrabIOMask = 0x00;

            //create vision io object
            m_objVisionIO = new VisionIO(m_smVisionInfo.g_strVisionName, m_smVisionInfo.g_strVisionDisplayName,
                                         m_smVisionInfo.g_intVisionIndex, m_smVisionInfo.g_intVisionSameCount,
                                         m_smVisionInfo.g_strVisionNameRemark, intEnableGrabIOMask);

            m_objTempImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objGainImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objTemporaryRotateSource = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);

            m_arrTempImage = new ImageDrawing[5];
            m_arrTempMoldFlashImage = new ImageDrawing[5];
            m_arrGainImage = new ImageDrawing[5];
            m_arrTempGaugeImage = new ImageDrawing[5];
            m_arrRotatedROI = new ROI[5];
            m_arrRotatedColorROI = new CROI[5];
            m_InspectROI = new ROI[5];
            m_arrUnitCenterX = new float[5];
            m_arrUnitCenterY = new float[5];
            m_arrTemporaryRotateSource = new ImageDrawing[5];
            for (int i = 0; i < 5; i++)
            {
                m_arrTempImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempMoldFlashImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrGainImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempGaugeImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTemporaryRotateSource[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrRotatedROI[i] = new ROI();
                m_arrRotatedColorROI[i] = new CROI();
                m_InspectROI[i] = new ROI();
            }

            //List<string> arrThreadNameBF = new List<string>();
            //List<string> arrThreadNameAF = new List<string>();
            //arrThreadNameBF = ProcessTh.GetThreadsName("SRMVision");

            m_thThread = new Thread(new ThreadStart(UpdateProgress));
            m_thThread.IsBackground = true;
            m_thThread.Priority = ThreadPriority.Highest;
            m_thThread.Start();

            m_thSubThread_GrabImage = new Thread(new ThreadStart(UpdateSubProgress_GrabImage));
            m_thSubThread_GrabImage.IsBackground = true;
            m_thSubThread_GrabImage.Priority = ThreadPriority.Highest;
            m_thSubThread_GrabImage.Start();

            if (m_blnCustomWantColor || m_smVisionInfo.g_intGrabMode == 2)
            {
                m_thSubThread_TransferImage = new Thread(new ThreadStart(UpdateSubProgress_TransferImage));
                m_thSubThread_TransferImage.IsBackground = true;
                m_thSubThread_TransferImage.Priority = ThreadPriority.Highest;
                m_thSubThread_TransferImage.Start();

                m_thSubThread_WaitFrame = new Thread(new ThreadStart(UpdateSubProgress_WaitFrame));
                m_thSubThread_WaitFrame.IsBackground = true;
                m_thSubThread_WaitFrame.Priority = ThreadPriority.Highest;
                m_thSubThread_WaitFrame.Start();
            }
            else
            {
                m_blnStopped_TransferImage = true;
                m_blnStopped_WaitFrame = true;
            }

            m_thSubThread_Center = new Thread(new ThreadStart(UpdateSubProgress_Center));
            m_thSubThread_Center.IsBackground = true;
            m_thSubThread_Center.Priority = ThreadPriority.Highest;
            m_thSubThread_Center.Start();

            m_thSubThread_Orient = new Thread(new ThreadStart(UpdateSubProgress_Orient));
            m_thSubThread_Orient.IsBackground = true;
            m_thSubThread_Orient.Priority = ThreadPriority.Highest;
            m_thSubThread_Orient.Start();

            m_thSubThread_SideTL = new Thread(new ThreadStart(UpdateSubProgress_SideTL));
            m_thSubThread_SideTL.IsBackground = true;
            m_thSubThread_SideTL.Priority = ThreadPriority.Highest;
            m_thSubThread_SideTL.Start();

            m_thSubThread_SideBR = new Thread(new ThreadStart(UpdateSubProgress_SideBR));
            m_thSubThread_SideBR.IsBackground = true;
            m_thSubThread_SideBR.Priority = ThreadPriority.Highest;
            m_thSubThread_SideBR.Start();

            m_thSubThread_AfterInspect = new Thread(new ThreadStart(UpdateSubProgress_AfterInspect));
            m_thSubThread_AfterInspect.IsBackground = true;
            m_thSubThread_AfterInspect.Priority = ThreadPriority.Normal;
            m_thSubThread_AfterInspect.Start();

            m_thSubThread_SaveImage = new Thread(new ThreadStart(UpdateSubProgress_SaveImage));
            m_thSubThread_SaveImage.IsBackground = true;
            m_thSubThread_SaveImage.Priority = ThreadPriority.Lowest;
            m_thSubThread_SaveImage.Start();

            //Thread.Sleep(500);
            //arrThreadNameAF = ProcessTh.GetThreadsName("SRMVision");
            //ProcessTh.GetDifferentThreadsName(arrThreadNameAF, arrThreadNameBF, "V3b", 0x02);
        }

        public Vision3Process(CustomOption objCustomOption, ProductionInfo smProductionInfo, VisionInfo objVisionInfo,
            TeliCamera objTeliCamera, VisionComThread smComThread, RS232 thCOMMPort, TCPIPIO smTCPIPIO)
        {
            m_smCustomizeInfo = objCustomOption;
            m_smProductionInfo = smProductionInfo;
            m_smVisionInfo = objVisionInfo;
            m_objTeliCamera = objTeliCamera;
            m_smComThread = smComThread;
            m_smTCPIPIO = smTCPIPIO;
            m_thCOMMPort = thCOMMPort;

            // 2019 09 12 - CCENG: Change to init this buffer during Init Camera.
            //if (m_smVisionInfo.g_blnViewColorImage)
            //{
            //    m_arrPassCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrPassCImage5Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage1Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage2Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage3Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage4Buffer = new CImageDrawing[BUFFERSIZE];
            //    m_arrFailCImage5Buffer = new CImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrPassCImage5Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage1Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage2Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage3Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage4Buffer[i] = new CImageDrawing(true);
            //        m_arrFailCImage5Buffer[i] = new CImageDrawing(true);
            //    }
            //}
            //else
            //{
            //    m_arrPassImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrPassImage5Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage1Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage2Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage3Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage4Buffer = new ImageDrawing[BUFFERSIZE];
            //    m_arrFailImage5Buffer = new ImageDrawing[BUFFERSIZE];

            //    for (int i = 0; i < BUFFERSIZE; i++)
            //    {
            //        m_arrPassImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrPassImage5Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage1Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage2Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage3Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage4Buffer[i] = new ImageDrawing(true);
            //        m_arrFailImage5Buffer[i] = new ImageDrawing(true);
            //    }
            //}
            //m_arrPassNoBuffer = new int[BUFFERSIZE];
            //m_arrFailNoBuffer = new int[BUFFERSIZE];
            //m_arrRejectNameBuffer = new string[BUFFERSIZE];

            GetCustomTest();

            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                m_smTCPIPIO.ReceiveCommandEvent += new TCPIPIO.ReceiveCommandHandle(TakeAction_TCPIPIO);
            else
                m_smComThread.ReceiveCommandEvent += new VisionComThread.ReceiveCommandHandle(TakeAction);
           
            int intEnableGrabIOMask;
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                intEnableGrabIOMask = 0x03;
            else
                intEnableGrabIOMask = 0x00;

            //create vision io object
            m_objVisionIO = new VisionIO(m_smVisionInfo.g_strVisionName, m_smVisionInfo.g_strVisionDisplayName,
                                         m_smVisionInfo.g_intVisionIndex, m_smVisionInfo.g_intVisionSameCount,
                                         m_smVisionInfo.g_strVisionNameRemark, intEnableGrabIOMask);

            m_objTempImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objGainImage = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_objTemporaryRotateSource = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);

            m_arrTempImage = new ImageDrawing[5];
            m_arrTempMoldFlashImage = new ImageDrawing[5];
            m_arrGainImage = new ImageDrawing[5];
            m_arrTempGaugeImage = new ImageDrawing[5];
            m_arrRotatedROI = new ROI[5];
            m_arrRotatedColorROI = new CROI[5];
            m_InspectROI = new ROI[5];
            m_arrUnitCenterX = new float[5];
            m_arrUnitCenterY = new float[5];
            m_arrTemporaryRotateSource = new ImageDrawing[5];
            for (int i = 0; i < 5; i++)
            {
                m_arrTempImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempMoldFlashImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrGainImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTempGaugeImage[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrTemporaryRotateSource[i] = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                m_arrRotatedROI[i] = new ROI();
                m_arrRotatedColorROI[i] = new CROI();
                m_InspectROI[i] = new ROI();
            }

            //List<string> arrThreadNameBF = new List<string>();
            //List<string> arrThreadNameAF = new List<string>();
            //arrThreadNameBF = ProcessTh.GetThreadsName("SRMVision");

            m_thThread = new Thread(new ThreadStart(UpdateProgress));
            m_thThread.IsBackground = true;
            m_thThread.Priority = ThreadPriority.Highest;
            m_thThread.Start();

            m_thSubThread_GrabImage = new Thread(new ThreadStart(UpdateSubProgress_GrabImage));
            m_thSubThread_GrabImage.IsBackground = true;
            m_thSubThread_GrabImage.Priority = ThreadPriority.Highest;
            m_thSubThread_GrabImage.Start();

            if (m_blnCustomWantColor || m_smVisionInfo.g_intGrabMode == 2)
            {
                m_thSubThread_TransferImage = new Thread(new ThreadStart(UpdateSubProgress_TransferImage));
                m_thSubThread_TransferImage.IsBackground = true;
                m_thSubThread_TransferImage.Priority = ThreadPriority.Highest;
                m_thSubThread_TransferImage.Start();

                m_thSubThread_WaitFrame = new Thread(new ThreadStart(UpdateSubProgress_WaitFrame));
                m_thSubThread_WaitFrame.IsBackground = true;
                m_thSubThread_WaitFrame.Priority = ThreadPriority.Highest;
                m_thSubThread_WaitFrame.Start();
            }
            else
            {
                m_blnStopped_TransferImage = true;
                m_blnStopped_WaitFrame = true;
            }

            m_thSubThread_Center = new Thread(new ThreadStart(UpdateSubProgress_Center));
            m_thSubThread_Center.IsBackground = true;
            m_thSubThread_Center.Priority = ThreadPriority.Highest;
            m_thSubThread_Center.Start();

            m_thSubThread_Orient = new Thread(new ThreadStart(UpdateSubProgress_Orient));
            m_thSubThread_Orient.IsBackground = true;
            m_thSubThread_Orient.Priority = ThreadPriority.Highest;
            m_thSubThread_Orient.Start();

            m_thSubThread_SideTL = new Thread(new ThreadStart(UpdateSubProgress_SideTL));
            m_thSubThread_SideTL.IsBackground = true;
            m_thSubThread_SideTL.Priority = ThreadPriority.Highest;
            m_thSubThread_SideTL.Start();

            m_thSubThread_SideBR = new Thread(new ThreadStart(UpdateSubProgress_SideBR));
            m_thSubThread_SideBR.IsBackground = true;
            m_thSubThread_SideBR.Priority = ThreadPriority.Highest;
            m_thSubThread_SideBR.Start();

            m_thSubThread_AfterInspect = new Thread(new ThreadStart(UpdateSubProgress_AfterInspect));
            m_thSubThread_AfterInspect.IsBackground = true;
            m_thSubThread_AfterInspect.Priority = ThreadPriority.Normal;
            m_thSubThread_AfterInspect.Start();

            m_thSubThread_SaveImage = new Thread(new ThreadStart(UpdateSubProgress_SaveImage));
            m_thSubThread_SaveImage.IsBackground = true;
            m_thSubThread_SaveImage.Priority = ThreadPriority.Lowest;
            m_thSubThread_SaveImage.Start();

            //Thread.Sleep(500);
            //arrThreadNameAF = ProcessTh.GetThreadsName("SRMVision");
            //ProcessTh.GetDifferentThreadsName(arrThreadNameAF, arrThreadNameBF, "V3c", 0x02);
        }

        /// <summary>
        /// Grab image
        /// </summary>      
        /// <returns>true = successfully grab image, false = fail to grab image</returns>
        public bool GrabImageWithSetIntensity()
        {
            m_smVisionInfo.g_objGrabTime.Start();
            bool blnSuccess = true;
            HiPerfTimer timer_GrabTime = new HiPerfTimer();

            int intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_fCameraShuttle * 0.02f);

            m_objAVTFireGrab.DiscardFrame();
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                #region if more than 1 image need to be captured
                // Set light source channel ON/OFF
                if (m_intGrabRequire > 0)
                {
                    // change light source intensity for different image's effects
                    for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                    {
                        int intValueNo = 0;

                        // Due to some light source only ON for second image so its intensity value is at array no. 0.
                        // So we need to loop to find which array no. is for that image
                        for (int k = 1; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
                        {
                            // if this image no is in array k
                            if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                            {
                                if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == i)
                                {
                                    intValueNo = k;
                                    break;
                                }
                            }
                        }

                        // Set camera gain
                        if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                        {
                            m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                            m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        }

                        //switch (m_smCustomizeInfo.g_blnLEDiControl)
                        switch (m_intLightControlModel) // 2018 07 13 - CCENG: Temporary force to use VTControl
                        {
                            case 0:
                                if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                {
                                    if (m_arrCameraIntensityPrev[j] != m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo])
                                    {
                                        LEDi_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                           m_smVisionInfo.g_arrLightSource[j].ref_intChannel,
                                           Convert.ToByte(m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo]));

                                        m_arrCameraIntensityPrev[j] = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        Thread.Sleep(5);
                                    }
                                }
                                else
                                {
                                    if (m_arrCameraIntensityPrev[j] != 0)
                                    {
                                        LEDi_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel, Convert.ToByte(0));

                                        m_arrCameraIntensityPrev[j] = 0;
                                        Thread.Sleep(5);
                                    }
                                }
                                break;
                            case 1:
                                if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                {
                                    if (m_arrCameraIntensityPrev[j] != m_smVisionInfo.g_arrLightSource[j].ref_arrValue[i])
                                    {
                                        TCOSIO_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel,
                                            m_smVisionInfo.g_arrLightSource[j].ref_arrValue[i]);

                                        m_arrCameraIntensityPrev[j] = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[i];
                                        Thread.Sleep(2);
                                    }
                                }
                                else
                                {
                                    if (m_arrCameraIntensityPrev[j] != 0)
                                    {
                                        TCOSIO_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);

                                        m_arrCameraIntensityPrev[j] = 0;
                                        Thread.Sleep(2);
                                    }
                                }
                                break;
                        }
                    }
                }
                #endregion

                if (i > 0) // for second image and third image
                {
                    timer_GrabTime.Stop();
                    if ((m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration) > 0)
                        Thread.Sleep((int)(m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration));
                }

                if (!m_objAVTFireGrab.Grab())
                {
                    blnSuccess = false;
                    m_blnForceStopProduction = true;
                }

                if (i < m_intGrabRequire - 1)
                {
                    timer_GrabTime.Start();
                    Thread.Sleep(intExposureTime);
                }
                else
                {
                    Thread.Sleep(Math.Max(intExposureTime, 4));
                }
            }

            if (blnSuccess)
            {
                SetGrabDone(false);
                m_smVisionInfo.g_objTransferTime.Start();

                for (int i = 0; i < m_intGrabRequire; i++)
                {
                    if (m_objAVTFireGrab.GetFrame(i))
                    {
                        if (m_objAVTFireGrab.ConvertFrame(i))
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                                m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                            }
                        }
                    }
                }
            }
            else
                SetGrabDone(false);

            for (int i = 0; i < m_intGrabRequire; i++)
            {
                m_objAVTFireGrab.ReleaseImage(i);
            }

            if (m_objAVTFireGrab.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objAVTFireGrab.ref_strErrorText;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();
                return false;
            }
            else
            {
                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();
                return true;
            }
            //m_smVisionInfo.g_objGrabTime.Start();
            //bool blnSuccess = true;


            //for (int i = 0; i < m_intGrabRequire; i++)
            //{
            //    #region if more than 1 image need to be captured
            //    // Set light source channel ON/OFF
            //    if (m_intGrabRequire > 1)
            //    { // change light source intensity for different image's effects
            //        for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
            //        {
            //            int intValueNo = 0;

            //            // Due to some light source only ON for second image so its intensity value is at array no. 0.
            //            // So we need to loop to find which array no. is for that image
            //            for (int k = 1; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
            //            {
            //                // if this image no is in array k
            //                if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == i)
            //                {
            //                    intValueNo = k;
            //                    break;
            //                }
            //            }
            //            // Set camera gain
            //            if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
            //            {
            //                m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
            //                m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
            //            }
            //            switch (m_smCustomizeInfo.g_blnLEDiControl)
            //            {
            //                case true:
            //                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
            //                        LEDi_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
            //                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel,
            //                            Convert.ToByte(m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo]));
            //                    else
            //                        LEDi_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
            //                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel, Convert.ToByte(0));
            //                    Thread.Sleep(3);
            //                    break;
            //                case false:
            //                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
            //                        TCOSIO_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
            //                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel, m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo]);
            //                    else
            //                        TCOSIO_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
            //                            m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);
            //                    Thread.Sleep(3);
            //                    break;
            //            }
            //        }
            //    }
            //    #endregion

            //    if (!m_objAVTFireGrab.Grab())
            //        blnSuccess = false;

            //    Thread.Sleep(3);
            //}

            //if (blnSuccess)
            //{
            //    SetGrabDone();

            //    for (int i = 0; i < m_intGrabRequire; i++)
            //    {
            //        if (m_objAVTFireGrab.GetFrame(i))
            //        {
            //            if (m_objAVTFireGrab.ConvertFrame(i))
            //            {
            //                if (m_smVisionInfo.g_blnViewColorImage)
            //                {
            //                    m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
            //                    CImageDrawing objImage = m_smVisionInfo.g_arrColorImages[i];
            //                    m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref objImage);
            //                }
            //                else
            //                {
            //                    m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
            //                    ImageDrawing objImage = m_smVisionInfo.g_arrImages[i];
            //                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref objImage);
            //                }

            //                m_objAVTFireGrab.ReleaseImage(i);
            //            }
            //        }
            //    }
            //}
            //else
            //    SetGrabDone();

            //if (m_objAVTFireGrab.ref_strErrorText != "")
            //{
            //    m_smVisionInfo.g_strErrorMessage = m_objAVTFireGrab.ref_strErrorText;
            //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            //    return false;
            //}
            //else
            //{
            //    AttachImageToROI();
            //    m_smVisionInfo.g_blnLoadFile = false;
            //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            //    return true;
            //}
        }

        // JB
        ////Found bug intGrabIndex should not put as the index for m_smVisionInfo.g_arrLightSource
        //private void UpdateAVTCameraOutport(int intGrabIndex)
        //{
        //    //TrackLog objTL = new TrackLog();
        //    // Outport 1
        //    if ((m_smVisionInfo.g_arrLightSource[intGrabIndex].ref_intSeqNo & 0x01) == 0)
        //    {
        //        if ((m_intCameraOutState & (0x01)) > 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 1 set 00");
        //            if (m_smVisionInfo.g_intTriggerMode == 1)
        //                m_objAVTFireGrab.OutPort(0, 3); // Busy Outpot 1
        //            else
        //                m_objAVTFireGrab.OutPort(0, 0); // Off Outpot 1
        //            m_intCameraOutState &= ~0x01;
        //        }
        //    }
        //    else
        //    {
        //        if ((m_intCameraOutState & (0x01)) == 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 1 set 0" + m_smVisionInfo.g_intTriggerMode.ToString());
        //            m_objAVTFireGrab.OutPort(0, m_smVisionInfo.g_intTriggerMode); // On Outport 1
        //            m_intCameraOutState |= 0x01;
        //        }
        //    }

        //    // Outport 2
        //    if ((m_smVisionInfo.g_arrLightSource[intGrabIndex].ref_intSeqNo & 0x02) == 0)
        //    {
        //        if ((m_intCameraOutState & (0x02)) > 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 2 set 10");
        //            if (m_smVisionInfo.g_intTriggerMode == 1)
        //                m_objAVTFireGrab.OutPort(1, 3); // Busy Outpot 2
        //            else
        //                m_objAVTFireGrab.OutPort(1, 0); // Off Outpot 2
        //            m_intCameraOutState &= ~0x02;       
        //        }
        //    }
        //    else
        //    {
        //        if ((m_intCameraOutState & (0x02)) == 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 2 set 1" + m_smVisionInfo.g_intTriggerMode.ToString());
        //            m_objAVTFireGrab.OutPort(1, m_smVisionInfo.g_intTriggerMode); // On Outport 2
        //            m_intCameraOutState |= 0x02;
        //        }
        //    }

        //    // Outport 3
        //    if ((m_smVisionInfo.g_arrLightSource[intGrabIndex].ref_intSeqNo & 0x04) == 0)
        //    {
        //        if ((m_intCameraOutState & (0x04)) > 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 3 set 20");
        //            if (m_smVisionInfo.g_intTriggerMode == 1)
        //                m_objAVTFireGrab.OutPort(2, 3); // Busy Outpot 2
        //            else
        //                m_objAVTFireGrab.OutPort(2, 0); // Off Outpot 3
        //            m_intCameraOutState &= ~0x04;
        //        }
        //    }
        //    else
        //    {
        //        if ((m_intCameraOutState & (0x04)) == 0)
        //        {
        //            //objTL.WriteLine("GrabIndex=" + intGrabIndex.ToString() + ", Output 3 set 2" + m_smVisionInfo.g_intTriggerMode.ToString());
        //            m_objAVTFireGrab.OutPort(2, m_smVisionInfo.g_intTriggerMode); // On Outport 3
        //            m_intCameraOutState |= 0x04;
        //        }
        //    }
        //}

        private void UpdateAVTCameraOutport(int intGrabIndex)
        {
            //TrackLog objTL = new TrackLog();
            int intGrabSequence;
            switch (intGrabIndex)
            {
                default:
                case 0:
                    intGrabSequence = 0x01;
                    break;
                case 1:
                    intGrabSequence = 0x02;
                    break;
                case 2:
                    intGrabSequence = 0x04;
                    break;
            }

            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                if ((m_smVisionInfo.g_arrLightSource[i].ref_intSeqNo & intGrabSequence) == 0)
                {
                    if ((m_intCameraOutState & (intGrabSequence)) > 0)
                    {
                        //objTL.WriteLine("GrabIndex=" + i.ToString() + ", Output 1 set 00");
                        if (m_smVisionInfo.g_intTriggerMode == 1)
                            m_objAVTFireGrab.OutPort(i, 3); // Busy Outpot 1
                        else
                            m_objAVTFireGrab.OutPort(i, 0); // Off Outpot 1
                        m_intCameraOutState &= ~intGrabSequence;
                    }
                }
                else
                {
                    if ((m_intCameraOutState & (intGrabSequence)) == 0)
                    {
                        //objTL.WriteLine("GrabIndex=" + i.ToString() + ", Output 1 set 0" + m_smVisionInfo.g_intTriggerMode.ToString());
                        m_objAVTFireGrab.OutPort(i, m_smVisionInfo.g_intTriggerMode); // On Outport 1
                        m_intCameraOutState |= intGrabSequence;
                    }
                }
            }
        }
        public void LoadPadLighting()
        {
            List<int> arrCOMList = new List<int>();
            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                bool blnFound = false;
                for (int c = 0; c < arrCOMList.Count; c++)
                {
                    if (arrCOMList[c] == m_smVisionInfo.g_arrLightSource[i].ref_intPortNo)
                    {
                        blnFound = true;
                        break;
                    }
                }

                if (!blnFound)
                    arrCOMList.Add(m_smVisionInfo.g_arrLightSource[i].ref_intPortNo);
            }

            //Set to stop mode
            for (int c = 0; c < arrCOMList.Count; c++)
                LEDi_Control.RunStop(arrCOMList[c], 0, false);  //LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, false);

            Thread.Sleep(10);
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                int intValue1 = 0;
                int intValue2 = 0;
                int intValue3 = 0;
                int intValue4 = 0;
                int intValue5 = 0;
                int intValue6 = 0;
                int intValue7 = 0;
                int intValue8 = 0;

                for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                {
                    int intValueNo = 0;

                    // Due to some light source only ON for second image so its intensity value is at array no. 0.
                    // So we need to loop to find which array no. is for that image
                    for (int k = 0; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
                    {
                        // if this image no is in array k
                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                        {
                            if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == i)
                            {
                                intValueNo = k;

                                switch (j)
                                {
                                    case 0:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue1 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 1:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue2 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 2:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue3 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 3:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue4 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 4:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue5 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 5:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue6 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 6:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue7 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;
                                    case 7:
                                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                        {
                                            intValue8 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                        }
                                        break;

                                }

                                break;
                            }
                        }
                    }
                }

                // 2021 04 20 - CCENG: Reupdate intensity according to image display mode
                LEDi_Control.UpdateIntensityValueAccordingToImageDisplayMode(m_smVisionInfo.g_intImageDisplayMode, i,
                                                                            ref intValue1, ref intValue2, ref intValue3, ref intValue4,
                                                                            ref intValue5, ref intValue6, ref intValue7, ref intValue8);

                //Set all light source for sequence light controller for each grab
                //LEDi_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, i, intValue1, intValue2, intValue3, intValue4);

                if (arrCOMList.Count > 0)
                    LEDi_Control.SetSeqIntensity(arrCOMList[0], 0, i, intValue1, intValue2, intValue3, intValue4);
                if (arrCOMList.Count > 1)
                    LEDi_Control.SetSeqIntensity(arrCOMList[1], 0, i, intValue5, intValue6, intValue7, intValue8);

                Thread.Sleep(10);
            }

            for (int c = 0; c < arrCOMList.Count; c++)
                LEDi_Control.SaveIntensity(arrCOMList[c], 0); //LEDi_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0);
            Thread.Sleep(100);
            //Set to run mode
            for (int i = 0; i < arrCOMList.Count; i++)
                LEDi_Control.RunStop(arrCOMList[i], 0, true);   // LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, true);
            Thread.Sleep(10);

        }
        public void LoadPHLighting()
        {
            List<int> arrCOMList = new List<int>();
            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                bool blnFound = false;
                for (int c = 0; c < arrCOMList.Count; c++)
                {
                    if (arrCOMList[c] == m_smVisionInfo.g_arrLightSource[i].ref_intPortNo)
                    {
                        blnFound = true;
                        break;
                    }
                }

                if (!blnFound)
                    arrCOMList.Add(m_smVisionInfo.g_arrLightSource[i].ref_intPortNo);
            }

            //Set to stop mode
            for (int c = 0; c < arrCOMList.Count; c++)
                LEDi_Control.RunStop(arrCOMList[c], 0, false);  //LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, false);

            Thread.Sleep(10);
            for (int i = 0; i < 1; i++)
            {
                int intValue1 = 0;
                int intValue2 = 0;
                int intValue3 = 0;
                int intValue4 = 0;
                int intValue5 = 0;
                int intValue6 = 0;
                int intValue7 = 0;
                int intValue8 = 0;

                for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                {

                    switch (j)
                    {
                        case 0:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue1 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 1:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue2 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 2:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue3 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 3:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue4 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 4:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue5 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 5:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue6 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 6:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue7 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                        case 7:
                            if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                            {
                                intValue8 = m_smVisionInfo.g_arrLightSource[j].ref_PHValue;
                            }
                            break;
                    }

                }

                //Set all light source for sequence light controller for each grab
                //LEDi_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, i, intValue1, intValue2, intValue3, intValue4);

                if (arrCOMList.Count > 0)
                    LEDi_Control.SetSeqIntensity(arrCOMList[0], 0, i, intValue1, intValue2, intValue3, intValue4);
                if (arrCOMList.Count > 1)
                    LEDi_Control.SetSeqIntensity(arrCOMList[1], 0, i, intValue5, intValue6, intValue7, intValue8);

                Thread.Sleep(10);
            }

            for (int c = 0; c < arrCOMList.Count; c++)
                LEDi_Control.SaveIntensity(arrCOMList[c], 0); //LEDi_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0);
            Thread.Sleep(100);
            //Set to run mode
            for (int i = 0; i < arrCOMList.Count; i++)
                LEDi_Control.RunStop(arrCOMList[i], 0, true);   // LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, true);
            Thread.Sleep(10);

        }
        private bool IsCameraInitDone()
        {
            switch (m_smVisionInfo.g_strCameraModel)
            {
                case "AVT":
                    return m_objAVTFireGrab.ref_blnCameraInitDone;
                    break;
                case "Teli":
                default:
                    return m_objTeliCamera.IsCameraInitDone();
                    break;
            }
        }
        public bool GrabImage(int intGrabImageMask, bool blnForInspection)
        {
            // 2021 06 27 - Blank image before new grab.
            if (m_smProductionInfo.g_blnBlankImageBeforeGrab)
            {
                if (!m_smProductionInfo.g_blnAllRunGrabWithoutUseImage && IsCameraInitDone())
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                    {
                        m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    }
                }
            }

            //if (((m_blnAuto && m_objVisionIO.CheckPH.IsOn()) || (!m_blnAuto && m_smVisionInfo.g_blnViewPHImage)) && m_smVisionInfo.g_blnWantCheckPH) //|| m_smVisionInfo.g_blnSelectedPH

            if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.CheckPH != null)
            {
                if (((m_blnAuto && m_objVisionIO.CheckPH.IsOn(m_smVisionInfo.g_blnCheckPH)) || (!m_blnAuto && m_smVisionInfo.g_blnViewPHImage)) && m_smVisionInfo.g_blnWantCheckPH) //|| m_smVisionInfo.g_blnSelectedPH
                {
                    if (m_blnPreviouslyIsPad)// || m_smVisionInfo.g_blnViewPHImage)
                    {
                        LoadPHLighting();
                    }
                    m_blnPreviouslyIsPad = false;
                    if (m_blnCustomWantColor)
                        return GrabImage_Sequence_SetIntensityForPH_Teli(intGrabImageMask, blnForInspection);
                    else
                    {
                        if (m_smVisionInfo.g_intGrabMode == 0)
                            return GrabImage_Sequence_SetIntensityForPH_Teli(intGrabImageMask, blnForInspection);
                        else
                            return GrabImage_Sequence_SetIntensityForPH_Teli_LowLevelAPI(intGrabImageMask, blnForInspection);
                    }
                }
                else
                {
                    if (!m_blnPreviouslyIsPad)//|| !m_smVisionInfo.g_blnViewPHImage)
                    {
                        LoadPadLighting();
                    }
                    m_blnPreviouslyIsPad = true;
                    if (m_smVisionInfo.g_intLightControllerType == 2)
                    {
                        if (m_smVisionInfo.g_strCameraModel == "AVT")
                            return GrabImage_Sequence_NoSetIntensity_AVT(intGrabImageMask, blnForInspection);
                        else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        {
                            if (m_blnCustomWantColor)
                                return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                            else
                            {
                                if (m_smVisionInfo.g_intGrabMode == 0)
                                    return GrabImage_Sequence_NoSetIntensity_Teli(intGrabImageMask, blnForInspection);
                                else if (m_smVisionInfo.g_intGrabMode == 1)
                                    return GrabImage_Sequence_NoSetIntensity_Teli_GrabAllFirst(intGrabImageMask, blnForInspection);
                                else
                                    return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                            }
                        }
                    }

                    if (m_smVisionInfo.g_strCameraModel == "IDS")
                    {
                        return GrabMultiImage_IDS_IOCard_NoSetIntensity(blnForInspection);  // XDW16-001
                    }
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        return GrabImage_Teli(intGrabImageMask, blnForInspection);
                    }
                    else
                    {
                        return GrabImage_Normal_NoSetIntensity_AVTVimba(intGrabImageMask, blnForInspection);
                    }
                }
            }
            else if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
            {
                if (((m_blnAuto && m_blnCheckPH_In) || (!m_blnAuto && m_smVisionInfo.g_blnViewPHImage)) && m_smVisionInfo.g_blnWantCheckPH) //|| m_smVisionInfo.g_blnSelectedPH
                {
                    if (m_blnPreviouslyIsPad)// || m_smVisionInfo.g_blnViewPHImage)
                    {
                        LoadPHLighting();
                    }
                    m_blnPreviouslyIsPad = false;
                    if (m_blnCustomWantColor)
                        return GrabImage_Sequence_SetIntensityForPH_Teli(intGrabImageMask, blnForInspection);
                    else
                    {
                        if (m_smVisionInfo.g_intGrabMode == 0)
                            return GrabImage_Sequence_SetIntensityForPH_Teli(intGrabImageMask, blnForInspection);
                        else
                            return GrabImage_Sequence_SetIntensityForPH_Teli_LowLevelAPI(intGrabImageMask, blnForInspection);
                    }
                }
                else
                {
                    if (!m_blnPreviouslyIsPad)//|| !m_smVisionInfo.g_blnViewPHImage)
                    {
                        LoadPadLighting();
                    }
                    m_blnPreviouslyIsPad = true;
                    if (m_smVisionInfo.g_intLightControllerType == 2)
                    {
                        if (m_smVisionInfo.g_strCameraModel == "AVT")
                            return GrabImage_Sequence_NoSetIntensity_AVT(intGrabImageMask, blnForInspection);
                        else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        {
                            if (m_blnCustomWantColor)
                                return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                            else
                            {
                                if (m_smVisionInfo.g_intGrabMode == 0)
                                    return GrabImage_Sequence_NoSetIntensity_Teli(intGrabImageMask, blnForInspection);
                                else if (m_smVisionInfo.g_intGrabMode == 1)
                                    return GrabImage_Sequence_NoSetIntensity_Teli_GrabAllFirst(intGrabImageMask, blnForInspection);
                                else
                                    return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                            }
                        }
                    }

                    if (m_smVisionInfo.g_strCameraModel == "IDS")
                    {
                        return GrabMultiImage_IDS_IOCard_NoSetIntensity(blnForInspection);  // XDW16-001
                    }
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        return GrabImage_Teli(intGrabImageMask, blnForInspection);
                    }
                    else
                    {
                        return GrabImage_Normal_NoSetIntensity_AVTVimba(intGrabImageMask, blnForInspection);
                    }
                }
            }
            else
            {
                if (!m_blnPreviouslyIsPad)//|| !m_smVisionInfo.g_blnViewPHImage)
                {
                    LoadPadLighting();
                }

                m_blnPreviouslyIsPad = true;
                if (m_smVisionInfo.g_intLightControllerType == 2)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        return GrabImage_Sequence_NoSetIntensity_AVT(intGrabImageMask, blnForInspection);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        if (m_blnCustomWantColor)
                            return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                        else
                        {
                            if (m_smVisionInfo.g_intGrabMode == 0)
                                return GrabImage_Sequence_NoSetIntensity_Teli(intGrabImageMask, blnForInspection);
                            else if (m_smVisionInfo.g_intGrabMode == 1)
                                return GrabImage_Sequence_NoSetIntensity_Teli_GrabAllFirst(intGrabImageMask, blnForInspection);
                            else
                                return GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(intGrabImageMask, blnForInspection);
                        }
                    }
                }

                if (m_smVisionInfo.g_strCameraModel == "IDS")
                {
                    return GrabMultiImage_IDS_IOCard_NoSetIntensity(blnForInspection);  // XDW16-001
                }
                else if (m_smVisionInfo.g_strCameraModel == "Teli")
                {
                    return GrabImage_Teli(intGrabImageMask, blnForInspection);
                }
                else
                {
                    return GrabImage_Normal_NoSetIntensity_AVTVimba(intGrabImageMask, blnForInspection);
                }
            }
        }

        public bool GrabImage_Teli(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();
            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            //HiPerfTimer timer_GrabTime = new HiPerfTimer();

            TrackLog objTL = new TrackLog();
            float fTotalGrabTime = 0f;
            HiPerfTimer timer_TotalTime = new HiPerfTimer();
            HiPerfTimer timer_TotalGrabTime = new HiPerfTimer();
            timer_TotalTime.Start();

            int intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[0] * 0.001f);  // For Teli, Shuttle 1 == 1 microsecond
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_objTeliCamera.DiscardFrame();

            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                {
                    if ((intGrabImageMask & (0x01 << i)) == 0)
                    {
                        continue;
                    }
                }

                if (i > 0) // for second image and third image
                {
                    //timer_GrabTime.Stop();
                    //if ((m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration) > 0)
                    //    Thread.Sleep((int)(m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration));
                    //timer_TotalGrabTime.Start();

                    if (m_objTeliCamera.WaitFrameReady())
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
                        }
                        else
                        {
                            m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i - 1);
                            m_smVisionInfo.g_arrImages[i - 1].AddGain(m_smVisionInfo.g_arrImageGain[i - 1]);
                        }

                        timer_TotalGrabTime.Stop();
                        fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
                    }
                    else
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }

                }

                #region if more than 1 image need to be captured
                // Set light source channel ON/OFF
                if (m_intGrabRequire > 1)
                {
                    // Set camera gain
                    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                    {
                        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);

                        intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[i] * 0.0001f);
                    }
                }
                #endregion

                timer_TotalGrabTime.Start();

                if (blnSuccess)//2021-10-21 ZJYEOH : No need to grab anymore if not success, as this will reset the camera error message
                {
                    if (!m_objTeliCamera.Grab())
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }

                //timer_TotalGrabTime.Stop();
                //fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
                if (i < m_intGrabRequire - 1)
                {
                    Thread.Sleep(intExposureTime);
                }
                else
                {
                    Thread.Sleep(Math.Max(intExposureTime, 10));
                }
            }

            //timer_TotalGrabTime.Start();

            if (!m_objTeliCamera.WaitFrameReady())
            {
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

                //for (int i = 0; i < m_intGrabRequire; i++)
                //{
                //if (blnSeparateGrab)
                //{
                //    if (i != intSelectedImage)
                //        continue;
                //}

                //if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                //{
                //    if ((intGrabImageMask & (0x01 << i)) == 0)
                //    {
                //        continue;
                //    }
                //}
                //timer_TotalGrabTime.Start();

                if (m_objTeliCamera.GetFrame(m_intGrabRequire - 1))
                {
                    if (m_objTeliCamera.ConvertFrame(m_intGrabRequire - 1))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
                        }
                        else
                        {
                            m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
                            m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabRequire - 1]);
                        }
                    }
                }
                //}

                timer_TotalGrabTime.Stop();
                fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
            }
            else
                SetGrabDone(blnForInspection);

            //for (int i = 0; i < m_intGrabRequire; i++)
            //{
            //    if (blnSeparateGrab)
            //    {
            //        if (i != intSelectedImage)
            //            continue;
            //    }

            //    if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
            //    {
            //        if ((intGrabImageMask & (0x01 << i)) == 0)
            //        {
            //            continue;
            //        }
            //    }
            //    timer_TotalGrabTime.Start();
            //    m_objTeliCamera.ReleaseImage(i);
            //    timer_TotalGrabTime.Stop();
            //    fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
            //}

            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
            //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();
                return false;
            }
            else
            {
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                timer_TotalTime.Stop();
                //objTL.WriteLine("Total grab time = " + fTotalGrabTime.ToString());
                //objTL.WriteLine("Total time = " + timer_TotalTime.Duration.ToString());
                return true;
            }
        }

        public bool GrabImage_Sequence_NoSetIntensity_AVT(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objAVTFireGrab.ref_blnCameraInitDone)
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Default Using AVT Camera
            m_smVisionInfo.g_objGrabTime.Start();
            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            HiPerfTimer timer_GrabTime = new HiPerfTimer();

            TrackLog objTL = new TrackLog();
            float fTotalGrabTime = 0f;
            HiPerfTimer timer_TotalTime = new HiPerfTimer();
            HiPerfTimer timer_TotalGrabTime = new HiPerfTimer();
            timer_TotalTime.Start();

            int intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_fCameraShuttle * 0.02f);
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            timer_TotalGrabTime.Start();
            m_objAVTFireGrab.DiscardFrame();
            timer_TotalGrabTime.Stop();
            fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;

            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                {
                    if ((intGrabImageMask & (0x01 << i)) == 0)
                    {
                        continue;
                    }
                }

                if (i > 0) // for second image and third image
                {
                    timer_GrabTime.Stop();
                    if ((m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration) > 0)
                        Thread.Sleep((int)(m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration));
                }

                #region if more than 1 image need to be captured
                // Set light source channel ON/OFF
                if (m_intGrabRequire > 1)
                {
                    // Set camera gain
                    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                    {
                        m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        if (m_objAVTFireGrab.ref_intSetGainDelay != 0)
                            Thread.Sleep(m_objAVTFireGrab.ref_intSetGainDelay);
                    }

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                    {
                        m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[i]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        if (m_objAVTFireGrab.ref_intSetGainDelay != 0)
                            Thread.Sleep(m_objAVTFireGrab.ref_intSetGainDelay);

                        intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[i] * 0.02f);
                    }
                    //UpdateAVTCameraOutport(i);
                }
                #endregion
                if (i == 0)
                {
                    m_objAVTFireGrab.OutPort(1, 4);
                }
                //if (i == 1)
                //{
                //    m_objAVTFireGrab.OutPort(0, m_smVisionInfo.g_intTriggerMode);
                //}

                timer_TotalGrabTime.Start();
                if (!m_objAVTFireGrab.Grab())
                {
                    blnSuccess = false;
                    m_blnForceStopProduction = true;
                }
                timer_TotalGrabTime.Stop();
                fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
                if (i < m_intGrabRequire - 1)
                {
                    timer_GrabTime.Start();

                    Thread.Sleep(intExposureTime);
                }
                else
                {
                    Thread.Sleep(Math.Max(intExposureTime, 10));
                }

            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

                for (int i = 0; i < m_intGrabRequire; i++)
                {
                    if (blnSeparateGrab)
                    {
                        if (i != intSelectedImage)
                            continue;
                    }

                    if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                    {
                        if ((intGrabImageMask & (0x01 << i)) == 0)
                        {
                            continue;
                        }
                    }
                    timer_TotalGrabTime.Start();
                    if (m_objAVTFireGrab.GetFrame(i))
                    {
                        if (m_objAVTFireGrab.ConvertFrame(i))
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                                m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                            }
                        }
                    }
                    timer_TotalGrabTime.Stop();
                    fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
                }
            }
            else
                SetGrabDone(blnForInspection);

            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                {
                    if ((intGrabImageMask & (0x01 << i)) == 0)
                    {
                        continue;
                    }
                }
                timer_TotalGrabTime.Start();
                m_objAVTFireGrab.ReleaseImage(i);
                timer_TotalGrabTime.Stop();
                fTotalGrabTime = fTotalGrabTime + timer_TotalGrabTime.Duration;
            }

            //Reset outport
            m_objAVTFireGrab.OutPort(1, 5);
            //m_objAVTFireGrab.OutPort(0, 0);

            if (m_objAVTFireGrab.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objAVTFireGrab.ref_strErrorText;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();
                return false;
            }
            else
            {
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                timer_TotalTime.Stop();
                //objTL.WriteLine("Total grab time = " + ((timer_TotalTime.Duration - fTotalGrabTime).ToString()));
                //objTL.WriteLine("Total grab time = " + timer_TotalTime.Duration.ToString());
                return true;
            }
        }

        //Teli Camera Test
        public bool GrabImage_Sequence_NoSetIntensity_Teli(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();

            Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (i > 0) // for when grabbing second image and third image and forth image
                {
                    if (m_objTeliCamera.WaitFrameReady())
                    {
                        //if (m_smVisionInfo.g_blnViewColorImage)
                        //{
                        //    m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                        //    m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                        //    m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
                        //}
                        //else
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
                                m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i - 1);
                                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                    m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, i - 1);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            }
                            if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                            {
                                if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                {
                                    for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                    {
                                        m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                }
                                if (!m_smVisionInfo.g_blnViewColorImage)
                                {
                                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, i - 1);
                                }
                                m_smVisionInfo.g_arrDebugImages[i - 1].AddGain(m_smVisionInfo.g_arrImageGain[i - 1]);
                                SetExtraGain(i - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageMerge(i - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageUniformize(i - 1, m_smVisionInfo.g_arrDebugImages);
                            }
                            else
                            {
                                if (!m_smVisionInfo.g_blnViewColorImage)
                                {
                                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i - 1);
                                }
                                m_smVisionInfo.g_arrImages[i - 1].AddGain(m_smVisionInfo.g_arrImageGain[i - 1]);
                                SetExtraGain(i - 1);
                                ImageMerge(i - 1);
                                ImageUniformize(i - 1);
                            }
                            if (i == 1)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + ".bmp");
                                if (blnSuccess) m_bGrabImage1Result = true;
                                m_bGrabImage1Done = true;
                                TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 2)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage2Result = true;
                                m_bGrabImage2Done = true;
                                TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 3)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage3Result = true;
                                m_bGrabImage3Done = true;
                                TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 4)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage4Result = true;
                                m_bGrabImage4Done = true;
                                TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 5)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage5Result = true;
                                m_bGrabImage5Done = true;
                                TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 6)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage6Result = true;
                                m_bGrabImage6Done = true;
                                TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                            else if (i == 7)
                            {
                                if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[i - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (i - 1) + ".bmp");
                                if (blnSuccess) m_bGrabImage7Result = true;
                                m_bGrabImage7Done = true;
                                TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
                            }
                        }
                    }
                    else
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }

                    //if (i == 1)
                    //{
                    //    m_bGrabImage1Done = true;
                    //}
                    //else if (i == 2)
                    //{
                    //    m_bGrabImage2Done = true;
                    //}
                    //else if (i == 3)
                    //{
                    //    m_bGrabImage3Done = true;
                    //}
                }

                #region if more than 1 image need to be captured
                // Set light source channel ON/OFF
                if (m_intGrabRequire > 1)
                {
                    // Set camera gain
                    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                    {
                        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }
                }
                #endregion
                if (i == 0)
                {
                    //10-07-2019 ZJYEOH : Check the shuttle and gain again because PH got other setting
                    m_uintPHCameraGainPrev = 1;
                    m_fPHCameraShuttlePrev = 1f;
                    // Set camera gain
                    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                    {
                        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }

                    if (!m_smCustomizeInfo.g_blnMixController)
                    {
                        if (m_smCustomizeInfo.g_blnVTControl)
                        {
                            if (i == 0)
                            {
                                m_objTeliCamera.OutPort(1, 3);
                                m_objTeliCamera.OutPort(0, m_smVisionInfo.g_intTriggerMode);
                            }
                            else if (i == (m_intGrabRequire - 1))
                            {
                                m_objTeliCamera.OutPort(0, 0);
                            }
                        }
                    }
                    else
                    {
                        if (m_intLightControlModel == 1)    // 2018 07 13 - CCENG: Temporary force to use VTControl
                        {
                            if (i == 0)
                            {
                                m_objTeliCamera.OutPort(1, 3);
                                m_objTeliCamera.OutPort(0, m_smVisionInfo.g_intTriggerMode);
                            }
                            else if (i == (m_intGrabRequire - 1))
                            {
                                m_objTeliCamera.OutPort(0, 0);
                            }
                        }
                    }
                }

                if (blnSuccess)//2021-10-21 ZJYEOH : No need to grab anymore if not success, as this will reset the camera error message
                {
                    if (!m_objTeliCamera.Grab())
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }
            }

            if (!m_objTeliCamera.WaitFrameReady())
            {
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

                if (m_objTeliCamera.GetFrame(m_intGrabRequire - 1))
                {
                    if (m_objTeliCamera.ConvertFrame(m_intGrabRequire - 1))
                    {
                        //if (m_smVisionInfo.g_blnViewColorImage)
                        //{
                        //    m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                        //    m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                        //    m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
                        //}
                        //else
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
                                m_smVisionInfo.g_arrColorImages[m_intGrabRequire - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
                                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                    m_smVisionInfo.g_arrColorImages[m_intGrabRequire - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, m_intGrabRequire - 1);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            }
                            if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                            {
                                if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                {
                                    for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                    {
                                        m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                }
                                if (!m_smVisionInfo.g_blnViewColorImage)
                                {
                                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, m_intGrabRequire - 1);
                                }
                                m_smVisionInfo.g_arrDebugImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabRequire - 1]);
                                SetExtraGain(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageMerge(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageUniformize(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                            }
                            else
                            {
                                if (!m_smVisionInfo.g_blnViewColorImage)
                                {
                                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
                                }
                                m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabRequire - 1]);
                                SetExtraGain(m_intGrabRequire - 1);
                                ImageMerge(m_intGrabRequire - 1);
                                ImageUniformize(m_intGrabRequire - 1);
                            }
                        }
                        if (m_intGrabRequire == 1)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + ".bmp");
                            if (blnSuccess) m_bGrabImage1Result = true;
                            m_bGrabImage1Done = true;
                            TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 2)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage2Result = true;
                            m_bGrabImage2Done = true;
                            TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 3)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage3Result = true;
                            m_bGrabImage3Done = true;
                            TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 4)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage4Result = true;
                            m_bGrabImage4Done = true;
                            TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 5)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage5Result = true;
                            m_bGrabImage5Done = true;
                            TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 6)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage6Result = true;
                            m_bGrabImage6Done = true;
                            TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                        else if (m_intGrabRequire == 7)
                        {
                            if (m_smVisionInfo.g_blnSaveImageAfterGrab && blnForInspection) m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].SaveImage("D:\\TS\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_intCounter + "_Image" + (m_intGrabRequire - 1) + ".bmp");
                            if (blnSuccess) m_bGrabImage7Result = true;
                            m_bGrabImage7Done = true;
                            TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
                        }
                    }
                }
            }
            else
                SetGrabDone(blnForInspection);
            //m_intCounter++;
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;

            //Reset outport
            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    m_objTeliCamera.OutPort(1, 0);
                }
            }
            else
            {
                if (m_intLightControlModel == 0) // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 0);
                }

            }

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return false;
            }
            else
            {
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                    m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                    m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }

                if (m_smVisionInfo.g_bImageStatisticAnalysisON)
                {
                    m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

                    HiPerfTimer timesout = new HiPerfTimer();
                    timesout.Start();

                    while (true)
                    {
                        if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
                            break;

                        if (timesout.Timing > 3000)
                        {
                            STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1");
                            break;
                        }

                        Thread.Sleep(1);
                    }
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;

                // 2022 02 23 - CCENG: Wait finish inspection only update image drawing.
                if (!blnForInspection)
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return true;
            }
        }
        //public bool GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(int intGrabImageMask, bool blnForInspection)
        //{
        //    if (!m_objTeliCamera.IsCameraInitDone())
        //    {
        //        m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
        //        m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
        //        //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
        //        m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
        //        m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
        //        m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
        //        m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
        //        m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
        //        return true;
        //    }
        //    //m_objTeliCamera.SetWhiteBalance(m_smVisionInfo.g_dRedRatio, m_smVisionInfo.g_dBlueRatio);
        //    //HiPerfTimer tDelay = new HiPerfTimer();
        //    // Using Teli Camera
        //    m_smVisionInfo.g_objGrabTime.Start();

        //    //10-07-2019 ZJYEOH : Check the shuttle and gain again because PH got other setting
        //    m_uintPHCameraGainPrev = 1;
        //    m_fPHCameraShuttlePrev = 1f;
        //    // Set camera gain
        //    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
        //    {
        //        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
        //        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
        //        m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //    }

        //    // Set camera shuttle
        //    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
        //    {
        //        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
        //        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
        //        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //    }

        //    if (m_dRedRatioPrev != m_smVisionInfo.g_dRedRatio)
        //    {
        //        m_objTeliCamera.SetWhiteBalance_ForRed(m_smVisionInfo.g_dRedRatio);
        //        m_dRedRatioPrev = m_smVisionInfo.g_dRedRatio;
        //    }

        //    if (m_dBlueRatioPrev != m_smVisionInfo.g_dBlueRatio)
        //    {
        //        m_objTeliCamera.SetWhiteBalance_ForBlue(m_smVisionInfo.g_dBlueRatio);
        //        m_dBlueRatioPrev = m_smVisionInfo.g_dBlueRatio;
        //    }

        //    //tDelay.Start();
        //    //m_objTeliCamera.ResetImageCount();
        //    Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

        //    if (m_smVisionInfo.g_blnWhiteBalanceAuto)
        //    {
        //        m_objTeliCamera.SetWhiteBalanceAuto();
        //    }

        //    bool blnSuccess = true;
        //    bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
        //    int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
        //    m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
        //    m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = false;
        //    m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = false;
        //    m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = false;
        //    m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = false;

        //    //m_arrBitmapData = new List<BitmapData>();
        //    m_arrBufferPointer = new List<IntPtr>();
        //    m_bSubTh1_TransferImage = true;
        //    m_bSubTh1_WaitFrame = true;
        //    //HiPerfTimer tWaitFrame = new HiPerfTimer();
        //    //m_objTeliCamera.StartAcquisition(m_intGrabRequire);
        //    for (int i = 0; i < m_intGrabRequire; i++)
        //    {
        //        if (blnSeparateGrab)
        //        {
        //            if (i != intSelectedImage)
        //                continue;
        //        }

        //        //if (i > 0)
        //        //{

        //        //    bool blnStartGrab = true;

        //        //    switch (i)
        //        //    {
        //        //        case 1:
        //        //            blnStartGrab = WaitEventDone(ref m_bGrabImage1LoadDone, true, ref m_bGrabImage1LoadResult, "WaitStartGrab1");
        //        //            break;
        //        //        case 2:
        //        //            blnStartGrab = WaitEventDone(ref m_bGrabImage2LoadDone, true, ref m_bGrabImage2LoadResult, "WaitStartGrab2");
        //        //            break;
        //        //        case 3:
        //        //            blnStartGrab = WaitEventDone(ref m_bGrabImage3LoadDone, true, ref m_bGrabImage3LoadResult, "WaitStartGrab3");
        //        //            break;
        //        //        case 4:
        //        //            blnStartGrab = WaitEventDone(ref m_bGrabImage4LoadDone, true, ref m_bGrabImage4LoadResult, "WaitStartGrab4");
        //        //            break;
        //        //        case 5:
        //        //            blnStartGrab = WaitEventDone(ref m_bGrabImage5LoadDone, true, ref m_bGrabImage5LoadResult, "WaitStartGrab5");
        //        //            break;
        //        //        default:
        //        //            blnStartGrab = true;
        //        //            break;
        //        //    }

        //        //}

        //        //if (m_intGrabRequire > 1)
        //        //{
        //        //    // Set camera gain
        //        //    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
        //        //    {
        //        //        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
        //        //        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
        //        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //    }
        //        //}
        //        //STTrackLog.WriteLine("Grab image " + (i + 1));

        //        if (i > 0)
        //        {
        //            if (m_objTeliCamera.WaitTriggerWaitDone())
        //            {
        //                // Set camera gain
        //                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
        //                {
        //                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
        //                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
        //                    m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
        //                    //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //                    //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //                }
        //                //while (tDelay.Timing < 25)
        //                //{

        //                //}
        //                if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
        //                {
        //                    blnSuccess = false;
        //                    m_blnForceStopProduction = true;
        //                }
        //            }
        //            else
        //            {
        //                blnSuccess = false;
        //                m_blnForceStopProduction = true;
        //            }
        //        }
        //        else
        //        {
        //            if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
        //            {
        //                blnSuccess = false;
        //                m_blnForceStopProduction = true;
        //            }
        //        }

        //        //tDelay.Stop();
        //        //tDelay.Start();

        //        //m_arrBufferPointer.Add(m_ptrImagePointer);

        //        //Thread.Sleep(10);
        //        //Set light source channel ON / OFF
        //        if (m_intGrabRequire > 1 && ((i + 1) < m_smVisionInfo.g_arrCameraShuttle.Count))
        //        {
        //            //if (m_objTeliCamera.WaitExposureDone())
        //            {
        //                //// Set camera gain
        //                //if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i + 1])
        //                //{
        //                //    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i + 1]);
        //                //    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i + 1];
        //                //    //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //                //    //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //                //}

        //                // Set camera shuttle
        //                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i + 1])
        //                {
        //                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i + 1]);
        //                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
        //                    m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
        //                    //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //                    //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //                }
        //            }
        //        }
        //        //Thread.Sleep(10);
        //        //if (i > 0) // for when grabbing second image and third image and forth image
        //        {
        //            //tWaitFrame.Start();
        //            //bool blnWaitFrame = m_objTeliCamera.WaitFrameReady();
        //            //tWaitFrame.Stop();
        //            //STTrackLog.WriteLine(i.ToString() + "tWaitFrame = " + tWaitFrame.Duration.ToString());
        //            //if (m_objTeliCamera.WaitExposureDone())
        //            //{

        //            //while (tDelay.Timing < 16)
        //            //{

        //            //}

        //            //STTrackLog.WriteLine("After Frame Wait = " + i.ToString());
        //            //m_objTeliCamera.TriggerImageBufferRead();
        //            //if (m_smVisionInfo.g_blnViewColorImage)
        //            //{
        //            //    m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //            //    m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //            //    m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
        //            //}
        //            //else
        //            {
        //                //if (m_smVisionInfo.g_blnViewColorImage)
        //                //{
        //                //    //m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //                //    //m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                //    //m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
        //                //    //m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i - 1);
        //                //    //if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
        //                //    //    m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, i - 1);

        //                //    //m_smVisionInfo.g_arrMemoryColorImage[i - 1].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                //    m_arrBitmapData.Add(m_objTeliCamera.GetBitmapData());
        //                //    m_arrBufferPointer.Add(m_objTeliCamera.GetBufferPointer());
        //                //}
        //                //else
        //                //{
        //                //    //m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //                //    //m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                //    m_smVisionInfo.g_arrMemoryImage[i - 1].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());

        //                //}
        //                //if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
        //                //{
        //                //    if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
        //                //    {
        //                //        for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
        //                //        {
        //                //            m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
        //                //        }
        //                //    }
        //                //    if (!m_smVisionInfo.g_blnViewColorImage)
        //                //    {
        //                //        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, i - 1);
        //                //    }
        //                //    m_smVisionInfo.g_arrDebugImages[i - 1].AddGain(m_smVisionInfo.g_arrImageGain[i - 1]);
        //                //    SetExtraGain(i - 1, m_smVisionInfo.g_arrDebugImages);
        //                //    ImageMerge(i - 1, m_smVisionInfo.g_arrDebugImages);
        //                //}
        //                //else
        //                //{
        //                //    if (!m_smVisionInfo.g_blnViewColorImage)
        //                //    {
        //                //        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i - 1);
        //                //    }
        //                //    m_smVisionInfo.g_arrImages[i - 1].AddGain(m_smVisionInfo.g_arrImageGain[i - 1]);
        //                //    SetExtraGain(i - 1);
        //                //    ImageMerge(i - 1);
        //                //}
        //                if (i == 0)//1
        //                {
        //                    //m_bGrabImage1Result = true;
        //                    //m_bGrabImage1Done = true;
        //                    //TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage1LoadResult = true;
        //                    //m_bGrabImage1LoadDone = true;
        //                    m_bGrabImage1TriggerResult = blnSuccess;
        //                    m_bGrabImage1TriggerDone = true;
        //                }
        //                else if (i == 1)//2
        //                {
        //                    //m_bGrabImage2Result = true;
        //                    //m_bGrabImage2Done = true;
        //                    //TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage2LoadResult = true;
        //                    //m_bGrabImage2LoadDone = true;
        //                    m_bGrabImage2TriggerResult = blnSuccess;
        //                    m_bGrabImage2TriggerDone = true;
        //                }
        //                else if (i == 2)//3
        //                {
        //                    //m_bGrabImage3Result = true;
        //                    //m_bGrabImage3Done = true;
        //                    //TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage3LoadResult = true;
        //                    //m_bGrabImage3LoadDone = true;
        //                    m_bGrabImage3TriggerResult = blnSuccess;
        //                    m_bGrabImage3TriggerDone = true;
        //                }
        //                else if (i == 3)//4
        //                {
        //                    //m_bGrabImage4Result = true;
        //                    //m_bGrabImage4Done = true;
        //                    //TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage4LoadResult = true;
        //                    //m_bGrabImage4LoadDone = true;
        //                    m_bGrabImage4TriggerResult = blnSuccess;
        //                    m_bGrabImage4TriggerDone = true;
        //                }
        //                else if (i == 4)//5
        //                {
        //                    //m_bGrabImage5Result = true;
        //                    //m_bGrabImage5Done = true;
        //                    //TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage5LoadResult = true;
        //                    //m_bGrabImage5LoadDone = true;
        //                    m_bGrabImage5TriggerResult = blnSuccess;
        //                    m_bGrabImage5TriggerDone = true;
        //                }
        //                else if (i == 5)//6
        //                {
        //                    //m_bGrabImage6Result = true;
        //                    //m_bGrabImage6Done = true;
        //                    //TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage6LoadResult = true;
        //                    //m_bGrabImage6LoadDone = true;
        //                    m_bGrabImage6TriggerResult = blnSuccess;
        //                    m_bGrabImage6TriggerDone = true;
        //                }
        //                else if (i == 6)//7
        //                {
        //                    //m_bGrabImage7Result = true;
        //                    //m_bGrabImage7Done = true;
        //                    //TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
        //                    //m_bGrabImage7LoadResult = true;
        //                    //m_bGrabImage7LoadDone = true;
        //                    m_bGrabImage7TriggerResult = blnSuccess;
        //                    m_bGrabImage7TriggerDone = true;
        //                }
        //                //m_objTeliCamera.TriggerImageBufferRead();
        //            }
        //            //}
        //            //else
        //            //{
        //            //    blnSuccess = false;
        //            //}

        //            //if (i == 1)
        //            //{
        //            //    m_bGrabImage1Done = true;
        //            //}
        //            //else if (i == 2)
        //            //{
        //            //    m_bGrabImage2Done = true;
        //            //}
        //            //else if (i == 3)
        //            //{
        //            //    m_bGrabImage3Done = true;
        //            //}
        //        }

        //        #region if more than 1 image need to be captured

        //        //// Set light source channel ON/OFF
        //        //if (m_intGrabRequire > 1)
        //        //{
        //        //    // Set camera gain
        //        //    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
        //        //    {
        //        //        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
        //        //        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
        //        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //    }

        //        //    // Set camera shuttle
        //        //    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
        //        //    {
        //        //        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
        //        //        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
        //        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //    }
        //        //}
        //        //STTrackLog.WriteLine("Grab image " + (i + 1));

        //        //bool blnStartGrab = true;

        //        //switch (i)
        //        //{
        //        //    case 1:
        //        //        blnStartGrab = WaitEventDone(ref m_bGrabImage1LoadDone, true, ref m_bGrabImage1LoadResult, "WaitStartGrab1");
        //        //        break;
        //        //    case 2:
        //        //        blnStartGrab = WaitEventDone(ref m_bGrabImage2LoadDone, true, ref m_bGrabImage2LoadResult, "WaitStartGrab2");
        //        //        break;
        //        //    case 3:
        //        //        blnStartGrab = WaitEventDone(ref m_bGrabImage3LoadDone, true, ref m_bGrabImage3LoadResult, "WaitStartGrab3");
        //        //        break;
        //        //    case 4:
        //        //        blnStartGrab = WaitEventDone(ref m_bGrabImage4LoadDone, true, ref m_bGrabImage4LoadResult, "WaitStartGrab4");
        //        //        break;
        //        //    case 5:
        //        //        blnStartGrab = WaitEventDone(ref m_bGrabImage5LoadDone, true, ref m_bGrabImage5LoadResult, "WaitStartGrab5");
        //        //        break;
        //        //    default:
        //        //        blnStartGrab = true;
        //        //        break;
        //        //}


        //        //if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab())
        //        //    blnSuccess = false;

        //        //if (!m_objTeliCamera.WaitExposureDone())
        //        //{
        //        //    blnSuccess = false;
        //        //}

        //        //if (!m_objTeliCamera.WaitTriggerDone())
        //        //{
        //        //    blnSuccess = false;
        //        //}
        //        //else
        //        //{
        //        //    if (!m_objTeliCamera.TriggerSuccessful())
        //        //    {
        //        //        if (!m_objTeliCamera.Grab())
        //        //            blnSuccess = false;
        //        //    }
        //        //}

        //        ////Set light source channel ON / OFF
        //        //if (m_intGrabRequire > 1 && ((i + 1) < m_smVisionInfo.g_arrCameraShuttle.Count))
        //        //{
        //        //    //if (m_objTeliCamera.WaitExposureDone())
        //        //    {
        //        //        //// Set camera gain
        //        //        //if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i + 1])
        //        //        //{
        //        //        //    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i + 1]);
        //        //        //    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i + 1];
        //        //        //    //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //        //}

        //        //        // Set camera shuttle
        //        //        if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i + 1])
        //        //        {
        //        //            m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i + 1]);
        //        //            m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
        //        //            //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //            //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //        }
        //        //    }
        //        //}

        //        //tDelay.Stop();
        //        //tDelay.Start();
        //        #endregion
        //        //if (i == 0)
        //        //{
        //        //    //10-07-2019 ZJYEOH : Check the shuttle and gain again because PH got other setting
        //        //    m_uintPHCameraGainPrev = 1;
        //        //    m_fPHCameraShuttlePrev = 1f;
        //        //    // Set camera gain
        //        //    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
        //        //    {
        //        //        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
        //        //        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
        //        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //    }

        //        //    // Set camera shuttle
        //        //    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
        //        //    {
        //        //        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
        //        //        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
        //        //        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
        //        //        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
        //        //    }

        //        //    if (!m_smCustomizeInfo.g_blnMixController)
        //        //    {
        //        //        if (m_smCustomizeInfo.g_blnVTControl)
        //        //        {
        //        //            if (i == 0)
        //        //            {
        //        //                m_objTeliCamera.OutPort(1, 3);
        //        //                m_objTeliCamera.OutPort(0, m_smVisionInfo.g_intTriggerMode);
        //        //            }
        //        //            else if (i == (m_intGrabRequire - 1))
        //        //            {
        //        //                m_objTeliCamera.OutPort(0, 0);
        //        //            }
        //        //        }
        //        //    }
        //        //    else
        //        //    {
        //        //        if (m_intLightControlModel == 1)    // 2018 07 13 - CCENG: Temporary force to use VTControl
        //        //        {
        //        //            if (i == 0)
        //        //            {
        //        //                m_objTeliCamera.OutPort(1, 3);
        //        //                m_objTeliCamera.OutPort(0, m_smVisionInfo.g_intTriggerMode);
        //        //            }
        //        //            else if (i == (m_intGrabRequire - 1))
        //        //            {
        //        //                m_objTeliCamera.OutPort(0, 0);
        //        //            }
        //        //        }
        //        //    }
        //        //}
        //        //else
        //        //    Thread.Sleep(5);

        //        //if (!m_objTeliCamera.Grab())
        //        //    blnSuccess = false;

        //    }
        //    //tDelay.Stop();
        //    //tWaitFrame.Start();
        //    //if (!m_objTeliCamera.WaitTriggerWaitDone())
        //    //{
        //    //    blnSuccess = false;
        //    //}

        //    //tWaitFrame.Stop();
        //    //STTrackLog.WriteLine(m_intGrabRequire.ToString() + "tWaitFrame = " + tWaitFrame.Duration.ToString());
        //    if (blnSuccess)
        //    {
        //        //m_objTeliCamera.TriggerImageBufferRead();
        //        SetGrabDone(blnForInspection);
        //        m_smVisionInfo.g_objTransferTime.Start();

        //        //if (m_objTeliCamera.GetFrame(m_intGrabRequire - 1))
        //        {
        //            //if (m_objTeliCamera.ConvertFrame(m_intGrabRequire - 1))
        //            {
        //                //if (m_smVisionInfo.g_blnViewColorImage)
        //                //{
        //                //    m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //                //    m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                //    m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
        //                //}
        //                //else
        //                {
        //                    //if (m_smVisionInfo.g_blnViewColorImage)
        //                    //{
        //                    //    //m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //                    //    //m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                    //    //m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
        //                    //    //m_smVisionInfo.g_arrColorImages[m_intGrabRequire - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
        //                    //    //if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
        //                    //    //    m_smVisionInfo.g_arrColorImages[m_intGrabRequire - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, m_intGrabRequire - 1);


        //                    //    //m_smVisionInfo.g_arrMemoryColorImage[m_intGrabRequire - 1].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                    //    m_arrBitmapData.Add(m_objTeliCamera.GetBitmapData());
        //                    //    m_arrBufferPointer.Add(m_objTeliCamera.GetBufferPointer());
        //                    //}
        //                    //else
        //                    //{
        //                    //    //m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
        //                    //    //m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                    //    m_smVisionInfo.g_arrMemoryImage[m_intGrabRequire - 1].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
        //                    //}
        //                    //if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
        //                    //{
        //                    //    if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
        //                    //    {
        //                    //        for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
        //                    //        {
        //                    //            m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
        //                    //        }
        //                    //    }
        //                    //    if (!m_smVisionInfo.g_blnViewColorImage)
        //                    //    {
        //                    //        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, m_intGrabRequire - 1);
        //                    //    }
        //                    //    m_smVisionInfo.g_arrDebugImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabRequire - 1]);
        //                    //    SetExtraGain(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
        //                    //    ImageMerge(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
        //                    //}
        //                    //else
        //                    //{
        //                    //    if (!m_smVisionInfo.g_blnViewColorImage)
        //                    //    {
        //                    //        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
        //                    //    }
        //                    //    m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabRequire - 1]);
        //                    //    SetExtraGain(m_intGrabRequire - 1);
        //                    //    ImageMerge(m_intGrabRequire - 1);
        //                    //}
        //                }
        //                //if (m_intGrabRequire == 1)
        //                //{
        //                //    //m_bGrabImage1Result = true;
        //                //    //m_bGrabImage1Done = true;
        //                //    //TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
        //                //    //m_bGrabImage1LoadResult = true;
        //                //    //m_bGrabImage1LoadDone = true;
        //                //    m_bGrabImage1TriggerResult = true;
        //                //    m_bGrabImage1TriggerDone = true;
        //                //}
        //                //else if (m_intGrabRequire == 2)
        //                //{
        //                //    //m_bGrabImage2Result = true;
        //                //    //m_bGrabImage2Done = true;
        //                //    //TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
        //                //    //m_bGrabImage2LoadResult = true;
        //                //    //m_bGrabImage2LoadDone = true;
        //                //    m_bGrabImage2TriggerResult = true;
        //                //    m_bGrabImage2TriggerDone = true;
        //                //}
        //                //else if (m_intGrabRequire == 3)
        //                //{
        //                //    //m_bGrabImage3Result = true;
        //                //    //m_bGrabImage3Done = true;
        //                //    //TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
        //                //    //m_bGrabImage3LoadResult = true;
        //                //    //m_bGrabImage3LoadDone = true;
        //                //    m_bGrabImage3TriggerResult = true;
        //                //    m_bGrabImage3TriggerDone = true;
        //                //}
        //                //else if (m_intGrabRequire == 4)
        //                //{
        //                //    //m_bGrabImage4Result = true;
        //                //    //m_bGrabImage4Done = true;
        //                //    //TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
        //                //    //m_bGrabImage4LoadResult = true;
        //                //    //m_bGrabImage4LoadDone = true;
        //                //    m_bGrabImage4TriggerResult = true;
        //                //    m_bGrabImage4TriggerDone = true;
        //                //}
        //                //else if (m_intGrabRequire == 5)
        //                //{
        //                //    //m_bGrabImage5Result = true;
        //                //    //m_bGrabImage5Done = true;
        //                //    //TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
        //                //    //m_bGrabImage5LoadResult = true;
        //                //    //m_bGrabImage5LoadDone = true;
        //                //    m_bGrabImage5TriggerResult = true;
        //                //    m_bGrabImage5TriggerDone = true;
        //                //}
        //                //m_objTeliCamera.TriggerImageBufferRead();
        //            }
        //        }
        //    }
        //    else
        //        SetGrabDone(blnForInspection);
        //    //m_objTeliCamera.StopAcquisition();
        //    //m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = true;
        //    m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
        //    if (!m_objTeliCamera.WaitTriggerWaitDone())
        //    {
        //        blnSuccess = false;
        //        m_blnForceStopProduction = true;
        //    }
        //    //Reset outport
        //    if (!m_smCustomizeInfo.g_blnMixController)
        //    {
        //        if (m_smCustomizeInfo.g_blnLEDiControl)
        //        {
        //            m_objTeliCamera.OutPort(1, 3);
        //            m_objTeliCamera.OutPort(1, 0);
        //        }
        //        else if (m_smCustomizeInfo.g_blnVTControl)
        //        {
        //            m_objTeliCamera.OutPort(1, 0);
        //        }
        //    }
        //    else
        //    {
        //        if (m_intLightControlModel == 0) // 2018 07 13 - CCENG: Temporary force to use VTControl
        //        {
        //            m_objTeliCamera.OutPort(1, 3);
        //            m_objTeliCamera.OutPort(1, 0);
        //        }
        //        else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
        //        {
        //            m_objTeliCamera.OutPort(1, 0);
        //        }

        //    }

        //    // Set camera gain
        //    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
        //    {
        //        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
        //        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
        //        m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
        //    }

        //    // Set camera shuttle
        //    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
        //    {
        //        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
        //        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
        //        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
        //    }

        //    if (m_smVisionInfo.g_blnWhiteBalanceAuto)
        //    {
        //        double dRedRatio = 0, dBlueRatio = 0;
        //        m_objTeliCamera.GetWhiteBalance(ref dRedRatio, ref dBlueRatio);

        //        m_smVisionInfo.g_dRedRatio = dRedRatio;
        //        m_smVisionInfo.g_dBlueRatio = dBlueRatio;

        //        m_smVisionInfo.g_blnWhiteBalanceAuto = false;
        //    }

        //    WaitEventDone(ref m_bSubTh1_TransferImage, false, 10000, "WaitTransferDone");

        //    //2021-10-21 ZJYEOH : Set Image to Black if camera fail
        //    if (!blnSuccess)
        //    {
        //        for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
        //        {
        //            if (m_smVisionInfo.g_blnViewColorImage)
        //            {
        //                m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
        //                m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
        //            }
        //            m_smVisionInfo.g_arrImages[i].SetImageToBlack();
        //            m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
        //        }
        //    }

        //    if (m_objTeliCamera.GetErrorMessage() != "")
        //    {
        //        m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        //        m_smVisionInfo.g_objTransferTime.Stop();

        //        return false;
        //    }
        //    else
        //    {
        //        //// Set camera gain
        //        //if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
        //        //{
        //        //    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
        //        //    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
        //        //}

        //        //// Set camera shuttle
        //        //if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
        //        //{
        //        //    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
        //        //    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
        //        //}

        //        if (m_smVisionInfo.g_bImageStatisticAnalysisON)
        //        {
        //            m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

        //            HiPerfTimer timesout = new HiPerfTimer();
        //            timesout.Start();

        //            while (true)
        //            {
        //                if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
        //                    break;

        //                if (timesout.Timing > 3000)
        //                {
        //                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1");
        //                    break;
        //                }

        //                Thread.Sleep(1);
        //            }
        //        }

        //        //AttachImageToROI();
        //        m_smVisionInfo.g_blnLoadFile = false;
        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        //        m_smVisionInfo.g_objTransferTime.Stop();

        //        return true;
        //    }
        //}

        // Skip WaitTrigerWaitDone event
        public bool GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();

            //10-07-2019 ZJYEOH : Check the shuttle and gain again because PH got other setting
            m_uintPHCameraGainPrev = 1;
            m_fPHCameraShuttlePrev = 1f;
            // Set camera gain
            if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
            {
                m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
            }

            // Set camera shuttle
            if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
            {
                m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
            }

            if (m_dRedRatioPrev != m_smVisionInfo.g_dRedRatio)
            {
                m_objTeliCamera.SetWhiteBalance_ForRed(m_smVisionInfo.g_dRedRatio);
                m_dRedRatioPrev = m_smVisionInfo.g_dRedRatio;
            }

            if (m_dBlueRatioPrev != m_smVisionInfo.g_dBlueRatio)
            {
                m_objTeliCamera.SetWhiteBalance_ForBlue(m_smVisionInfo.g_dBlueRatio);
                m_dBlueRatioPrev = m_smVisionInfo.g_dBlueRatio;
            }

            Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

            if (m_smVisionInfo.g_blnWhiteBalanceAuto)
            {
                m_objTeliCamera.SetWhiteBalanceAuto();
            }

            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = false;
            m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = false;
            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = false;
            m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = false;

            m_arrBufferPointer = new List<IntPtr>();
            m_bSubTh1_TransferImage = true;
            m_bSubTh1_WaitFrame = true;

            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (i > 0)
                {
                    bool blnStartTransfer2 = false;
                    switch (i - 1)
                    {
                        case 0:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage1LoadDone, true, ref m_bGrabImage1LoadResult, "WaitGrab1");
                            break;
                        case 1:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage2LoadDone, true, ref m_bGrabImage2LoadResult, "WaitGrab2");
                            break;
                        case 2:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage3LoadDone, true, ref m_bGrabImage3LoadResult, "WaitGrab3");
                            break;
                        case 3:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage4LoadDone, true, ref m_bGrabImage4LoadResult, "WaitGrab4");
                            break;
                        case 4:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage5LoadDone, true, ref m_bGrabImage5LoadResult, "WaitGrab5");
                            break;
                        case 5:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage6LoadDone, true, ref m_bGrabImage6LoadResult, "WaitGrab6");
                            break;
                        case 6:
                            blnStartTransfer2 = WaitEventDone(ref m_bGrabImage7LoadDone, true, ref m_bGrabImage7LoadResult, "WaitGrab7");
                            break;
                        default:
                            blnStartTransfer2 = false;
                            break;
                    }
                    if (blnStartTransfer2)  //if (m_objTeliCamera.WaitTriggerWaitDone())
                    {
                        // Set camera gain
                        if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                        {
                            m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                            m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                            m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        }

                        if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
                        {
                            blnSuccess = false;
                            m_blnForceStopProduction = true;
                        }
                    }
                    else
                    {
                        STTrackLog.WriteLine("GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor > blnStartTransfer2 " + (i - 1).ToString() + " fail");
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }
                else
                {
                    if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }

                //Set light source channel ON / OFF
                if (m_intGrabRequire > 1 && ((i + 1) < m_smVisionInfo.g_arrCameraShuttle.Count))
                {
                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i + 1])
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i + 1]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
                        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
                    }
                }
                if (i == 0)//1
                {
                    m_bGrabImage1TriggerResult = blnSuccess;
                    m_bGrabImage1TriggerDone = true;
                }
                else if (i == 1)//2
                {
                    m_bGrabImage2TriggerResult = blnSuccess;
                    m_bGrabImage2TriggerDone = true;
                }
                else if (i == 2)//3
                {
                    m_bGrabImage3TriggerResult = blnSuccess;
                    m_bGrabImage3TriggerDone = true;
                }
                else if (i == 3)//4
                {
                    m_bGrabImage4TriggerResult = blnSuccess;
                    m_bGrabImage4TriggerDone = true;
                }
                else if (i == 4)//5
                {
                    m_bGrabImage5TriggerResult = blnSuccess;
                    m_bGrabImage5TriggerDone = true;
                }
                else if (i == 5)//6
                {
                    m_bGrabImage6TriggerResult = blnSuccess;
                    m_bGrabImage6TriggerDone = true;
                }
                else if (i == 6)//7
                {
                    m_bGrabImage7TriggerResult = blnSuccess;
                    m_bGrabImage7TriggerDone = true;
                }
            }

            // --- After last grab ---------------------------------------------------------------------------------------------------------------------------
            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;

            bool blnStartTransfer = false;
            switch (m_intGrabRequire - 1)
            {
                case 0:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage1LoadDone, true, ref m_bGrabImage1LoadResult, "WaitGrab1");
                    break;
                case 1:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage2LoadDone, true, ref m_bGrabImage2LoadResult, "WaitGrab2");
                    break;
                case 2:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage3LoadDone, true, ref m_bGrabImage3LoadResult, "WaitGrab3");
                    break;
                case 3:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage4LoadDone, true, ref m_bGrabImage4LoadResult, "WaitGrab4");
                    break;
                case 4:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage5LoadDone, true, ref m_bGrabImage5LoadResult, "WaitGrab5");
                    break;
                case 5:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage6LoadDone, true, ref m_bGrabImage6LoadResult, "WaitGrab6");
                    break;
                case 6:
                    blnStartTransfer = WaitEventDone(ref m_bGrabImage7LoadDone, true, ref m_bGrabImage7LoadResult, "WaitGrab7");
                    break;
                default:
                    blnStartTransfer = false;
                    break;
            }
            if (!blnStartTransfer)
            {
                STTrackLog.WriteLine("GrabImage_Sequence_NoSetIntensity_Teli_HighSpeedOrColor > blnStartTransfer last " + m_intGrabRequire.ToString() + " fail");
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();
            }
            else
                SetGrabDone(blnForInspection);

            //Reset outport
            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    m_objTeliCamera.OutPort(1, 0);
                }
            }
            else
            {
                if (m_intLightControlModel == 0) // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 0);
                }

            }

            // Set camera gain
            if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
            {
                m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
            }

            // Set camera shuttle
            if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
            {
                m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
            }

            if (m_smVisionInfo.g_blnWhiteBalanceAuto)
            {
                double dRedRatio = 0, dBlueRatio = 0;
                m_objTeliCamera.GetWhiteBalance(ref dRedRatio, ref dBlueRatio);

                m_smVisionInfo.g_dRedRatio = dRedRatio;
                m_smVisionInfo.g_dBlueRatio = dBlueRatio;

                m_smVisionInfo.g_blnWhiteBalanceAuto = false;
            }

            WaitEventDone(ref m_bSubTh1_TransferImage, false, 10000, "WaitTransferDone");

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return false;
            }
            else
            {
                if (m_smVisionInfo.g_bImageStatisticAnalysisON)
                {
                    m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

                    HiPerfTimer timesout = new HiPerfTimer();
                    timesout.Start();

                    while (true)
                    {
                        if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
                            break;

                        if (timesout.Timing > 3000)
                        {
                            STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1");
                            break;
                        }

                        Thread.Sleep(1);
                    }
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return true;
            }
        }

        public bool GrabImage_Sequence_NoSetIntensity_Teli_GrabAllFirst(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }
            //m_objTeliCamera.SetWhiteBalance(m_smVisionInfo.g_dRedRatio, m_smVisionInfo.g_dBlueRatio);
            //HiPerfTimer tDelay = new HiPerfTimer();
            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();

            //10-07-2019 ZJYEOH : Check the shuttle and gain again because PH got other setting
            m_uintPHCameraGainPrev = 1;
            m_fPHCameraShuttlePrev = 1f;
            // Set camera gain
            if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
            {
                m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
            }

            // Set camera shuttle
            if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
            {
                m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
            }
            //tDelay.Start();
            //m_objTeliCamera.ResetImageCount();
            Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);
            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = false;
            m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = false;
            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = false;
            m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = false;

            //m_arrBitmapData = new List<BitmapData>();
            m_arrBufferPointer = new List<IntPtr>();
            m_bSubTh1_TransferImage = true;
            m_bSubTh1_WaitFrame = true;
            //HiPerfTimer tWaitFrame = new HiPerfTimer();
            //m_objTeliCamera.StartAcquisition(m_intGrabRequire);
            for (int i = 0; i < m_intGrabRequire; i++)
            {

                if (i > 0)
                {
                    if (m_objTeliCamera.WaitTriggerWaitDone())
                    {
                        // Set camera gain
                        if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                        {
                            m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                            m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                            m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        }

                        if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
                        {
                            blnSuccess = false;
                            m_blnForceStopProduction = true;
                        }
                    }
                    else
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }
                else
                {
                    if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(i))
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }

                //Set light source channel ON / OFF
                if (m_intGrabRequire > 1 && ((i + 1) < m_smVisionInfo.g_arrCameraShuttle.Count))
                {

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i + 1])
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i + 1]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
                        m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i + 1];
                        //if (m_objTeliCamera.ref_intSetGainDelay != 0)
                        //    Thread.Sleep(m_objTeliCamera.ref_intSetGainDelay);
                    }

                }

                if (!m_objTeliCamera.WaitFrameAcquiredReady(i))
                {
                    blnSuccess = false;
                    m_blnForceStopProduction = true;
                }

            }
           
            if (blnSuccess)
            {
                //m_objTeliCamera.TriggerImageBufferRead();
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();
                
            }
            else
                SetGrabDone(blnForInspection);
        
            if (!m_objTeliCamera.WaitTriggerWaitDone())
            {
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        if (m_smVisionInfo.g_arrDebugColorImages.Count != m_smVisionInfo.g_arrColorImages.Count)
                        {
                            for (int d = 0; d < m_smVisionInfo.g_arrColorImages.Count; d++)
                            {
                                m_smVisionInfo.g_arrDebugColorImages.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                            }
                        }
                        m_objTeliCamera.ConvertImage(i);
                        m_smVisionInfo.g_arrMemoryColorImage[i].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                        m_smVisionInfo.g_arrMemoryColorImage[i].CopyTo(ref m_smVisionInfo.g_arrDebugColorImages, i);

                        if (m_smVisionInfo.g_arrImageGain[i] != 1f)
                        {
                            if (m_smVisionInfo.g_intImageMergeType != 0)
                            {
                                for (int j = 0; j < 5; j++)
                                {
                                    CROI objCROI = new CROI();
                                    try
                                    {
                                        objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionY,
                                            m_smVisionInfo.g_arrSystemROI[j].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[j].ref_ROIHeight);
                                        objCROI.AttachImage(m_smVisionInfo.g_arrDebugColorImages[i]);
                                        objCROI.AddExtraGain(m_smVisionInfo.g_arrImageGain[i]);
                                        objCROI.Dispose();
                                    }
                                    catch
                                    {
                                        if (objCROI != null)
                                            objCROI.Dispose();
                                    }

                                }

                            }
                            else
                                m_smVisionInfo.g_arrColorImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i], m_smVisionInfo.g_intColorFormat);
                        }
                        m_smVisionInfo.g_arrDebugColorImages[i].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, i);
                    }
                }
                else
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        //m_objTeliCamera.ConvertImage(i);
                        //m_objTeliCamera.ConvertImage(/*m_arrBitmapData[i],*/ m_arrBufferPointer[i]);
                        m_objTeliCamera.ConvertImage(i);
                        m_smVisionInfo.g_arrMemoryColorImage[i].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                        m_smVisionInfo.g_arrMemoryColorImage[i].CopyTo(ref m_smVisionInfo.g_arrColorImages, i);

                        if (m_smVisionInfo.g_arrImageGain[i] != 1f)
                        {
                            if (m_smVisionInfo.g_intImageMergeType != 0)
                            {
                                for (int j = 0; j < 5; j++)
                                {
                                    CROI objCROI = new CROI();
                                    try
                                    {
                                        objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionY,
                                            m_smVisionInfo.g_arrSystemROI[j].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[j].ref_ROIHeight);
                                        objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[i]);
                                        objCROI.AddExtraGain(m_smVisionInfo.g_arrImageGain[i]);
                                        objCROI.Dispose();
                                    }
                                    catch
                                    {
                                        if (objCROI != null)
                                            objCROI.Dispose();
                                    }

                                }

                            }
                            else
                                m_smVisionInfo.g_arrColorImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i], m_smVisionInfo.g_intColorFormat);
                        }

                        m_smVisionInfo.g_arrColorImages[i].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i);

                    }
                }

                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                {
                    if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                    {
                        for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                        {
                            m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                        }
                    }
                    if (!m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrMemoryImage[i].LoadImageFromMemory(m_objTeliCamera.GetImageBufferPointer(i));
                        m_smVisionInfo.g_arrMemoryImage[i].CopyTo(ref m_smVisionInfo.g_arrDebugImages, i);
                        m_smVisionInfo.g_arrDebugImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                    }

                    SetExtraGain(i, m_smVisionInfo.g_arrDebugImages);
                    ImageMerge(i, m_smVisionInfo.g_arrDebugImages);
                    ImageUniformize(i, m_smVisionInfo.g_arrDebugImages);
                }
                else
                {
                    if (!m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrMemoryImage[i].LoadImageFromMemory(m_objTeliCamera.GetImageBufferPointer(i));
                        m_smVisionInfo.g_arrMemoryImage[i].CopyTo(ref m_smVisionInfo.g_arrImages, i);
                        m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                    }

                    SetExtraGain(i);
                    ImageMerge(i);
                    ImageUniformize(i);
                }

                if (i == 0)
                {
                    if (blnSuccess) m_bGrabImage1Result = true;
                    m_bGrabImage1Done = true;
                    TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 1)
                {
                    if (blnSuccess) m_bGrabImage2Result = true;
                    m_bGrabImage2Done = true;
                    TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 2)
                {
                    if (blnSuccess) m_bGrabImage3Result = true;
                    m_bGrabImage3Done = true;
                    TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 3)
                {
                    if (blnSuccess) m_bGrabImage4Result = true;
                    m_bGrabImage4Done = true;
                    TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 4)
                {
                    if (blnSuccess) m_bGrabImage5Result = true;
                    m_bGrabImage5Done = true;
                    TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 5)
                {
                    if (blnSuccess) m_bGrabImage6Result = true;
                    m_bGrabImage6Done = true;
                    TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
                }
                else if (i == 6)
                {
                    if (blnSuccess) m_bGrabImage7Result = true;
                    m_bGrabImage7Done = true;
                    TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
                }
            }
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;

            //Reset outport
            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    m_objTeliCamera.OutPort(1, 0);
                }
            }
            else
            {
                if (m_intLightControlModel == 0) // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    m_objTeliCamera.OutPort(1, 0);
                }

            }

            // Set camera gain
            if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
            {
                m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                m_uintPHCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
            }

            // Set camera shuttle
            if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
            {
                m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                m_fPHCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
            }

            //WaitEventDone(ref m_bSubTh1_TransferImage, false, 10000, "WaitTransferDone");

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return false;
            }
            else
            {
                //// Set camera gain
                //if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                //{
                //    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                //    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                //}

                //// Set camera shuttle
                //if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                //{
                //    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[0]);
                //    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                //}

                if (m_smVisionInfo.g_bImageStatisticAnalysisON)
                {
                    m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

                    HiPerfTimer timesout = new HiPerfTimer();
                    timesout.Start();

                    while (true)
                    {
                        if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
                            break;

                        if (timesout.Timing > 3000)
                        {
                            STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1");
                            break;
                        }

                        Thread.Sleep(1);
                    }
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return true;
            }
        }
        public bool GrabImage_Sequence_SetIntensityForPH_Teli(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();

            Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

            bool blnSuccess = true;
            //bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            //int intSelectedImage = m_smVisionInfo.g_intSelectedImage;

            for (int i = 0; i < 2; i++) //m_intGrabRequire
            {
                //if (blnSeparateGrab)
                //{
                //    if (i != intSelectedImage)
                //        continue;
                //}

                if (i > 0) // for when grabbing second image and third image and forth image
                {
                    if (m_objTeliCamera.WaitFrameReady())
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
                        }
                        else
                        {
                            m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                            {
                                if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                {
                                    for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                    {
                                        m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                }

                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, i - 1);
                                m_smVisionInfo.g_arrDebugImages[i - 1].AddGain(m_smVisionInfo.g_fPHImageGain);
                                SetExtraGain(i - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageMerge(i - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageUniformize(i - 1, m_smVisionInfo.g_arrDebugImages);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i - 1);
                                m_smVisionInfo.g_arrImages[i - 1].AddGain(m_smVisionInfo.g_fPHImageGain);
                                SetExtraGain(i - 1);
                                ImageMerge(i - 1);
                                ImageUniformize(i - 1);
                            }
                        }
                    }
                    else
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }

                    if (i == 1)
                    {
                        m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                        m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                        m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                        m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                        m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                        m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                    }
                    //else if (i == 2)
                    //{
                    //    m_bGrabImage2Done = true;
                    //}
                    //else if (i == 3)
                    //{
                    //    m_bGrabImage3Done = true;
                    //}
                }

                // Set light source channel ON/OFF

                // Set camera gain
                if (m_uintPHCameraGainPrev != m_smVisionInfo.g_uintPHCameraGain)
                {
                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_uintPHCameraGain);
                    m_uintPHCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;
                    m_intCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;
                }

                // Set camera shuttle
                if (m_fPHCameraShuttlePrev != m_smVisionInfo.g_fPHCameraShuttle)
                {
                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_fPHCameraShuttle);
                    m_fPHCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;
                    m_fCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;
                }

                if (blnSuccess)//2021-10-21 ZJYEOH : No need to grab anymore if not success, as this will reset the camera error message
                {
                    if (!m_objTeliCamera.Grab())
                    {
                        blnSuccess = false;
                        m_blnForceStopProduction = true;
                    }
                }

                Thread.Sleep(10);   // 2019 08 01 - CCENG: delay 10 ms before set grab done.

                SetGrabDone(blnForInspection);
            }

            if (!m_objTeliCamera.WaitFrameReady())
            {
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

                if (m_objTeliCamera.GetFrame(m_intGrabRequire - 1))
                {
                    if (m_objTeliCamera.ConvertFrame(m_intGrabRequire - 1))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, m_intGrabRequire - 1);
                        }
                        else
                        {
                            m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                            m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                            if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                            {
                                if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                {
                                    for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                    {
                                        m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                }

                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrDebugImages, m_intGrabRequire - 1);
                                m_smVisionInfo.g_arrDebugImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_fPHImageGain);
                                SetExtraGain(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageMerge(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                                ImageUniformize(m_intGrabRequire - 1, m_smVisionInfo.g_arrDebugImages);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, m_intGrabRequire - 1);
                                m_smVisionInfo.g_arrImages[m_intGrabRequire - 1].AddGain(m_smVisionInfo.g_fPHImageGain);
                                SetExtraGain(m_intGrabRequire - 1);
                                ImageMerge(m_intGrabRequire - 1);
                                ImageUniformize(m_intGrabRequire - 1);
                            }
                        }
                        if (m_intGrabRequire == 1)
                        {
                            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                            m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                            m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                            m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                        }
                    }
                }
            }
            else
                SetGrabDone(blnForInspection);

            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;

            //Reset outport
            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    m_objTeliCamera.OutPort(1, 0);
                }
            }

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return false;
            }
            else
            {
                // Set camera gain
                if (m_uintPHCameraGainPrev != m_smVisionInfo.g_uintPHCameraGain)
                {
                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_uintPHCameraGain);
                    m_uintPHCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;

                }

                // Set camera shuttle
                if (m_fPHCameraShuttlePrev != m_smVisionInfo.g_fPHCameraShuttle)
                {
                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_fPHCameraShuttle);
                    m_fPHCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;

                }

                if (m_smVisionInfo.g_bImageStatisticAnalysisON)
                {
                    m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

                    HiPerfTimer timesout = new HiPerfTimer();
                    timesout.Start();

                    while (true)
                    {
                        if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
                            break;

                        if (timesout.Timing > 10000)
                        {
                            STTrackLog.WriteLine(">>>>>>>>>>>>> time out 2");
                            break;
                        }

                        Thread.Sleep(1);
                    }
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return true;
            }
        }
        public bool GrabImage_Sequence_SetIntensityForPH_Teli_LowLevelAPI(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objTeliCamera.IsCameraInitDone())
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Using Teli Camera
            m_smVisionInfo.g_objGrabTime.Start();

            if (m_uintPHCameraGainPrev != m_smVisionInfo.g_uintPHCameraGain)
            {
                m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_uintPHCameraGain);
                m_uintPHCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;
                m_intCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;
            }

            // Set camera shuttle
            if (m_fPHCameraShuttlePrev != m_smVisionInfo.g_fPHCameraShuttle)
            {
                m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_fPHCameraShuttle);
                m_fPHCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;
                m_fCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;
            }

            Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

            bool blnSuccess = true;
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = false;
            m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = false;
            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = false;
            m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = false;
            m_arrBufferPointer = new List<IntPtr>();

            if (/*!blnStartGrab &&*/ !m_objTeliCamera.Grab(0))
            {
                blnSuccess = false;
                m_blnForceStopProduction = true;
            }

            m_objTeliCamera.WaitFrameAcquiredReady(0);

            if (m_smVisionInfo.g_blnViewColorImage)
            {
                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                {
                    if (m_smVisionInfo.g_arrDebugColorImages.Count != m_smVisionInfo.g_arrColorImages.Count)
                    {
                        for (int d = 0; d < m_smVisionInfo.g_arrColorImages.Count; d++)
                        {
                            m_smVisionInfo.g_arrDebugColorImages.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                        }
                    }
                    m_objTeliCamera.ConvertImage(0);
                    m_smVisionInfo.g_arrMemoryColorImage[0].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());

                    m_smVisionInfo.g_arrMemoryColorImage[0].CopyTo(ref m_smVisionInfo.g_arrDebugColorImages, 0);

                    if (m_smVisionInfo.g_fPHImageGain != 1f)
                    {
                        m_smVisionInfo.g_arrColorImages[0].AddGain(m_smVisionInfo.g_fPHImageGain, m_smVisionInfo.g_intColorFormat);
                    }
                    m_smVisionInfo.g_arrDebugColorImages[0].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, 0);
                    if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                    {
                        for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                        {
                            m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                        }
                    }
                }
                else
                {
                    //m_objTeliCamera.ConvertImage(i);
                    //m_objTeliCamera.ConvertImage(/*m_arrBitmapData[i],*/ m_arrBufferPointer[i]);
                    m_objTeliCamera.ConvertImage(0);
                    m_smVisionInfo.g_arrMemoryColorImage[0].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());

                    m_smVisionInfo.g_arrMemoryColorImage[0].CopyTo(ref m_smVisionInfo.g_arrColorImages, 0);

                    if (m_smVisionInfo.g_fPHImageGain != 1f)
                    {
                        m_smVisionInfo.g_arrColorImages[0].AddGain(m_smVisionInfo.g_fPHImageGain, m_smVisionInfo.g_intColorFormat);
                    }

                    m_smVisionInfo.g_arrColorImages[0].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, 0);

                }
            }
            else
            {
                m_smVisionInfo.g_arrMemoryImage[0].LoadImageFromMemory(m_objTeliCamera.GetImageBufferPointer(0));//(m_objTeliCamera.GetImagePointer());

                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                {
                    if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                    {
                        for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                        {
                            m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                        }
                    }
                    if (!m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrMemoryImage[0].CopyTo(ref m_smVisionInfo.g_arrDebugImages, 0);
                        m_smVisionInfo.g_arrDebugImages[0].AddGain(m_smVisionInfo.g_fPHImageGain);

                    }

                }
                else
                {
                    if (!m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrMemoryImage[0].CopyTo(ref m_smVisionInfo.g_arrImages, 0);
                        m_smVisionInfo.g_arrImages[0].AddGain(m_smVisionInfo.g_fPHImageGain);

                    }

                }
            }

            m_bGrabImage1Result = blnSuccess;
            m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;

            Thread.Sleep(10);   // 2019 08 01 - CCENG: delay 10 ms before set grab done.

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

            }
            else
                SetGrabDone(blnForInspection);

            //Reset outport
            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    m_objTeliCamera.OutPort(1, 3);
                    m_objTeliCamera.OutPort(1, 0);
                }
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    m_objTeliCamera.OutPort(1, 0);
                }
            }

            //2021-10-21 ZJYEOH : Set Image to Black if camera fail
            if (!blnSuccess)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_smVisionInfo.g_arrColorImages[i].SetImageToBlack();
                        m_smVisionInfo.g_arrColorRotatedImages[i].SetImageToBlack();
                    }
                    m_smVisionInfo.g_arrImages[i].SetImageToBlack();
                    m_smVisionInfo.g_arrRotatedImages[i].SetImageToBlack();
                }
            }

            if (m_objTeliCamera.GetErrorMessage() != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objTeliCamera.GetErrorMessage();
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return false;
            }
            else
            {
                // Set camera gain
                if (m_uintPHCameraGainPrev != m_smVisionInfo.g_uintPHCameraGain)
                {
                    m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_uintPHCameraGain);
                    m_uintPHCameraGainPrev = m_smVisionInfo.g_uintPHCameraGain;

                }

                // Set camera shuttle
                if (m_fPHCameraShuttlePrev != m_smVisionInfo.g_fPHCameraShuttle)
                {
                    m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_fPHCameraShuttle);
                    m_fPHCameraShuttlePrev = m_smVisionInfo.g_fPHCameraShuttle;

                }

                if (m_smVisionInfo.g_bImageStatisticAnalysisON)
                {
                    m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo = true;

                    HiPerfTimer timesout = new HiPerfTimer();
                    timesout.Start();

                    while (true)
                    {
                        if (!m_smVisionInfo.g_bImageStatisticAnalysisUpdateInfo)
                            break;

                        if (timesout.Timing > 10000)
                        {
                            STTrackLog.WriteLine(">>>>>>>>>>>>> time out 2");
                            break;
                        }

                        Thread.Sleep(1);
                    }
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                m_smVisionInfo.g_objTransferTime.Stop();

                return true;
            }
        }
        public bool GrabImage_Normal_NoSetIntensity_AVTVimba(int intGrabImageMask, bool blnForInspection)
        {
            if (!m_objAVTFireGrab.ref_blnCameraInitDone)
            {
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true;
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                m_smVisionInfo.g_strErrorMessage = "Camera No Connected";
                return true;
            }

            // Default Using AVT Camera
            m_smVisionInfo.g_objGrabTime.Start();
            bool blnSuccess = true;
            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;
            HiPerfTimer timer_GrabTime = new HiPerfTimer();

            int intExposureTime = (int)Math.Ceiling(m_smVisionInfo.g_fCameraShuttle * 0.02f);
            m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_objAVTFireGrab.DiscardFrame();
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                {
                    if ((intGrabImageMask & (0x01 << i)) == 0)
                    {
                        continue;
                    }
                }

                if (i > 0) // for second image and third image
                {
                    timer_GrabTime.Stop();
                    if ((m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration) > 0)
                        Thread.Sleep((int)(m_objAVTFireGrab.ref_intNextGrabDelay - timer_GrabTime.Duration));
                }

                #region if more than 1 image need to be captured
                // Set light source channel ON/OFF
                if (m_intGrabRequire > 1)
                {
                    // Set camera gain
                    if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                    {
                        m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                        m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                        if (m_objAVTFireGrab.ref_intSetGainDelay != 0)
                            Thread.Sleep(m_objAVTFireGrab.ref_intSetGainDelay);
                    }

                    // Set camera shuttle
                    if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                    {
                        m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[i]);
                        m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                        if (m_objAVTFireGrab.ref_intSetGainDelay != 0)
                            Thread.Sleep(m_objAVTFireGrab.ref_intSetGainDelay);
                    }

                    UpdateAVTCameraOutport(i);
                }
                #endregion

                if (!m_objAVTFireGrab.Grab())
                {
                    blnSuccess = false;
                    m_blnForceStopProduction = true;
                }

                if (i < m_intGrabRequire - 1)
                {
                    timer_GrabTime.Start();

                    Thread.Sleep(intExposureTime);
                }
                else
                {
                    Thread.Sleep(Math.Max(intExposureTime, 10));
                }

            }

            if (blnSuccess)
            {
                SetGrabDone(blnForInspection);
                m_smVisionInfo.g_objTransferTime.Start();

                for (int i = 0; i < m_intGrabRequire; i++)
                {
                    if (blnSeparateGrab)
                    {
                        if (i != intSelectedImage)
                            continue;
                    }

                    if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                    {
                        if ((intGrabImageMask & (0x01 << i)) == 0)
                        {
                            continue;
                        }
                    }

                    if (m_objAVTFireGrab.GetFrame(i))
                    {
                        if (m_objAVTFireGrab.ConvertFrame(i))
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i);
                            }
                            else
                            {
                                m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objAVTFireGrab.ref_ptrImagePointer);
                                m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                                m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);

                            }
                            if (i == 0)
                            {
                                if (blnSuccess) m_bGrabImage1Result = true;
                                m_bGrabImage1Done = true;
                            }
                            else if (i == 1)
                            {
                                if (blnSuccess) m_bGrabImage2Result = true;
                                m_bGrabImage2Done = true;
                            }
                            else if (i == 2)
                            {
                                if (blnSuccess) m_bGrabImage3Result = true;
                                m_bGrabImage3Done = true;
                            }
                            else if (i == 3)
                            {
                                if (blnSuccess) m_bGrabImage4Result = true;
                                m_bGrabImage4Done = true;
                            }
                            else if (i == 4)
                            {
                                if (blnSuccess) m_bGrabImage5Result = true;
                                m_bGrabImage5Done = true;
                            }
                            else if (i == 5)
                            {
                                if (blnSuccess) m_bGrabImage6Result = true;
                                m_bGrabImage6Done = true;
                            }
                            else if (i == 6)
                            {
                                if (blnSuccess) m_bGrabImage7Result = true;
                                m_bGrabImage7Done = true;
                            }
                        }
                    }
                }
            }
            else
                SetGrabDone(blnForInspection);
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
            for (int i = 0; i < m_intGrabRequire; i++)
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                if (intGrabImageMask > 0)   // Grab all image if intGrabImageMask is 0.
                {
                    if ((intGrabImageMask & (0x01 << i)) == 0)
                    {
                        continue;
                    }
                }

                m_objAVTFireGrab.ReleaseImage(i);
            }

            if (m_objAVTFireGrab.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objAVTFireGrab.ref_strErrorText;
                m_smVisionInfo.g_objTransferTime.Stop();
                return false;
            }
            else
            {
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }

                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.g_objTransferTime.Stop();
                return true;
            }

        }

        public bool GrabSingleImage_IDS()
        {
            m_smVisionInfo.g_objGrabTime.Start();

            m_objVisionIO.IOGrabbing.SetOn("V3 IOGrabbing 1");

            // On Lighting
            if (m_intGrabIndex == 0 && m_objVisionIO.Grab1 != null)
                m_objVisionIO.Grab1.SetOn("V3 Grab1 2");
            if (m_intGrabIndex == 1 && m_objVisionIO.Grab2 != null)
                m_objVisionIO.Grab2.SetOn("V3 Grab2 3");

            if (m_intGrabRequire > 1)
            {
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[m_intGrabIndex])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[m_intGrabIndex]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[m_intGrabIndex];
                }
            }

            if (m_objIDSCamera.Grab())
            {
                //m_objIDSCamera.WaitExposureDone();
                Thread.Sleep(2);

                SetGrabDone(false);

                if (m_intGrabIndex == 0 && m_objVisionIO.Grab1 != null)
                    m_objVisionIO.Grab1.SetOff("V3 Grab1 21");
                if (m_intGrabIndex == 1 && m_objVisionIO.Grab2 != null)
                    m_objVisionIO.Grab2.SetOff("V3 Grab2 22");

                m_smVisionInfo.g_objTransferTime.Start();

                if (m_objIDSCamera.GetFrame(m_smVisionInfo.g_objMemoryImage))
                {
                    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, m_intGrabIndex);
                    m_smVisionInfo.g_arrImages[m_intGrabIndex].AddGain(m_smVisionInfo.g_arrImageGain[m_intGrabIndex]);

                    m_smVisionInfo.g_objTransferTime.Stop();
                }
            }
            else
                SetGrabDone(false);

            if (m_intGrabRequire > 1)
            {
                int intNextGrabCount = m_intGrabIndex + 1;
                if (intNextGrabCount >= m_intGrabRequire)
                    intNextGrabCount = 0;
                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[intNextGrabCount])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[intNextGrabCount]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[intNextGrabCount];
                }
            }

            if (m_intGrabIndex == 0 && m_objVisionIO.Grab1 != null)
                m_objVisionIO.Grab1.SetOff("V3 Grab1 23");
            if (m_intGrabIndex == 1 && m_objVisionIO.Grab2 != null)
                m_objVisionIO.Grab2.SetOff("V3 Grab2 24");

            if (m_objIDSCamera.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objIDSCamera.ref_strErrorText;
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                m_smVisionInfo.g_objTransferTime.Stop();
                return false;
            }
            else
            {
                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                m_smVisionInfo.g_objTransferTime.Stop();
                return true;
            }

        }

        public bool GrabMultiImage_IDS_IOCard_NoSetIntensity(bool blnForInspection)
        {
            /*
             *  -----------------------2018 07 14  - CCENG -----------------------------------------------------
             *  IDS camera is not going to use in this Open Vision 64Bit Project. Will replace with Teli or vimba or other camera instead.
             *  This function is not supporting StartTest_MultiThreading function
             *  Futher enhancement of IDS coding need to do if want to support this project. 
             *  ------------------------------------------------------------------------------------------------
             */

            // No transfer time here
            m_smVisionInfo.g_objGrabTime.Start();

            m_objVisionIO.IOGrabbing.SetOn("V3 IOGrabbing 2");

            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;

            bool blnRetry = false;
            for (int i = 0; i < m_intGrabRequire; i++)     // Maximum 2 grabs for pad vision
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                // Make sure light is OFF
                if ((m_objVisionIO.Grab1 != null && m_objVisionIO.Grab1.IsOn()) ||
                    (m_objVisionIO.Grab2 != null && m_objVisionIO.Grab2.IsOn()))
                {
                    m_objVisionIO.Grab1.SetOff("V3 Grab1 25");
                    m_objVisionIO.Grab2.SetOff("V3 Grab2 26");

                    Thread.Sleep(1);    // Sleep 1ms before ON back.
                }

                //if (i > 0)
                //    Thread.Sleep(5);

                // On Lighting
                if (i == 0 && m_objVisionIO.Grab1 != null)
                //if (i == 0 && m_objVisionIO.Grab1 != null && m_objVisionIO.Grab2 != null)
                {
                    m_objVisionIO.Grab1.SetOn("V3 Grab1 4");
                    //    m_objVisionIO.Grab2.SetOn("V3 ");
                }

                if (i == 1 && m_objVisionIO.Grab2 != null)
                    m_objVisionIO.Grab2.SetOn("V3 Grab2 5");

                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }


                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }

                // Start Grab image
                if (m_objIDSCamera.Grab())
                {
                    //m_objIDSCamera.WaitExposureDone();
                    Thread.Sleep((int)Math.Max(2, Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[i])));

                    // Off Lighting (Light Controller will automatically off the light if IO ON time longer than intensity setting)
                    if (i == 0 && m_objVisionIO.Grab1 != null)
                        m_objVisionIO.Grab1.SetOff("V3 Grab1 27");
                    if (i == 1 && m_objVisionIO.Grab2 != null)
                        m_objVisionIO.Grab2.SetOff("V3 Grab2 28");

                    // Get image frame
                    if (m_objIDSCamera.GetFrame(m_smVisionInfo.g_objMemoryImage))
                    {
                        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                        m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                    }
                    else
                    {
                        if (!blnRetry)
                        {
                            blnRetry = true;
                            i--;
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }

                }
                else
                {
                    break;
                }
            }

            SetGrabDone(blnForInspection);

            if (m_intGrabRequire > 1)
            {
                // Set first image gain to camera before next cycle camera grab is coming.
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set first image shuttle to camera before next cycle camera grab is coming.
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }
            }

            if (m_objIDSCamera.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objIDSCamera.ref_strErrorText;
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
            {
                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                return true;
            }
        }

        public bool GrabMultiImage_IDS_GPIO_NoSetIntensity()
        {
            // No transfer time here
            m_smVisionInfo.g_objGrabTime.Start();

            m_objVisionIO.IOGrabbing.SetOn("V3 IOGrabbing 3");

            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;

            bool blnRetry = false;
            for (int i = 0; i < m_intGrabRequire; i++)     // Maximum 2 grabs for pad vision
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                // Make sure light is OFF
                if ((m_objVisionIO.Grab1 != null && m_objVisionIO.Grab1.IsOn()) ||
                    (m_objVisionIO.Grab2 != null && m_objVisionIO.Grab2.IsOn()))
                {
                    m_objVisionIO.Grab1.SetOff("V3 Grab1 29");
                    m_objVisionIO.Grab2.SetOff("V3 Grab2 30");

                    Thread.Sleep(1);    // Sleep 1ms before ON back.
                }

                //if (i > 0)
                //    Thread.Sleep(5);

                // On Lighting
                if (i == 0 && m_objVisionIO.Grab1 != null)
                //if (i == 0 && m_objVisionIO.Grab1 != null && m_objVisionIO.Grab2 != null)
                {
                    m_objVisionIO.Grab1.SetOn("V3 Grab1 6");
                    //    m_objVisionIO.Grab2.SetOn("V3 ");
                }

                if (i == 1 && m_objVisionIO.Grab2 != null)
                    m_objVisionIO.Grab2.SetOn("V3 Grab2 7");

                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }


                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }

                // Start Grab image
                if (m_objIDSCamera.Grab())
                {
                    //m_objIDSCamera.WaitExposureDone();
                    Thread.Sleep((int)Math.Max(2, Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[i])));

                    // Off Lighting (Light Controller will automatically off the light if IO ON time longer than intensity setting)
                    if (i == 0 && m_objVisionIO.Grab1 != null)
                        m_objVisionIO.Grab1.SetOff("V3 Grab1 31");
                    if (i == 1 && m_objVisionIO.Grab2 != null)
                        m_objVisionIO.Grab2.SetOff("V3 Grab2 32");

                    // Get image frame
                    if (m_objIDSCamera.GetFrame(m_smVisionInfo.g_objMemoryImage))
                    {
                        m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                        m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                    }
                    else
                    {
                        if (!blnRetry)
                        {
                            blnRetry = true;
                            i--;
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }

                }
                else
                {
                    break;
                }
            }

            SetGrabDone(false);

            if (m_intGrabRequire > 1)
            {
                // Set first image gain to camera before next cycle camera grab is coming.
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set first image shuttle to camera before next cycle camera grab is coming.
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }
            }

            if (m_objIDSCamera.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objIDSCamera.ref_strErrorText;
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
            {
                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                return true;
            }
        }

        private void SetLightControllerIntensity_ForIOCardTriggerController(int intGrabIndex)
        {
            // change light source intensity for different image's effects
            for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
            {
                int intValueIndex = 0;

                // Due to some light source only ON for second image so its intensity value is at array no. 0.
                // So we need to loop to find which array no. is for that image
                for (int k = 1; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
                {
                    // if this image no is in array k
                    if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                    {
                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == intGrabIndex)
                        {
                            intValueIndex = k;
                            break;
                        }
                    }
                }

                switch (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    case true:
                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << intGrabIndex)) > 0)
                        {
                            if (m_arrCameraIntensityPrev[j] != m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex])
                            {
                                LEDi_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                   m_smVisionInfo.g_arrLightSource[j].ref_intChannel,
                                   Convert.ToByte(m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex]));

                                //TrackLog objTL = new TrackLog();
                                //objTL.WriteLine("Prev=" + m_arrCameraIntensityPrev[j].ToString() +
                                //                ", Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                //                ", Chn=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                //                ", Value=" + Convert.ToByte(m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex]).ToString());

                                m_arrCameraIntensityPrev[j] = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex];
                                Thread.Sleep(5);
                            }
                        }
                        break;
                    case false:
                        if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << intGrabIndex)) > 0)
                        {
                            if (m_arrCameraIntensityPrev[j] != m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex])
                            {
                                TCOSIO_Control.SetIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo,
                                    m_smVisionInfo.g_arrLightSource[j].ref_intChannel,
                                    m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex]);

                                m_arrCameraIntensityPrev[j] = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueIndex];
                                Thread.Sleep(2);
                            }
                        }
                        break;
                }
            }

        }

        public bool GrabMultiImage_IDS_IOCard_SetIntensity()
        {
            // No transfer time here
            m_smVisionInfo.g_objGrabTime.Start();

            m_objVisionIO.IOGrabbing.SetOn("V3 IOGrabbing 4");

            bool blnSeparateGrab = m_smVisionInfo.g_blnSeparateGrab;
            int intSelectedImage = m_smVisionInfo.g_intSelectedImage;

            bool blnRetry = false;
            for (int i = 0; i < m_intGrabRequire; i++)     // Maximum 2 grabs for pad vision
            {
                if (blnSeparateGrab)
                {
                    if (i != intSelectedImage)
                        continue;
                }

                // Make sure light is OFF
                if ((m_objVisionIO.Grab1 != null && m_objVisionIO.Grab1.IsOn()) ||
                    (m_objVisionIO.Grab2 != null && m_objVisionIO.Grab2.IsOn()) ||
                    (m_objVisionIO.Grab3 != null && m_objVisionIO.Grab3.IsOn()))
                {
                    m_objVisionIO.Grab1.SetOff("V3 Grab1 33");
                    m_objVisionIO.Grab2.SetOff("V3 Grab2 34");
                    m_objVisionIO.Grab3.SetOff("V3 Grab3 35");

                    Thread.Sleep(1);    // Sleep 1ms before ON back.
                }

                SetLightControllerIntensity_ForIOCardTriggerController(i);

                // On Lighting
                for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                {
                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                    {
                        if (j == 0 && m_objVisionIO.Grab1 != null)
                            m_objVisionIO.Grab1.SetOn("V3 Grab1 8");
                        if (j == 1 && m_objVisionIO.Grab2 != null)
                            m_objVisionIO.Grab2.SetOn("V3 Grab2 9");
                        if (j == 2 && m_objVisionIO.Grab3 != null)
                            m_objVisionIO.Grab3.SetOn("V3 Grab3 10");
                    }
                }

                // Set camera gain
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[i])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }

                // Set camera shuttle
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[i])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }

                // Start Grab image
                if (m_objIDSCamera.Grab())
                {
                    //m_objIDSCamera.WaitExposureDone();
                    Thread.Sleep((int)Math.Max(2, Math.Ceiling(m_smVisionInfo.g_arrCameraShuttle[i])));

                    // Off Lighting (Light Controller will automatically off the light if IO ON time longer than intensity setting)
                    if (i == 0 && m_objVisionIO.Grab1 != null)
                        m_objVisionIO.Grab1.SetOff("V3 Grab1 36");
                    if (i == 1 && m_objVisionIO.Grab2 != null)
                        m_objVisionIO.Grab2.SetOff("V3 Grab2 37");


                    // Get image frame
                    //if (m_objIDSCamera.GetFrame(m_smVisionInfo.g_objMemoryImage))
                    //{
                    //    m_smVisionInfo.g_objMemoryImage.CopyTo(ref m_smVisionInfo.g_arrImages, i);
                    //}
                    //else
                    //{
                    //    if (!blnRetry)
                    //    {
                    //        blnRetry = true;
                    //        i--;
                    //        continue;
                    //    }
                    //    else
                    //    {
                    //        break;
                    //    }
                    //}

                }
                else
                {
                    break;
                }
            }

            SetGrabDone(false);

            if (m_intGrabRequire > 1)
            {
                // Set first image gain to camera before next cycle camera grab is coming.
                if (m_intCameraGainPrev != m_smVisionInfo.g_arrCameraGain[0])
                {
                    m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[0]);
                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[0];
                }

                // Set first image shuttle to camera before next cycle camera grab is coming.
                if (m_fCameraShuttlePrev != m_smVisionInfo.g_arrCameraShuttle[0])
                {
                    m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[0]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[0];
                }
            }

            if (m_objIDSCamera.ref_strErrorText != "")
            {
                m_smVisionInfo.g_strErrorMessage = m_objIDSCamera.ref_strErrorText;
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
            {
                //AttachImageToROI();
                m_smVisionInfo.g_blnLoadFile = false;
                return true;
            }
        }

        /// <summary>
        /// Returns whether the worker thread has stopped.
        /// </summary>
        public bool IsThreadStopped
        {
            get
            {
                //lock (m_objStopLock)
                {
                    return m_blnStopped;
                }
            }
        }

        public void WaitAllThreadStopped()
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();

            while (true)
            {
                if (m_blnStopped &&
                    m_blnStopped_AfterInspect &&
                    m_blnStopped_CenterThread &&
                    m_blnStopped_GrabImage &&
                    m_blnStopped_TransferImage &&
                    m_blnStopped_WaitFrame &&
                    m_blnStopped_SideBRThread &&
                    m_blnStopped_SideTLThread &&
                    m_blnStopped_SaveImage &&
                    m_blnStopped_OrientThread
                    )
                {
                    STTrackLog.WriteLine("Vision3Process All threads have stopped.");
                    break;
                }

                if (timesout.Timing > 3000)
                {
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped = " + m_blnStopped.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_AfterInspect = " + m_blnStopped_AfterInspect.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_CenterThread = " + m_blnStopped_CenterThread.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_GrabImage = " + m_blnStopped_GrabImage.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_TransferImage = " + m_blnStopped_TransferImage.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_WaitFrame = " + m_blnStopped_WaitFrame.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_SideBRThread = " + m_blnStopped_SideBRThread.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_SideTLThread = " + m_blnStopped_SideTLThread.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_SaveImage = " + m_blnStopped_SaveImage.ToString());
                    STTrackLog.WriteLine("Vision3Process : m_blnStopped_OrientThread = " + m_blnStopped_OrientThread.ToString());
                    STTrackLog.WriteLine("Vision3Process : >>>>>>>>>>>>> time out 3");
                    break;
                }

                Thread.Sleep(1);
            }
        }

        public bool InitCamera(int intPort, String SerialNo, int intResolutionX, int intResolutionY, bool blnFirstTime)
        {
            bool blnInitSuccess = true;

            if (blnFirstTime)
            {
                if (m_smVisionInfo.g_strCameraModel == "IDS")
                {
                    //if (!m_objIDSCamera.InitializeCamera_AutoSetFrameRate(1))
                    if (!m_objIDSCamera.InitializeCamera(1))    // XDW16-001
                        blnInitSuccess = false;
                }
                else if (m_smVisionInfo.g_strCameraModel == "AVT")
                {
                    if (!m_objAVTFireGrab.InitializeCamera(intPort, false))
                        blnInitSuccess = false;
                }
                else if (m_smVisionInfo.g_strCameraModel == "Teli")
                {
                    if (!m_objTeliCamera.InitializeCamera(SerialNo, intResolutionX, intResolutionY))
                    {
                        blnInitSuccess = false;
                        SRMMessageBox.Show("Serial No. " + SerialNo + " - " + m_smVisionInfo.g_strVisionDisplayName + " " + m_objTeliCamera.GetErrorMessage());
                    }
                }
            }
            RegistryKey Key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey = Key.OpenSubKey("SVG\\LightControl", true);
            string[] strLightControlMaskList = subKey.GetValueNames();

            string strCameraFilePath = m_smProductionInfo.g_strRecipePath + m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex] + "\\Camera.xml";
            if (m_smVisionInfo.g_blnGlobalSharingCameraData)
                strCameraFilePath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml";

            XmlParser fileHandle = new XmlParser(m_smProductionInfo.g_strRecipePath + "Camera.xml");
            XmlParser objFileHandle = new XmlParser(strCameraFilePath);
            fileHandle.GetFirstSection(m_smVisionInfo.g_strVisionName);
            objFileHandle.GetFirstSection(m_smVisionInfo.g_strVisionFolderName);

            m_smVisionInfo.g_fCameraShuttle = objFileHandle.GetValueAsFloat("Shutter", 200f);
            if (m_smVisionInfo.g_strCameraModel == "AVT")
            {
                m_objAVTFireGrab.SetCameraParameter(1, Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle));
                m_objAVTFireGrab.SetCameraParameter(4, objFileHandle.GetValueAsUInt("Gamma", 0));
                if (m_smVisionInfo.g_blnViewColorImage)
                {
                    m_objAVTFireGrab.SetCameraParameter(5, objFileHandle.GetValueAsUInt("UBValue", 0));
                    m_objAVTFireGrab.SetCameraParameter(6, objFileHandle.GetValueAsUInt("VRValue", 0));
                }
            }
            else if (m_smVisionInfo.g_strCameraModel == "IDS")
            {
                //m_objIDSCamera.SetShuttle(m_smVisionInfo.g_fCameraShuttle);
            }
            else if (m_smVisionInfo.g_strCameraModel == "Teli")
            {

            }
            m_smVisionInfo.g_intCameraGrabDelay = objFileHandle.GetValueAsInt("GrabDelay", 5);

            m_smVisionInfo.g_arrLightSource.Clear();

            string[] arrName = subKey.GetSubKeyNames();          // Get Related CommPort List

            for (int x = 0; x < arrName.Length; x++)
            {
                RegistryKey child = subKey.OpenSubKey(arrName[x], true);
                RegistryKey grandChild = child.CreateSubKey(m_smVisionInfo.g_strVisionFolderName);

                string[] arrType = grandChild.GetValueNames();
                for (int i = 0; i < arrType.Length; i++)
                {
                    LightSource objLightSource = new LightSource();
                    objLightSource.ref_strCommPort = arrName[x];
                    objLightSource.ref_strType = arrType[i];
                    objLightSource.ref_intChannel = Convert.ToInt32(grandChild.GetValue(arrType[i], 1));

                    string strSearch = arrType[i].Replace(" ", string.Empty);
                    bool blnLightMaskingFound = false;
                    for (int y = 0; y < strLightControlMaskList.Length; y++)
                    {
                        if (strLightControlMaskList[y].Contains(m_smVisionInfo.g_strVisionName + " - " + arrType[i]))
                            blnLightMaskingFound = true;
                    }
                    if (blnLightMaskingFound)
                        objLightSource.ref_intSeqNo = Convert.ToInt32(subKey.GetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], 1));
                    else
                    {
                        objLightSource.ref_intSeqNo = fileHandle.GetValueAsInt(strSearch, 1);
                        subKey.SetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], objLightSource.ref_intSeqNo);
                    }
                    objLightSource.ref_intValue = objFileHandle.GetValueAsInt(arrType[i], 31);
                    if (objLightSource.ref_intValue > 255)
                        objLightSource.ref_intValue = 255;
                    objLightSource.ref_intPortNo = x;
                    int intCameraOutNo = Convert.ToInt32(objLightSource.ref_strType.Substring(objLightSource.ref_strType.Length - 1));

                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                    {
                        if (intCameraOutNo == 0)
                            m_objAVTFireGrab.OutPort(intCameraOutNo, m_smVisionInfo.g_intTriggerMode);
                        else
                            m_objAVTFireGrab.OutPort(intCameraOutNo, 0);
                    }
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        if (intCameraOutNo == 0)
                            m_objTeliCamera.OutPort(intCameraOutNo, m_smVisionInfo.g_intTriggerMode);
                        else
                            m_objTeliCamera.OutPort(intCameraOutNo, 0);
                    }

                    objLightSource.ref_arrValue = new List<int>();
                    objLightSource.ref_arrImageNo = new List<int>();
                    // Maximum grab 7 times
                    for (int j = 0; j < 7; j++)
                    {
                        if ((objLightSource.ref_intSeqNo & (0x01 << j)) > 0)
                        {
                            if (m_intGrabRequire < (j + 1))
                            {
                                m_intGrabRequire = j + 1; // Get highest grab number
                                for (int k = m_smVisionInfo.g_arrImages.Count; k < m_intGrabRequire; k++)
                                {
                                    if (m_smVisionInfo.g_blnViewColorImage)
                                    {
                                        m_smVisionInfo.g_arrColorImages.Add(new CImageDrawing());
                                        m_smVisionInfo.g_arrColorRotatedImages.Add(new CImageDrawing());
                                    }

                                    m_smVisionInfo.g_arrImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    m_smVisionInfo.g_arrRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    //m_smVisionInfo.g_arrCenterROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    //m_smVisionInfo.g_arrSideROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arr5SRotatedImages[0] == null)
                                    {
                                        m_smVisionInfo.g_arr5SRotatedImages[0] = new List<ImageDrawing>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SRotatedImages[1] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[2] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[3] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[4] = new List<ImageDrawing>();
                                        }
                                    }
                                    m_smVisionInfo.g_arr5SRotatedImages[0].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_smVisionInfo.g_arr5SRotatedImages[1].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[2].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[3].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[4].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                    if (m_smVisionInfo.g_arr5SColorRotatedImages[0] == null)
                                    {
                                        m_smVisionInfo.g_arr5SColorRotatedImages[0] = new List<CImageDrawing>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SColorRotatedImages[1] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[2] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[3] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[4] = new List<CImageDrawing>();
                                        }
                                    }
                                    m_smVisionInfo.g_arr5SColorRotatedImages[0].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_smVisionInfo.g_arr5SColorRotatedImages[1].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[2].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[3].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[4].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                    m_smVisionInfo.g_arrCameraShuttle.Add(new float());
                                    m_smVisionInfo.g_arrCameraGain.Add(new int());
                                    m_smVisionInfo.g_arrImageGain.Add(new float());
                                    m_smVisionInfo.g_arrImageExtraGain.Add(new List<float>(5) { 0, 0, 0, 0, 0 });

                                    if (m_arr5SImageRotated2[0] == null)
                                    {
                                        m_arr5SImageRotated2[0] = new List<bool>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_arr5SImageRotated2[1] = new List<bool>();
                                            m_arr5SImageRotated2[2] = new List<bool>();
                                            m_arr5SImageRotated2[3] = new List<bool>();
                                            m_arr5SImageRotated2[4] = new List<bool>();
                                        }
                                    }
                                    m_arr5SImageRotated2[0].Add(false);
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_arr5SImageRotated2[1].Add(false);
                                        m_arr5SImageRotated2[2].Add(false);
                                        m_arr5SImageRotated2[3].Add(false);
                                        m_arr5SImageRotated2[4].Add(false);
                                    }
                                }
                            }
                            int intCount = objLightSource.ref_arrValue.Count;

                            objLightSource.ref_arrValue.Add(new int());
                            objLightSource.ref_arrImageNo.Add(new int());
                            objFileHandle.GetSecondSection(objLightSource.ref_strType);
                            objLightSource.ref_arrValue[intCount] = objFileHandle.GetValueAsInt("Seq" + intCount.ToString(), 31, 2);
                            objLightSource.ref_arrImageNo[intCount] = j;
                        }
                    }

                    m_smVisionInfo.g_arrLightSource.Add(objLightSource);

                    if (!m_smCustomizeInfo.g_blnMixController)
                    {
                        if (m_smCustomizeInfo.g_blnLEDiControl)
                        {
                            LEDi_Control.SetIntensity(x, objLightSource.ref_intChannel, Convert.ToByte(objLightSource.ref_arrValue[0]));
                        }
                        else if (m_smCustomizeInfo.g_blnVTControl)
                        {
                            VT_Control.SetConfigMode(objLightSource.ref_intPortNo);
                            VT_Control.SetIntensity(x, objLightSource.ref_intChannel, objLightSource.ref_arrValue[0]);
                            VT_Control.SetRunMode(objLightSource.ref_intPortNo);
                        }
                        else
                        {
                            TCOSIO_Control.SetIntensity(x, objLightSource.ref_intChannel, objLightSource.ref_arrValue[0]);
                            TCOSIO_Control.SendMessage(x, "@ST" + objLightSource.ref_intChannel + "1*");    // Set Strobe ON
                            TCOSIO_Control.SendMessage(x, "@SI" + objLightSource.ref_intChannel + "00*");   // Set Constant Intensity to 0
                        }
                    }
                    else
                    {
                        if (m_intLightControlModel == 0)    // 2018 07 13 - CCENG: Temporary force to use VTControl
                        {
                            LEDi_Control.SetIntensity(x, objLightSource.ref_intChannel, Convert.ToByte(objLightSource.ref_arrValue[0]));
                        }
                        else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
                        {
                            VT_Control.SetConfigMode(objLightSource.ref_intPortNo);
                            VT_Control.SetIntensity(x, objLightSource.ref_intChannel, objLightSource.ref_arrValue[0]);
                            VT_Control.SetRunMode(objLightSource.ref_intPortNo);
                        }
                        else
                        {
                            TCOSIO_Control.SetIntensity(x, objLightSource.ref_intChannel, objLightSource.ref_arrValue[0]);
                            TCOSIO_Control.SendMessage(x, "@ST" + objLightSource.ref_intChannel + "1*");    // Set Strobe ON
                            TCOSIO_Control.SendMessage(x, "@SI" + objLightSource.ref_intChannel + "00*");   // Set Constant Intensity to 0
                        }

                    }


                    Thread.Sleep(5); // Delay after set intensity to light source controller

                    // Keep light source intensity previous setting
                    m_arrCameraIntensityPrev[i] = objLightSource.ref_intValue;
                }
            }

            if (blnFirstTime)
            {
                InitSaveImageBuffer(m_intGrabRequire);
            }

            // Sorting light source
            LightSource[] arrLightSource = new LightSource[m_smVisionInfo.g_arrLightSource.Count];
            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                int intStartIndex = m_smVisionInfo.g_arrLightSource[i].ref_strType.Length - 1;
                int intLightSourceIndex = Convert.ToInt32(m_smVisionInfo.g_arrLightSource[i].ref_strType.Substring(intStartIndex, 1));

                arrLightSource[intLightSourceIndex] = m_smVisionInfo.g_arrLightSource[i];
            }

            m_smVisionInfo.g_arrLightSource.Clear();
            for (int i = 0; i < arrLightSource.Length; i++)
            {
                m_smVisionInfo.g_arrLightSource.Add(arrLightSource[i]);
            }

            if (m_smCustomizeInfo.g_blnVTControl)
            {
                //channel grouping
                int intChannelNum = 0;
                uint uintGroupNum = 0;
                for (int k = 0; k < m_smVisionInfo.g_arrLightSource.Count; k++)
                {
                    intChannelNum = m_smVisionInfo.g_arrLightSource[k].ref_intChannel;
                    //intChannelNum -= 1;
                    uintGroupNum += Convert.ToUInt32(Math.Pow(2, intChannelNum));
                }
                VT_Control.SetConfigMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
                VT_Control.SetGroupsAvailable(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum);
                //Setting active flag
                for (int m = 0; m < m_intGrabRequire; m++)
                {
                    VT_Control.SetActiveOutFlag(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum, m, 1);
                }
                VT_Control.SetRunMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
            }

            for (int i = 0; i < m_smVisionInfo.g_arrCameraShuttle.Count; i++)
            {
                m_smVisionInfo.g_arrCameraShuttle[i] = objFileHandle.GetValueAsFloat("Shutter" + i.ToString(), 0f);

                if (m_smVisionInfo.g_arrCameraShuttle[i] == 0)
                {
                    m_smVisionInfo.g_arrCameraShuttle[i] = Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle);
                }

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
                    }

                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrCameraGain.Count; i++)
            {
                m_smVisionInfo.g_arrCameraGain[i] = (uint)objFileHandle.GetValueAsInt("Gain" + i.ToString(), 1);

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);

                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrImageGain.Count; i++)
            {
                m_smVisionInfo.g_arrImageGain[i] = objFileHandle.GetValueAsFloat("ImageGain" + i.ToString(), 1);
            }

            for (int i = 0; i < m_smVisionInfo.g_arrImageExtraGain.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrImageExtraGain[i].Count; j++)
                {
                    objFileHandle.GetSecondSection("ImageExtraGain" + i.ToString());
                    m_smVisionInfo.g_arrImageExtraGain[i][j] = objFileHandle.GetValueAsFloat("ImageExtraGain" + i.ToString() + "_" + j.ToString(), 1, 2);
                }
            }

            // Grab for first time after init to active the grab function (bug from IDS)
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                m_objIDSCamera.Grab();

            // Define Image View Count
            m_smVisionInfo.g_intImageViewCount = m_intGrabRequire;

            ImageDrawing.SetImageCount(m_intGrabRequire, m_smVisionInfo.g_intVisionIndex);
            ImageDrawing.SetImageMergeType(m_smVisionInfo.g_intImageMergeType, m_smVisionInfo.g_intVisionIndex);

            if (m_smVisionInfo.g_intSelectedImage >= m_smVisionInfo.g_arrImages.Count)
            {
                m_smVisionInfo.g_intSelectedImage = 0;
            }

            return blnInitSuccess;
        }

        public bool InitCamera_old(int intPort)
        {
            bool blnInitSuccess = true;

            if (m_smVisionInfo.g_strCameraModel == "IDS")
            {
                //if (!m_objIDSCamera.InitializeCamera_AutoSetFrameRate(1))
                if (!m_objIDSCamera.InitializeCamera(1))    // XDW16-001
                    blnInitSuccess = false;
            }
            else
            {
                if (!m_objAVTFireGrab.InitializeCamera(intPort, false))
                    blnInitSuccess = false;
            }
            RegistryKey Key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey = Key.OpenSubKey("SVG\\LightControl", true);
            string[] strLightControlMaskList = subKey.GetValueNames();

            string strCameraFilePath = m_smProductionInfo.g_strRecipePath + m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex] + "\\Camera.xml";
            if (m_smVisionInfo.g_blnGlobalSharingCameraData)
                strCameraFilePath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml";

            XmlParser fileHandle = new XmlParser(m_smProductionInfo.g_strRecipePath + "Camera.xml");
            XmlParser objFileHandle = new XmlParser(strCameraFilePath);
            fileHandle.GetFirstSection(m_smVisionInfo.g_strVisionName);
            objFileHandle.GetFirstSection(m_smVisionInfo.g_strVisionFolderName);

            m_smVisionInfo.g_fCameraShuttle = objFileHandle.GetValueAsFloat("Shutter", 200f);
            if (m_smVisionInfo.g_strCameraModel == "AVT")
            {
                m_objAVTFireGrab.SetCameraParameter(1, Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle));
                m_objAVTFireGrab.SetCameraParameter(4, objFileHandle.GetValueAsUInt("Gamma", 0));
                if (m_smVisionInfo.g_blnViewColorImage)
                {
                    m_objAVTFireGrab.SetCameraParameter(5, objFileHandle.GetValueAsUInt("UBValue", 0));
                    m_objAVTFireGrab.SetCameraParameter(6, objFileHandle.GetValueAsUInt("VRValue", 0));
                }
            }
            else if (m_smVisionInfo.g_strCameraModel == "IDS")
            {
                //m_objIDSCamera.SetShuttle(m_smVisionInfo.g_fCameraShuttle);
            }
            m_smVisionInfo.g_intCameraGrabDelay = objFileHandle.GetValueAsInt("GrabDelay", 5);

            m_smVisionInfo.g_arrLightSource.Clear();

            string[] arrName = subKey.GetSubKeyNames();          // Get Related CommPort List
            for (int x = 0; x < arrName.Length; x++)
            {
                RegistryKey child = subKey.OpenSubKey(arrName[x], true);
                RegistryKey grandChild = child.CreateSubKey(m_smVisionInfo.g_strVisionFolderName);

                string[] arrType = grandChild.GetValueNames();
                for (int i = 0; i < arrType.Length; i++)
                {
                    LightSource objLightSource = new LightSource();
                    objLightSource.ref_strCommPort = arrName[x];
                    objLightSource.ref_strType = arrType[i];
                    objLightSource.ref_intChannel = Convert.ToInt32(grandChild.GetValue(arrType[i], 1));

                    string strSearch = arrType[i].Replace(" ", string.Empty);
                    bool blnLightMaskingFound = false;
                    for (int y = 0; y < strLightControlMaskList.Length; y++)
                    {
                        if (strLightControlMaskList[y].Contains(m_smVisionInfo.g_strVisionName + " - " + arrType[i]))
                            blnLightMaskingFound = true;
                    }
                    if (blnLightMaskingFound)
                        objLightSource.ref_intSeqNo = Convert.ToInt32(subKey.GetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], 1));
                    else
                    {
                        objLightSource.ref_intSeqNo = fileHandle.GetValueAsInt(strSearch, 1);
                        subKey.SetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], objLightSource.ref_intSeqNo);
                    }
                    objLightSource.ref_intValue = objFileHandle.GetValueAsInt(arrType[i], 31);
                    if (objLightSource.ref_intValue > 255)
                        objLightSource.ref_intValue = 255;
                    objLightSource.ref_intPortNo = x;

                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                    {
                        int intCameraOutNo = Convert.ToInt32(objLightSource.ref_strType.Substring(objLightSource.ref_strType.Length - 1));

                        if (intCameraOutNo == 0)
                            m_objAVTFireGrab.OutPort(intCameraOutNo, m_smVisionInfo.g_intTriggerMode);
                        else
                            m_objAVTFireGrab.OutPort(intCameraOutNo, 0);

                    }

                    objLightSource.ref_arrValue = new List<int>();
                    objLightSource.ref_arrImageNo = new List<int>();
                    // Maximum grab 7 times
                    for (int j = 0; j < 7; j++)
                    {
                        if ((objLightSource.ref_intSeqNo & (0x01 << j)) > 0)
                        {
                            if (m_intGrabRequire < (j + 1))
                            {
                                m_intGrabRequire = j + 1; // Get highest grab number
                                for (int k = m_smVisionInfo.g_arrImages.Count; k < m_intGrabRequire; k++)
                                {
                                    if (m_smVisionInfo.g_blnViewColorImage)
                                    {
                                        m_smVisionInfo.g_arrColorImages.Add(new CImageDrawing());
                                        m_smVisionInfo.g_arrColorRotatedImages.Add(new CImageDrawing());
                                    }

                                    m_smVisionInfo.g_arrImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    m_smVisionInfo.g_arrRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    //m_smVisionInfo.g_arrCenterROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    //m_smVisionInfo.g_arrSideROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arr5SRotatedImages[0] == null)
                                    {
                                        m_smVisionInfo.g_arr5SRotatedImages[0] = new List<ImageDrawing>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SRotatedImages[1] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[2] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[3] = new List<ImageDrawing>();
                                            m_smVisionInfo.g_arr5SRotatedImages[4] = new List<ImageDrawing>();
                                        }
                                    }
                                    m_smVisionInfo.g_arr5SRotatedImages[0].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_smVisionInfo.g_arr5SRotatedImages[1].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[2].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[3].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SRotatedImages[4].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                    if (m_smVisionInfo.g_arr5SColorRotatedImages[0] == null)
                                    {
                                        m_smVisionInfo.g_arr5SColorRotatedImages[0] = new List<CImageDrawing>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SColorRotatedImages[1] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[2] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[3] = new List<CImageDrawing>();
                                            m_smVisionInfo.g_arr5SColorRotatedImages[4] = new List<CImageDrawing>();
                                        }
                                    }
                                    m_smVisionInfo.g_arr5SColorRotatedImages[0].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_smVisionInfo.g_arr5SColorRotatedImages[1].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[2].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[3].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arr5SColorRotatedImages[4].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                    }
                                    m_smVisionInfo.g_arrCameraShuttle.Add(new float());
                                    m_smVisionInfo.g_arrCameraGain.Add(new int());
                                    m_smVisionInfo.g_arrImageGain.Add(new float());
                                    m_smVisionInfo.g_arrImageExtraGain.Add(new List<float>(5) { 0, 0, 0, 0, 0 });

                                    if (m_arr5SImageRotated2[0] == null)
                                    {
                                        m_arr5SImageRotated2[0] = new List<bool>();
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_arr5SImageRotated2[1] = new List<bool>();
                                            m_arr5SImageRotated2[2] = new List<bool>();
                                            m_arr5SImageRotated2[3] = new List<bool>();
                                            m_arr5SImageRotated2[4] = new List<bool>();
                                        }
                                    }
                                    m_arr5SImageRotated2[0].Add(false);
                                    if (m_smVisionInfo.g_arrPad.Length > 1)
                                    {
                                        m_arr5SImageRotated2[1].Add(false);
                                        m_arr5SImageRotated2[2].Add(false);
                                        m_arr5SImageRotated2[3].Add(false);
                                        m_arr5SImageRotated2[4].Add(false);
                                    }
                                }
                            }
                            int intCount = objLightSource.ref_arrValue.Count;

                            objLightSource.ref_arrValue.Add(new int());
                            objLightSource.ref_arrImageNo.Add(new int());
                            objFileHandle.GetSecondSection(objLightSource.ref_strType);
                            objLightSource.ref_arrValue[intCount] = objFileHandle.GetValueAsInt("Seq" + intCount.ToString(), 31, 2);
                            objLightSource.ref_arrImageNo[intCount] = j;
                        }
                    }

                    m_smVisionInfo.g_arrLightSource.Add(objLightSource);
                    switch (m_smCustomizeInfo.g_blnLEDiControl)
                    {
                        case true:
                            LEDi_Control.SetIntensity(x, objLightSource.ref_intChannel, Convert.ToByte(objLightSource.ref_intValue));
                            break;
                        case false:
                            TCOSIO_Control.SetIntensity(x, objLightSource.ref_intChannel, objLightSource.ref_intValue);
                            TCOSIO_Control.SendMessage(x, "@ST" + objLightSource.ref_intChannel + "1*");    // Set Strobe ON
                            TCOSIO_Control.SendMessage(x, "@SI" + objLightSource.ref_intChannel + "00*");   // Set Constant Intensity to 0
                            break;
                    }

                    Thread.Sleep(5); // Delay after set intensity to light source controller

                    // Keep light source intensity previous setting
                    m_arrCameraIntensityPrev[i] = objLightSource.ref_intValue;
                }
            }

            // Sorting light source
            LightSource[] arrLightSource = new LightSource[m_smVisionInfo.g_arrLightSource.Count];
            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                int intStartIndex = m_smVisionInfo.g_arrLightSource[i].ref_strType.Length - 1;
                int intLightSourceIndex = Convert.ToInt32(m_smVisionInfo.g_arrLightSource[i].ref_strType.Substring(intStartIndex, 1));

                arrLightSource[intLightSourceIndex] = m_smVisionInfo.g_arrLightSource[i];
            }

            m_smVisionInfo.g_arrLightSource.Clear();
            for (int i = 0; i < arrLightSource.Length; i++)
            {
                m_smVisionInfo.g_arrLightSource.Add(arrLightSource[i]);
            }


            for (int i = 0; i < m_smVisionInfo.g_arrCameraShuttle.Count; i++)
            {
                m_smVisionInfo.g_arrCameraShuttle[i] = objFileHandle.GetValueAsFloat("Shutter" + i.ToString(), 0f);

                if (m_smVisionInfo.g_arrCameraShuttle[i] == 0)
                {
                    m_smVisionInfo.g_arrCameraShuttle[i] = Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle);
                }

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);

                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrCameraGain.Count; i++)
            {
                m_smVisionInfo.g_arrCameraGain[i] = (uint)objFileHandle.GetValueAsInt("Gain" + i.ToString(), 1);

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);

                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrImageGain.Count; i++)
            {
                m_smVisionInfo.g_arrImageGain[i] = objFileHandle.GetValueAsFloat("ImageGain" + i.ToString(), 1);
            }

            for (int i = 0; i < m_smVisionInfo.g_arrImageExtraGain.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrImageExtraGain[i].Count; j++)
                {
                    objFileHandle.GetSecondSection("ImageExtraGain" + i.ToString());
                    m_smVisionInfo.g_arrImageExtraGain[i][j] = objFileHandle.GetValueAsFloat("ImageExtraGain" + i.ToString() + "_" + j.ToString(), 1, 2);
                }
            }

            // Grab for first time after init to active the grab function (bug from IDS)
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                m_objIDSCamera.Grab();

            // Define Image View Count
            m_smVisionInfo.g_intImageViewCount = m_intGrabRequire;
            ImageDrawing.SetImageCount(m_intGrabRequire, m_smVisionInfo.g_intVisionIndex);
            ImageDrawing.SetImageMergeType(m_smVisionInfo.g_intImageMergeType, m_smVisionInfo.g_intVisionIndex);

            if (m_smVisionInfo.g_intSelectedImage >= m_smVisionInfo.g_arrImages.Count)
            {
                m_smVisionInfo.g_intSelectedImage = 0;
            }

            return blnInitSuccess;
        }

        public bool InitCameraSequence(int intPort, String SerialNo, int intResolutionX, int intResolutionY, bool blnFirstTime)
        {
            bool blnInitSuccess = true;

            if (blnFirstTime)
            {
                if (m_smVisionInfo.g_strCameraModel == "IDS")
                {
                    //if (!m_objIDSCamera.InitializeCamera_AutoSetFrameRate(1))
                    if (!m_objIDSCamera.InitializeCamera(1))    // XDW16-001
                        blnInitSuccess = false;
                }
                else if (m_smVisionInfo.g_strCameraModel == "AVT")
                {
                    if (!m_objAVTFireGrab.InitializeCamera(intPort, false))
                        blnInitSuccess = false;
                }
                else if (m_smVisionInfo.g_strCameraModel == "Teli")
                {
                    if (m_blnCustomWantColor)
                    {
                        if (!m_objTeliCamera.InitializeCamera_LowLevelAPI(SerialNo, intResolutionX, intResolutionY, true))
                        {
                            blnInitSuccess = false;
                            SRMMessageBox.Show("Serial No. " + SerialNo + " - " + m_smVisionInfo.g_strVisionDisplayName + " " + m_objTeliCamera.GetErrorMessage());
                        }

                        if (blnInitSuccess)
                        {
                            double dRedRatio = 0, dBlueRatio = 0;
                            m_objTeliCamera.GetWhiteBalance(ref dRedRatio, ref dBlueRatio);
                            
                            m_dRedRatioPrev = m_smVisionInfo.g_dRedRatio = dRedRatio;
                            m_dBlueRatioPrev = m_smVisionInfo.g_dBlueRatio = dBlueRatio;
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_intGrabMode == 0)
                        {
                            if (!m_objTeliCamera.InitializeCamera(SerialNo, intResolutionX, intResolutionY))
                            {
                                blnInitSuccess = false;
                                SRMMessageBox.Show("Serial No. " + SerialNo + " - " + m_smVisionInfo.g_strVisionDisplayName + " " + m_objTeliCamera.GetErrorMessage());
                            }
                        }
                        else
                        {
                            if (!m_objTeliCamera.InitializeCamera_LowLevelAPI(SerialNo, intResolutionX, intResolutionY, false))
                            {
                                blnInitSuccess = false;
                                SRMMessageBox.Show("Serial No. " + SerialNo + " - " + m_smVisionInfo.g_strVisionDisplayName + " " + m_objTeliCamera.GetErrorMessage());
                            }

                            if (blnInitSuccess)
                            {
                                double dRedRatio = 0, dBlueRatio = 0;
                                m_objTeliCamera.GetWhiteBalance(ref dRedRatio, ref dBlueRatio);

                                m_dRedRatioPrev = m_smVisionInfo.g_dRedRatio = dRedRatio;
                                m_dBlueRatioPrev = m_smVisionInfo.g_dBlueRatio = dBlueRatio;
                            }
                        }
                        
                    }
                }
            }
            RegistryKey Key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey = Key.OpenSubKey("SVG\\LightControl", true);
            string[] strLightControlMaskList = subKey.GetValueNames();

            string strCameraFilePath = m_smProductionInfo.g_strRecipePath + m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex] + "\\Camera.xml";
            if (m_smVisionInfo.g_blnGlobalSharingCameraData)
                strCameraFilePath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml";

            XmlParser fileHandle = new XmlParser(m_smProductionInfo.g_strRecipePath + "Camera.xml");
            XmlParser objFileHandle = new XmlParser(strCameraFilePath);

            fileHandle.GetFirstSection(m_smVisionInfo.g_strVisionName);
            objFileHandle.GetFirstSection(m_smVisionInfo.g_strVisionFolderName);

            m_smVisionInfo.g_fCameraShuttle = objFileHandle.GetValueAsFloat("Shutter", 200f);
            if (m_smVisionInfo.g_strCameraModel == "AVT")
            {
                m_objAVTFireGrab.SetCameraParameter(1, Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle));
                m_objAVTFireGrab.SetCameraParameter(4, objFileHandle.GetValueAsUInt("Gamma", 0));
                if (m_smVisionInfo.g_blnViewColorImage)
                {
                    m_objAVTFireGrab.SetCameraParameter(5, objFileHandle.GetValueAsUInt("UBValue", 0));
                    m_objAVTFireGrab.SetCameraParameter(6, objFileHandle.GetValueAsUInt("VRValue", 0));
                }
            }
            else if (m_smVisionInfo.g_strCameraModel == "IDS")
            {
                //m_objIDSCamera.SetShuttle(m_smVisionInfo.g_fCameraShuttle);
            }
            else if (m_smVisionInfo.g_strCameraModel == "Teli")
            {
                if (m_smVisionInfo.g_blnViewColorImage)
                {
                    m_smVisionInfo.g_dRedRatio = objFileHandle.GetValueAsDouble("RedRatio", 2.309997559);
                    m_smVisionInfo.g_dBlueRatio = objFileHandle.GetValueAsDouble("BlueRatio", 2.539978027);
                    m_objTeliCamera.SetWhiteBalance_ForRed(m_smVisionInfo.g_dRedRatio);
                    m_objTeliCamera.SetWhiteBalance_ForBlue(m_smVisionInfo.g_dBlueRatio);
                }
            }

            m_smVisionInfo.g_intCameraGrabDelay = objFileHandle.GetValueAsInt("GrabDelay", 5);

            m_smVisionInfo.g_arrLightSource.Clear();

            string[] arrName = subKey.GetSubKeyNames();          // Get Related CommPort List

            //arrName means comport number
            for (int x = 0; x < arrName.Length; x++)
            {
                RegistryKey child = subKey.OpenSubKey(arrName[x], true);
                RegistryKey grandChild = child.CreateSubKey(m_smVisionInfo.g_strVisionFolderName);

                string[] arrType = grandChild.GetValueNames();

                //arrType means light source type
                for (int i = 0; i < arrType.Length; i++)
                {
                    LightSource objLightSource = new LightSource();
                    objLightSource.ref_strCommPort = arrName[x];
                    objLightSource.ref_strType = arrType[i];

                    objLightSource.ref_intChannel = Convert.ToInt32(grandChild.GetValue(arrType[i], 1));

                    string strSearch = arrType[i].Replace(" ", string.Empty);
                    bool blnLightMaskingFound = false;
                    for (int y = 0; y < strLightControlMaskList.Length; y++)
                    {
                        if (strLightControlMaskList[y].Contains(m_smVisionInfo.g_strVisionName + " - " + arrType[i]))
                            blnLightMaskingFound = true;
                    }
                    if (blnLightMaskingFound)
                        objLightSource.ref_intSeqNo = Convert.ToInt32(subKey.GetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], 1));
                    else
                    {
                        objLightSource.ref_intSeqNo = fileHandle.GetValueAsInt(strSearch, 1);
                        subKey.SetValue(m_smVisionInfo.g_strVisionName + " - " + arrType[i], objLightSource.ref_intSeqNo);
                    }
                    objLightSource.ref_intValue = 31;// objFileHandle.GetValueAsInt(arrType[i], 31); 2019-09-12 ZJYEOH : do not read this value from XML file because it combine all intensity value in the light source sequence which will exceed 32 bit integer value when have 5 grab 
                    if (objLightSource.ref_intValue > 255)
                        objLightSource.ref_intValue = 255;
                    objLightSource.ref_intPortNo = x;
                    objLightSource.ref_PHValue = objFileHandle.GetValueAsInt("PH" + strSearch, 31, 1);

                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                    {
                        //Need to change
                        m_objAVTFireGrab.OutPort(0, m_smVisionInfo.g_intTriggerMode);
                        Thread.Sleep(10);
                        m_objAVTFireGrab.OutPort(1, 5);
                    }
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                    {
                        m_objTeliCamera.OutPort(0, m_smVisionInfo.g_intTriggerMode);
                        Thread.Sleep(10);
                        m_objTeliCamera.OutPort(1, 0);
                    }

                    objLightSource.ref_arrValue = new List<int>();
                    objLightSource.ref_arrImageNo = new List<int>();
                    // Maximum grab 7 times
                    for (int j = 0; j < 7; j++)
                    {
                        if ((objLightSource.ref_intSeqNo & (0x01 << j)) > 0)
                        {
                            if (m_intGrabRequire < (j + 1))
                            {
                                m_intGrabRequire = j + 1; // Get highest grab number
                                for (int k = m_smVisionInfo.g_arrImages.Count; k < m_intGrabRequire; k++)
                                {
                                    if (blnFirstTime)
                                    {
                                        if (m_smVisionInfo.g_blnViewColorImage)
                                        {
                                            m_smVisionInfo.g_arrColorImages.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arrColorRotatedImages.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arrMemoryColorImage.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        }
                                      
                                        m_smVisionInfo.g_arrMemoryImage.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arrImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        m_smVisionInfo.g_arrRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        //m_smVisionInfo.g_arrCenterROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        //m_smVisionInfo.g_arrSideROIRotatedImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        if (m_smVisionInfo.g_arr5SRotatedImages[0] == null)
                                        {
                                            m_smVisionInfo.g_arr5SRotatedImages[0] = new List<ImageDrawing>();
                                            if (m_smVisionInfo.g_arrPad.Length > 1)
                                            {
                                                m_smVisionInfo.g_arr5SRotatedImages[1] = new List<ImageDrawing>();
                                                m_smVisionInfo.g_arr5SRotatedImages[2] = new List<ImageDrawing>();
                                                m_smVisionInfo.g_arr5SRotatedImages[3] = new List<ImageDrawing>();
                                                m_smVisionInfo.g_arr5SRotatedImages[4] = new List<ImageDrawing>();
                                            }
                                        }
                                        m_smVisionInfo.g_arr5SRotatedImages[0].Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));

                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SRotatedImages[1].Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SRotatedImages[2].Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SRotatedImages[3].Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SRotatedImages[4].Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        }
                                        if (m_smVisionInfo.g_arr5SColorRotatedImages[0] == null)
                                        {
                                            m_smVisionInfo.g_arr5SColorRotatedImages[0] = new List<CImageDrawing>();
                                            if (m_smVisionInfo.g_arrPad.Length > 1)
                                            {
                                                m_smVisionInfo.g_arr5SColorRotatedImages[1] = new List<CImageDrawing>();
                                                m_smVisionInfo.g_arr5SColorRotatedImages[2] = new List<CImageDrawing>();
                                                m_smVisionInfo.g_arr5SColorRotatedImages[3] = new List<CImageDrawing>();
                                                m_smVisionInfo.g_arr5SColorRotatedImages[4] = new List<CImageDrawing>();
                                            }
                                        }
                                        m_smVisionInfo.g_arr5SColorRotatedImages[0].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_smVisionInfo.g_arr5SColorRotatedImages[1].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SColorRotatedImages[2].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SColorRotatedImages[3].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            m_smVisionInfo.g_arr5SColorRotatedImages[4].Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                        }
                                        m_smVisionInfo.g_arrCameraShuttle.Add(new float());
                                        m_smVisionInfo.g_arrCameraGain.Add(new int());
                                        m_smVisionInfo.g_arrImageGain.Add(new float());
                                        m_smVisionInfo.g_arrImageExtraGain.Add(new List<float>(5) { 0, 0, 0, 0, 0 });

                                        if (m_arr5SImageRotated2[0] == null)
                                        {
                                            m_arr5SImageRotated2[0] = new List<bool>();
                                            if (m_smVisionInfo.g_arrPad.Length > 1)
                                            {
                                                m_arr5SImageRotated2[1] = new List<bool>();
                                                m_arr5SImageRotated2[2] = new List<bool>();
                                                m_arr5SImageRotated2[3] = new List<bool>();
                                                m_arr5SImageRotated2[4] = new List<bool>();
                                            }
                                        }

                                        m_arr5SImageRotated2[0].Add(false);
                                        if (m_smVisionInfo.g_arrPad.Length > 1)
                                        {
                                            m_arr5SImageRotated2[1].Add(false);
                                            m_arr5SImageRotated2[2].Add(false);
                                            m_arr5SImageRotated2[3].Add(false);
                                            m_arr5SImageRotated2[4].Add(false);
                                        }
                                    }
                                }
                            }
                            int intCount = objLightSource.ref_arrValue.Count;

                            objLightSource.ref_arrValue.Add(new int());
                            objLightSource.ref_arrImageNo.Add(new int());
                            objFileHandle.GetSecondSection(objLightSource.ref_strType);
                            objLightSource.ref_arrValue[intCount] = objFileHandle.GetValueAsInt("Seq" + intCount.ToString(), 31, 2);

                            objLightSource.ref_arrImageNo[intCount] = j;
                        }
                    }

                    m_smVisionInfo.g_arrLightSource.Add(objLightSource);

                    // Keep light source intensity previous setting
                    m_arrCameraIntensityPrev[i] = objLightSource.ref_intValue;
                }
            }

            if (blnFirstTime)
            {
                InitSaveImageBuffer(m_intGrabRequire);
            }

            // Sorting light source
            LightSource[] arrLightSource = new LightSource[m_smVisionInfo.g_arrLightSource.Count];
            for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
            {
                int intStartIndex = m_smVisionInfo.g_arrLightSource[i].ref_strType.Length - 1;
                int intLightSourceIndex = Convert.ToInt32(m_smVisionInfo.g_arrLightSource[i].ref_strType.Substring(intStartIndex, 1));

                arrLightSource[intLightSourceIndex] = m_smVisionInfo.g_arrLightSource[i];
            }

            m_smVisionInfo.g_arrLightSource.Clear();
            for (int i = 0; i < arrLightSource.Length; i++)
            {
                m_smVisionInfo.g_arrLightSource.Add(arrLightSource[i]);
            }

            //2020-10-12 ZJYEOH : Reassign intensity value based on Image Display Mode
            if (m_smVisionInfo.g_arrLightSource.Count > 4 && m_smVisionInfo.g_intImageDisplayMode == 1 && m_smVisionInfo.g_intImageMergeType == 2)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
                {

                    for (int j = 0; j < m_smVisionInfo.g_arrLightSource[i].ref_arrValue.Count; j++)
                    {
                        switch (m_smVisionInfo.g_arrLightSource[i].ref_arrImageNo[j])
                        {
                            case 1: //Top Left
                                if (j == 1 && ((i % 2) != 0))
                                    m_smVisionInfo.g_arrLightSource[i].ref_arrValue[j] = 0;
                                break;
                            case 2: //Bottom Right
                                if (j == 2 && ((i % 2) == 0))
                                    m_smVisionInfo.g_arrLightSource[i].ref_arrValue[j] = 0;
                                break;
                            case 0: // Center
                            default: // Other
                                if ((j == 0 || j > 2) && ((i % 2) != 0))
                                    m_smVisionInfo.g_arrLightSource[i].ref_arrValue[j] = m_smVisionInfo.g_arrLightSource[i - 1].ref_arrValue[j];
                                break;
                        }
                    }
                }

                //Save Updated Value
                string strFilePath = m_smProductionInfo.g_strRecipePath + m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex] +
                 "\\Camera.xml";
                if (m_smVisionInfo.g_blnGlobalSharingCameraData)
                    strFilePath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml";

                XmlParser objFile = new XmlParser(strFilePath);
                objFile.WriteSectionElement(m_smVisionInfo.g_strVisionFolderName);
                
                
                STDeviceEdit.CopySettingFile(strFilePath, "");

                for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
                {
                    objFile.WriteElement1Value(m_smVisionInfo.g_arrLightSource[i].ref_strType, "");
                    for (int j = 0; j < m_smVisionInfo.g_arrLightSource[i].ref_arrValue.Count; j++)
                    {
                        objFile.WriteElement2Value("Seq" + j.ToString(), m_smVisionInfo.g_arrLightSource[i].ref_arrValue[j]);
                    }
                }
                objFile.WriteEndElement();
                STDeviceEdit.XMLChangesTracing(m_smVisionInfo.g_strVisionFolderName + ">", m_smProductionInfo.g_strLotID);
                
            }

            if (!m_smCustomizeInfo.g_blnMixController)
            {
                if (m_smCustomizeInfo.g_blnLEDiControl)
                {
                    List<int> arrCOMList = new List<int>();
                    for (int i = 0; i < m_smVisionInfo.g_arrLightSource.Count; i++)
                    {
                        bool blnFound = false;
                        for (int c = 0; c < arrCOMList.Count; c++)
                        {
                            if (arrCOMList[c] == m_smVisionInfo.g_arrLightSource[i].ref_intPortNo)
                            {
                                blnFound = true;
                                break;
                            }
                        }

                        if (!blnFound)
                            arrCOMList.Add(m_smVisionInfo.g_arrLightSource[i].ref_intPortNo);
                    }

                    //Set to stop mode
                    for (int c = 0; c < arrCOMList.Count; c++)
                        LEDi_Control.RunStop(arrCOMList[c], 0, false);  //LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, false);

                    Thread.Sleep(10);
                    for (int i = 0; i < m_intGrabRequire; i++)
                    {
                        int intValue1 = 0;
                        int intValue2 = 0;
                        int intValue3 = 0;
                        int intValue4 = 0;
                        int intValue5 = 0;
                        int intValue6 = 0;
                        int intValue7 = 0;
                        int intValue8 = 0;

                        if (m_intGrabRequire > 0)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                            {
                                int intValueNo = 0;

                                // Due to some light source only ON for second image so its intensity value is at array no. 0.
                                // So we need to loop to find which array no. is for that image
                                for (int k = 0; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
                                {
                                    // if this image no is in array k
                                    if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                                    {
                                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == i)
                                        {
                                            intValueNo = k;

                                            switch (j)
                                            {
                                                case 0:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue1 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 1:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue2 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 2:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue3 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 3:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue4 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 4:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue5 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 5:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue6 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 6:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue7 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 7:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue8 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }

                            // 2021 04 20 - CCENG: Reupdate intensity according to image display mode
                            LEDi_Control.UpdateIntensityValueAccordingToImageDisplayMode(m_smVisionInfo.g_intImageDisplayMode, i,
                                                                                        ref intValue1, ref intValue2, ref intValue3, ref intValue4,
                                                                                        ref intValue5, ref intValue6, ref intValue7, ref intValue8);

                            //Set all light source for sequence light controller for each grab
                            //LEDi_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, i, intValue1, intValue2, intValue3, intValue4);

                            if (arrCOMList.Count > 0)
                                LEDi_Control.SetSeqIntensity(arrCOMList[0], 0, i, intValue1, intValue2, intValue3, intValue4);
                            if (arrCOMList.Count > 1)
                                LEDi_Control.SetSeqIntensity(arrCOMList[1], 0, i, intValue5, intValue6, intValue7, intValue8);

                            Thread.Sleep(10);
                        }
                    }
                    for (int c = 0; c < arrCOMList.Count; c++)
                        LEDi_Control.SaveIntensity(arrCOMList[c], 0); //LEDi_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0);
                    Thread.Sleep(100);
                    //Set to run mode
                    for (int i = 0; i < arrCOMList.Count; i++)
                        LEDi_Control.RunStop(arrCOMList[i], 0, true);   // LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, true);
                    Thread.Sleep(10);
                }
                #region VTControl
                else if (m_smCustomizeInfo.g_blnVTControl)
                {
                    //channel grouping
                    int intChannelNum = 0;
                    uint uintGroupNum = 0;
                    for (int k = 0; k < m_smVisionInfo.g_arrLightSource.Count; k++)
                    {
                        intChannelNum = m_smVisionInfo.g_arrLightSource[k].ref_intChannel;
                        //intChannelNum -= 1;
                        uintGroupNum += Convert.ToUInt32(Math.Pow(2, intChannelNum));
                    }

                    TrackLog objTL = new TrackLog();
                    objTL.WriteLine("m_smVisionInfo.g_arrLightSource[0].ref_intPortNo=" + m_smVisionInfo.g_arrLightSource[0].ref_intPortNo.ToString());
                    objTL.WriteLine("uintGroupNum=" + uintGroupNum.ToString());
                    VT_Control.SetConfigMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
                    VT_Control.SetGroupsAvailable(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum);

                    //Setting active flag
                    for (int m = 0; m < m_intGrabRequire; m++)
                    {
                        objTL.WriteLine("SetActiveOutFlag m=" + m.ToString());
                        VT_Control.SetActiveOutFlag(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum, m, 1);
                    }

                    for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                    {
                        int intCount = 0;
                        for (int i = 0; i < m_intGrabRequire; i++)
                        {
                            if (m_intGrabRequire > 0)
                            {
                                // if this image no is in array intCount
                                if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                                {
                                    if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo.Count != intCount)
                                    {
                                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[intCount] == i)
                                        {
                                            objTL.WriteLine("Set Seq Intensity A Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                            ", i=" + i.ToString() +
                                                            ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                            ", value=" + m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intCount].ToString());
                                            VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intCount]);
                                            intCount++;
                                        }
                                        else
                                        {
                                            objTL.WriteLine("Set Seq Intensity B Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                            ", i=" + i.ToString() +
                                                            ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                            ", value=0");

                                            VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);
                                        }
                                    }
                                    else
                                    {
                                        objTL.WriteLine("Set Seq Intensity C Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                        ", i=" + i.ToString() +
                                                        ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                        ", value=0");
                                        VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);
                                    }
                                }
                            }
                        }
                        //VT_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, m_smVisionInfo.g_arrLightSource[j].ref_intChannel);
                    }
                    objTL.WriteLine("SetRunMode=" + m_smVisionInfo.g_arrLightSource[0].ref_intPortNo.ToString());
                    VT_Control.SetRunMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
                }
                #endregion
            }
            #region m_intLightControlModel!=2
            else
            {
                if (m_intLightControlModel == 0)    // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    //Set to stop mode
                    LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, false);
                    Thread.Sleep(10);
                    for (int i = 0; i < m_intGrabRequire; i++)
                    {
                        int intValue1 = 0;
                        int intValue2 = 0;
                        int intValue3 = 0;
                        int intValue4 = 0;

                        if (m_intGrabRequire > 0)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                            {
                                int intValueNo = 0;

                                // Due to some light source only ON for second image so its intensity value is at array no. 0.
                                // So we need to loop to find which array no. is for that image
                                for (int k = 0; k < m_smVisionInfo.g_arrLightSource[j].ref_arrValue.Count; k++)
                                {
                                    // if this image no is in array k
                                    if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                                    {
                                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[k] == i)
                                        {
                                            intValueNo = k;

                                            switch (j)
                                            {
                                                case 0:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue1 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 1:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue2 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 2:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue3 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                                case 3:
                                                    if ((m_smVisionInfo.g_arrLightSource[j].ref_intSeqNo & (0x01 << i)) > 0)
                                                    {
                                                        intValue4 = m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intValueNo];
                                                    }
                                                    break;
                                            }

                                            break;
                                        }
                                    }
                                }
                            }
                            //Set all light source for sequence light controller for each grab
                            LEDi_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, i, intValue1, intValue2, intValue3, intValue4);
                            Thread.Sleep(10);
                            TrackLog objTL = new TrackLog();
                            objTL.WriteLine("Vision 3");
                            objTL.WriteLine("Sequence number: " + i.ToString());
                            objTL.WriteLine("Com: " + m_smVisionInfo.g_arrLightSource[0].ref_intPortNo.ToString());
                            objTL.WriteLine("Intensity 1: " + intValue1.ToString());
                            objTL.WriteLine("Intensity 2: " + intValue2.ToString());
                            objTL.WriteLine("Intensity 3: " + intValue3.ToString());
                            objTL.WriteLine("Intensity 4: " + intValue4.ToString());
                        }
                    }
                    LEDi_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0);
                    Thread.Sleep(100);
                    //Set to run mode
                    LEDi_Control.RunStop(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, 0, true);
                    Thread.Sleep(10);
                }
                else if (m_intLightControlModel == 1)   // 2018 07 13 - CCENG: Temporary force to use VTControl
                {
                    //channel grouping
                    int intChannelNum = 0;
                    uint uintGroupNum = 0;
                    for (int k = 0; k < m_smVisionInfo.g_arrLightSource.Count; k++)
                    {
                        intChannelNum = m_smVisionInfo.g_arrLightSource[k].ref_intChannel;
                        //intChannelNum -= 1;
                        uintGroupNum += Convert.ToUInt32(Math.Pow(2, intChannelNum));
                    }

                    TrackLog objTL = new TrackLog();
                    objTL.WriteLine("m_smVisionInfo.g_arrLightSource[0].ref_intPortNo=" + m_smVisionInfo.g_arrLightSource[0].ref_intPortNo.ToString());
                    objTL.WriteLine("uintGroupNum=" + uintGroupNum.ToString());
                    VT_Control.SetConfigMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
                    VT_Control.SetGroupsAvailable(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum);

                    //Setting active flag
                    for (int m = 0; m < m_intGrabRequire; m++)
                    {
                        objTL.WriteLine("SetActiveOutFlag m=" + m.ToString());
                        VT_Control.SetActiveOutFlag(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo, uintGroupNum, m, 1);
                    }

                    for (int j = 0; j < m_smVisionInfo.g_arrLightSource.Count; j++)
                    {
                        int intCount = 0;
                        for (int i = 0; i < m_intGrabRequire; i++)
                        {
                            if (m_intGrabRequire > 0)
                            {
                                // if this image no is in array intCount
                                if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo != null)
                                {
                                    if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo.Count != intCount)
                                    {
                                        if (m_smVisionInfo.g_arrLightSource[j].ref_arrImageNo[intCount] == i)
                                        {
                                            objTL.WriteLine("Set Seq Intensity A Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                            ", i=" + i.ToString() +
                                                            ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                            ", value=" + m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intCount].ToString());
                                            VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, m_smVisionInfo.g_arrLightSource[j].ref_arrValue[intCount]);
                                            intCount++;
                                        }
                                        else
                                        {
                                            objTL.WriteLine("Set Seq Intensity B Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                            ", i=" + i.ToString() +
                                                            ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                            ", value=0");

                                            VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);
                                        }
                                    }
                                    else
                                    {
                                        objTL.WriteLine("Set Seq Intensity C Port=" + m_smVisionInfo.g_arrLightSource[j].ref_intPortNo.ToString() +
                                                        ", i=" + i.ToString() +
                                                        ", channel=" + m_smVisionInfo.g_arrLightSource[j].ref_intChannel.ToString() +
                                                        ", value=0");
                                        VT_Control.SetSeqIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, i, m_smVisionInfo.g_arrLightSource[j].ref_intChannel, 0);
                                    }
                                }
                            }
                        }
                        //VT_Control.SaveIntensity(m_smVisionInfo.g_arrLightSource[j].ref_intPortNo, m_smVisionInfo.g_arrLightSource[j].ref_intChannel);
                    }
                    objTL.WriteLine("SetRunMode=" + m_smVisionInfo.g_arrLightSource[0].ref_intPortNo.ToString());
                    VT_Control.SetRunMode(m_smVisionInfo.g_arrLightSource[0].ref_intPortNo);
                }
            }
            #endregion
            m_smVisionInfo.g_fPHCameraShuttle = objFileHandle.GetValueAsFloat("PHShutter", 200f);
            for (int i = 0; i < m_smVisionInfo.g_arrCameraShuttle.Count; i++)
            {
                m_smVisionInfo.g_arrCameraShuttle[i] = objFileHandle.GetValueAsFloat("Shutter" + i.ToString(), 0f);

                if (m_smVisionInfo.g_arrCameraShuttle[i] == 0)
                {
                    m_smVisionInfo.g_arrCameraShuttle[i] = Convert.ToUInt32(m_smVisionInfo.g_fCameraShuttle);
                }

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(1, (uint)m_smVisionInfo.g_arrCameraShuttle[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetShuttle(m_smVisionInfo.g_arrCameraShuttle[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objTeliCamera.SetCameraParameter(1, m_smVisionInfo.g_arrCameraShuttle[i]);
                    m_fCameraShuttlePrev = m_smVisionInfo.g_arrCameraShuttle[i];
                }
            }
            m_smVisionInfo.g_uintPHCameraGain = (uint)objFileHandle.GetValueAsInt("PHGain", 20);
            for (int i = 0; i < m_smVisionInfo.g_arrCameraGain.Count; i++)
            {
                m_smVisionInfo.g_arrCameraGain[i] = (uint)objFileHandle.GetValueAsInt("Gain" + i.ToString(), 1);

                if (i == 0)
                {
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objAVTFireGrab.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objIDSCamera.SetGain((int)m_smVisionInfo.g_arrCameraGain[i]);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objTeliCamera.SetCameraParameter(2, m_smVisionInfo.g_arrCameraGain[i]);

                    m_intCameraGainPrev = m_smVisionInfo.g_arrCameraGain[i];
                }
            }
            m_smVisionInfo.g_fPHImageGain = objFileHandle.GetValueAsFloat("PHImageGain", 1);
            for (int i = 0; i < m_smVisionInfo.g_arrImageGain.Count; i++)
            {
                m_smVisionInfo.g_arrImageGain[i] = objFileHandle.GetValueAsFloat("ImageGain" + i.ToString(), 1);
            }

            for (int i = 0; i < m_smVisionInfo.g_arrImageExtraGain.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrImageExtraGain[i].Count; j++)
                {
                    objFileHandle.GetSecondSection("ImageExtraGain" + i.ToString());
                    m_smVisionInfo.g_arrImageExtraGain[i][j] = objFileHandle.GetValueAsFloat("ImageExtraGain" + i.ToString() + "_" + j.ToString(), 1, 2);
                }
            }

            // Grab for first time after init to active the grab function (bug from IDS)
            if (m_smVisionInfo.g_strCameraModel == "IDS")
                m_objIDSCamera.Grab();

            //Load system ROI
            if (m_smVisionInfo.g_intImageMergeType != 0)
            {
                LoadSystemROISetting();
            }

            // Define Image View Count
            switch (m_smVisionInfo.g_intImageMergeType)
            {
                default:
                case 0:
                    {
                        m_smVisionInfo.g_intImageViewCount = m_intGrabRequire;
                    }
                    break;
                case 1:
                    {
                        // Merge 1 and 2 to Image View 1
                        m_smVisionInfo.g_intImageViewCount = m_intGrabRequire - 1;
                    }
                    break;
                case 2:
                    {
                        // Merge 1, 2, and 3 to Image View 1
                        m_smVisionInfo.g_intImageViewCount = m_intGrabRequire - 2;
                    }
                    break;
                case 3:
                    {
                        if (m_intGrabRequire < 4)
                        {
                            // Merge 1 and 2 to Image View 1 since have 3 images only.
                            m_smVisionInfo.g_intImageViewCount = m_intGrabRequire - 1;
                        }
                        else
                        {
                            // Merge 1 and 2 to Image View 1; Merge 3 and 4 to Image View 2
                            m_smVisionInfo.g_intImageViewCount = m_intGrabRequire - 2;
                        }
                    }
                    break;
                case 4:
                    {
                        // Merge 1, 2, and 3 to Image View 1, and Merge 4, 5 to Image View 2
                        m_smVisionInfo.g_intImageViewCount = m_intGrabRequire - 3;
                    }
                    break;
            }

            ImageDrawing.SetImageCount(m_intGrabRequire, m_smVisionInfo.g_intVisionIndex);
            ImageDrawing.SetImageMergeType(m_smVisionInfo.g_intImageMergeType, m_smVisionInfo.g_intVisionIndex);
            if (m_smVisionInfo.g_blnViewColorImage)
            {
                CImageDrawing.SetImageCount(m_intGrabRequire, m_smVisionInfo.g_intVisionIndex);
                CImageDrawing.SetImageMergeType(m_smVisionInfo.g_intImageMergeType, m_smVisionInfo.g_intVisionIndex);
            }

            if (m_smVisionInfo.g_blnViewColorImage)
            {
                if (m_smVisionInfo.g_intSelectedImage >= m_smVisionInfo.g_arrColorImages.Count)
                {
                    m_smVisionInfo.g_intSelectedImage = 0;
                }
            }
            else
            {
                if (m_smVisionInfo.g_intSelectedImage >= m_smVisionInfo.g_arrImages.Count)
                {
                    m_smVisionInfo.g_intSelectedImage = 0;
                }
            }

            return blnInitSuccess;
        }



        /// <summary>
        /// Tells the thread to stop, typically after completing its 
        /// current work item.
        /// </summary>
        public void StopThread()
        {
            //lock (m_objStopLock)
            {
                m_blnStopping = true;
            }

            WaitAllThreadStopped();
        }

        public void PauseThread()
        {
            m_blnPause = true;
        }

        public void StartThread()
        {
            m_blnPause = false;
        }

        /// <summary>
        /// Attach corresponding image to its parent or ROI
        /// </summary>
        private void AttachImageToROI()
        {
            if (m_smVisionInfo.g_blnPixelGrayMaxRangeON)
            {
                if (m_smVisionInfo.g_fPixelGrayMaxRange == -1)
                {
                    m_smVisionInfo.g_arrImages[0].CopyTo(ref m_objTempImage);
                    m_smVisionInfo.g_fPixelGrayMaxRange = 0;
                }
                else
                {
                    if (m_objDestImage == null)
                    {
                        m_objDestImage = new ImageDrawing();
                    }
                    ImageDrawing.SubtractImage(m_objTempImage, m_smVisionInfo.g_arrImages[0], m_objDestImage);

                    int intHighestGrayValue = ImageDrawing.GetHightPixelGrayValue(m_objDestImage);

                    if (m_smVisionInfo.g_fPixelGrayMaxRange < intHighestGrayValue)
                    {
                        m_smVisionInfo.g_fPixelGrayMaxRange = intHighestGrayValue;
                    }
                }
            }

            //m_smVisionInfo.g_arrImages[0].CopyTo(m_smVisionInfo.g_arrRotatedImages[0]);
            //if (m_smVisionInfo.g_arrImages.Count > 1)
            //    m_smVisionInfo.g_arrImages[1].CopyTo(m_smVisionInfo.g_arrRotatedImages[1]);
            //if (m_smVisionInfo.g_arrImages.Count > 2)
            //    m_smVisionInfo.g_arrImages[2].CopyTo(m_smVisionInfo.g_arrRotatedImages[2]);

            m_smVisionInfo.g_objCameraROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
            m_smVisionInfo.g_objCalibrateROI.AttachImage(m_smVisionInfo.g_arrImages[0]);

            if (m_blnCustomWantPad || m_blnCustomWant5S)
            {
                AttachToROI(m_smVisionInfo.g_arrPadROIs, m_smVisionInfo.g_arrImages[0]);

                if (m_blnCustomWantPositioning)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                        m_smVisionInfo.g_arrPositioningROIs[i].AttachImage(m_smVisionInfo.g_arrImages[0]);
                }
            }

            if (m_blnCustomWantPositioning)
                m_smVisionInfo.g_objPositioning.ref_objCrosshair.AttachImage(m_smVisionInfo.g_arrImages[0]);

            m_smVisionInfo.VS_VM_UpdateSmallPictureBox = true;

        }

        /// <summary>
        /// Attach ROI to its parent ROI or parent image
        /// </summary>
        /// <param name="arrROI">ROI</param>
        /// <param name="objImage">parent image</param>
        private void AttachToROI(List<List<ROI>> arrROIs, ImageDrawing objImage)
        {
            ROI objROI;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    objROI = arrROIs[i][j];

                    switch (objROI.ref_intType)
                    {
                        case 1:
                            objROI.AttachImage(objImage);   // Attach Search ROI to image
                            break;
                        case 2:
                            objROI.AttachImage(arrROIs[i][0]);  // Attach Gauge ROI and Package ROI to Search ROI
                            break;
                        case 3:
                            if (objROI.ref_strROIName == "Don't Care ROI")
                                objROI.AttachImage(arrROIs[i][2]);          // Attach Dont care ROI to Package ROI
                            else
                                objROI.AttachImage(arrROIs[i][1]);          // Attach other ROI to Gauge ROI (if have)
                            break;
                    }
                    arrROIs[i][j] = objROI;
                }
            }

            objROI = null;
        }

        /// <summary>
        /// Trigger alarm if low yield 
        /// </summary>
        private void CheckLowYield()
        {
            if (!m_smVisionInfo.g_blnStopLowYield)//m_smCustomizeInfo.g_blnStopLowYield)
                return;

            if (m_smVisionInfo.g_intTestedTotal != 0)
            {
                float fYield = m_smVisionInfo.g_intPassTotal / (float)m_smVisionInfo.g_intTestedTotal * 100;
                if ((fYield <= m_smVisionInfo.g_fLowYield) && (m_smVisionInfo.g_intLowYieldUnitCount >= m_smVisionInfo.g_intMinUnitCheck)) //m_smCustomizeInfo.g_fLowYield , m_smCustomizeInfo.g_intMinUnitCheck
                {
                    m_smProductionInfo.PR_AT_StopProduction = true;
                    m_smVisionInfo.g_intMachineStatus = 1;
                    m_smVisionInfo.g_intLowYieldUnitCount = 0;
                    m_smVisionInfo.g_strErrorMessage += "Low Yield Fail!";
                }
            }
        }
        private void CheckContinuousPass()
        {
            if (!m_smVisionInfo.g_blnStopContinuousPass)
                return;

            if (m_smVisionInfo.g_intTestedTotal != 0)
            {
                if (m_smVisionInfo.g_intContinuousPassUnitCount >= m_smVisionInfo.g_intMinPassUnit)
                {
                    m_smProductionInfo.PR_AT_StopProduction = true;
                    m_smVisionInfo.g_intMachineStatus = 1;
                    m_smVisionInfo.g_intContinuousPassUnitCount = 0;
                    m_smVisionInfo.g_strErrorMessage += "*Continuous Pass " + m_smVisionInfo.g_intMinPassUnit.ToString() + " Unit(s)!";
                }
            }
        }

        private void CheckContinuousFail()
        {
            if (!m_smVisionInfo.g_blnStopContinuousFail)
                return;

            if (m_smVisionInfo.g_intTestedTotal != 0)
            {
                if (m_smVisionInfo.g_intContinuousFailUnitCount >= m_smVisionInfo.g_intMinFailUnit)
                {
                    m_smProductionInfo.PR_AT_StopProduction = true;
                    m_smVisionInfo.g_intMachineStatus = 1;
                    m_smVisionInfo.g_intContinuousFailUnitCount = 0;
                    m_smVisionInfo.g_strErrorMessage += "*Continuous Fail " + m_smVisionInfo.g_intMinFailUnit.ToString() + " Unit(s)!";
                }
            }
        }
        private void GetCustomTest()
        {
            if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWantPad = true;
            }

            if ((m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWant5S = true;
            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWantPackage = true;
            }

            if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWantPositioning = true;
            }

            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWantOrient = true;
            }

            if ((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_blnCustomWantColor = true;
            }

        }

        private void RecordGRR()
        {
            // Check GRR turn ON or not
            if (!m_smVisionInfo.g_blnGRRON)
                return;

            try
            {
                string strSampleBlobsFeatures;
                string[] strSampleFeature = new string[100];
                int intPadNumber = m_smVisionInfo.g_arrPad[0].GetBlobsFeaturesNumber();

                for (int i = 0; i < intPadNumber; i++)
                {
                    //// Get current sample value
                    strSampleBlobsFeatures = m_smVisionInfo.g_arrPad[0].GetBlobFeaturesResult(i);
                    strSampleFeature = strSampleBlobsFeatures.Split('#');

                    for (int j = 0; j < strSampleFeature.Length; j++)
                    {
                        if (strSampleFeature[j] == "---")
                            strSampleFeature[j] = "-999";
                    }

                    if (!m_smVisionInfo.g_objGRR.Record(0, i, Convert.ToSingle(strSampleFeature[1])))
                        return;
                    if (!m_smVisionInfo.g_objGRR.Record(1, i, Convert.ToSingle(strSampleFeature[2])))
                        return;
                    if (!m_smVisionInfo.g_objGRR.Record(2, i, Convert.ToSingle(strSampleFeature[3])))
                        return;
                    if (!m_smVisionInfo.g_objGRR.Record(3, i, Convert.ToSingle(strSampleFeature[4])))
                        return;
                    if (!m_smVisionInfo.g_objGRR.Record(4, i, Convert.ToSingle(strSampleFeature[5])))
                        return;
                    if (!m_smVisionInfo.g_objGRR.Record(5, i, Convert.ToSingle(strSampleFeature[6])))
                        return;
                }

                m_smVisionInfo.g_objGRR.NextIndex();
            }
            catch (Exception ex)
            {
                SRMMessageBox.Show("Vision 3 GRR Error: " + ex.ToString());
            }
        }

        private void RecordGRR2()
        {
            // Check GRR turn ON or not
            if (!m_smVisionInfo.g_blnGRRON)
                return;

            try
            {
                string strSampleBlobsFeatures;
                string[] strSampleFeature = new string[100];

                int intRecordIndex = 0;
                string strPadName = "";
                for (int p = 0; p < m_smVisionInfo.g_arrPad.Length; p++)
                {
                    if (p > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    switch (p)
                    {
                        case 0:
                            strPadName = "Middle Pad ";
                            break;
                        case 1:
                            strPadName = "Top Pad ";
                            break;
                        case 2:
                            strPadName = "Right Pad ";
                            break;
                        case 3:
                            strPadName = "Bottom Pad ";
                            break;
                        case 4:
                            strPadName = "Left Pad ";
                            break;
                    }

                    int intPadNumber = m_smVisionInfo.g_arrPad[p].GetBlobsFeaturesNumber();

                    for (int i = 0; i < intPadNumber; i++)
                    {
                        //// Get current sample value
                        strSampleBlobsFeatures = m_smVisionInfo.g_arrPad[p].GetBlobFeaturesResult(i);
                        strSampleFeature = strSampleBlobsFeatures.Split('#');

                        for (int j = 0; j < strSampleFeature.Length; j++)
                        {
                            if (strSampleFeature[j] == "---")
                                strSampleFeature[j] = "-999";
                        }

                        if (!m_smVisionInfo.g_objGRR.Record(0, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[1])))
                            return;
                        if (!m_smVisionInfo.g_objGRR.Record(1, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[2])))
                            return;
                        if (!m_smVisionInfo.g_objGRR.Record(2, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[3])))
                            return;
                        if (!m_smVisionInfo.g_objGRR.Record(3, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[4])))
                            return;
                        if (!m_smVisionInfo.g_objGRR.Record(4, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[5])))
                            return;
                        if (!m_smVisionInfo.g_objGRR.Record(5, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(strSampleFeature[6])))
                            return;

                        intRecordIndex++;
                    }
                }

                m_smVisionInfo.g_objGRR.NextIndex();
            }
            catch (Exception ex)
            {
                SRMMessageBox.Show("Vision 3 GRR Error: " + ex.ToString());
            }
        }

        private void RecordCPK()
        {
            // Check CPK turn ON or not
            if (!m_smVisionInfo.g_blnCPKON)
                return;

            if (m_smVisionInfo.g_objCPK.ref_intTestedTotal >= m_smVisionInfo.g_intCPKTestCount)
                return;

            try
            {
                //string strSampleBlobsFeatures;
                //string[] strSampleFeature = new string[100];

                int intRecordIndex = 0;
                string strPadName = "";
                bool blnRecordFail = true;
                for (int p = 0; p < m_smVisionInfo.g_arrPad.Length; p++)
                {
                    if (p > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    switch (p)
                    {
                        case 0:
                            strPadName = "Middle Pad ";
                            break;
                        case 1:
                            strPadName = "Top Pad ";
                            break;
                        case 2:
                            strPadName = "Right Pad ";
                            break;
                        case 3:
                            strPadName = "Bottom Pad ";
                            break;
                        case 4:
                            strPadName = "Left Pad ";
                            break;
                    }

                    int intPadNumber = m_smVisionInfo.g_arrPad[p].GetBlobsFeaturesNumber();

                    for (int i = 0; i < intPadNumber; i++)
                    {
                        List<string> arrResultList = new List<string>();
                        arrResultList = m_smVisionInfo.g_arrPad[p].GetBlobFeaturesResult_WithPassFailIndicator(i);

                        long intFailMask = Convert.ToInt64(arrResultList[arrResultList.Count - 1]);

                        if (intFailMask != 0)
                        {
                            //only record 1 fail criteria per unit
                            if (blnRecordFail)
                            {
                                blnRecordFail = false;
                                m_smVisionInfo.g_objCPK.RecordPassFail(intFailMask);
                            }
                        }

                        for (int j = 0; j < arrResultList.Count; j++)
                        {
                            if (arrResultList[j] == "---")
                                arrResultList[j] = "-999";
                        }

                        if (!m_smVisionInfo.g_objCPK.Record(0, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[0])))
                            return;
                        if (!m_smVisionInfo.g_objCPK.Record(1, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[1])))
                            return;
                        if (!m_smVisionInfo.g_objCPK.Record(2, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[2])))
                            return;
                        if (!m_smVisionInfo.g_objCPK.Record(3, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[3])))
                            return;
                        if (!m_smVisionInfo.g_objCPK.Record(4, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[4])))
                            return;
                        if (!m_smVisionInfo.g_objCPK.Record(5, intRecordIndex, strPadName + (i + 1).ToString(), Convert.ToSingle(arrResultList[5])))
                            return;

                        intRecordIndex++;
                    }
                }

                m_smVisionInfo.g_objCPK.NextIndex();
            }
            catch (Exception ex)
            {
                SRMMessageBox.Show("Vision 3 CPK Error: " + ex.ToString());
            }
        }

        private void SaveGRR()
        {
            XmlParser objFile = new XmlParser(AppDomain.CurrentDomain.BaseDirectory + "GRRReport\\" +
                m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime + "\\" +
                m_smVisionInfo.g_strGRRName + ".xml");

            objFile.WriteSectionElement("Lot");
            objFile.WriteElement1Value("LotID", m_smProductionInfo.g_strLotID);
            objFile.WriteElement1Value("OperatorID", m_smProductionInfo.g_strOperatorID);
            objFile.WriteElement1Value("RecipeID", m_smProductionInfo.g_strRecipeID);
            objFile.WriteElement1Value("MachineID", m_smCustomizeInfo.g_strMachineID);
            string strDateTime = m_smVisionInfo.g_strGRRName.Substring(m_smVisionInfo.g_strGRRName.LastIndexOf('_') + 1);
            objFile.WriteElement1Value("GRRStartTime", strDateTime.Substring(0, 4) + "/" + strDateTime.Substring(4, 2) + "/" + strDateTime.Substring(6, 2) + "  " + strDateTime.Substring(8, 2) + ":" + strDateTime.Substring(10, 2) + ":" + strDateTime.Substring(12, 2));
            objFile.WriteElement1Value("PartNo", m_smVisionInfo.g_intPartNo);
            objFile.WriteElement1Value("OperatorNo", m_smVisionInfo.g_intOperatorNo);
            objFile.WriteElement1Value("TrialNo", m_smVisionInfo.g_intTrialNo);

            objFile.WriteEndElement();
        }

        /// <summary>
        /// Stop the grab timer and set grab IO off to indicate grab action has been done
        /// </summary>
        private void SetGrabDone(bool blnForInspection)
        {
            float fGrabDelay = 5 - m_smVisionInfo.g_objGrabTime.Timing;
            if (fGrabDelay >= 1)
                Thread.Sleep((int)fGrabDelay);

            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
            {
                if (blnForInspection) //2021-11-16 ZJYEOH : Change m_smVisionInfo.g_intMachineStatus == 2 to blnForInspection
                    m_smTCPIPIO.Send(m_smVisionInfo.g_intVisionIndex, "GRBRP", true, -1);
                //m_blnGrabbing_Out = false;
            }
            else
            {
                if (m_objVisionIO.IOGrabbing.IsOn())
                {
                    if (!m_smVisionInfo.g_blnStopAfterFail)
                        m_objVisionIO.IOGrabbing.SetOff("V3 IOGrabbing 5");
                }
            }
            m_blnGrabbing_Out = false;
            m_smVisionInfo.g_objGrabTime.Stop();

            m_smVisionInfo.g_objGrabDoneTime.Start();

        }

        private void UpdateDebugMode()
        {
            if (m_smVisionInfo.g_arrPad == null)
                return;

            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if (m_smCustomizeInfo.g_blnDebugMode != m_smVisionInfo.g_arrPad[i].ref_blnWriteDebug)
                {
                    m_smVisionInfo.g_arrPad[i].ref_blnWriteDebug = m_smCustomizeInfo.g_blnDebugMode;
                }
            }
        }

        /// <summary>
        /// Consistenly check the timer to trigger specific action 
        /// </summary>
        private void UpdateProgress()
        {
            try
            {
                while (!m_blnStopping)
                {
                    if (!m_blnPause)
                    {

                        CheckLowYield();
                        CheckContinuousPass();
                        CheckContinuousFail();
                        //Grab image
                        if (m_smVisionInfo.MN_PR_GrabImage || m_smVisionInfo.AT_PR_GrabImage)
                        {
                            m_smVisionInfo.g_blnGrabbing = true;
                            if (m_smVisionInfo.AT_PR_GrabImage) // 01-08-2019 ZJYEOH : Only clear drawing result when user pressed grab button, solved "grab before test" no drawings 
                                m_smVisionInfo.g_blnClearResult = true;

                            GrabImage(0, false);

                            // 2019-12-26 ZJYEOH : Copy Image to Rotated Image so that will not look weird when draw rotated Image
                            if (m_smVisionInfo.g_blnViewColorImage)
                                for (int i = 0; i < m_smVisionInfo.g_arrColorImages.Count; i++)
                                    m_smVisionInfo.g_arrColorImages[i].CopyTo(m_smVisionInfo.g_arrColorRotatedImages[i]);
                            for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                                m_smVisionInfo.g_arrImages[i].CopyTo(m_smVisionInfo.g_arrRotatedImages[i]);

                            m_smVisionInfo.g_blnViewRotatedImage = false;   // 2018 10 12 - CCENG: Reset g_blnViewRotatedImage to display original image when user press grab button
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            m_smVisionInfo.VS_AT_UpdateQuantity = true;
                            m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            m_smVisionInfo.g_blnGrabbing = false;
                            m_smVisionInfo.MN_PR_GrabImage = false;
                            m_smVisionInfo.AT_PR_GrabImage = false;
                        }

                        //Start live image
                        if (m_smVisionInfo.AT_PR_StartLiveImage && !m_smVisionInfo.AT_PR_PauseLiveImage)
                        {
                            m_smVisionInfo.g_blnGrabbing = true;
                            m_smVisionInfo.g_blnClearResult = true;

                            GrabImage(0, false);

                            // 2019-12-26 ZJYEOH : Copy Image to Rotated Image so that will not look weird when draw rotated Image
                            if (m_smVisionInfo.g_blnViewColorImage)
                                for (int i = 0; i < m_smVisionInfo.g_arrColorImages.Count; i++)
                                    m_smVisionInfo.g_arrColorImages[i].CopyTo(m_smVisionInfo.g_arrColorRotatedImages[i]);
                            for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                                m_smVisionInfo.g_arrImages[i].CopyTo(m_smVisionInfo.g_arrRotatedImages[i]);

                            m_smVisionInfo.g_blnViewRotatedImage = false;   // 2018 10 12 - CCENG: Reset g_blnViewRotatedImage to display original image when user press live button
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            m_smVisionInfo.VS_AT_UpdateQuantity = true;
                            m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            m_smVisionInfo.g_blnGrabbing = false;
                            Thread.Sleep(50);
                        }

                        //Attach each ROI to its parent
                        if (m_smVisionInfo.AT_PR_AttachImagetoROI)
                        {
                            AttachImageToROI();
                            m_smVisionInfo.AT_PR_AttachImagetoROI = false;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }

                        if (m_smVisionInfo.CO_PR_DeleteTemplate)
                        {
                            m_smVisionInfo.CO_PR_DeleteTemplate = false;

                            ////For bottom orient 
                            //if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            //{
                            //    if (m_smVisionInfo.g_blnWantClearMarkTemplateWhenNewLot)
                            //        m_smVisionInfo.PR_CO_DeleteProcessSuccess = DeleteTemplate();
                            //    else
                            //        m_smVisionInfo.PR_CO_DeleteProcessSuccess = true;
                            //}
                            //else
                            m_smVisionInfo.PR_CO_DeleteProcessSuccess = true; // 2020-07-22 ZJYEOH : Simply Send delete success because Pad dont have new lot clear template function

                            m_smVisionInfo.PR_CO_DeleteTemplateDone = true;
                        }

                        //Perform manual pad
                        if (m_smVisionInfo.MN_PR_StartTest && !m_smVisionInfo.AT_PR_AttachImagetoROI)
                        {
                            //m_smVisionInfo.g_objGrabTime.Reset();
                            //m_smVisionInfo.g_objTransferTime.Reset();
                            m_smVisionInfo.g_objTotalTime.Start();
                            m_smVisionInfo.MN_PR_StartTest = false;
                            
                            TrackTiming(false, "StartTest[" + m_smVisionInfo.g_objTotalTime.Timing.ToString() + "]", m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter || m_smVisionInfo.g_blnTrackTL || m_smVisionInfo.g_blnTrackBR, true);
                            TrackTiming(true, "A[" + m_smVisionInfo.g_objTotalTime.Timing.ToString() + "]", false, true);

                            do
                            {
                                m_blnRepeatTestGrab = m_blnRepeatTest;
                                m_blnRepeatTest = false;
                                StartTest_MultiThreading_Pad(false);

                                if (m_blnRepeatTest)
                                {
                                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 5");
                                }

                            } while (m_blnRepeatTest);

                            //StartTest_MultiThreading_Pad(false);

                            m_smVisionInfo.g_objTotalTime.Stop();
                            m_smVisionInfo.VM_AT_BlockImageUpdate = false;
                            m_smVisionInfo.PR_MN_UpdateInfo = true;
                            m_smVisionInfo.PR_TL_UpdateInfo = true;
                            m_smVisionInfo.PR_TL_UpdateInfo2 = true;
                            m_smVisionInfo.PR_MN_TestDone = true;
                            m_smVisionInfo.AT_VM_OfflineTestAllPad = false;
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;
                                
                                m_smVisionInfo.g_arrPad[i].ref_blnTestAllPad = false;
                            }
                        }

                        //Perform production test
                        if ((!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.IOStartVision.IsOn() && m_smVisionInfo.g_intMachineStatus == 2) ||
                             (m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_blnStartVision_In && m_smVisionInfo.g_intMachineStatus == 2) ||
                             (m_smVisionInfo.g_blnDebugRUN && m_smVisionInfo.g_intMachineStatus == 2))
                        {
                            if (m_smVisionInfo.g_blnDebugRUN && (m_smProductionInfo.g_blnAllRunWithoutGrabImage || m_smProductionInfo.g_blnAllRunGrabWithoutUseImage) && (m_smProductionInfo.g_intDebugImageToUse == 1))
                            {
                                STTrackLog.WriteLine("LoadNextImageForDebugRunTest");
                                LoadNextImageForDebugRunTest();
                            }
                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("StartTest");
                            if (m_smVisionInfo.g_arrPad[0].m_arrTrack.Count > 500)
                                m_smVisionInfo.g_arrPad[0].m_arrTrack.Clear();
                            //m_smVisionInfo.g_arrPad[0].m_arrTrack.Add(m_smVisionInfo.g_arrPad[0].m_strTrack2);
                            //m_smVisionInfo.g_arrPad[0].m_strTrack2 = "1,";
                            TrackTiming(false, "StartTest[" + m_smVisionInfo.g_objTotalTime.Timing.ToString() + "]", m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter || m_smVisionInfo.g_blnTrackTL || m_smVisionInfo.g_blnTrackBR, true);

                            //m_smVisionInfo.g_objGrabTime.Reset();
                            //m_smVisionInfo.g_objTransferTime.Reset();
                            m_smVisionInfo.g_objTotalTime.Start();
                            TrackTiming(true, "A[" + m_smVisionInfo.g_objTotalTime.Timing.ToString() + "]", false, true);
                            m_smVisionInfo.VS_AT_ProductionTestDone = false;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            {
                                m_blnStartVision_In = false;
                                m_blnEndVision_Out = false;
                                m_blnPass1_Out = false;
                                //m_blnGrabbing_Out = true;
                                m_intTCPIPResultID = -1;
                                m_fOffsetX = 0;
                                m_fOffsetY = 0;
                                m_fOffsetAngle = 0;

                            }
                            else
                            {
                                m_objVisionIO.IOEndVision.SetOff("V3 IOEndVision 38");
                                m_objVisionIO.IOPass1.SetOff("V3 IOPass1 39");
                                m_objVisionIO.IOGrabbing.SetOn("V3 IOGrabbing 6");   //STTrackLog.WriteLine("Set IO Grabbing ON");
                            }
                            m_blnGrabbing_Out = true;
                            do
                            {
                                //STTrackLog.WriteLine(m_smVisionInfo.g_strVisionName + "------------ Start -------  m_blnRepeatTestGrab = " + m_blnRepeatTestGrab + "   m_blnRepeatTest = " + m_blnRepeatTest);
                                m_blnRepeatTestGrab = m_blnRepeatTest;
                                m_blnRepeatTest = false;
                                

                                StartTest_MultiThreading_Pad(true);

                                //STTrackLog.WriteLine(m_smVisionInfo.g_strVisionName + "------------ End -------  m_blnRepeatTestGrab = " + m_blnRepeatTestGrab + "   m_blnRepeatTest = " + m_blnRepeatTest);


                                if (m_blnRepeatTest)
                                {
                                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 6");
                                }

                            } while (m_blnRepeatTest);

                            //StartTest_MultiThreading_Pad(true);

                            m_smVisionInfo.g_objTotalTime.Stop();

                            if (!m_blnForceStopProduction)
                            {
                                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                {
                                    m_blnEndVision_Out = true;
                                }
                                else
                                    m_objVisionIO.IOEndVision.SetOn("V3 IOEndVision 11");
                            }
                            else
                            {
                                STTrackLog.WriteLine("Vision3Process > Force Stop Production");
                                m_blnForceStopProduction = false;
                                m_smVisionInfo.g_intMachineStatus = 1;
                            }

                            //TrackTiming(false, "B[" + m_smVisionInfo.g_objTotalTime.Duration.ToString() + "]", false);

                            //Thread.Sleep(400);

                            //TrackTiming(false, "F[" + m_smVisionInfo.g_objTotalTime.Duration.ToString() + "]", true);

                            m_smProductionInfo.VM_TH_UpdateCount = true;

                            m_smVisionInfo.VS_AT_ProductionTestDone = true;

                            if (m_smVisionInfo.g_blnDebugRUN)
                                Thread.Sleep(m_smVisionInfo.g_intSleep);
                            else
                            {
                                if (m_smVisionInfo.g_intSleep > 1)              // Change to > 1 to prevent calling this sleep function during production when not necessary.
                                    Thread.Sleep(m_smVisionInfo.g_intSleep);
                            }

                            if (m_smProductionInfo.g_blnAllRunFromCenter)
                                m_smVisionInfo.g_blnDebugRUN = false;

                        }

                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                        {
                            if (m_blnEndVision_Out == true && m_smVisionInfo.g_intMachineStatus != 2)
                                m_blnEndVision_Out = false;
                            else if (m_blnEndVision_Out == false && m_smVisionInfo.g_intMachineStatus == 2)
                                m_blnEndVision_Out = true;
                        }
                        else
                        {
                            if (m_objVisionIO.IOEndVision.IsOn() && m_smVisionInfo.g_intMachineStatus != 2)
                                m_objVisionIO.IOEndVision.SetOff("V3 IOEndVision 13");
                            else if (m_objVisionIO.IOEndVision.IsOff() && m_smVisionInfo.g_intMachineStatus == 2)
                                m_objVisionIO.IOEndVision.SetOn("V3 IOEndVision 12");
                        }

                        if (m_smVisionInfo.g_blnWantClearSaveImageInfo)
                        {
                            m_arrPassNoBuffer = new int[m_smVisionInfo.g_intSaveImageBufferSize];
                            m_arrFailNoBuffer = new int[m_smVisionInfo.g_intSaveImageBufferSize];
                            m_arrRejectNameBuffer = new string[m_smVisionInfo.g_intSaveImageBufferSize];
                            m_arrRejectMessageBuffer = new string[m_smVisionInfo.g_intSaveImageBufferSize];

                            m_arrRejectImageListPath.Clear();
                            m_arrRejectImageErrorMessageListPath.Clear();

                            m_smVisionInfo.g_blnWantClearSaveImageInfo = false;
                        }

                        UpdateDebugMode();
                    }

                    Thread.Sleep(1);
                }
            }
            catch (Exception ex)
            {
                SRMMessageBox.Show("Vision3Process->UpdateProgress() :" + ex.ToString());
                SRMMessageBox.Show("Vision3Process has been terminated. Please Exit SRMVision software and Run again!", "Vision3Process", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (m_smVisionInfo.g_strCameraModel == "IDS")
                {
                }
                else if (m_smVisionInfo.g_strCameraModel == "AVT")
                    m_objAVTFireGrab.OFFCamera();
                else if (m_smVisionInfo.g_strCameraModel == "Teli")
                {
                    if (m_blnCustomWantColor)
                        m_objTeliCamera.OFFCamera_LowLevelAPI();
                    else
                    {
                        if (m_smVisionInfo.g_intGrabMode == 0)
                            m_objTeliCamera.OFFCamera();
                        else
                            m_objTeliCamera.OFFCamera_LowLevelAPI();
                    }
                }
                m_blnStopped = true;
                //SetStopped();
                m_thThread = null;
            }
        }

        private void UpdateSubProgress_GrabImage()
        {
            while (!m_blnStopping)
            {

                try
                {
                    if (m_bSubTh1_GrabImage)
                    {
                        TrackTiming(false, "G1", false, m_smVisionInfo.g_blnTrackBasic);

                        m_bSubTh1_GrabImage = false;
                        GrabImage(0, m_blnAuto);

                        TrackTiming(false, "G2", false, m_smVisionInfo.g_blnTrackBasic);
                    }

                }
                catch (Exception ex)
                {
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_GrabImage() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_GrabImage = null;
            m_blnStopped_GrabImage = true;

        }
        private void UpdateSubProgress_TransferImage()
        {
            while (!m_blnStopping)
            {

                try
                {
                    if (m_bSubTh1_TransferImage)
                    {
                        TrackTiming(false, "TI1", false, m_smVisionInfo.g_blnTrackBasic);
                        //HiPerfTimer tTransfer = new HiPerfTimer();
                        //tTransfer.Start();
                        bool blnStartTransfer = false;
                        for (int i = 0; i < m_intGrabRequire; i++)
                        {
                            blnStartTransfer = false;

                            switch (i)
                            {
                                case 0:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage1LoadDone, true, ref m_bGrabImage1LoadResult, "WaitGrab1");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 0 fail");
                                    break;
                                case 1:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage2LoadDone, true, ref m_bGrabImage2LoadResult, "WaitGrab2");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 1 fail");
                                    break;
                                case 2:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage3LoadDone, true, ref m_bGrabImage3LoadResult, "WaitGrab3");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 2 fail");
                                    break;
                                case 3:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage4LoadDone, true, ref m_bGrabImage4LoadResult, "WaitGrab4");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 3 fail");
                                    break;
                                case 4:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage5LoadDone, true, ref m_bGrabImage5LoadResult, "WaitGrab5");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 4 fail");
                                    break;
                                case 5:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage6LoadDone, true, ref m_bGrabImage6LoadResult, "WaitGrab6");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 5 fail");
                                    break;
                                case 6:
                                    blnStartTransfer = WaitEventDone(ref m_bGrabImage7LoadDone, true, ref m_bGrabImage7LoadResult, "WaitGrab7");
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer 6 fail");
                                    break;
                                default:
                                    blnStartTransfer = false;
                                    if (!blnStartTransfer)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > blnStartTransfer default fail");
                                    break;
                            }

                            if (blnStartTransfer)
                            {
                                if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                {
                                    if (m_smVisionInfo.g_blnViewColorImage)
                                    {
                                        if (m_smVisionInfo.g_arrDebugColorImages.Count != m_smVisionInfo.g_arrColorImages.Count)
                                        {
                                            for (int d = 0; d < m_smVisionInfo.g_arrColorImages.Count; d++)
                                            {
                                                m_smVisionInfo.g_arrDebugColorImages.Add(new CImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            }
                                        }
                                        m_objTeliCamera.ConvertImage(i);
                                        m_smVisionInfo.g_arrMemoryColorImage[i].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                        m_smVisionInfo.g_arrMemoryColorImage[i].CopyTo(ref m_smVisionInfo.g_arrDebugColorImages, i);

                                        if (m_smVisionInfo.g_arrImageGain[i] != 1f)
                                        {
                                            if (m_smVisionInfo.g_intImageMergeType != 0)
                                            {
                                                for (int j = 0; j < 5; j++)
                                                {
                                                    CROI objCROI = new CROI();
                                                    try
                                                    {
                                                        objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionY,
                                                            m_smVisionInfo.g_arrSystemROI[j].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[j].ref_ROIHeight);
                                                        objCROI.AttachImage(m_smVisionInfo.g_arrDebugColorImages[i]);
                                                        objCROI.AddExtraGain(m_smVisionInfo.g_arrImageGain[i]);
                                                        objCROI.Dispose();
                                                    }
                                                    catch
                                                    {
                                                        if (objCROI != null)
                                                            objCROI.Dispose();
                                                    }

                                                }

                                            }
                                            else
                                                m_smVisionInfo.g_arrColorImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i], m_smVisionInfo.g_intColorFormat);
                                        }
                                        m_smVisionInfo.g_arrDebugColorImages[i].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, i);
                                    }
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_blnViewColorImage)
                                    {
                                        //m_objTeliCamera.ConvertImage(i);
                                        //m_objTeliCamera.ConvertImage(/*m_arrBitmapData[i],*/ m_arrBufferPointer[i]);
                                        m_objTeliCamera.ConvertImage(i);
                                        m_smVisionInfo.g_arrMemoryColorImage[i].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                        m_smVisionInfo.g_arrMemoryColorImage[i].CopyTo(ref m_smVisionInfo.g_arrColorImages, i);

                                        if (m_smVisionInfo.g_arrImageGain[i] != 1f)
                                        {
                                            if (m_smVisionInfo.g_intImageMergeType != 0)
                                            {
                                                for (int j = 0; j < 5; j++)
                                                {
                                                    CROI objCROI = new CROI();
                                                    try
                                                    {
                                                        objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[j].ref_ROIPositionY,
                                                            m_smVisionInfo.g_arrSystemROI[j].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[j].ref_ROIHeight);
                                                        objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[i]);
                                                        objCROI.AddExtraGain(m_smVisionInfo.g_arrImageGain[i]);
                                                        objCROI.Dispose();
                                                    }
                                                    catch
                                                    {
                                                        if (objCROI != null)
                                                            objCROI.Dispose();
                                                    }

                                                }

                                            }
                                            else
                                                m_smVisionInfo.g_arrColorImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i], m_smVisionInfo.g_intColorFormat);
                                        }

                                        m_smVisionInfo.g_arrColorImages[i].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i);

                                    }
                                }

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                    {
                                        if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                        {
                                            for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                            {
                                                m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            }
                                        }
                                        if (!m_smVisionInfo.g_blnViewColorImage)
                                        {
                                            m_smVisionInfo.g_arrMemoryImage[i].CopyTo(ref m_smVisionInfo.g_arrDebugImages, i);
                                            m_smVisionInfo.g_arrDebugImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                                        }

                                        SetExtraGain(i, m_smVisionInfo.g_arrDebugImages);
                                        ImageMerge(i, m_smVisionInfo.g_arrDebugImages);
                                        ImageUniformize(i, m_smVisionInfo.g_arrDebugImages);
                                    }
                                    else
                                    {
                                        ImageMerge(i);
                                        ImageUniformizeColor(i);
                                    }
                                }
                                else
                                {
                                    if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                    {
                                        if (m_smVisionInfo.g_arrDebugImages.Count != m_smVisionInfo.g_arrImages.Count)
                                        {
                                            for (int d = 0; d < m_smVisionInfo.g_arrImages.Count; d++)
                                            {
                                                m_smVisionInfo.g_arrDebugImages.Add(new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                                            }
                                        }
                                        if (!m_smVisionInfo.g_blnViewColorImage)
                                        {
                                            m_smVisionInfo.g_arrMemoryImage[i].CopyTo(ref m_smVisionInfo.g_arrDebugImages, i);
                                            m_smVisionInfo.g_arrDebugImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                                        }

                                        SetExtraGain(i, m_smVisionInfo.g_arrDebugImages);
                                        ImageMerge(i, m_smVisionInfo.g_arrDebugImages);
                                        ImageUniformize(i, m_smVisionInfo.g_arrDebugImages);
                                    }
                                    else
                                    {
                                        if (!m_smVisionInfo.g_blnViewColorImage)
                                        {
                                            m_smVisionInfo.g_arrMemoryImage[i].CopyTo(ref m_smVisionInfo.g_arrImages, i);
                                            m_smVisionInfo.g_arrImages[i].AddGain(m_smVisionInfo.g_arrImageGain[i]);
                                        }

                                        SetExtraGain(i);
                                        ImageMerge(i);
                                        ImageUniformize(i);
                                    }
                                }

                                if (i == 0)
                                {
                                    m_bGrabImage1Result = true;
                                    m_bGrabImage1Done = true;
                                    TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 1)
                                {
                                    m_bGrabImage2Result = true;
                                    m_bGrabImage2Done = true;
                                    TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 2)
                                {
                                    m_bGrabImage3Result = true;
                                    m_bGrabImage3Done = true;
                                    TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 3)
                                {
                                    m_bGrabImage4Result = true;
                                    m_bGrabImage4Done = true;
                                    TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 4)
                                {
                                    m_bGrabImage5Result = true;
                                    m_bGrabImage5Done = true;
                                    TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 5)
                                {
                                    m_bGrabImage6Result = true;
                                    m_bGrabImage6Done = true;
                                    TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 6)
                                {
                                    m_bGrabImage7Result = true;
                                    m_bGrabImage7Done = true;
                                    TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
                                }

                            }
                            else
                            {
                                STTrackLog.WriteLine("Vision3Process UpdateSubProgress_TransferImage > Image Acquire Fail.");
                                m_smVisionInfo.g_strErrorMessage = "Image Acquire Fail.";

                                if (i == 0)
                                {
                                    m_bGrabImage1Result = false;
                                    m_bGrabImage1Done = true;
                                    TrackTiming(false, "GD1", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 1)
                                {
                                    m_bGrabImage2Result = false;
                                    m_bGrabImage2Done = true;
                                    TrackTiming(false, "GD2", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 2)
                                {
                                    m_bGrabImage3Result = false;
                                    m_bGrabImage3Done = true;
                                    TrackTiming(false, "GD3", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 3)
                                {
                                    m_bGrabImage4Result = false;
                                    m_bGrabImage4Done = true;
                                    TrackTiming(false, "GD4", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 4)
                                {
                                    m_bGrabImage5Result = false;
                                    m_bGrabImage5Done = true;
                                    TrackTiming(false, "GD5", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 5)
                                {
                                    m_bGrabImage6Result = false;
                                    m_bGrabImage6Done = true;
                                    TrackTiming(false, "GD6", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                                else if (i == 6)
                                {
                                    m_bGrabImage7Result = false;
                                    m_bGrabImage7Done = true;
                                    TrackTiming(false, "GD7", false, m_smVisionInfo.g_blnTrackBasic);
                                }
                            }
                        }

                        m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;

                        TrackTiming(false, "TI2", false, m_smVisionInfo.g_blnTrackBasic);
                        //tTransfer.Stop();
                        //STTrackLog.WriteLine("Transfer Time = " + tTransfer.Duration.ToString());
                        m_bSubTh1_TransferImage = false;

                    }

                }
                catch (Exception ex)
                {
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_TransferImage() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_TransferImage = null;
            m_blnStopped_TransferImage = true;

        }
        private void UpdateSubProgress_WaitFrame()
        {
            while (!m_blnStopping)
            {

                try
                {
                    if (m_bSubTh1_WaitFrame)
                    {
                        TrackTiming(false, "WF1", false, m_smVisionInfo.g_blnTrackBasic);

                        bool blnStartWaitFrame = false;
                        for (int i = 0; i < m_intGrabRequire; i++)
                        {
                            blnStartWaitFrame = false;

                            switch (i)
                            {
                                case 0:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage1TriggerDone, true, ref m_bGrabImage1TriggerResult, "WaitTrigger1");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 0 fail");
                                    break;
                                case 1:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage2TriggerDone, true, ref m_bGrabImage2TriggerResult, "WaitTrigger2");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 1 fail");
                                    break;
                                case 2:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage3TriggerDone, true, ref m_bGrabImage3TriggerResult, "WaitTrigger3");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 2 fail");
                                    break;
                                case 3:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage4TriggerDone, true, ref m_bGrabImage4TriggerResult, "WaitTrigger4");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 3 fail");
                                    break;
                                case 4:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage5TriggerDone, true, ref m_bGrabImage5TriggerResult, "WaitTrigger5");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 4 fail");
                                    break;
                                case 5:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage6TriggerDone, true, ref m_bGrabImage6TriggerResult, "WaitTrigger6");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 5 fail");
                                    break;
                                case 6:
                                    blnStartWaitFrame = WaitEventDone(ref m_bGrabImage7TriggerDone, true, ref m_bGrabImage7TriggerResult, "WaitTrigger7");
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > blnStartWaitFrame 6 fail");
                                    break;
                                default:
                                    blnStartWaitFrame = false;
                                    if (!blnStartWaitFrame)
                                        STTrackLog.WriteLine("Vision3ProcessUpdateSubProgress_WaitFrame. > blnStartWaitFrame default fail");
                                    break;
                            }
                            //if (blnStartWaitFrame)
                            //{
                            //    bool StartTriggerRead = false;
                            //    switch (i)
                            //    {
                            //        case 0:
                            //            StartTriggerRead = true;
                            //            break;
                            //        case 1:
                            //            StartTriggerRead = WaitEventDone(ref m_bGrabImage1LoadDone, true, "WaitLoad1");
                            //            break;
                            //        case 2:
                            //            StartTriggerRead = WaitEventDone(ref m_bGrabImage2LoadDone, true, "WaitLoad2");
                            //            break;
                            //        case 3:
                            //            StartTriggerRead = WaitEventDone(ref m_bGrabImage3LoadDone, true, "WaitLoad3");
                            //            break;
                            //        case 4:
                            //            StartTriggerRead = WaitEventDone(ref m_bGrabImage4LoadDone, true, "WaitLoad4");
                            //            break;
                            //    }
                            //    if (StartTriggerRead)
                            //    {
                            //        //STTrackLog.WriteLine("TriggerImageBufferRead = " + i.ToString());
                            //        m_objTeliCamera.TriggerImageBufferRead();
                            //    }
                            //}

                            if (blnStartWaitFrame && m_objTeliCamera.WaitFrameAcquiredReady(i))
                            {
                                //STTrackLog.WriteLine("Get Image Buffer " + (i + 1));
                                //STTrackLog.WriteLine("Get Image Buffer " + m_objTeliCamera.GetBufferPointer());
                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    //m_smVisionInfo.g_objMemoryColorImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                    //m_smVisionInfo.g_objMemoryColorImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                    //m_smVisionInfo.g_objMemoryColorImage.CopyTo(ref m_smVisionInfo.g_arrColorImages, i - 1);
                                    //m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i - 1);
                                    //if (m_smProductionInfo.g_blnAllRunGrabWithoutUseImage)
                                    //    m_smVisionInfo.g_arrColorImages[i - 1].ConvertColorToMono(ref m_smVisionInfo.g_arrDebugImages, i - 1);

                                    //m_smVisionInfo.g_arrMemoryColorImage[i].LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                    //m_arrBitmapData.Add(m_objTeliCamera.GetBitmapData());
                                    //m_arrBufferPointer.Add(m_objTeliCamera.GetBufferPointer());
                                }
                                else
                                {
                                    //m_smVisionInfo.g_objMemoryImage.SetImageSize(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
                                    //m_smVisionInfo.g_objMemoryImage.LoadImageFromMemory(m_objTeliCamera.GetImagePointer());
                                    m_smVisionInfo.g_arrMemoryImage[i].LoadImageFromMemory(m_objTeliCamera.GetImageBufferPointer(i));//(m_objTeliCamera.GetImagePointer());

                                }


                                if (i == 0)
                                {
                                    m_bGrabImage1LoadResult = true;
                                    m_bGrabImage1LoadDone = true;
                                }
                                else if (i == 1)
                                {
                                    m_bGrabImage2LoadResult = true;
                                    m_bGrabImage2LoadDone = true;
                                }
                                else if (i == 2)
                                {
                                    m_bGrabImage3LoadResult = true;
                                    m_bGrabImage3LoadDone = true;
                                }
                                else if (i == 3)
                                {
                                    m_bGrabImage4LoadResult = true;
                                    m_bGrabImage4LoadDone = true;
                                }
                                else if (i == 4)
                                {
                                    m_bGrabImage5LoadResult = true;
                                    m_bGrabImage5LoadDone = true;
                                }
                                else if (i == 5)
                                {
                                    m_bGrabImage6LoadResult = true;
                                    m_bGrabImage6LoadDone = true;
                                }
                                else if (i == 6)
                                {
                                    m_bGrabImage7LoadResult = true;
                                    m_bGrabImage7LoadDone = true;
                                }

                            }
                            else
                            {
                                STTrackLog.WriteLine("Vision3Process UpdateSubProgress_WaitFrame. > Wait Frame Timeout");
                                m_smVisionInfo.g_strErrorMessage = "Wait Frame Timeout.";

                                //if (m_smVisionInfo.g_blnViewColorImage)
                                //    m_arrBufferPointer.Add(IntPtr.Zero);
                                if (i == 0)
                                {
                                    m_bGrabImage1LoadResult = false;
                                    m_bGrabImage1LoadDone = true;
                                }
                                else if (i == 1)
                                {
                                    m_bGrabImage2LoadResult = false;
                                    m_bGrabImage2LoadDone = true;
                                }
                                else if (i == 2)
                                {
                                    m_bGrabImage3LoadResult = false;
                                    m_bGrabImage3LoadDone = true;
                                }
                                else if (i == 3)
                                {
                                    m_bGrabImage4LoadResult = false;
                                    m_bGrabImage4LoadDone = true;
                                }
                                else if (i == 4)
                                {
                                    m_bGrabImage5LoadResult = false;
                                    m_bGrabImage5LoadDone = true;
                                }
                                else if (i == 5)
                                {
                                    m_bGrabImage6LoadResult = false;
                                    m_bGrabImage6LoadDone = true;
                                }
                                else if (i == 6)
                                {
                                    m_bGrabImage7LoadResult = false;
                                    m_bGrabImage7LoadDone = true;
                                }
                            }
                        }

                        m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;

                        TrackTiming(false, "WF2", false, m_smVisionInfo.g_blnTrackBasic);

                        m_bSubTh1_WaitFrame = false;

                    }

                }
                catch (Exception ex)
                {
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_WaitFrame() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_WaitFrame = null;
            m_blnStopped_WaitFrame = true;

        }
        private void UpdateSubProgress_Orient()
        {
            while (!m_blnStopping)
            {
                try
                {
                    if (m_bSubTh_OrientTest)
                    {

                        m_bSubTh_OrientTest_Result = false;

                        TrackTiming(false, "O1", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter);

                        m_bGrabImageFinalResult_Orient = WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, "OA1");

                        
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("600 m_bGrabImageFinalResult_Center = " + m_bGrabImageFinalResult_Center.ToString());

                        //2020-09-22 ZJYEOH : for no pad inspection scenario
                        if (m_bGrabImageFinalResult_Center != m_bGrabImageFinalResult_Orient)
                            m_bGrabImageFinalResult_Center = m_bGrabImageFinalResult_Orient;

                        if (m_bGrabImageFinalResult_Orient)
                        {
                            // Orient  Inspection
                            m_bSubTh_OrientTest_Result = OrientInspection_MultiThreading(ref m_eInspectionResult_Orient);

                            TrackTiming(false, "O1a [" + m_smVisionInfo.g_arrPad[0].m_strTrack + "]", false, m_smVisionInfo.g_blnTrackCenter);

                        }

                        TrackTiming(false, "O2", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter);
                        m_bSubTh_OrientTest = false;
                    }

                }
                catch (Exception ex)
                {
                    m_intPadRepeatTestCount++;

                    if (m_intPadRepeatTestCount > 2)
                    {
                        STTrackLog.WriteLine("UpdateSubProgress_Orient Ex=" + ex.ToString());
                        STTrackLog.WriteLine("Stop Repeat " + m_intPadRepeatTestCount.ToString());
                        m_arrErrorMessage[0] = "Orient Exception Fail. " + ex.ToString();
                        m_eInspectionResult_Orient = ResulType.Timesout;
                        m_intPadRepeatTestCount = 0;
                        m_blnRepeatTest = false;
                    }
                    else
                    {
                        STTrackLog.WriteLine("UpdateSubProgress_Orient Ex=" + ex.ToString());
                        STTrackLog.WriteLine("Repeat " + m_intPadRepeatTestCount.ToString());
                        m_blnRepeatTest = true;
                    }

                    m_bSubTh_OrientTest_Result = false;
                    m_bSubTh_OrientTest = false;

                }
                Thread.Sleep(1);
            }

            m_thSubThread_Orient = null;
            m_blnStopped_OrientThread = true;

        }
        private void UpdateSubProgress_Center()
        {
            /*
             * ------------ Pad Inspection Sequence # ------------------------:
             * Sequence 0:  - Pad Inspection > Image 1
             *              - Package Size Inspection > Image 1 + Package Defect Inspection > Image 1 
             * Sequence 1:  - Pad Inspection > Image 1
             *              - Package Size Inspection > Image 1 + Package Defect Inspection > Image 1 
             *              - Package Size Inspection > Image 1 + Package Defect 2 Inspection > Image 3
             * Sequence 2:  - Pad Inspection > Image 1
             *              - Package Size Inspection > Image 3 + Package Defect Inspection > Image 1 
             */

            int intInspectionSequence = 1;

            while (!m_blnStopping)
            {
                try
                {
                    if (m_bSubTh_CenterTest)
                    {
                        m_T2.Start();
                        m_fTiming2 = 0;
                        m_fTimingPrev2 = 0;
                        m_strTrack_Center = "";

                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C1=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;

                        m_bSubTh_CenterTest_Result = false;
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("C1");

                        TrackTiming(false, "C1", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter);
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("300");
                        // --------------------------- Pad 5S Sequence -----------------------------------------------------------------------------
                        switch (intInspectionSequence)
                        {
                            case 1:
                                {
                                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("301");
                                    // Wait Grab image 1 done for Center Pad Inspection (Note - Center Pad Inspection always use image grab 1)
                                    m_bGrabImageFinalResult_Center = WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, "A1");

                                    //2020-09-22 ZJYEOH : for no orient inspection scenario
                                    if (m_bGrabImageFinalResult_Orient != m_bGrabImageFinalResult_Center)
                                        m_bGrabImageFinalResult_Orient = m_bGrabImageFinalResult_Center;

                                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("302");
                                    if (m_bGrabImageFinalResult_Center)
                                    {
                                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("303");
                                        // Get Grab image index for package size
                                        int[] arrPackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);

                                        // Wait grab image # done for package size
                                        m_bGrabImageFinalResult_Center = WaitEventDone(arrPackageSizeImageIndex, ROIPartition.Center, "A2");

                                        int intPackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].ref_intPadPkgSizeImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                        m_bGrabImageFinalResult_Center = WaitEventDone(intPackageSizeImageIndex, ROIPartition.Center, "A3");

                                        if (m_blnCustomWantColor)
                                        {
                                            // Get Grab image index for Color
                                            int[] arrColorImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].ref_arrDefectImageNo.ToArray(), m_smVisionInfo.g_intVisionIndex);

                                            // Wait grab image # done for Color
                                            m_bGrabImageFinalResult_Center = WaitEventDone(arrColorImageIndex, ROIPartition.Center, "A2 - Color");
                                        }

                                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("304");
                                        if (m_bGrabImageFinalResult_Center)
                                        {
                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("305");
                                            // Center Pad Inspection
                                            m_bSubTh_CenterTest_Result = !Pad5SInspection_MultiThreading(0x01, ref m_eInspectionResult_Center, intPackageSizeImageIndex, arrPackageSizeImageIndex, 0);

                                            TrackTiming(false, "C1a [" + m_smVisionInfo.g_arrPad[0].m_strTrack + "]", false, m_smVisionInfo.g_blnTrackCenter);

                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("306 m_bSubTh_CenterTest_Result = " + m_bSubTh_CenterTest_Result.ToString());

                                            if (m_bSubTh_CenterTest_Result)
                                            {
                                                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("307");

                                                //2021-07-17 ZJYEOH : hide this as now can separate broken threshold
                                                //if (m_smVisionInfo.g_intImageMergeType == 3)   // "Merge Grab 1 and Grab 2" type. Total grab 5 images.
                                                {
                                                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("308");
                                                    int intBrokenPadImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                                    // Image index above 0 will only do extra pad broken inspection.
                                                    if (intBrokenPadImageIndex > 0 || m_smVisionInfo.g_arrPad[0].ref_blnWantSeparateBrokenPadThresholdSetting)
                                                    {
                                                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("309");
                                                        m_bGrabImageFinalResult_Center = WaitEventDone(intBrokenPadImageIndex, ROIPartition.Center, "A4");

                                                        if (m_bGrabImageFinalResult_Center)
                                                        {
                                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("310");
                                                            // Center Broken Pad Inspection
                                                            m_bSubTh_CenterTest_Result = !Pad5SInspection_MultiThreading_ImageMerge2(0x01, ref m_eInspectionResult_Center, intBrokenPadImageIndex);

                                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("310 m_bSubTh_CenterTest_Result = " + m_bSubTh_CenterTest_Result.ToString());
                                                        }
                                                    }
                                                }


                                                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("311 m_bSubTh_CenterTest_Result = " + m_bSubTh_CenterTest_Result.ToString());

                                                if (m_bGrabImageFinalResult_Center && m_blnCustomWantPackage && m_bSubTh_CenterTest_Result && (((m_smVisionInfo.g_arrPad[0].ref_intFailPkgOptionMask & 0x01) > 0) || m_smVisionInfo.g_arrPad[0].GetWantInspectPackage()))
                                                {
                                                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("312");
                                                    int intPackageBrightDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].ref_intPadPkgBrightFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Bright Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                    m_bGrabImageFinalResult_Center = WaitEventDone(intPackageBrightDefectImageIndex, ROIPartition.Center, "A5");

                                                    if (m_bGrabImageFinalResult_Center)
                                                    {
                                                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("313");
                                                        // Center Package Bright Field Inspection
                                                        m_bSubTh_CenterTest_Result = !Package5SInspection_MultiThreading(0x01, ref m_eInspectionResult_Center, intPackageSizeImageIndex, intPackageBrightDefectImageIndex, PkgInspectionType.BrightField);

                                                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("313 m_bSubTh_CenterTest_Result = " + m_bSubTh_CenterTest_Result.ToString());

                                                        TrackTiming(false, "C1b", false, m_smVisionInfo.g_blnTrackCenter);

                                                        if (m_bSubTh_CenterTest_Result)
                                                        {
                                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("314");
                                                            int intPackageDarkDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].ref_intPadPkgDarkFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Dark Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                            m_bGrabImageFinalResult_Center = WaitEventDone(intPackageDarkDefectImageIndex, ROIPartition.Center, "A6");

                                                            if (m_bGrabImageFinalResult_Center)
                                                            {
                                                                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("315");
                                                                m_bSubTh_CenterTest_Result = !Package5SInspection_MultiThreading(0x01, ref m_eInspectionResult_Center, intPackageSizeImageIndex, intPackageDarkDefectImageIndex, PkgInspectionType.DarkField);

                                                                TrackTiming(false, "C1c", false, m_smVisionInfo.g_blnTrackCenter);
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("316");
                                        }
                                    }
                                }
                                break;
                        }

                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;

                        TrackTiming(false, "C2", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter);
                        m_bSubTh_CenterTest = false;
                    }
                    else if (m_bSubTh_PHTest)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("400");
                        m_bSubTh_PHTest_Result = false;
                        m_bGrabImageFinalResult_Center = WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage2Result, "A7");

                        m_smVisionInfo.g_arrPHROIs[0].AttachImage(m_smVisionInfo.g_arrImages[0]);

                        if (m_smVisionInfo.g_objPositioning.CheckPH(m_smVisionInfo.g_arrPHROIs[0]))
                        {
                            m_bSubTh_PHTest_Result = true;
                            //m_arrErrorMessage[0] = m_smVisionInfo.g_objPositioning.ref_strErrorMessage;


                        }
                        else
                        {
                            m_eInspectionResult_Center = ResulType.FailPH;
                            m_bSubTh_PHTest_Result = false;
                            m_arrErrorMessage[0] = m_smVisionInfo.g_objPositioning.ref_strErrorMessage;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                if (m_intTCPIPResultID == -1)
                                    m_intTCPIPResultID = (int)TCPIPResulID.Fail;
                        }

                        m_bSubTh_PHTest = false;
                    }


                }
                catch (Exception ex)
                {
                    m_intPadRepeatTestCount++;

                    if (m_intPadRepeatTestCount > 2)
                    {
                        STTrackLog.WriteLine("UpdateSubProgress_Center Ex=" + ex.ToString());
                        STTrackLog.WriteLine("Stop Repeat " + m_intPadRepeatTestCount.ToString());
                        m_arrErrorMessage[0] = "Center Exception Fail. " + ex.ToString();
                        m_eInspectionResult_Center = ResulType.Timesout;
                        m_intPadRepeatTestCount = 0;
                        m_blnRepeatTest = false;
                    }
                    else
                    {
                        STTrackLog.WriteLine("UpdateSubProgress_Center Ex=" + ex.ToString());
                        STTrackLog.WriteLine("Repeat " + m_intPadRepeatTestCount.ToString());
                        m_blnRepeatTest = true;
                    }

                    m_bSubTh_CenterTest_Result = false;
                    m_bSubTh_PHTest = false;
                    m_bSubTh_CenterTest = false;

                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("500 m_bSubTh_CenterTest_Result = " + m_bSubTh_CenterTest_Result.ToString());

                    //SRMMessageBox.Show("Vision3Process->UpdateSubProgress_Center() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_Center = null;
            m_blnStopped_CenterThread = true;

        }

        private void UpdateSubProgress_SideTL()
        {
            int intInspectionSequence = 1;

            //HiPerfTimer T1 = new HiPerfTimer();
            //float fTiming = 0;
            //float fTimingPrev = 0;

            while (!m_blnStopping)
            {

                try
                {
                    if (m_bSubTh_SideTLTest)
                    {
                        //T1.Start();
                        //fTiming = 0;
                        //fTimingPrev = 0;
                        //m_strTrack_TL = "";

                        //fTiming = T1.Timing;
                        //m_strTrack_TL += ", TL1=" + (fTiming - fTimingPrev).ToString();
                        //fTimingPrev = fTiming;

                        //m_T2.Start();
                        //m_fTiming2 = 0;
                        //m_fTimingPrev2 = 0;
                        //m_strTrack_Center = "";

                        //m_fTiming2 = m_T2.Timing;
                        //m_strTrack_Center += ", TL1=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        //m_fTimingPrev2 = m_fTiming2;
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("TL1");
                        m_bSubTh_SideTLTest_Result = false;
                        TrackTiming(false, "TL1", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackTL);
                        // --------------------------- Pad 5S Sequence -----------------------------------------------------------------------------
                        intInspectionSequence = 1;

                        switch (intInspectionSequence)
                        {
                            case 1:
                                {
                                    m_bGrabImageFinalResult_TL = WaitEventDone(0, ROIPartition.Side, "A8");

                                    if (m_bGrabImageFinalResult_TL)
                                    {
                                        // Get Grab image index for package size
                                        int[] arrPackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);

                                        // Wait grab image # done for package size
                                        m_bGrabImageFinalResult_Center = WaitEventDone(arrPackageSizeImageIndex, ROIPartition.Center, "A9");

                                        int intPackageSizeImageInddex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgSizeImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                        m_bGrabImageFinalResult_TL = WaitEventDone(intPackageSizeImageInddex, ROIPartition.Side, "A10");

                                        int[] arrSidePackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);
                                        m_bGrabImageFinalResult_TL = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11");

                                        arrSidePackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[4].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);
                                        m_bGrabImageFinalResult_TL = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11");

                                        if (m_blnCustomWantColor)
                                        {
                                            int[] arrSideColorImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_arrDefectImageNo.ToArray(), m_smVisionInfo.g_intVisionIndex);
                                            m_bGrabImageFinalResult_TL = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11 - Color");

                                            arrSidePackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[4].ref_arrDefectImageNo.ToArray(), m_smVisionInfo.g_intVisionIndex);
                                            m_bGrabImageFinalResult_TL = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11 - Color");
                                        }

                                        if (m_bGrabImageFinalResult_TL)
                                        {
                                            m_bSubTh_SideTLTest_Result = !Pad5SInspection_MultiThreading(0x12, ref m_eInspectionResult_SideTL, intPackageSizeImageInddex, arrPackageSizeImageIndex, 0);

                                            TrackTiming(false, "TL1a [" + m_smVisionInfo.g_arrPad[1].m_strTrack + "]", false, m_smVisionInfo.g_blnTrackTL);

                                            if (m_bSubTh_SideTLTest_Result)
                                            {
                                                int intBrokenPadImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                                //2021-07-17 ZJYEOH : hide this as now can separate broken threshold
                                                //if (m_smVisionInfo.g_intImageMergeType == 3 || intBrokenPadImageIndex > 0 || m_smVisionInfo.g_arrPad[1].ref_blnWantSeparateBrokenPadThresholdSetting) // "Merge Grab 3 and Grab 4" type. Total grab 5 images.
                                                {

                                                    // Image index above 0 will only do extra pad broken inspection.
                                                    if (intBrokenPadImageIndex > 0 || m_smVisionInfo.g_arrPad[1].ref_blnWantSeparateBrokenPadThresholdSetting)
                                                    {
                                                        m_bGrabImageFinalResult_TL = WaitEventDone(intBrokenPadImageIndex, ROIPartition.Side, "A12");

                                                        if (m_bGrabImageFinalResult_TL)
                                                        {
                                                            // Center Broken Pad Inspection
                                                            m_bSubTh_SideTLTest_Result = !Pad5SInspection_MultiThreading_ImageMerge2(0x12, ref m_eInspectionResult_SideTL, intBrokenPadImageIndex);
                                                        }
                                                    }
                                                }

                                                if (m_bGrabImageFinalResult_TL && m_blnCustomWantPackage && m_bSubTh_SideTLTest_Result && (((m_smVisionInfo.g_arrPad[1].ref_intFailPkgOptionMask & 0x01) > 0) || m_smVisionInfo.g_arrPad[1].GetWantInspectPackage()))
                                                {
                                                    int intPackageBrightDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgBrightFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Bright Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                    m_bGrabImageFinalResult_TL = WaitEventDone(intPackageBrightDefectImageIndex, ROIPartition.Side, "A13");

                                                    if (m_bGrabImageFinalResult_TL)
                                                    {
                                                        // Center Package Bright Field Inspection
                                                        m_bSubTh_SideTLTest_Result = !Package5SInspection_MultiThreading(0x12, ref m_eInspectionResult_SideTL, intPackageSizeImageInddex, intPackageBrightDefectImageIndex, PkgInspectionType.BrightField);

                                                        TrackTiming(false, "TL1b", false, m_smVisionInfo.g_blnTrackTL);

                                                        if (m_bSubTh_SideTLTest_Result)
                                                        {
                                                            int intPackageDarkDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgDarkFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Dark Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                            m_bGrabImageFinalResult_TL = WaitEventDone(intPackageDarkDefectImageIndex, ROIPartition.Side, "A14");

                                                            if (m_bGrabImageFinalResult_TL)
                                                            {
                                                                m_bSubTh_SideTLTest_Result = !Package5SInspection_MultiThreading(0x12, ref m_eInspectionResult_SideTL, intPackageSizeImageInddex, intPackageDarkDefectImageIndex, PkgInspectionType.DarkField);

                                                                TrackTiming(false, "TL1c", false, m_smVisionInfo.g_blnTrackTL);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                        }

                        TrackTiming(false, "TL2", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackTL);
                        m_bSubTh_SideTLTest = false;

                    }
                }
                catch (Exception ex)
                {
                    m_bSubTh_SideTLTest = false;
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_SideTL() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_SideTL = null;
            m_blnStopped_SideTLThread = true;
        }

        private void UpdateSubProgress_SideBR()
        {
            /*
             * ---------Inspection Sequence # ---------------------:
             * Sequence 0:  - Pad Inspection > Image 2
             *              - Package Size Inspection > Image 2
             *              - Package Defect Inspection > Image 2 
             * Sequence 1:  - Pad Inspection > Image 2
             *              - Package Size Inspection > Image 2
             *              - Package Defect Inspection > Image 2
             *              - Package Defect 2 Inspection > Image 3
             * Sequence 2:  - Pad Inspection > Image 2 + 3
             *              - Package Size Inspection > Image 2
             *              - Package Defect Inspection > Image 2 
             */

            int intInspectionSequence = 1;

            //HiPerfTimer T1 = new HiPerfTimer();
            //float fTiming = 0;
            //float fTimingPrev = 0;

            while (!m_blnStopping)
            {
                try
                {
                    if (m_bSubTh_SideBRTest)
                    {
                        //T1.Start();
                        //fTiming = 0;
                        //fTimingPrev = 0;
                        //m_strTrack_BR = "";

                        //fTiming = T1.Timing;
                        //m_strTrack_BR += ", BR1=" + (fTiming - fTimingPrev).ToString();
                        //fTimingPrev = fTiming;

                        //m_T2.Start();
                        //m_fTiming2 = 0;
                        //m_fTimingPrev2 = 0;
                        //m_strTrack_Center = "";

                        //m_fTiming2 = m_T2.Timing;
                        //m_strTrack_Center += ", BR1=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        //m_fTimingPrev2 = m_fTiming2;

                        m_bSubTh_SideBRTest_Result = false;
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("BR1");
                        TrackTiming(false, "BR1", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackBR);
                        // --------------------------- Pad 5S Sequence -----------------------------------------------------------------------------
                        switch (intInspectionSequence)
                        {
                            case 1:
                                {
                                    m_bGrabImageFinalResult_BR = WaitEventDone(0, ROIPartition.Side, "A15");

                                    if (m_bGrabImageFinalResult_BR)
                                    {
                                        // Get Grab image index for package size
                                        int[] arrPackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[0].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);

                                        // Wait grab image # done for package size
                                        m_bGrabImageFinalResult_Center = WaitEventDone(arrPackageSizeImageIndex, ROIPartition.Center, "A16");

                                        int intPackageSizeImageInddex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgSizeImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                        m_bGrabImageFinalResult_BR = WaitEventDone(intPackageSizeImageInddex, ROIPartition.Side, "A17");

                                        int[] arrSidePackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[2].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);
                                        m_bGrabImageFinalResult_BR = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A18");

                                        arrSidePackageSizeImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[3].GetEdgeImageViewNo(), m_smVisionInfo.g_intVisionIndex);
                                        m_bGrabImageFinalResult_BR = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11"); // 2020 01 14 - CCENG://Shoud BR, not TL. m_bGrabImageFinalResult_TL = WaitEventDone(arrSidePackageSizeImageIndex, ROIPartition.Side, "A11");

                                        if (m_blnCustomWantColor)
                                        {
                                            int[] arrSideColorImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[2].ref_arrDefectImageNo.ToArray(), m_smVisionInfo.g_intVisionIndex);
                                            m_bGrabImageFinalResult_BR = WaitEventDone(arrSideColorImageIndex, ROIPartition.Side, "A18 - Color");

                                            arrSideColorImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[3].ref_arrDefectImageNo.ToArray(), m_smVisionInfo.g_intVisionIndex);
                                            m_bGrabImageFinalResult_BR = WaitEventDone(arrSideColorImageIndex, ROIPartition.Side, "A11 - Color");
                                        }

                                        if (m_bGrabImageFinalResult_BR)
                                        {
                                            m_bSubTh_SideBRTest_Result = !Pad5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, intPackageSizeImageInddex, arrPackageSizeImageIndex, 0);

                                            TrackTiming(false, "BRa [" + m_smVisionInfo.g_arrPad[2].m_strTrack + "]", false, m_smVisionInfo.g_blnTrackBR);

                                            if (m_bSubTh_SideBRTest_Result)
                                            {
                                                int intBrokenPadImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);

                                                //2021-07-17 ZJYEOH : hide this as now can separate broken threshold
                                                //if (m_smVisionInfo.g_intImageMergeType == 3 || intBrokenPadImageIndex > 0 || m_smVisionInfo.g_arrPad[1].ref_blnWantSeparateBrokenPadThresholdSetting) // "Merge Grab 3 and Grab 4" type. Total grab 5 images.
                                                {
                                                    // Image index above 0 will only do extra pad broken inspection.
                                                    if (intBrokenPadImageIndex > 0 || m_smVisionInfo.g_arrPad[1].ref_blnWantSeparateBrokenPadThresholdSetting)
                                                    {
                                                        m_bGrabImageFinalResult_BR = WaitEventDone(intBrokenPadImageIndex, ROIPartition.Side, "A19");

                                                        if (m_bGrabImageFinalResult_BR)
                                                        {
                                                            // Center Broken Pad Inspection
                                                            m_bSubTh_SideBRTest_Result = !Pad5SInspection_MultiThreading_ImageMerge2(0x0C, ref m_eInspectionResult_SideBR, intBrokenPadImageIndex);
                                                        }
                                                    }
                                                }

                                                if (m_bGrabImageFinalResult_BR && m_blnCustomWantPackage && m_bSubTh_SideBRTest_Result && (((m_smVisionInfo.g_arrPad[1].ref_intFailPkgOptionMask & 0x01) > 0) || m_smVisionInfo.g_arrPad[1].GetWantInspectPackage()))
                                                {
                                                    int intPackageBrightDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgBrightFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Bright Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                    m_bGrabImageFinalResult_BR = WaitEventDone(intPackageBrightDefectImageIndex, ROIPartition.Side, "A20");

                                                    if (m_bGrabImageFinalResult_BR)
                                                    {
                                                        // Center Package Bright Field Inspection
                                                        m_bSubTh_SideBRTest_Result = !Package5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, intPackageSizeImageInddex, intPackageBrightDefectImageIndex, PkgInspectionType.BrightField);

                                                        TrackTiming(false, "BRb", false, m_smVisionInfo.g_blnTrackBR)
                                                            ;
                                                        if (m_bSubTh_SideBRTest_Result)
                                                        {
                                                            int intPackageDarkDefectImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[1].ref_intPadPkgDarkFieldImageViewNo, m_smVisionInfo.g_intVisionIndex);  // Get Package Dark Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage

                                                            m_bGrabImageFinalResult_BR = WaitEventDone(intPackageDarkDefectImageIndex, ROIPartition.Side, "A21");

                                                            if (m_bGrabImageFinalResult_BR)
                                                            {
                                                                m_bSubTh_SideBRTest_Result = !Package5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, intPackageSizeImageInddex, intPackageDarkDefectImageIndex, PkgInspectionType.DarkField);

                                                                TrackTiming(false, "BRc", false, m_smVisionInfo.g_blnTrackBR);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                                //{
                                //    //int intImageIndex = GetArrayImageIndex(0);
                                //    //if (intImageIndex == 0)        
                                //    //{
                                //    //    WaitEventDone(ref m_bGrabImage1Done, true);     
                                //    //}
                                //    //else   
                                //    //{
                                //    //    WaitEventDone(ref m_bGrabImage2Done, true);     // Image 2 (in arrImage[0]) is used for side package 
                                //    //}

                                //    int intImageIndex = GetArrayImageIndex(0);
                                //    if (m_smVisionInfo.g_intImageMergeType == 0)        // "No Merge" type. Total grab 2 images.
                                //    {
                                //        WaitEventDone(ref m_bGrabImage1Done, true);     // Image 1 (in arrImage[0]) is used for side pad
                                //        TrackTiming(false, "BR-W1", false);
                                //    }
                                //    else if (m_smVisionInfo.g_intImageMergeType == 1)   // "Merge Grab 1 and Grab 2" type. Total grab 3 images.
                                //    {
                                //        WaitEventDone(ref m_bGrabImage2Done, true);     // Image 2 (in arrImage[0]) is used for side pad. 
                                //        TrackTiming(false, "BR-W2", false);
                                //    }
                                //    else if (m_smVisionInfo.g_intImageMergeType == 3)   // "Merge Grab 1 and Grab 2" type. Total grab 5 images.
                                //    {
                                //        WaitEventDone(ref m_bGrabImage2Done, true);     // Image 2 (in arrImage[0]) is used for side package 
                                //    }

                                //    m_bSubTh_SideBRTest_Result = !Pad5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, 0, intImageIndex);

                                //    if (m_bSubTh_SideBRTest_Result)
                                //    {
                                //        if (m_smVisionInfo.g_intImageMergeType == 3) // "Merge Grab 3 and Grab 4" type. Total grab 5 images.
                                //        {
                                //            WaitEventDone(ref m_bGrabImage4Done, true);     // Image 4 (in arrImage[0]) is used for side pad

                                //            m_bSubTh_SideBRTest_Result = !Pad5SInspection_MultiThreading_ImageMerge2(0x0C, ref m_eInspectionResult_SideBR, 2);
                                //        }

                                //        if (m_blnCustomWantPackage && m_bSubTh_SideBRTest_Result)
                                //        {
                                //            m_bSubTh_SideBRTest_Result = !Package5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, 0, 0, PkgInspectionType.BrightField); // Pkg 1 defect Inspection

                                //            if (m_bSubTh_SideBRTest_Result)
                                //            {
                                //                if (m_smVisionInfo.g_intImageMergeType == 1)
                                //                {
                                //                    intImageIndex = GetArrayImageIndex(1);  // Get Package Dark Field Defect Image Index. In this case, the image index is 1 for PadPackage and 2 for Pad5SPackage
                                //                    if (intImageIndex == 1)
                                //                    {
                                //                        WaitEventDone(ref m_bGrabImage2Done, true);
                                //                        TrackTiming(false, "BR-W3", false);
                                //                    }
                                //                    else
                                //                    {
                                //                        WaitEventDone(ref m_bGrabImage3Done, true);     // Image 3 (in arrImage[1]) is used for side package defect 2 inspection
                                //                        TrackTiming(false, "BR-W4", false);
                                //                    }
                                //                }
                                //                else if (m_smVisionInfo.g_intImageMergeType == 3)
                                //                {
                                //                    intImageIndex = GetArrayImageIndex(2);  // Get Package Dark Field Defect Image Index. In this case, the image index is 2 for PadPackage and 4 for Pad5SPackage
                                //                    if (intImageIndex == 2)
                                //                    {
                                //                        WaitEventDone(ref m_bGrabImage3Done, true);
                                //                        TrackTiming(false, "BR-W3", false);
                                //                    }
                                //                    else
                                //                    {
                                //                        WaitEventDone(ref m_bGrabImage5Done, true);     // Image 5 (in arrImage[1]) is used for side package defect 2 inspection
                                //                        TrackTiming(false, "BR-W4", false);
                                //                    }
                                //                }
                                //                m_bSubTh_SideBRTest_Result = !Package5SInspection_MultiThreading(0x0C, ref m_eInspectionResult_SideBR, 0, intImageIndex, PkgInspectionType.DarkField);
                                //            }
                                //        }

                                //    }
                                //}
                                break;
                        }

                        TrackTiming(false, "BR2", false, m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackBR);
                        m_bSubTh_SideBRTest = false;


                    }
                }
                catch (Exception ex)
                {
                    m_bSubTh_SideBRTest = false;
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_SideBR() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_SideBR = null;
            m_blnStopped_SideBRThread = true;
        }

        private void UpdateSubProgress_AfterInspect()
        {
            while (!m_blnStopping)
            {
                try
                {
                    if (m_bSubTh_StartAfterInspect)
                    {
                        //m_bSubTh_StartAfterInspect = false;
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("AF1");
                        TrackTiming(false, "AF1", false, m_smVisionInfo.g_blnTrackBasic);
                        // Merge 5 side rotated images into 1 rotated image.
                        //RotatedImageMerge();

                        //Copy original image to rotated image first
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                                m_smVisionInfo.g_arrColorImages[0].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 0);
                            else 
                                m_smVisionInfo.g_arrImages[0].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 0);
                        }

                        TrackTiming(false, "AF1a", false, m_smVisionInfo.g_blnTrackBasic);

                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                if (m_smVisionInfo.g_arrColorImages.Count > 1)
                                    m_smVisionInfo.g_arrColorImages[1].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 1);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrImages.Count > 1)
                                    m_smVisionInfo.g_arrImages[1].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 1);
                            }
                        }

                        TrackTiming(false, "AF1b", false, m_smVisionInfo.g_blnTrackBasic);
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                if (m_smVisionInfo.g_arrColorImages.Count > 2)
                                    m_smVisionInfo.g_arrColorImages[2].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 2);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrImages.Count > 2)
                                    m_smVisionInfo.g_arrImages[2].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 2);
                            }
                        }

                        TrackTiming(false, "AF1c", false, m_smVisionInfo.g_blnTrackBasic);
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                if (m_smVisionInfo.g_arrColorImages.Count > 3)
                                    m_smVisionInfo.g_arrColorImages[3].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 3);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrImages.Count > 3)
                                    m_smVisionInfo.g_arrImages[3].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 3);
                            }
                        }
                        TrackTiming(false, "AF1d", false, m_smVisionInfo.g_blnTrackBasic);
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                if (m_smVisionInfo.g_arrColorImages.Count > 4)
                                    m_smVisionInfo.g_arrColorImages[4].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 4);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrImages.Count > 4)
                                    m_smVisionInfo.g_arrImages[4].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 4);
                            }
                        }
                        TrackTiming(false, "AF1d2", false, m_smVisionInfo.g_blnTrackBasic);
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                            {
                                if (m_smVisionInfo.g_arrColorImages.Count > 5)
                                    m_smVisionInfo.g_arrColorImages[5].CopyTo(ref m_smVisionInfo.g_arrColorRotatedImages, 5);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrImages.Count > 5)
                                    m_smVisionInfo.g_arrImages[5].CopyTo(ref m_smVisionInfo.g_arrRotatedImages, 5);
                            }
                        }
                        TrackTiming(false, "AF1e", false, m_smVisionInfo.g_blnTrackBasic);
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip copy image if next cycle of inspection has started.
                        {
                            if (m_blnRotateImageUpdated && m_smVisionInfo.g_blnPadInpected)
                            {
                                if (m_smVisionInfo.g_blnViewColorImage)
                                    CopyToColorRotatedImage();
                                else
                                {
                                    CopyToRotatedImage();
                                }
                            }
                        }
                        TrackTiming(false, "AF1f", false, m_smVisionInfo.g_blnTrackBasic);
                        // Unlock to allow other thread use the pad variables e.g drawing.
                        if (!m_smVisionInfo.g_blnInspectionInProgress)  // 2019 07 02 - CCENG: Skip unlock if next cycle of inspection has started.
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrPad[i] != null)
                                {
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnInspectLock)
                                    {
                                        m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = false;
                                        //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "F002,";
                                    }
                                }
                            }
                        }

                        TrackTiming(false, "AF1h", false, m_smVisionInfo.g_blnTrackBasic);
                        m_smVisionInfo.g_blnViewRotatedImage = m_blnRotateImageUpdated;     // Dun reset the g_blnViewRotatedImage to false early of inspection, but set g_blnViewRotatedImage after inspection. This is to prevent drawing keep blinking displaying non rotate and rotate image frequently.
                        m_smVisionInfo.VS_VM_UpdateSmallPictureBox = true;
                        m_smVisionInfo.VS_AT_UpdateQuantity = true;
                        m_smVisionInfo.PR_VM_UpdateQuantity = true;
                        if (m_bWantPHTest)
                        {
                            m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult = true;
                            m_smVisionInfo.g_blnViewPadInspection = false;
                        }
                        else
                        {
                            if (m_smVisionInfo.g_intViewInspectionSetting == 0)     // 2019 10 16 - CCENG: this code is copied when transfer "better line profile form" code to this project.
                                m_smVisionInfo.g_blnViewPadInspection = true;
                            else
                                m_smVisionInfo.g_strErrorMessage = "";
                            m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult = false;
                        }
                        m_smVisionInfo.g_blnDrawCompletedAfterInspect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

                        //2020-04-30 ZJYEOH : Record Result Log
                        if (m_blnAuto && m_smVisionInfo.g_blnWantRecordResult && (m_smVisionInfo.g_intViewInspectionSetting == 0) && (m_smVisionInfo.g_intTestedTotal <= m_smVisionInfo.g_intResultLogMaxCount))
                            RecordResultLog();

                        if (m_smVisionInfo.g_blnTrackBasic) TrackTiming(false, "AF2", false, m_smVisionInfo.g_blnTrackBasic);
                   
                        m_bSubTh_StartAfterInspect = false;
                    }
                }
                catch (Exception ex)
                {
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_SideBR() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_AfterInspect = null;
            m_blnStopped_AfterInspect = true;
        }

        private void GRRRecord()
        {
            throw new Exception("The method or operation is not implemented.");
        }



        /// <summary>
        /// Perform bottom pad inspection
        /// </summary>
        /// <param name="blnAuto">true = production mode, false = manual test</param>
        /// <returns>true = inspection pass, false = inspection fail</returns>
        private bool StartPad5STest(bool blnAuto)
        {
            //WriteDebug("b1");
            //// Init variables
            //bool bWholeTestFail = false;
            ////m_smVisionInfo.g_intSelectedImage = 0;      // Make sure inspect First images

            //// Reset inspection drawing
            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            //{
            //    m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing =
            //    m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing =
            //    m_smVisionInfo.g_arrPad[i].ref_blnViewPkgResultDrwaing = false;
            //}

            //// Loop Pad Test From Middle, Up, Right, Down to Left
            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            //{
            //    m_smVisionInfo.g_arrPad[i].ref_blnLock = true;

            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
            //        break;

            //    // Reset previous inspection data
            //    m_smVisionInfo.g_arrPad[i].ResetInspectionData();
            //    m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true;

            //    // Identify pad defination for displaying fail message
            //    string strPosition = GetROIDefinition(i);

            //    WriteDebug("b2_" + i);
            //    // Find unit location, size and angle
            //    if (m_smCustomizeInfo.g_intPreviousVersionIndex == 2)
            //    {
            //        if (!FindUnit_0306(i))
            //        {
            //            bWholeTestFail = true;
            //            m_smVisionInfo.g_strErrorMessage = strPosition + m_smVisionInfo.g_strErrorMessage;

            //            if (blnAuto)
            //            {
            //                m_objVisionIO.PositionReject.SetOn("V3 ");
            //                m_smVisionInfo.g_intPositionFailureTotal++;
            //                SaveRejectImage("Position");    // Should save then
            //            }
            //            break;
            //        }
            //    }
            //    else
            //    {
            //        if (!FindUnit(i))
            //        {
            //            bWholeTestFail = true;
            //            m_smVisionInfo.g_strErrorMessage = strPosition + m_smVisionInfo.g_strErrorMessage;

            //            if (blnAuto)
            //            {
            //                if (m_blnCustomWantPositioning)
            //                    m_objVisionIO.PositionReject.SetOn("V3 ");
            //                m_smVisionInfo.g_intPositionFailureTotal++;
            //                SaveRejectImage("Position");    // Should save then
            //            }
            //            break;
            //        }
            //    }

            //    WriteDebug("b3_" + i);
            //    //fTime = t1.Timing;
            //    //strT += ", A=" + (fTime - fPrev).ToString("F4");
            //    //fPrev = fTime;
            //    if (i == 0) // Positioning test in middle pad only.
            //        if (!IsPositioningOK())
            //        {
            //            bWholeTestFail = true;
            //            if (blnAuto)
            //            {
            //                m_smVisionInfo.g_intPositionFailureTotal++;
            //                SaveRejectImage("Positioning");     // Should save then
            //            }

            //            m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
            //            break;
            //        }

            //    //fTime = t1.Timing;
            //    //strT += ", B=" + (fTime - fPrev).ToString("F4");
            //    //fPrev = fTime;

            //    WriteDebug("b4_" + i);
            //    if (!IsPackageSizeOK(i))
            //    {
            //        bWholeTestFail = true;
            //        if (blnAuto)
            //        {
            //            m_smVisionInfo.g_intPackageFailureTotal++;
            //            SaveRejectImage("Package");     // Should save then
            //        }

            //        m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
            //        break;
            //    }

            //    //fTime = t1.Timing;
            //    //strT += ", C=" + (fTime - fPrev).ToString("F4");
            //    //fPrev = fTime;

            //    WriteDebug("b5_" + i);
            //    // Rotate to 0 deg for middle pad
            //    if (i == 0 || m_smVisionInfo.g_arrPad[i].ref_blnWantRotateSidePadImage) // Zyro
            //    {
            //        // Rotate image to 0 deg first before start 
            //        //if (m_smCustomizeInfo.g_blnPreviousVersion)
            //        if ((m_smCustomizeInfo.g_intPreviousVersionIndex == 1) || (m_smCustomizeInfo.g_intPreviousVersionIndex == 2))
            //            RotateImagesTo0Degree_0306(i);
            //        else
            //            RotateImagesTo0Degree(i);
            //    }

            //    WriteDebug("b6_" + i);
            //    //fTime = t1.Timing;
            //    //strT += ", D=" + (fTime - fPrev).ToString("F4");
            //    //fPrev = fTime;
            //    m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = false;

            //}


            ////t1.Start();
            //if (!bWholeTestFail)
            //{
            //    // Loop Pad Test From Middle, Up, Right, Down to Left
            //    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            //    {
            //        WriteDebug("b7_" + i);
            //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
            //            //if (i > 0)
            //            break;

            //        m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing = true;

            //        // Identify pad defination for displaying fail message
            //        string strPosition = GetROIDefinition(i);

            //        if (i == 0 ||
            //           (i > 0 && !m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2) ||
            //            m_smVisionInfo.g_arrPad[i].ref_intCheckPadDimensionImageIndex == 1)
            //        {
            //            WriteDebug("b8_" + i);
            //            //if (blnFirstTime)
            //            {
            //                if (!IsPadOK(i))
            //                {
            //                    bWholeTestFail = true;
            //                    if (blnAuto)
            //                    {
            //                        m_smVisionInfo.g_intPadFailureTotal++;
            //                        SaveRejectImage("Pad");
            //                    }

            //                    m_smVisionInfo.g_strErrorMessage += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
            //                    break;
            //                }
            //            }
            //        }
            //        else if (m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2)
            //        {
            //            WriteDebug("b9_" + i);
            //            if (!IsBothPadOK(i))    // This IsBothPadOK() only work if CheckPadDimensionImageIndex is 0 and for side pad only
            //            {
            //                bWholeTestFail = true;
            //                if (blnAuto)
            //                {
            //                    m_smVisionInfo.g_intPadFailureTotal++;
            //                    SaveRejectImage("Pad");
            //                }

            //                m_smVisionInfo.g_strErrorMessage += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
            //                break;
            //            }
            //        }

            //        WriteDebug("b10_" + i);
            //        if (!IsPackageOK(i))
            //        {
            //            bWholeTestFail = true;
            //            if (blnAuto)
            //            {
            //                m_smVisionInfo.g_intPackageFailureTotal++;
            //                SaveRejectImage("Package");
            //            }

            //            m_smVisionInfo.g_strErrorMessage += m_smVisionInfo.g_arrPad[i].GetPackageFailTestDisplayResult(strPosition);
            //            break;
            //        }

            //        WriteDebug("b11_" + i);
            //    }
            //}

            ////t1.Stop();
            ////float fT2 = t1.Duration;
            ////string str = fT.ToString() + "   " + fT2.ToString();
            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            //    m_smVisionInfo.g_arrPadROIs[i][0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);

            //m_smVisionInfo.g_blnViewPadInspection = true;
            //m_smVisionInfo.VM_AT_UpdateErrorMessage = true;

            //m_smVisionInfo.g_blnPadInpected = true;

            //WriteDebug("b12");
            //if (bWholeTestFail)
            //    return false;
            //else
            return true;
        }

        private bool OrientInspection_MultiThreading(ref ResulType eInspectionResult)
        {
            if (!m_blnCustomWantOrient)
                return true;

            // Reset orientation IO
            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
            {
                m_blnOrientResult1_Out = false;
                m_blnOrientResult2_Out = false;
            }
            else
            {
                if (m_objVisionIO.OrientResult1 != null)
                    m_objVisionIO.OrientResult1.SetOff(strTrackHeadName + " OrientResult1 1");
                if (m_objVisionIO.OrientResult2 != null)
                    m_objVisionIO.OrientResult2.SetOff(strTrackHeadName + " OrientResult2 2");
            }

            // make sure template learn
            if (m_smVisionInfo.g_arrPadOrientROIs.Count < 3)
            {
                m_smVisionInfo.g_strErrorMessage += "*Orient : No Orient Template Found";

                eInspectionResult = ResulType.FailOrient;

                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                return false;
            }

            // reset all inspection data
            m_smVisionInfo.g_objPadOrient.ResetInspectionData();

            m_smVisionInfo.g_arrImages[0].CopyTo(m_smVisionInfo.g_arrRotatedImages[0]);

            int intMatchCount = 0;
            m_smVisionInfo.g_intOrientResult[0] = -1;  // 0:0deg, 1:90deg, 2:180deg, 3:-90, 4:Fail

            int intAngle;

            m_smVisionInfo.g_arrPadOrientROIs[0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
            m_smVisionInfo.g_arrPadOrientROIs[1].AttachImage(m_smVisionInfo.g_arrPadOrientROIs[0]);
            m_smVisionInfo.g_arrPadOrientROIs[2].AttachImage(m_smVisionInfo.g_arrPadOrientROIs[1]);
            //intAngle = m_smVisionInfo.g_objPadOrient.DoOrientationInspection(
            //m_smVisionInfo.g_arrPadOrientROIs[0], 2, !m_smVisionInfo.g_blnWantGauge,
            //10,
            //ref blnPreciseAngleResult);  // Use FinalReduction=2 because match center point is not very important in MarkOrient Test.

            intAngle = m_smVisionInfo.g_objPadOrient.DoOrientationInspection_WithSubMatcher4(m_smVisionInfo.g_arrRotatedImages[0],
                        m_smVisionInfo.g_arrPadOrientROIs[0], m_smVisionInfo.g_arrPadOrientROIs[1], m_smVisionInfo.g_arrPadOrientROIs[2], 1);  // 2020 01 08 - CCENG: Change from 2 to 1 bcos for unit 0603 pattern, angle not enough precise if FinalReduction is 2.

            m_smVisionInfo.g_fOrientScore[0] = m_smVisionInfo.g_objPadOrient.GetMinScore();

            m_smVisionInfo.g_intOrientResult[0] = intAngle;
            m_smVisionInfo.g_intOrientResult[1] = intAngle; //2020-09-24 ZJYEOH : Temporary store inside second index fot later use because 1st index will set to 4 when fail angle or position

            Orient objOrient = m_smVisionInfo.g_objPadOrient;

            m_smVisionInfo.g_fOrientCenterX[0] = objOrient.ref_fObjectX;
            m_smVisionInfo.g_fOrientCenterY[0] = objOrient.ref_fObjectY;
            m_smVisionInfo.g_fSubOrientCenterX[0] = objOrient.ref_fSubObjectX;
            m_smVisionInfo.g_fSubOrientCenterY[0] = objOrient.ref_fSubObjectY;
            m_smVisionInfo.g_fOrientScore[0] = objOrient.GetMinScore();
            m_smVisionInfo.g_fOrientAngle[0] = objOrient.ref_fDegAngleResult;
            m_smVisionInfo.g_blnViewOrientObject = true;

            if (m_smVisionInfo.g_intOrientResult[0] < 4)
            {
                switch (m_smVisionInfo.g_intOrientResult[0])
                {
                    default:
                    case 0:
                        m_intOrientAngle = 0;
                        break;
                    case 1:
                        m_intOrientAngle = 90;
                        break;
                    case 2:
                        m_intOrientAngle = 180;
                        break;
                    case 3:
                        m_intOrientAngle = -90;
                        break;
                }

            }

            bool blnFailAngle = false;
            bool blnFailPosition = false;
            if (m_smVisionInfo.g_intOrientResult[0] != 4 &&
                m_smVisionInfo.g_fOrientScore[0] >= 0)
                //&& !m_smVisionInfo.g_blnCheckPad)
            {
                float fAngleResult = Math.Abs(m_smVisionInfo.g_objPadOrient.ref_fDegAngleResult); //GetResultAngle()
                float CenterX = 0;
                float CenterY = 0;
                float fXAfterRotated = m_smVisionInfo.g_objPadOrient.ref_fTemplateX;
                float fYAfterRotated = m_smVisionInfo.g_objPadOrient.ref_fTemplateY;
                float fCenterXDiff = 0;
                float fCenterYDiff = 0;

                //CenterX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + (float)(m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIWidth) / 2;
                //CenterY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + (float)(m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIHeight) / 2;

                ////2020-09-24 ZJYEOH : Should use current angle to rotate template center point because when get center point different, the object center point is based on current angle
                //fXAfterRotated = (float)((CenterX) + ((m_smVisionInfo.g_objPadOrient.ref_fTemplateX - CenterX) * Math.Cos(m_intOrientAngle * Math.PI / 180)) - //m_smVisionInfo.g_objPadOrient.ref_intRotatedAngle
                //                   ((m_smVisionInfo.g_objPadOrient.ref_fTemplateY - CenterY) * Math.Sin(m_intOrientAngle * Math.PI / 180)));
                //fYAfterRotated = (float)((CenterY) + ((m_smVisionInfo.g_objPadOrient.ref_fTemplateX - CenterX) * Math.Sin(m_intOrientAngle * Math.PI / 180)) +
                //                    ((m_smVisionInfo.g_objPadOrient.ref_fTemplateY - CenterY) * Math.Cos(m_intOrientAngle * Math.PI / 180)));

                fCenterXDiff = m_smVisionInfo.g_objPadOrient.GetCenterXDiff(fXAfterRotated, m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX);
                fCenterYDiff = m_smVisionInfo.g_objPadOrient.GetCenterYDiff(fYAfterRotated, m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY);

                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                {
                    m_fOffsetX = fCenterXDiff;
                    m_fOffsetY = fCenterYDiff;
                    m_fOffsetAngle = fAngleResult;
                }

                if (m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientAngleTolerance)
                {
                    if (m_smVisionInfo.g_arrPad[0].ref_fAngleTolerance <= fAngleResult) //m_smVisionInfo.g_objPadOrient.ref_fAngleTolerance 
                    {
                        m_smVisionInfo.g_intOrientResult[0] = 4;
                        m_arrErrorMessage[0] += "*Fail Orient Angle Tolerance : Set = " + m_smVisionInfo.g_arrPad[0].ref_fAngleTolerance.ToString("f4") +
                            " , Result = " + fAngleResult.ToString("f4");
                        blnFailAngle = true;
                    }
                }
                if (m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientXTolerance)
                {
                    if (Math.Abs(fCenterXDiff) >= m_smVisionInfo.g_arrPad[0].ref_fXTolerance) //m_smVisionInfo.g_objPadOrient.ref_fXTolerance
                    {
                        m_smVisionInfo.g_intOrientResult[0] = 4;
                        m_arrErrorMessage[0] += "*Fail Orient X Tolerance : Set = " + m_smVisionInfo.g_arrPad[0].ref_fXTolerance.ToString("f4") +
                            " , Result = " + fCenterXDiff.ToString("f4");
                        blnFailPosition = true;
                    }
                }
                if (m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientYTolerance)
                {
                    if (Math.Abs(fCenterYDiff) >= m_smVisionInfo.g_arrPad[0].ref_fYTolerance) //m_smVisionInfo.g_objPadOrient.ref_fYTolerance
                    {
                        m_smVisionInfo.g_intOrientResult[0] = 4;
                        m_arrErrorMessage[0] += "*Fail Orient Y Tolerance : Set = " + m_smVisionInfo.g_arrPad[0].ref_fYTolerance.ToString("f4") +
                            " , Result = " + fCenterYDiff.ToString("f4");
                        blnFailPosition = true;
                    }
                }
            }



            if (((!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.OrientResult1 != null) || m_smCustomizeInfo.g_blnWantUseTCPIPIO) && m_smVisionInfo.g_intOrientResult[0] == 4)
            {

                if (m_smVisionInfo.g_objPadOrient.ref_strErrorMessage == "" && m_smVisionInfo.g_strErrorMessage == "" && m_arrErrorMessage[0] == "")
                {
                    eInspectionResult = ResulType.FailOrient;
                    m_arrErrorMessage[0] = "*Recipe is corrupted. Please relearn.";
                }
                else
                {
                    eInspectionResult = ResulType.FailOrient;
                    m_arrErrorMessage[0] += "*" + m_smVisionInfo.g_objPadOrient.ref_strErrorMessage;
                }

                if (blnFailAngle || blnFailPosition)
                {
                    eInspectionResult = ResulType.FailPosition;
                    if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                    {
                        m_objVisionIO.PositionReject.SetOn("V3 PositionReject 15");
                    }
                    else
                    {
                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            if (m_intTCPIPResultID == -1)
                                m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                        m_blnPositionReject_Out = true;
                    }
                }
                else
                {
                    if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                        if (m_intTCPIPResultID == -1)
                            m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                    eInspectionResult = ResulType.FailOrient;
                }

                if (blnFailAngle)
                {
                    m_smVisionInfo.g_intAngleFailureTotal++;
                    SaveRejectImage_AddToBuffer("Angle", m_smVisionInfo.g_objPadOrient.ref_strErrorMessage);
                }
                else if (blnFailPosition)
                {
                    m_smVisionInfo.g_intPositionFailureTotal++;
                    SaveRejectImage_AddToBuffer("Position", m_smVisionInfo.g_objPadOrient.ref_strErrorMessage);
                }
                else
                {
                    SaveRejectImage_AddToBuffer("Orient", m_smVisionInfo.g_objPadOrient.ref_strErrorMessage);
                }

                return false;
            }
            else if (m_smVisionInfo.g_intOrientResult[0] > 0 && ((!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.OrientResult1 != null && m_objVisionIO.OrientResult2 != null) || m_smCustomizeInfo.g_blnWantUseTCPIPIO))
            {
                switch (m_smVisionInfo.g_intOrientResult[0])
                {
                    case 1:
                        if (m_smCustomizeInfo.g_intOrientIO == 0)
                        {
                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            {
                                m_blnOrientResult1_Out = false;
                                m_blnOrientResult2_Out = true;
                            }
                            else
                            {
                                m_objVisionIO.OrientResult1.SetOff(strTrackHeadName + " OrientResult1 3");
                                m_objVisionIO.OrientResult2.SetOn(strTrackHeadName + " OrientResult1 4");
                            }
                        }
                        else
                        {
                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            {
                                m_blnOrientResult1_Out = true;
                                m_blnOrientResult2_Out = false;
                            }
                            else
                            {
                                m_objVisionIO.OrientResult1.SetOn(strTrackHeadName + " OrientResult1 3");
                                m_objVisionIO.OrientResult2.SetOff(strTrackHeadName + " OrientResult1 4");
                            }
                        }
                        break;
                    case 2:
                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                        {
                            m_blnOrientResult1_Out = true;
                            m_blnOrientResult2_Out = true;
                        }
                        else
                        {
                            m_objVisionIO.OrientResult1.SetOn(strTrackHeadName + " OrientResult1 5");
                            m_objVisionIO.OrientResult2.SetOn(strTrackHeadName + " OrientResult2 6");
                        }
                        break;
                    case 3:
                        if (m_smCustomizeInfo.g_intOrientIO == 0)
                        {
                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            {
                                m_blnOrientResult1_Out = true;
                                m_blnOrientResult2_Out = false;
                            }
                            else
                            {
                                m_objVisionIO.OrientResult1.SetOn(strTrackHeadName + " OrientResult1 7");
                                m_objVisionIO.OrientResult2.SetOff(strTrackHeadName + " OrientResult2 8");
                            }
                        }
                        else
                        {
                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            {
                                m_blnOrientResult1_Out = false;
                                m_blnOrientResult2_Out = true;
                            }
                            else
                            {
                                m_objVisionIO.OrientResult1.SetOff(strTrackHeadName + " OrientResult1 7");
                                m_objVisionIO.OrientResult2.SetOn(strTrackHeadName + " OrientResult2 8");
                            }
                        }
                        break;
                }
            }

            if (blnFailAngle || blnFailPosition)
            {
                eInspectionResult = ResulType.FailPosition;
                if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                {
                    m_objVisionIO.PositionReject.SetOn("V3 PositionReject 15");
                }
                else
                {
                    if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                        if (m_intTCPIPResultID == -1)
                            m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                    m_blnPositionReject_Out = true;
                }
                return false;
            }

            if (Convert.ToDouble(m_smVisionInfo.g_objPadOrient.ref_fMinScore * 100) > Convert.ToDouble(m_smVisionInfo.g_objPadOrient.GetMinScore() * 100))
            {
                eInspectionResult = ResulType.FailOrient;
                if (m_smVisionInfo.g_objPadOrient.ref_strErrorMessage == "")
                    m_arrErrorMessage[0] += "Fail Orient - Not fulfill Min Setting : Set = " + Convert.ToDouble(m_smVisionInfo.g_objPadOrient.ref_fMinScore * 100).ToString() +
                         " Score = " + Convert.ToDouble(m_smVisionInfo.g_objPadOrient.GetMinScore() * 100).ToString("f2");
                else
                    m_arrErrorMessage[0] += "*" + m_smVisionInfo.g_objPadOrient.ref_strErrorMessage;

                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                return false;
            }

            if (!m_smVisionInfo.g_blnCheckPad)
            {
                if (m_smVisionInfo.g_blnWantPin1 && m_smVisionInfo.g_arrPin1 != null && m_smVisionInfo.g_arrPin1.Count > 0 && m_smVisionInfo.g_arrPin1[0].getWantCheckPin1(0))
                {
                    if (!StartPin1Test_MultiTreading())
                    {
                        m_arrErrorMessage[0] = "Center" + "*Fail Pin 1";
                        if (m_smVisionInfo.g_intViewInspectionSetting == 0)
                            m_smVisionInfo.g_blnDrawPin1Result = true;
                        
                        eInspectionResult = ResulType.FailPin1;
                        if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                        {
                            m_objVisionIO.PositionReject.SetOn("V3 PositionReject 151");
                        }
                        else
                        {
                            m_blnPositionReject_Out = true;
                        }
                        m_smVisionInfo.g_arrPad[0].ref_blnViewUnitPositionDrawing = true; // 20-05-2019 ZJYEOH: Changed to true to draw gauge during production

                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            if (m_intTCPIPResultID == -1)
                                m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                        return false;
                    }
                }
                
            }
            
            return true;
        }
        private bool Pad5SInspection_MultiThreading(int intPadTestMask, ref ResulType eInspectionResult, int intPkgSizeImageIndex, int[] arrPkgSizeImageIndex, int intImageIndex)
        {
            bool bTestFail = false;

            bool blnOrientFail = false;

            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C2a=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            // Loop Pad Test From Middle, Up, Right, Down to Left
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if ((intPadTestMask & (0x01 << i)) == 0)
                    continue;

                //m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = true;  // Set true to stop drawing.
                //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "TA,";

                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;
                
                // 2021 11 24 : CCENG: No need to inspect pad if all option unchecked and package defect unchecked also.
                // 2021 11 24 : CCENG: Consider package defect also is not prevent pad object detected as bright defect during package inspection.
                bool blnCheckContamination = true;
                if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                    m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) &&
                    !m_smVisionInfo.g_arrPad[i].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                    blnCheckContamination = false;

                // Reset previous inspection data
                //m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true;
                m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = false;
                m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = false;
                m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing = false;

                if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                    continue;

                if (m_arr5SFoundUnit[i] && m_arr5SImageRotated2[i][intImageIndex] && m_arr5SPackagedSizeChecked[i])
                    continue;

                if (intPadTestMask == 1)
                {
                    m_fTiming2 = m_T2.Timing;
                    m_strTrack_Center += ", C2b=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                    m_fTimingPrev2 = m_fTiming2;
                }

                //2021-12-01 ZJYEOH : Moved before WantCheckPad so that drawing will reset
                //// Reset previous inspection data
                ////m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true;
                //m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = false;
                //m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = false;
                //m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing = false;

                // (Pending First)
                // 2021 07 16 - If no check pad and package, then no need to continue find unit 
                // 2021 07 16 - If user learn pad, but with 0 pad count + no check pad but got check package, then no need to check find unit also.
                // 2021 07 16 - If user learn pad with pad count > 0 + no check pad but got check package, 
                //              then still need to find unit, bcos pad area need to be ignored during package inspection.
                //bool blnCheckContamination = true;
                //if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false))
                //    blnCheckContamination = false;

                //if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                //    continue;

                // Identify pad defination for displaying fail message
                string strPosition = GetROIDefinition(i);

                //if (m_objVisionIO.PositionReject != null)
                //{
                //    if (m_objVisionIO.PositionReject.IsOn())
                //        m_objVisionIO.PositionReject.SetOff("V3 ");
                //}

                //2020-08-17 ZJYEOH : Wait Orient Test Done
                if (i == 0 && m_blnCustomWantOrient)
                {
                    WaitEventDone(ref m_bSubTh_OrientTest, false);

                    if (!m_bSubTh_OrientTest_Result)
                        blnOrientFail = true;

                    if (m_smVisionInfo.AT_VM_OfflineTestAllPad)
                        blnOrientFail = false;

                    if (!blnOrientFail)
                    {
                        RotateImagesToOrientAngle_MultiThreading(i);
                    }
                }
                if (!blnOrientFail)
                {
                    // Find unit location, size and angle
                    int intFailType = 0;
                    if (!FindUnit_ForPad_Multithreading(i, intPkgSizeImageIndex, arrPkgSizeImageIndex, ref intFailType))
                    {
                        // ----------- Tracking to solve the inconsistency of "unable to find edge for bottom ROI"----------------------------------
                        //if (i == 3)
                        //{
                        //    m_intPadRepeatTestCount++;

                        //    if (m_intPadRepeatTestCount > 1)
                        //    {
                        //        m_intPadRepeatTestCount = 0;
                        //        m_blnRepeatTest = false;
                        //    }
                        //    else
                        //    {
                        //        m_blnRepeatTest = true;
                        //    }
                        //}
                        // -------------------------------------------------------------------------------------------------------------------------

                        m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true;    // 2019 10 09 - CCENG: Draw package measurement result even though the measurement is fail.
                        m_smVisionInfo.g_arrPad[i].SetPadFound(false);
                        bTestFail = true;

                        if (intFailType == 0)
                        {
                            eInspectionResult = ResulType.FailPosition;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                if (m_intTCPIPResultID == -1)
                                    m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                        }
                        else
                        {
                            eInspectionResult = ResulType.FailEdgeNotFound;
                            m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = true;
                            m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing = true;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                if (m_intTCPIPResultID == -1)
                                    m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                        }
                        m_arrErrorMessage[i] = strPosition + m_arrErrorMessage[i];
                        if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                        {
                            m_objVisionIO.PositionReject.SetOn("V3 PositionReject 14");
                            if (m_blnAuto)
                            {
                                if (!m_blnSetBefore)
                                {
                                    //m_smVisionInfo.g_intPositionFailureTotal++;
                                    //m_blnSetBefore = true;
                                }
                            }
                        }
                        else
                        {
                            m_blnPositionReject_Out = true;
                        }
                        break;
                    }
                    else
                    {
                        // ----------- Tracking to solve the inconsistency of "unable to find edge for bottom ROI"----------------------------------
                        //if (i == 3)
                        //{
                        //    // - reset this counter to 0 if no error happen.
                        //    if (m_intPadRepeatTestCount != 0)
                        //        m_intPadRepeatTestCount = 0;
                        //}
                        // -------------------------------------------------------------------------------------------------------------------------

                        m_smVisionInfo.g_arrPad[i].SetPadFound(true);
                    }

                    if (i == 0)
                    {
                        //if (m_blnCustomWantOrient)
                        //{
                        //    if (!m_smVisionInfo.g_arrPad[i].CheckPositionUsingGauge(m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientAngleTolerance,
                        //        m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientXTolerance, m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientYTolerance))
                        //    {
                        //        float Angle = 0, XTolerance = 0, YTolerance = 0;
                        //        m_smVisionInfo.g_arrPad[i].GetPositionResult(ref Angle, ref XTolerance, ref YTolerance);
                        //        if (m_blnCustomWantOrient)
                        //        {
                        //            if (Math.Abs(Angle) >= m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance && m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientAngleTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position Angle Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance.ToString("f4") + ", Result = " + Angle.ToString("f4");
                        //            if (Math.Abs(XTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fXTolerance && m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientXTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position X Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fXTolerance.ToString("f4") + ", Result = " + XTolerance.ToString("f4");
                        //            if (Math.Abs(YTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fYTolerance && m_smVisionInfo.g_objPadOrient.ref_blnWantCheckOrientYTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position Y Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fYTolerance.ToString("f4") + ", Result = " + YTolerance.ToString("f4");
                        //        }
                        //        else
                        //        {
                        //            if (Math.Abs(Angle) >= m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position Angle Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance.ToString("f4") + ", Result = " + Angle.ToString("f4");
                        //            if (Math.Abs(XTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fXTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position X Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fXTolerance.ToString("f4") + ", Result = " + XTolerance.ToString("f4");
                        //            if (Math.Abs(YTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fYTolerance)
                        //                m_arrErrorMessage[i] = strPosition + "*Fail Position Y Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fYTolerance.ToString("f4") + ", Result = " + YTolerance.ToString("f4");
                        //        }
                        //        bTestFail = true;
                        //        eInspectionResult = ResulType.FailPosition;
                        //        if (m_objVisionIO.PositionReject != null)
                        //        {
                        //            m_objVisionIO.PositionReject.SetOn("V3 PositionReject 15");
                        //            //if (m_blnAuto)
                        //            //    m_smVisionInfo.g_intPositionFailureTotal++;
                        //        }
                        //        break;
                        //    }
                        //}
                        //else
                        if (!m_blnCustomWantOrient)
                        {
                            if (!m_smVisionInfo.g_arrPad[i].CheckPositionUsingGauge())
                            {
                                float Angle = 0, XTolerance = 0, YTolerance = 0;
                                m_smVisionInfo.g_arrPad[i].GetPositionResult(ref Angle, ref XTolerance, ref YTolerance);

                                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                {
                                    m_fOffsetX = XTolerance;
                                    m_fOffsetY = YTolerance;
                                    m_fOffsetAngle = Angle;
                                }

                                if (Math.Abs(Angle) >= m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance)
                                    m_arrErrorMessage[i] = strPosition + "*Fail Position Angle Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fAngleTolerance.ToString("f4") + ", Result = " + Angle.ToString("f4");
                                if (Math.Abs(XTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fXTolerance)
                                    m_arrErrorMessage[i] = strPosition + "*Fail Position X Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fXTolerance.ToString("f4") + ", Result = " + XTolerance.ToString("f4");
                                if (Math.Abs(YTolerance) >= m_smVisionInfo.g_arrPad[i].ref_fYTolerance)
                                    m_arrErrorMessage[i] = strPosition + "*Fail Position Y Tolerance : Set = " + m_smVisionInfo.g_arrPad[i].ref_fYTolerance.ToString("f4") + ", Result = " + YTolerance.ToString("f4");

                                bTestFail = true;
                                eInspectionResult = ResulType.FailPosition;
                                if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                                {
                                    m_objVisionIO.PositionReject.SetOn("V3 PositionReject 15");
                                    //if (m_blnAuto)
                                    //    m_smVisionInfo.g_intPositionFailureTotal++;
                                }
                                else
                                {
                                    if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                        if (m_intTCPIPResultID == -1)
                                            m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                                    m_blnPositionReject_Out = true;
                                }
                                break;
                            }
                        }
                        //if (m_smVisionInfo.g_blnWantPin1)
                        //{
                        //    if (!StartPin1Test_MultiTreading())
                        //    {
                        //        m_arrErrorMessage[i] = strPosition + "*Fail Pin 1";

                        //        bTestFail = true;
                        //        eInspectionResult = ResulType.FailPosition;
                        //        if (m_objVisionIO.PositionReject != null)
                        //        {
                        //            m_objVisionIO.PositionReject.SetOn("V3 PositionReject 151");
                        //        }
                        //    }
                        //}
                    }

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2c=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }

                    // Positioning test
                    if (i == 0) // Positioning test in middle pad only.
                    {
                        if (!IsPositioningOK())
                        {
                            bTestFail = true;
                            eInspectionResult = ResulType.FailPosition;
                            m_arrErrorMessage[i] = strPosition + m_arrErrorMessage[i];
                            if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                            {
                                m_objVisionIO.PositionReject.SetOn("V3 PositionReject 16");
                                //if (m_blnAuto)
                                //    m_smVisionInfo.g_intPositionFailureTotal++;
                            }
                            else
                            {
                                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                    if (m_intTCPIPResultID == -1)
                                        m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                                m_blnPositionReject_Out = true;
                            }
                            break;
                        }
                    }
                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2d=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }

                    // Rotate to 0 deg for middle pad

                    if (i == 0)
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            RotateColorImagesTo0Degree_MultiThreading(i, 0, false);  // Pad inspection always use image 1
                        else
                            RotateImagesTo0Degree_MultiThreading(i, 0, false);  // Pad inspection always use image 1
                    }
                    else
                    {
                        //if (m_smVisionInfo.g_arrPad[i].ref_blnWantRotateSidePadImage) // 2020 03 12 - CCENG: If blnWantRotateSidePadImage is false, need to copy image to rotated image also. Inside the RotateImagesTo0Degree_MultiThreading() do the copy.
                        {
                            if (m_smVisionInfo.g_blnViewColorImage)
                                RotateColorImagesTo0Degree_MultiThreading(i, 0, false);  // Pad inspection always use image 1
                            else
                                RotateImagesTo0Degree_MultiThreading(i, 0, false);  // Pad inspection always use image 1
                        }
                    }

                    if (i == 0)
                    {
                        if (m_smVisionInfo.g_blnWantPin1 && m_smVisionInfo.g_arrPin1 != null && m_smVisionInfo.g_arrPin1.Count > 0 && m_smVisionInfo.g_arrPin1[0].getWantCheckPin1(0))
                        {
                            if (!StartPin1Test_MultiTreading())
                            {
                                m_arrErrorMessage[i] = strPosition + "*Fail Pin 1";
                                if (m_smVisionInfo.g_intViewInspectionSetting == 0)
                                    m_smVisionInfo.g_blnDrawPin1Result = true;      // 2020 01 07 - CCENG: Fail and pass also want to draw pin 1.
                                bTestFail = true;
                                eInspectionResult = ResulType.FailPin1;
                                if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
                                {
                                    m_objVisionIO.PositionReject.SetOn("V3 PositionReject 151");
                                }
                                else
                                {
                                    if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                        if (m_intTCPIPResultID == -1)
                                            m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                                    m_blnPositionReject_Out = true;
                                }
                                break;
                            }
                            if (m_smVisionInfo.g_intViewInspectionSetting == 0)
                                m_smVisionInfo.g_blnDrawPin1Result = true;      // 2020 01 07 - CCENG: Fail and pass also want to draw pin 1.
                        }
                    }

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2e=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }

                    m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = true; // 20-05-2019 ZJYEOH: Changed to true to draw gauge during production
                }
            }

            if (!bTestFail && !blnOrientFail)
            {
                // Loop Pad Test From Middle, Up, Right, Down to Left
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if ((intPadTestMask & (0x01 << i)) == 0)
                        continue;

                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    // (Pending First)
                    // 2021 07 16 - If no check pad and package, then no need to continue find unit 
                    // 2021 07 16 - If user learn pad, but with 0 pad count + no check pad but got check package, then no need to check find unit also.
                    // 2021 07 16 - If user learn pad with pad count > 0 + no check pad but got check package, 
                    //              then still need to find unit, bcos pad area need to be ignored during package inspection.
                    //bool blnCheckContamination = true;
                    //if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false))
                    //    blnCheckContamination = false;

                    //if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                    //    continue;

                    // 2021 11 24 : CCENG: No need to inspect pad if all option unchecked and package defect unchecked also.
                    // 2021 11 24 : CCENG: Consider package defect also is not prevent pad object detected as bright defect during package inspection.
                    bool blnCheckContamination = true;
                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                        m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) &&
                        !m_smVisionInfo.g_arrPad[i].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                        blnCheckContamination = false;

                    if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                        continue;

                    //2020-06-01 ZJYEOH : Set Pad Inspected, for offline page fail indicator
                    m_smVisionInfo.g_arrPad[i].SetPadInspected(true);

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2f=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }

                    // 2021 11 24 : CCENG: need to inspect pad, but No need to draw pad if all option pad are unchecked
                    if (m_smVisionInfo.g_arrPad[i].WantPadReturnFailResultOrShowDrawing(blnCheckContamination))
                    {
                        m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing = true;
                    }

                    // Identify pad defination for displaying fail message
                    string strPosition = GetROIDefinition(i);

                    if (i == 0)
                    {
                        if (!IsPadOK_CenterPadTest_MultiThreading(i))
                        {
                            bTestFail = true;

                            switch (m_smVisionInfo.g_arrPad[i].GetPadFailResultMask())
                            {
                                case "FailDimension":
                                    eInspectionResult = ResulType.FailCenterPadDimension;
                                    break;
                                case "FailArea":
                                    eInspectionResult = ResulType.FailCenterPadArea;
                                    break;
                                case "FailOffset":
                                    eInspectionResult = ResulType.FailCenterPadOffset;
                                    break;
                                case "FailBroken":
                                    eInspectionResult = ResulType.FailCenterPadBroken;
                                    break;
                                case "FailExcess":
                                    eInspectionResult = ResulType.FailCenterPadExcess;
                                    break;
                                case "FailSmear":
                                    eInspectionResult = ResulType.FailCenterPadSmear;
                                    break;
                                case "FailEdgeLimit":
                                    eInspectionResult = ResulType.FailCenterPadEdgeLimit;
                                    break;
                                case "FailStandOff":
                                    eInspectionResult = ResulType.FailCenterPadStandOff;
                                    break;
                                case "FailEdgeDistance":
                                    eInspectionResult = ResulType.FailCenterPadEdgeDistance;
                                    break;
                                case "FailSpan":
                                    eInspectionResult = ResulType.FailCenterPadSpan;
                                    break;
                                case "FailPitchGap":
                                    eInspectionResult = ResulType.FailCenterPadPitchGap;
                                    break;
                                case "FailContamination":
                                    eInspectionResult = ResulType.FailCenterPadContamination;
                                    break;
                                case "FailPadMissing":
                                    eInspectionResult = ResulType.FailCenterPadMissing;
                                    break;
                                case "FailPadColorDefect":
                                    eInspectionResult = ResulType.FailCenterPadColorDefect;
                                    break;
                                case "FailPad":
                                default:
                                    eInspectionResult = ResulType.FailPad;
                                    break;
                            }

                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
                            break;
                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2g=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }

                    }
                    else if ((i > 0 && !m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2) ||
                        m_smVisionInfo.g_arrPad[i].ref_intCheckPadDimensionImageIndex == 1)
                    {
                        if (!IsPadOK_CenterPadTest_MultiThreading(i))
                        {
                            bTestFail = true;
                            switch (m_smVisionInfo.g_arrPad[i].GetPadFailResultMask())
                            {
                                case "FailDimension":
                                    eInspectionResult = ResulType.FailSidePadDimension;
                                    break;
                                case "FailArea":
                                    eInspectionResult = ResulType.FailSidePadArea;
                                    break;
                                case "FailOffset":
                                    eInspectionResult = ResulType.FailSidePadOffset;
                                    break;
                                case "FailBroken":
                                    eInspectionResult = ResulType.FailSidePadBroken;
                                    break;
                                case "FailExcess":
                                    eInspectionResult = ResulType.FailSidePadExcess;
                                    break;
                                case "FailSmear":
                                    eInspectionResult = ResulType.FailSidePadSmear;
                                    break;
                                case "FailEdgeLimit":
                                    eInspectionResult = ResulType.FailSidePadEdgeLimit;
                                    break;
                                case "FailStandOff":
                                    eInspectionResult = ResulType.FailSidePadStandOff;
                                    break;
                                case "FailEdgeDistance":
                                    eInspectionResult = ResulType.FailSidePadEdgeDistance;
                                    break;
                                case "FailSpan":
                                    eInspectionResult = ResulType.FailSidePadSpan;
                                    break;
                                case "FailPitchGap":
                                    eInspectionResult = ResulType.FailSidePadPitchGap;
                                    break;
                                case "FailContamination":
                                    eInspectionResult = ResulType.FailSidePadContamination;
                                    break;
                                case "FailPadMissing":
                                    eInspectionResult = ResulType.FailSidePadMissing;
                                    break;
                                case "FailPadColorDefect":
                                    eInspectionResult = ResulType.FailSidePadColorDefect;
                                    break;
                                case "FailPad":
                                default:
                                    eInspectionResult = ResulType.FailPad;
                                    break;
                            }
                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);

                            if (!(m_smVisionInfo.g_blnCPKON && m_smVisionInfo.g_objCPK.ref_intTestedTotal < m_smVisionInfo.g_intCPKTestCount && m_smVisionInfo.g_blnRecordAllPadCPKEvenIfFail) && !m_smVisionInfo.AT_VM_OfflineTestAllPad) // 2019-10-18 ZJYEOH : Test all pad when inspection triggered by line profile form
                                break;

                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2gg=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }


                    }
                    else if (m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2)
                    {
                        if (!IsBothPadOK(i))    // This IsBothPadOK() only work if CheckPadDimensionImageIndex is 0 and for side pad only
                        {
                            bTestFail = true;
                            eInspectionResult = ResulType.FailPad;
                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
                            break;
                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2ggg=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }

                    }

                    ////2020-06-01 ZJYEOH : Set Pad Inspected, for offline page fail indicator
                    //m_smVisionInfo.g_arrPad[i].SetPadInspected(true);

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2h=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }
                }

            }

            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C2J=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            if (bTestFail)
            {
                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;
            }

            return bTestFail;
        }

        private bool Pad5SInspection_MultiThreading_ImageMerge2(int intPadTestMask, ref ResulType eInspectionResult, int intImageIndex)
        {
            bool bTestFail = false;

            // Loop Pad Test From Middle, Up, Right, Down to Left
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if ((intPadTestMask & (0x01 << i)) == 0)
                    continue;

                //m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = true;  // Set true to stop drawing.
                //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "TH,";

                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                // 2021 11 24 : CCENG: No need to inspect pad if all option unchecked and package defect unchecked also.
                // 2021 11 24 : CCENG: Consider package defect also is not prevent pad object detected as bright defect during package inspection.
                bool blnCheckContamination = true;
                if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                    m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) &&
                    !m_smVisionInfo.g_arrPad[i].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                    blnCheckContamination = false;

                if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                    continue;

                int intBrokenPadImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[i].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);

                // Not need to check extra broken pad if image index is 0
                if (intBrokenPadImageIndex == 0 && !m_smVisionInfo.g_arrPad[i].ref_blnWantSeparateBrokenPadThresholdSetting)
                    continue;

                if (m_arr5SImageRotated2[i][intBrokenPadImageIndex])
                    continue;

                //m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = false;
                //m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = false;

                // Rotate to 0 deg for middle pad
                if (m_smVisionInfo.g_blnViewColorImage)
                    RotateColorImagesTo0Degree_MultiThreading(i, intBrokenPadImageIndex, false);
                else
                    RotateImagesTo0Degree_MultiThreading(i, intBrokenPadImageIndex, false);  // Pad inspection always use image 1

            }

            if (!bTestFail)
            {
                // Loop Pad Test From Middle, Up, Right, Down to Left
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if ((intPadTestMask & (0x01 << i)) == 0)
                        continue;

                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    // 2021 11 24 : CCENG: No need to inspect pad if all option unchecked and package defect unchecked also.
                    // 2021 11 24 : CCENG: Consider package defect also is not prevent pad object detected as bright defect during package inspection.
                    bool blnCheckContamination = true;
                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                        m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) &&
                        !m_smVisionInfo.g_arrPad[i].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                        blnCheckContamination = false;

                    if (!m_smVisionInfo.g_arrPad[i].WantCheckPad(blnCheckContamination))
                        continue;

                    //2020-06-01 ZJYEOH : Set Pad Inspected, for offline page fail indicator
                    m_smVisionInfo.g_arrPad[i].SetPadInspected(true);


                    int intBrokenPadImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[i].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);

                    // Not need to check extra broken pad if image index is 0
                    if (intBrokenPadImageIndex == 0 && !m_smVisionInfo.g_arrPad[i].ref_blnWantSeparateBrokenPadThresholdSetting)
                        continue;

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2f=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }


                    // Identify pad defination for displaying fail message
                    string strPosition = GetROIDefinition(i);

                    if (i == 0)
                    {
                        if (!IsPadOK_CenterPadTest_MultiThreading_ImageMerge2(i))
                        {
                            bTestFail = true;

                            switch (m_smVisionInfo.g_arrPad[i].GetPadFailResultMask())
                            {
                                case "FailDimension":
                                    eInspectionResult = ResulType.FailCenterPadDimension;
                                    break;
                                case "FailArea":
                                    eInspectionResult = ResulType.FailCenterPadArea;
                                    break;
                                case "FailOffset":
                                    eInspectionResult = ResulType.FailCenterPadOffset;
                                    break;
                                case "FailBroken":
                                    eInspectionResult = ResulType.FailCenterPadBroken;
                                    break;
                                case "FailExcess":
                                    eInspectionResult = ResulType.FailCenterPadExcess;
                                    break;
                                case "FailSmear":
                                    eInspectionResult = ResulType.FailCenterPadSmear;
                                    break; 
                                case "FailEdgeLimit":
                                    eInspectionResult = ResulType.FailCenterPadEdgeLimit;
                                    break;
                                case "FailStandOff":
                                    eInspectionResult = ResulType.FailCenterPadStandOff;
                                    break;
                                case "FailEdgeDistance":
                                    eInspectionResult = ResulType.FailCenterPadEdgeDistance;
                                    break;
                                case "FailSpan":
                                    eInspectionResult = ResulType.FailCenterPadSpan;
                                    break;
                                case "FailPitchGap":
                                    eInspectionResult = ResulType.FailCenterPadPitchGap;
                                    break;
                                case "FailContamination":
                                    eInspectionResult = ResulType.FailCenterPadContamination;
                                    break;
                                case "FailPadMissing":
                                    eInspectionResult = ResulType.FailCenterPadMissing;
                                    break;
                                case "FailPadColorDefect":
                                    eInspectionResult = ResulType.FailCenterPadColorDefect;
                                    break;
                                case "FailPad":
                                default:
                                    eInspectionResult = ResulType.FailPad;
                                    break;
                            }

                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
                            break;
                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2g=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }

                    }
                    else if ((i > 0 && !m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2) ||
                        m_smVisionInfo.g_arrPad[i].ref_intCheckPadDimensionImageIndex == 1)
                    {
                        if (!IsPadOK_CenterPadTest_MultiThreading_ImageMerge2(i))
                        {
                            bTestFail = true;
                            switch (m_smVisionInfo.g_arrPad[i].GetPadFailResultMask())
                            {
                                case "FailDimension":
                                    eInspectionResult = ResulType.FailSidePadDimension;
                                    break;
                                case "FailArea":
                                    eInspectionResult = ResulType.FailSidePadArea;
                                    break;
                                case "FailOffset":
                                    eInspectionResult = ResulType.FailSidePadOffset;
                                    break;
                                case "FailBroken":
                                    eInspectionResult = ResulType.FailSidePadBroken;
                                    break;
                                case "FailExcess":
                                    eInspectionResult = ResulType.FailSidePadExcess;
                                    break;
                                case "FailSmear":
                                    eInspectionResult = ResulType.FailSidePadSmear;
                                    break; 
                                case "FailEdgeLimit":
                                    eInspectionResult = ResulType.FailSidePadEdgeLimit;
                                    break;
                                case "FailStandOff":
                                    eInspectionResult = ResulType.FailSidePadStandOff;
                                    break;
                                case "FailEdgeDistance":
                                    eInspectionResult = ResulType.FailSidePadEdgeDistance;
                                    break;
                                case "FailSpan":
                                    eInspectionResult = ResulType.FailSidePadSpan;
                                    break;
                                case "FailPitchGap":
                                    eInspectionResult = ResulType.FailSidePadPitchGap;
                                    break;
                                case "FailContamination":
                                    eInspectionResult = ResulType.FailSidePadContamination;
                                    break;
                                case "FailPadMissing":
                                    eInspectionResult = ResulType.FailSidePadMissing;
                                    break;
                                case "FailPadColorDefect":
                                    eInspectionResult = ResulType.FailSidePadColorDefect;
                                    break;
                                case "FailPad":
                                default:
                                    eInspectionResult = ResulType.FailPad;
                                    break;
                            }
                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);

                            if (!(m_smVisionInfo.g_blnCPKON && m_smVisionInfo.g_objCPK.ref_intTestedTotal < m_smVisionInfo.g_intCPKTestCount && m_smVisionInfo.g_blnRecordAllPadCPKEvenIfFail) && !m_smVisionInfo.AT_VM_OfflineTestAllPad)  // 2019-10-18 ZJYEOH : Test all pad when inspection triggered by line profile form
                                break;

                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2gg=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }


                    }
                    else if (m_smVisionInfo.g_arrPad[i].ref_blnWantConsiderPadImage2)
                    {
                        if (!IsBothPadOK(i))    // This IsBothPadOK() only work if CheckPadDimensionImageIndex is 0 and for side pad only
                        {
                            bTestFail = true;
                            eInspectionResult = ResulType.FailPad;
                            m_arrErrorMessage[i] += m_smVisionInfo.g_arrPad[i].GetPadFailTestDisplayResult(strPosition);
                            break;
                        }

                        if (intPadTestMask == 1)
                        {
                            m_fTiming2 = m_T2.Timing;
                            m_strTrack_Center += ", C2ggg=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                            m_fTimingPrev2 = m_fTiming2;
                        }

                    }
                    
                    ////2020-06-01 ZJYEOH : Set Pad Inspected, for offline page fail indicator
                    //m_smVisionInfo.g_arrPad[i].SetPadInspected(true);

                    if (intPadTestMask == 1)
                    {
                        m_fTiming2 = m_T2.Timing;
                        m_strTrack_Center += ", C2h=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                        m_fTimingPrev2 = m_fTiming2;
                    }
                }
            }

            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C2J=" + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            if (bTestFail)
            {
                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;
            }

            return bTestFail;
        }
        private bool Package5SInspection_MultiThreading(int intPadTestMask, ref ResulType eInspectionResult, int intPkgSizeImageIndex, int intPkgDefectImageIndex, PkgInspectionType ePkgInspectionType)
        {
            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C3a_" + intPkgDefectImageIndex.ToString() + "= " + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            bool bTestFail = false;

            // Loop ROI from Middle, Up, Right, Down to Left
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if ((intPadTestMask & (0x01 << i)) == 0)
                    continue;

                //m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = true;  // Set true to stop drawing.
                //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "TJ,";

                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                if (intPkgDefectImageIndex >= m_arr5SImageRotated2[i].Count)
                    continue;

                if (m_arr5SFoundUnit[i] && m_arr5SFoundUnitPkg[i] && m_arr5SImageRotated2[i][intPkgDefectImageIndex] && m_arr5SPackagedSizeChecked[i])
                    continue;

                // Reset previous inspection data
                m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = false;
                //m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = false;  // Reset this event if check package ON becaues not need to draw unit position.
                m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing = false;

                // Identify pad defination for displaying fail message
                string strPosition = GetROIDefinition(i);

                //Skip if already found Unit during Pad5SInspection
                // 2019 04 26-CCENG: if gauge is not used during Pad5SInspection (blnWantGaugeMeasurePkgSize == false), then need to FIndUnit again here by using gauge.
                //if (!m_arr5SFoundUnit[i] || !m_smVisionInfo.g_arrPad[i].ref_blnWantGaugeMeasurePkgSize) // if (!m_arr5SFoundUnit[i])
                // 2019 05 31-CCENG: use m_arr5SFoundUnitPkg easier because it represent unit found using gauge.
                if (!m_arr5SFoundUnitPkg[i])
                {
                    int intFailType = 0;
                    // Find unit location, size and angle
                    if (!FindUnit_ForPackage_Multithreading(i, intPkgSizeImageIndex, ref intFailType))
                    {
                        bTestFail = true;
                        if (intFailType == 0)
                        {
                            eInspectionResult = ResulType.FailPosition;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                if (m_intTCPIPResultID == -1)
                                    m_intTCPIPResultID = (int)TCPIPResulID.FailPosition;

                        }
                        else
                        {
                            eInspectionResult = ResulType.FailEdgeNotFound;
                            m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing = true;
                            m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing = true;

                            if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                                if (m_intTCPIPResultID == -1)
                                    SetPackageResultID(m_smVisionInfo.g_arrPad[i].ref_intFailPkgResultMask);

                        }
                        m_arrErrorMessage[i] = strPosition + m_arrErrorMessage[i];
                        break;
                    }
                }

                // 2019 06 01-CCENG: Check Package Size Width and Height for center ROI only. Thickness will only be checked after all 4 side inspection done because average of thickness will be used to check pass or fail.
                if (i == 0)
                {
                    if (!IsPackageSizeOK_MultiThreading(i))
                    {
                        m_arr5SPackagedSizeChecked[i] = true;
                        m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true; // 20-05-2019 ZJYEOH: Changed to true to draw gauge during production
                        bTestFail = true;
                        eInspectionResult = ResulType.FailCenterPkgDimension;
                        m_arrErrorMessage[i] = strPosition + m_arrErrorMessage[i];

                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            if (m_intTCPIPResultID == -1)
                                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailPackageDimension;

                        break;
                    }
                }

                m_arr5SPackagedSizeChecked[i] = true;

                if (!m_arr5SImageRotated2[i][intPkgDefectImageIndex])
                {
                    // Rotate to 0 deg for middle pad
                    if (m_smVisionInfo.g_blnViewColorImage)
                        RotateColorImagesTo0Degree_MultiThreading(i, intPkgDefectImageIndex, true);
                    else
                        RotateImagesTo0Degree_MultiThreading(i, intPkgDefectImageIndex, true);
                }

                m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing = true; // 20-05-2019 ZJYEOH: Changed to true to draw gauge during production
            }

            //2020-12-21 ZJYEOH : For Mold Flash
            if (!bTestFail && ePkgInspectionType == PkgInspectionType.BrightField)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if ((intPadTestMask & (0x01 << i)) == 0)
                        continue;

                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    int intPackageMoldFlashImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[i].ref_intPadPkgMoldFlashImageViewNo, m_smVisionInfo.g_intVisionIndex);

                    if (intPackageMoldFlashImageIndex >= m_arr5SImageRotated2[i].Count)
                        continue;

                    if (m_arr5SFoundUnit[i] && m_arr5SFoundUnitPkg[i] && m_arr5SImageRotated2[i][intPackageMoldFlashImageIndex] && m_arr5SPackagedSizeChecked[i])
                        continue;

                    if (i == 0)
                        WaitEventDone(intPackageMoldFlashImageIndex, ROIPartition.Center, "MF1");
                    else
                        WaitEventDone(intPackageMoldFlashImageIndex, ROIPartition.Side, "MF1");

                    if (!m_arr5SImageRotated2[i][intPackageMoldFlashImageIndex])
                    {
                        // Rotate to 0 deg
                        if (m_smVisionInfo.g_blnViewColorImage)
                            RotateColorImagesTo0Degree_MultiThreading(i, intPackageMoldFlashImageIndex, true);
                        else
                            RotateImagesTo0Degree_MultiThreading(i, intPackageMoldFlashImageIndex, true);
                    }

                }
            }



            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C3b_" + intPkgDefectImageIndex.ToString() + "= " + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            if (!bTestFail)
            {
                // Loop Pad Test From Middle, Up, Right, Down to Left
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if ((intPadTestMask & (0x01 << i)) == 0)
                        continue;

                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;


                    bool blnCheckContamination = true;
                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                        m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) &&
                        !m_smVisionInfo.g_arrPad[i].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                        blnCheckContamination = false;

                    // 2021 11 24 : CCENG: need to inspect pad, but No need to draw pad if all option pad are unchecked
                    if (m_smVisionInfo.g_arrPad[i].WantPadReturnFailResultOrShowDrawing(blnCheckContamination))
                    {
                        // (pendingg first) 2021 07 09 - CCENG: User may uncheck all pad option especially side ROI. Mean no pad inspection, so no need draw Pad rectangle result.
                        m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing = true;
                    }

                    // Identify pad defination for displaying fail message
                    string strPosition = GetROIDefinition(i);

                    if (!IsPackageOK_MultiThreading(i, intPkgDefectImageIndex, ePkgInspectionType))
                    {
                        bTestFail = true;

                        if (i == 0)
                            eInspectionResult = ResulType.FailCenterPkgDefect;
                        else
                            eInspectionResult = ResulType.FailSidePkgDefect;

                        m_arrErrorMessage[i] = strPosition + m_smVisionInfo.g_arrPad[i].GetPackageFailTestDisplayResult(strPosition);
                        break;
                    }
                }
            }

            if (intPadTestMask == 1)
            {
                m_fTiming2 = m_T2.Timing;
                m_strTrack_Center += ", C3c_" + intPkgDefectImageIndex.ToString() + "= " + (m_fTiming2 - m_fTimingPrev2).ToString();
                m_fTimingPrev2 = m_fTiming2;
            }

            if (bTestFail)
            {
                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if ((intPadTestMask & (0x01 << i)) == 0)
                                continue;

                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            SetPackageResultID(m_smVisionInfo.g_arrPad[i].ref_intFailPkgResultMask);
                        }
                    }
            }

            return bTestFail;
        }

        private bool StartAutoPositioningTest()
        {
            // Reset positioning data (Keep the best positioning test result)
            float fObjectAngle = 0;
            float fObjectWidth = 0, fObjectHeight = 0;
            float fObjectOffsetX = 0, fObjectOffsetY = 0;
            PointF pObjectCenter = new PointF(0, 0);
            PointF[] arrObjectCorner = new PointF[4];
            float fSmallestDiffSize = float.MaxValue;

            // Keep the original gain value setting
            float fOriGainValue = m_smVisionInfo.g_objPositioning.ref_fGainValue;
            float fOriGainValue2 = m_smVisionInfo.g_objPositioning.ref_fGainValue2;

            bool blnFinalResult = false;
            for (int intPositionImageIndex = 0; intPositionImageIndex < 2; intPositionImageIndex++)
            {
                // Set Transition Type to all line gauges
                for (int g = 0; g < m_smVisionInfo.g_arrPositioningGauges.Count; g++)
                {
                    if (intPositionImageIndex == 0)
                        m_smVisionInfo.g_arrPositioningGauges[g].ref_GaugeTransType = 1;    // White to black
                    else
                        m_smVisionInfo.g_arrPositioningGauges[g].ref_GaugeTransType = 0;    // Black to white
                }

                int intChangeGainCount = 0;
                float fGainValue;
                bool blnResult = true;
                float fTemplateUnitWidth = m_smVisionInfo.g_objPositioning.ref_fSampleDieWidth * m_smVisionInfo.g_fCalibPixelXInUM * 1000;
                float fTemplateUnitHeight = m_smVisionInfo.g_objPositioning.ref_fSampleDieHeight * m_smVisionInfo.g_fCalibPixelXInUM * 1000;
                while (intChangeGainCount < 5)  // Given 5 chances to test unit position with different gain value
                {
                    blnResult = true;

                    // change gain value +- 0.2 each cycle.
                    if (intChangeGainCount == 0)
                        fGainValue = fOriGainValue;
                    else if (intChangeGainCount == 1)
                        fGainValue = fOriGainValue - 200;
                    else if (intChangeGainCount == 2)
                        fGainValue = fOriGainValue + 200;
                    else if (intChangeGainCount == 3)
                        fGainValue = fOriGainValue - 400;
                    else
                        fGainValue = fOriGainValue + 400;

                    // Add gain value to image and attached all position ROI to gain image.
                    if (m_smVisionInfo.g_objPositioning.ref_intMethod == 0)
                    {
                        m_smVisionInfo.g_arrImages[intPositionImageIndex].AddGain(ref m_objGainImage, fGainValue / 1000);

                        for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                        {
                            m_smVisionInfo.g_arrPositioningROIs[i].AttachImage(m_objGainImage);
                        }
                    }

                    // Start Positioning inspection
                    if (m_smVisionInfo.g_objPositioning.DoInspection_PadPosition(m_objGainImage, m_smVisionInfo.g_arrPositioningROIs,
                    m_smVisionInfo.g_arrPositioningGauges, m_smVisionInfo.g_fCalibPixelXInUM, m_smVisionInfo.g_fCalibPixelYInUM, true, true, false, false))
                    {
                        blnFinalResult = true;
                    }
                    else
                    {
                        blnResult = false;

                        // Record the error message for first positioning test (image index = 0 and setting set by user)
                        m_smVisionInfo.g_strErrorMessage += "*Fail find/measure unit. " + m_smVisionInfo.g_objPositioning.ref_strErrorMessage;
                    }

                    // IF Positioning test PASS / only fail off set / fail angle
                    if (blnResult || ((m_smVisionInfo.g_objPositioning.ref_intFailResultMask & 0x10) > 0))
                    {
                        // Record the best positioning result
                        float fDiffSize = Math.Max(Math.Abs(m_smVisionInfo.g_objPositioning.ref_fObjectWidth - fTemplateUnitWidth),
                                                   Math.Abs(m_smVisionInfo.g_objPositioning.ref_fObjectHeight - fTemplateUnitHeight));

                        if (fDiffSize < fSmallestDiffSize)
                        {
                            fObjectAngle = m_smVisionInfo.g_objPositioning.ref_fObjectAngle;
                            fObjectWidth = m_smVisionInfo.g_objPositioning.ref_fObjectWidth;
                            fObjectHeight = m_smVisionInfo.g_objPositioning.ref_fObjectHeight;
                            fObjectOffsetX = m_smVisionInfo.g_objPositioning.ref_fObjectOffsetX;
                            fObjectOffsetY = m_smVisionInfo.g_objPositioning.ref_fObjectOffsetY;
                            pObjectCenter.X = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X;
                            pObjectCenter.Y = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y;
                            for (int i = 0; i < arrObjectCorner.Length; i++)
                            {
                                arrObjectCorner[i].X = m_smVisionInfo.g_objPositioning.ref_arrObjectCorner[i].X;
                                arrObjectCorner[i].Y = m_smVisionInfo.g_objPositioning.ref_arrObjectCorner[i].Y;
                            }
                            fSmallestDiffSize = fDiffSize;
                        }
                    }

                    intChangeGainCount++;
                }
            }

            if (blnFinalResult)
            {
                // Set the best result into positioning variables
                m_smVisionInfo.g_objPositioning.ref_fObjectAngle = fObjectAngle;
                m_smVisionInfo.g_objPositioning.ref_fObjectWidth = fObjectWidth;
                m_smVisionInfo.g_objPositioning.ref_fObjectHeight = fObjectHeight;
                m_smVisionInfo.g_objPositioning.ref_fObjectOffsetX = fObjectOffsetX;
                m_smVisionInfo.g_objPositioning.ref_fObjectOffsetY = fObjectOffsetY;
                m_smVisionInfo.g_objPositioning.ref_fObjectCenterX = pObjectCenter.X;
                m_smVisionInfo.g_objPositioning.ref_fObjectCenterY = pObjectCenter.Y;
                for (int i = 0; i < arrObjectCorner.Length; i++)
                {
                    m_smVisionInfo.g_objPositioning.ref_arrObjectCorner[i].X = arrObjectCorner[i].X;
                    m_smVisionInfo.g_objPositioning.ref_arrObjectCorner[i].Y = arrObjectCorner[i].Y;
                }

                m_smVisionInfo.g_objPositioning.ref_bFinalResult = true;
                m_smVisionInfo.g_strErrorMessage = "";
            }
            else
            {
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
            }

            // Reset back the gain value to original setting
            m_smVisionInfo.g_objPositioning.ref_fGainValue = fOriGainValue;
            m_smVisionInfo.g_objPositioning.ref_fGainValue2 = fOriGainValue2;

            // Reset all line gauges to early transition type setting (white on black)
            for (int g = 0; g < m_smVisionInfo.g_arrPositioningGauges.Count; g++)
            {
                m_smVisionInfo.g_arrPositioningGauges[g].ref_GaugeTransType = 1;
            }

            return blnFinalResult;
        }

        private bool StartPin1Test(bool blnAuto)
        {
            // make sure template learn
            if (m_smVisionInfo.g_arrPin1[0].ref_arrTemplateSetting.Count == 0)
            {
                m_smVisionInfo.g_strErrorMessage += "*Pin1 : No Template Found";
                if (blnAuto)
                    m_smVisionInfo.g_intNoTemplateFailureTotal++;
                return false;
            }
            m_smVisionInfo.g_arrPin1[0].ResetInspectionData();
            m_smVisionInfo.g_arrPadROIs[0][0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);

            int intMatchCount = 0;
            bool blnResult;
            string strErrorMessage = "";

            if (!blnAuto)
            {
                if (m_smVisionInfo.g_arrPin1[0].ref_objTestROI == null)
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI = new ROI();

                m_smVisionInfo.g_arrPin1[0].ref_objTestROI.AttachImage(m_smVisionInfo.g_arrPadROIs[0][0]);

                if (m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false) && !m_blnCustomWantPackage)
                {
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 2,
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 2);
                }
                else
                {
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 2,
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 2);
                }

                m_smVisionInfo.g_arrPin1[0].ref_blnFinalResultPassFail = m_smVisionInfo.g_arrPin1[0].MatchWithTemplate(m_smVisionInfo.g_arrPin1[0].ref_objTestROI, 0);
                m_smVisionInfo.g_arrPin1[0].ref_intFinalResultSelectedTemplate = 0;
                strErrorMessage = m_smVisionInfo.g_arrPin1[0].ref_strErrorMessage;
            }
            else // Whole active templates test
            {
                float fHighestScore = 0;
                if (m_smVisionInfo.g_arrPin1[0].ref_objTestROI == null)
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI = new ROI();

                m_smVisionInfo.g_arrPin1[0].ref_objTestROI.AttachImage(m_smVisionInfo.g_arrPadROIs[0][0]);

                if (m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false) && !m_blnCustomWantPackage)
                {
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 2,
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 2);
                }
                else
                {
                    m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                        (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                        m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 2,
                        (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 2);
                }

                blnResult = m_smVisionInfo.g_arrPin1[0].MatchWithTemplate(m_smVisionInfo.g_arrPin1[0].ref_objTestROI, 0);

                if (m_smVisionInfo.g_arrPin1[0].GetResultScore(0) > 0 && 
                    m_smVisionInfo.g_arrPin1[0].GetResultScore(0) > fHighestScore)
                {
                    fHighestScore = m_smVisionInfo.g_arrPin1[0].GetResultScore(0);
                    m_smVisionInfo.g_arrPin1[0].ref_blnFinalResultPassFail = blnResult;
                    m_smVisionInfo.g_arrPin1[0].ref_intFinalResultSelectedTemplate = 0;
                    strErrorMessage = m_smVisionInfo.g_arrPin1[0].ref_strErrorMessage;
                }
            }
            if (m_smVisionInfo.g_intViewInspectionSetting == 0)
                m_smVisionInfo.g_blnDrawPin1Result = true;

            if (m_smVisionInfo.g_arrPin1[0].ref_blnFinalResultPassFail)
            {
                return true;
            }
            else
            {
                m_smVisionInfo.g_strErrorMessage = strErrorMessage;
                if (blnAuto)
                    m_smVisionInfo.g_intPin1FailureTotal++;
                return false;
            }
        }

        private bool StartPin1Test_MultiTreading()
        {
            // make sure template learn
            if (m_smVisionInfo.g_arrPin1[0].ref_arrTemplateSetting.Count == 0)
            {
                return false;
            }
            m_smVisionInfo.g_arrPin1[0].ResetInspectionData();
            m_smVisionInfo.g_arrPadROIs[0][0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);

            //int intMatchCount = 0;
            //bool blnResult;
            //string strErrorMessage = "";

            //if (!blnAuto)
            //{
            if (m_smVisionInfo.g_arrPin1[0].ref_objTestROI == null)
                m_smVisionInfo.g_arrPin1[0].ref_objTestROI = new ROI();

            if (m_blnRotateImageUpdated)
                m_smVisionInfo.g_arrPadROIs[0][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[0][0]);
            else
                m_smVisionInfo.g_arrPadROIs[0][0].AttachImage(m_smVisionInfo.g_arrImages[0]);

            m_smVisionInfo.g_arrPin1[0].ref_objTestROI.AttachImage(m_smVisionInfo.g_arrPadROIs[0][0]);

            //m_smVisionInfo.g_arrPin1[0].ref_objTestROI.SaveImage("D:\\TS\\TestROI.bmp");
            if (m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false))
            {
                m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                    (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                    m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 0.75f - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                    (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                    m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 0.75f - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                    (int)(m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 1.5),
                    (int)(m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 1.5));
            }
            else
            {
                m_smVisionInfo.g_arrPin1[0].ref_objTestROI.LoadROISetting(
                    (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().X - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX -
                    m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetX(0)),
                    (int)(m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_UnitMatcher().Y - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY -
                    m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) - m_smVisionInfo.g_arrPin1[0].GetRefOffsetY(0)),
                    (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternWidth(0) * 2,
                    (int)m_smVisionInfo.g_arrPin1[0].GetPin1PatternHeight(0) * 2);
            }

            //m_smVisionInfo.g_arrPin1[0].ref_objTestROI.SaveImage("D:\\TS\\TestROI2.bmp");

            m_smVisionInfo.g_arrPin1[0].ref_blnFinalResultPassFail = m_smVisionInfo.g_arrPin1[0].MatchWithTemplate(m_smVisionInfo.g_arrPin1[0].ref_objTestROI, 0);
            m_smVisionInfo.g_arrPin1[0].ref_intFinalResultSelectedTemplate = 0;

            return m_smVisionInfo.g_arrPin1[0].ref_blnFinalResultPassFail;
        }

        private bool IsPositioningOK()
        {
            //2021-07-22 ZJYEOH : 0x10000 will be used for check edge distance
            if (false)//((m_smVisionInfo.g_arrPad[0].ref_intFailOptionMask & 0x10000) > 0)
            {
                if (!m_smVisionInfo.g_arrPad[0].InspectPositioning())
                {
                    m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_arrPad[0].ref_strErrorMessage;
                    //m_smVisionInfo.VM_AT_UpdateErrorMessage = true;   // 2018 07 20 - CCENG: VM_AT_UpdateErrorMessage will set to true at the end of inspection.
                    return false;
                }
            }

            return true;
        }

        private bool IsPackageSizeOK_MultiThreading(int intPadIndex)
        {
            // 2019 06 18 - This function is for Package check package size. So must use gauge tool whether blnWantGaugeMeasurePkgSize is true or not
            //if (!m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize() && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0))
            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                return true;

            //if (!m_smVisionInfo.g_blnCheckPackage)
            //    return true;

            if ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x01) == 0)
                return true;

            // Get unit size setting
            float fWidthMin = m_smVisionInfo.g_arrPad[0].GetUnitWidthMin(1);
            float fWidthMax = m_smVisionInfo.g_arrPad[0].GetUnitWidthMax(1);
            float fHeightMin = m_smVisionInfo.g_arrPad[0].GetUnitHeightMin(1);
            float fHeightMax = m_smVisionInfo.g_arrPad[0].GetUnitHeightMax(1);
            float fThicknessMin = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMin(1);
            float fThicknessMax = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMax(1);

            bool blnTestFail = false;
            if (m_blnCustomWantPackage)
            {
                switch (intPadIndex)
                {
                    case 0: // Middle Pad (Check width and height)
                        {
                            float fWidth = (m_smVisionInfo.g_arrPad[intPadIndex].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[intPadIndex].GetResultDownWidth_RectGauge4L(1)) / 2;

                            // 2019-10-25 ZJYEOH : Add Offset to package width
                            fWidth += m_smVisionInfo.g_arrPad[intPadIndex].ref_fPackageWidthOffsetMM;

                            if (fWidth < fWidthMin || fWidth > fWidthMax)
                            {
                                m_arrErrorMessage[intPadIndex] += "*Package Size Width Fail. Min Tol=" + fWidthMin.ToString() + ", Max Tol=" + fWidthMax.ToString() +
                                    ", Current Size Width=" + fWidth.ToString();

                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgResultMask |= 0x01; //Fail package size

                                blnTestFail = true;
                            }

                            float fHeight = (m_smVisionInfo.g_arrPad[intPadIndex].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[intPadIndex].GetResultRightHeight_RectGauge4L(1)) / 2;

                            // 2019-10-25 ZJYEOH : Add Offset to package height
                            fHeight += m_smVisionInfo.g_arrPad[intPadIndex].ref_fPackageHeightOffsetMM;

                            if (fHeight < fHeightMin || fHeight > fHeightMax)
                            {
                                m_arrErrorMessage[intPadIndex] += "*Package Size Height Fail. Min Tol=" + fHeightMin.ToString() + ", Max Tol=" + fHeightMax.ToString() +
                                    ", Current Size Height=" + fHeight.ToString();

                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgResultMask |= 0x01; //Fail package size

                                blnTestFail = true;
                            }
                        }
                        break;
                    //case 1: // side Pad  (Check Thickness)
                    //case 3: // side Pad  (Check Thickness)
                    //    {
                    //        float fThickness = (m_smVisionInfo.g_arrPad[intPadIndex].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[intPadIndex].GetResultRightHeight_RectGauge4L(1)) / 2;
                    //        if (fThickness < fThicknessMin || fThickness > fThicknessMax)
                    //        {
                    //            m_arrErrorMessage[intPadIndex] += "*Package Size Thickness Fail. Min Tol=" + fThicknessMin.ToString() + ", Max Tol=" + fThicknessMax.ToString() +
                    //               ", Current Thickness=" + fThickness.ToString();

                    //            m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgResultMask |= 0x01; //Fail package size

                    //            blnTestFail = true;
                    //        }
                    //    }
                    //    break;
                    //case 2: // side Pad  (Check Thickness)
                    //case 4: // side Pad  (Check Thickness)
                    //    {
                    //        float fThickness = (m_smVisionInfo.g_arrPad[intPadIndex].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[intPadIndex].GetResultDownWidth_RectGauge4L(1)) / 2;
                    //        if (fThickness < fThicknessMin || fThickness > fThicknessMax)
                    //        {
                    //            m_arrErrorMessage[intPadIndex] += "*Package Size Thickness Fail. Min Tol=" + fThicknessMin.ToString() + ", Max Tol=" + fThicknessMax.ToString() +
                    //               ", Current Thickness=" + fThickness.ToString();

                    //            m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgResultMask |= 0x01; //Fail package size

                    //            blnTestFail = true;
                    //        }
                    //    }
                    //    break;

                    // 2019 03 01 - JBTAN: Check pad thickness by using the average thickness of all side pads
                    case 1:
                        float fThickness = 0;
                        float fTotalThickness = 0;
                        int intCount = 0;
                        for (int j = 1; j < m_smVisionInfo.g_arrPad.Length; j++)
                        {
                            if (j == 1 || j == 3)
                                fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultRightHeight_RectGauge4L(1);
                            else
                                fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultDownWidth_RectGauge4L(1);

                            intCount += 2;
                        }

                        fThickness = (float)Math.Round(fTotalThickness / intCount, 4, MidpointRounding.AwayFromZero);

                        // 2019-10-25 ZJYEOH : Add Offset to package thickness
                        fThickness += m_smVisionInfo.g_arrPad[intPadIndex].ref_fPackageThicknessOffsetMM;

                        if (fThickness < fThicknessMin || fThickness > fThicknessMax)
                        {
                            m_arrErrorMessage[intPadIndex] += "*Package Size Thickness Fail. Min Tol=" + fThicknessMin.ToString() + ", Max Tol=" + fThicknessMax.ToString() +
                                ", Current Size Thickness=" + fThickness.ToString();

                            m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgResultMask |= 0x01; //Fail package size

                            blnTestFail = true;
                        }
                        break;
                }
            }
            else if (m_blnCustomWantPositioning)
            {
                // Using positioning to check unit size
                float fPkgSizeWidth = 0, fPkgSizeHeight = 0;
                fPkgSizeWidth = m_smVisionInfo.g_objPositioning.ref_fObjectWidth / m_smVisionInfo.g_fCalibPixelX;
                fPkgSizeHeight = m_smVisionInfo.g_objPositioning.ref_fObjectHeight / m_smVisionInfo.g_fCalibPixelX;

                if ((fPkgSizeWidth < fWidthMin) || (fPkgSizeWidth > fWidthMax))
                {
                    m_arrErrorMessage[intPadIndex] += "*Package Size Width Fail. Min Tol=" + fWidthMin.ToString() + ", Max Tol=" + fWidthMax.ToString() + ", Current Size Width=" + fPkgSizeWidth.ToString();
                    blnTestFail = true;
                }

                if ((fPkgSizeHeight < fHeightMin) || (fPkgSizeHeight > fHeightMax))
                {
                    m_arrErrorMessage[intPadIndex] += "*Package Size Height Fail. Min Tol=" + fHeightMin.ToString() + ", Max Tol=" + fHeightMax.ToString() + ", Current Size Width=" + fPkgSizeHeight.ToString();
                    blnTestFail = true;
                }
            }

            if (blnTestFail)
            {
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
                return true;
        }

        private bool IsPackageThicknessOK_MultiThreading()
        {
            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                return true;

            // 2020 01 09 - g_blnCheckPackage is want package setting from Pad Pkg Advance Setting. It is no longer use bcos want package setting change to inspection option form already.
            //if (!m_smVisionInfo.g_blnCheckPackage)
            //    return true;

            if (m_smVisionInfo.g_arrPad.Length == 1 || !m_smVisionInfo.g_blnCheck4Sides)
                return true;

            if ((m_smVisionInfo.g_arrPad[1].ref_intFailPkgOptionMask & 0x01) == 0)
                return true;

            // Get unit size setting
            // 2021 07 19 - CCENG: Change index 1 to 0. Pad0 will save thickness min max value also.
            //                     The Vision3OfflinePage and PadPackageToleranceSettingForm using pad index 0 also.
            //                     The thickness min max value in pad1 will be 0 sometime due to user turn off the 4 side pads. 
            float fThicknessMin = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMin(1);
            float fThicknessMax = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMax(1);

            bool blnTestFail = false;

            float fThickness = 0;
            float fTotalThickness = 0;
            int intCount = 0;
            for (int j = 1; j < m_smVisionInfo.g_arrPad.Length; j++)
            {
                if (j == 1 || j == 3)
                    fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultRightHeight_RectGauge4L(1);
                else
                    fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultDownWidth_RectGauge4L(1);

                intCount += 2;
            }

            fThickness = (float)Math.Round(fTotalThickness / intCount, 4, MidpointRounding.AwayFromZero);

            // 2019-10-25 ZJYEOH : Add Offset to package thickness
            fThickness += m_smVisionInfo.g_arrPad[1].ref_fPackageThicknessOffsetMM;

            if (fThickness < fThicknessMin || fThickness > fThicknessMax)
            {
                m_arrErrorMessage[1] += "*Package Size Thickness Fail. Min Tol=" + fThicknessMin.ToString() + ", Max Tol=" + fThicknessMax.ToString() +
                    ", Current Size Thickness=" + fThickness.ToString();

                blnTestFail = true;
            }

            if (m_smVisionInfo.g_arrPad[1].ref_blnWantIndividualSideThickness)
            {
                for (int j = 1; j < m_smVisionInfo.g_arrPad.Length; j++)
                {
                    float f4SThickness = 0;
                    string strPosition = "";

                    if (j == 1)
                        strPosition = "Top";
                    else if (j == 2)
                        strPosition = "Right";
                    else if (j == 3)
                        strPosition = "Bottom";
                    else if (j == 4)
                        strPosition = "Left";

                    if (j == 1 || j == 3)
                        f4SThickness = (m_smVisionInfo.g_arrPad[j].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultRightHeight_RectGauge4L(1)) / 2;
                    else
                        f4SThickness = (m_smVisionInfo.g_arrPad[j].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultDownWidth_RectGauge4L(1)) / 2;

                    f4SThickness += m_smVisionInfo.g_arrPad[j].ref_fPackageThicknessOffsetMM;

                    if (f4SThickness < fThicknessMin || f4SThickness > fThicknessMax)
                    {
                        m_arrErrorMessage[1] += "*" + strPosition + " Package Size Thickness Fail. Min Tol=" + fThicknessMin.ToString("f4") + ", Max Tol=" + fThicknessMax.ToString("f4") +
                            ", " + strPosition + " Thickness=" + f4SThickness.ToString("f4");

                        blnTestFail = true;
                    }
                }
            }

            if (blnTestFail)
            {
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
                return true;
        }

        private bool IsUnitPositionOK(int intPadIndex)
        {
            // Check is Unit Out of Search ROI area
            float fSearchROICenterX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX + (float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth / 2;
            float fSearchROICenterY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY + (float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight / 2;
            float fTempSearchROIHalfWidth, fTempSearchROIHalfHeight;
            if (m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X <= fSearchROICenterX)
            {
                fTempSearchROIHalfWidth = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X - m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX;
            }
            else
            {
                fTempSearchROIHalfWidth = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX + (float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth -
                                      m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X;
            }

            if (m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y <= fSearchROICenterY)
            {
                fTempSearchROIHalfHeight = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y - m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY;
            }
            else
            {
                fTempSearchROIHalfHeight = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY + (float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight -
                                       m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y;
            }

            if ((fTempSearchROIHalfWidth < m_smVisionInfo.g_objPositioning.ref_fObjectWidth / 2) ||
                (fTempSearchROIHalfHeight < m_smVisionInfo.g_objPositioning.ref_fObjectHeight / 2))
            {
                m_smVisionInfo.g_strErrorMessage = "*Unit out of search ROI area";
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                return false;
            }
            else
                return true;
        }

        private bool StartTest_MultiThreading_Pad(bool blnAuto)
        {
            m_blnAuto = blnAuto;
            /*
             * Function Call
             * ----------
             * IsPadOK_CenterPadTest_MultiThreading()
             *      - 
             * 
             * 
             */
            m_smVisionInfo.g_objProcessTime.Start();
            m_blnSetBefore = false;
            TrackTiming(false, "0", false, m_smVisionInfo.g_blnTrackBasic);

            WaitEventDone(ref m_smVisionInfo.g_blnDrawCompletedAfterInspect, ref m_smVisionInfo.g_blnVisionPageTimerON, true, false, "A221");
            //WaitEventDone(ref m_smVisionInfo.g_blnDrawCompletedAfterInspect, true, 1000, "A221");

            TrackTiming(false, "00", false, m_smVisionInfo.g_blnTrackBasic);

            m_smVisionInfo.g_blnInspectionInProgress = true;

            WaitEventDone(ref m_bSubTh_StartAfterInspect, false, 1000, "A22");



            TrackTiming(false, "0a", false, m_smVisionInfo.g_blnTrackBasic);

            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = true;
                //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "T001,";
            }

            WaitDrawingLockEventDone();

            TrackTiming(false, "0b", false, m_smVisionInfo.g_blnTrackBasic);

            //m_smVisionInfo.g_arrPad[0].m_strTrack2 += "DrawingDone,";

            bool blnResultOK = true;
            m_smVisionInfo.g_blnPadInpected = false;
            m_smVisionInfo.g_blnViewPadInspection = false;
            m_smVisionInfo.g_blnDrawPin1Result = false;
            m_smVisionInfo.g_blnViewOrientObject = false;

            m_blnRotateImageUpdated = false;
            for (int h = 0; h < m_arr5SImageRotated2.Length; h++)
            {
                if (m_arr5SImageRotated2[h] == null)
                    continue;

                for (int i = 0; i < m_arr5SImageRotated2[h].Count; i++)
                {
                    if (m_arr5SImageRotated2[h][i])
                        m_arr5SImageRotated2[h][i] = false;
                }

                m_arr5SFoundUnit[h] = false;
                m_arr5SFoundUnitPkg[h] = false;
                m_arr5SPackagedSizeChecked[h] = false;
            }

            m_smVisionInfo.g_blnGrabbing = true;
            m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = false;
            m_bGrabImageFinalResult_Center = m_bGrabImageFinalResult_Orient = m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = false;
            m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = false;
            m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = false;
            m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = false;
            m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = false;
            m_smVisionInfo.g_blnNoGrabTime = false;

            if (blnAuto)
            {
                //Thread.Sleep(m_smVisionInfo.g_intCameraGrabDelay);

                //Display error message if fail to grab image 
                if (!m_smProductionInfo.g_blnAllRunWithoutGrabImage && !m_blnRepeatTestGrab)    // 2020 02 19 - CCENG: if repeat test,no need to grab because pickup head already move to next index.
                {
                    m_bSubTh1_GrabImage = true;  // Trigger Sub Thread 1 to grab images
                }
                else
                {
                    m_smVisionInfo.g_objGrabTime.Reset();
                    m_smVisionInfo.g_objTransferTime.Reset();
                    m_smVisionInfo.g_blnGrabbing = false;
                    m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
                    m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                    m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                    m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                    m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                    m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                    //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
                    m_smVisionInfo.g_blnNoGrabTime = true;
                    m_blnGrabbing_Out = false;
                }
            }
            else if (m_smVisionInfo.MN_PR_GrabImage)    // Grab image before offline test 
            {
                m_smVisionInfo.MN_PR_GrabImage = false;

                m_bSubTh1_GrabImage = true;  // Trigger Sub Thread 1 to grab images
            }
            else    // Offline test
            {
                m_smVisionInfo.g_objGrabTime.Reset();
                m_smVisionInfo.g_objTransferTime.Reset();
                m_smVisionInfo.g_blnGrabbing = false;
                m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = m_bGrabImage6Result = m_bGrabImage7Result = true; // 2020 07 17 - CCENG: Set Result before Set Done.
                m_bGrabImage1Done = m_bGrabImage2Done = m_bGrabImage3Done = m_bGrabImage4Done = m_bGrabImage5Done = m_bGrabImage6Done = m_bGrabImage7Done = true;
                m_bGrabImage1LoadDone = m_bGrabImage2LoadDone = m_bGrabImage3LoadDone = m_bGrabImage4LoadDone = m_bGrabImage5LoadDone = m_bGrabImage6LoadDone = m_bGrabImage7LoadDone = true;
                m_bGrabImage1LoadResult = m_bGrabImage2LoadResult = m_bGrabImage3LoadResult = m_bGrabImage4LoadResult = m_bGrabImage5LoadResult = m_bGrabImage6LoadResult = m_bGrabImage7LoadResult = true;
                m_bGrabImage1TriggerDone = m_bGrabImage2TriggerDone = m_bGrabImage3TriggerDone = m_bGrabImage4TriggerDone = m_bGrabImage5TriggerDone = m_bGrabImage6TriggerDone = m_bGrabImage7TriggerDone = true;
                m_bGrabImage1TriggerResult = m_bGrabImage2TriggerResult = m_bGrabImage3TriggerResult = m_bGrabImage4TriggerResult = m_bGrabImage5TriggerResult = m_bGrabImage6TriggerResult = m_bGrabImage7TriggerResult = true;
                //m_bGrabImage1Result = m_bGrabImage2Result = m_bGrabImage3Result = m_bGrabImage4Result = m_bGrabImage5Result = true;
                m_smVisionInfo.g_blnNoGrabTime = true;
            }

            // Check Pad Package Template Template Ready
            if (m_smVisionInfo.g_arrPadROIs.Count == 0)
            {
                m_smVisionInfo.g_strErrorMessage += "*Pad : No Template Found";
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;

                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                return false;
            }
            else if (m_smVisionInfo.g_arrPHROIs.Count == 0 && m_smVisionInfo.g_blnWantCheckPH && m_smVisionInfo.g_blnCheckPH)
            {
                m_smVisionInfo.g_strErrorMessage += "*Pad : No PH Template Found";
                m_smVisionInfo.VM_AT_UpdateErrorMessage = true;

                if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    if (m_intTCPIPResultID == -1)
                        m_intTCPIPResultID = (int)TCPIPResulID.Fail;

                return false;
            }

            // Reset IO criteria
            // if (m_blnCustomWantPositioning)
            if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.PositionReject != null)
            {
                m_objVisionIO.PositionReject.SetOff("V3 PositionReject 42");
                m_objVisionIO.EmptyUnit.SetOff("V3 EmptyUnit 43");
            }
            else
            {
                m_blnPositionReject_Out = true;
            }
           
            // Reset all previous inspection data
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if (m_arrErrorMessage[i] != "")
                    m_arrErrorMessage[i] = "";
                m_smVisionInfo.g_arrPad[i].ResetInspectionData(true);
            }

            // 2020-06-01 ZJYEOH : Reset Pin 1 previous inspection data, so that offline page will display latest result
            if (m_smVisionInfo.g_blnWantPin1 && m_smVisionInfo.g_arrPin1 != null && m_smVisionInfo.g_arrPin1.Count > 0 && m_smVisionInfo.g_arrPin1[0].getWantCheckPin1(0))
                m_smVisionInfo.g_arrPin1[0].ResetInspectionData();

            // -----------------------------------------------------------------------------------------------------------
            for (int i = 1; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                bool blnTest = m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false);
            }

            TrackTiming(false, "1", false, m_smVisionInfo.g_blnTrackBasic);

            if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO && m_objVisionIO.CheckPH != null)
            {
                if (m_smVisionInfo.g_blnWantCheckPH && !blnAuto && m_smVisionInfo.g_blnCheckPH)         // offline test     : Adv PH true and offline form PH true.
                {
                    m_bWantPHTest = true;
                    m_bSubTh_PHTest = true;
                }
                else if (m_objVisionIO.CheckPH.IsOn(m_smVisionInfo.g_blnCheckPH) && m_smVisionInfo.g_blnWantCheckPH && blnAuto)    // prod test        : IO PH true and Adv PH true
                {
                    m_bWantPHTest = true;
                    m_bSubTh_PHTest = true;
                }
                else
                {
                    m_bWantPHTest = false;
                    m_bSubTh_PHTest_Result = true;
                }
            }
            else if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
            {
                if (m_smVisionInfo.g_blnWantCheckPH && !blnAuto && m_smVisionInfo.g_blnCheckPH)         // offline test     : Adv PH true and offline form PH true.
                {
                    m_bWantPHTest = true;
                    m_bSubTh_PHTest = true;
                }
                else if (m_blnCheckPH_In && m_smVisionInfo.g_blnWantCheckPH && blnAuto)    // prod test        : IO PH true and Adv PH true
                {
                    m_bWantPHTest = true;
                    m_bSubTh_PHTest = true;
                }
                else
                {
                    m_bWantPHTest = false;
                    m_bSubTh_PHTest_Result = true;
                }
            }
            else
            {
                m_bWantPHTest = false;
                m_bSubTh_PHTest_Result = true;
            }

            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("50");


            // call center pad thread when no check PH.
            if (m_smVisionInfo.g_blnCheckPad && !m_bWantPHTest)         // Fyi, CheckPad will be false only for OPad Vision. Bcos only OPad have checkbox to enable or disable check pad in option form.
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("52");
                m_bSubTh_CenterTest = true;

            }
            else
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("53");
                m_bSubTh_CenterTest_Result = true;

            }

            // call orient thread to check orientation when no check PH
            if (m_blnCustomWantOrient && !m_bWantPHTest)
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("54");
                m_bSubTh_OrientTest = true;

            }
            else
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("55");
                m_bGrabImageFinalResult_Center = m_bGrabImageFinalResult_Orient = true;

                m_bSubTh_OrientTest_Result = true;

            }

            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("61");

            // call side pad thread when no check PH
            if (m_blnCustomWant5S && m_smVisionInfo.g_blnCheck4Sides && !m_bWantPHTest)
            {
                m_bSubTh_SideTLTest = true;
                m_bSubTh_SideBRTest = true;

            }
            else
            {
                m_bSubTh_SideTLTest_Result = true;
                m_bSubTh_SideBRTest_Result = true;

            }

            TrackTiming(false, "2", false, m_smVisionInfo.g_blnTrackBasic);

            // Wait inspection done.
            bool blnInspectionDone = false;
            HiPerfTimer timeout = new HiPerfTimer();
            timeout.Start();

            //string strTrack = "";
            //float fTiming = 0;
            //float fTimingPrev = 0;
            //bool blnC, blnTL, blnBR;
            //blnC = blnTL = blnBR = true;
            //HiPerfTimer timer = new HiPerfTimer();
            //timer.Start();

            while (true)
            {
                //if (!m_bSubTh_CenterTest && blnC)
                //{
                //    blnC = false;
                //    fTiming = timer.Timing;
                //    strTrack += "C = " + (fTiming - fTimingPrev).ToString();
                //    fTimingPrev = fTiming;

                //    m_bSubTh_SideTLTest = true;
                //}

                //if (!m_bSubTh_SideTLTest && blnTL && !blnC)
                //{
                //    blnTL = false;
                //    fTiming = timer.Timing;
                //    strTrack += ", TL = " + (fTiming - fTimingPrev).ToString();
                //    fTimingPrev = fTiming;

                //    m_bSubTh_SideBRTest = true;
                //}

                //if (!m_bSubTh_SideBRTest && blnBR && !blnTL)
                //{
                //    blnBR = false;
                //    fTiming = timer.Timing;
                //    strTrack += ", BR = " + (fTiming - fTimingPrev).ToString();
                //    fTimingPrev = fTiming;
                //}

                if (!m_bSubTh_CenterTest && !m_bSubTh_OrientTest && !m_bSubTh_SideTLTest && !m_bSubTh_SideBRTest && !m_bSubTh_PHTest)// && !blnC && !blnTL && !blnBR)
                {
                    //timer.Stop();
                    //STTrackLog.WriteLine(strTrack);

                    blnInspectionDone = true;
                    break;
                }

#if (RELEASE || RTXRelease || Release_2_12)
                if (timeout.Timing > 10000)     // 2020 12 06 - CCENG: change from 1s to 10s. bcos sometime debuging save image may cause inspection more than 1s.
                    {
                        STTrackLog.WriteLine(">>>>>>>>>>>>> time out 7");
                        break;
                    }
#endif
                Thread.Sleep(1);
            }

            TrackTiming(false, "3", false, m_smVisionInfo.g_blnTrackBasic);

            // 2019 06 01 - CCENG: check average thickness here. If center fail, then not need to check 
            bool bThickness_Result = true;
            if (m_bSubTh_CenterTest_Result)
            {
                // 2019 05 31-CCENG: if not all m_arr5SFoundUnitPkg pass, this mean find package size already fail, so not need to check thickness here.
                if (m_arr5SFoundUnitPkg[1] && m_arr5SFoundUnitPkg[2] && m_arr5SFoundUnitPkg[3] && m_arr5SFoundUnitPkg[4])
                {
                    if (!IsPackageThicknessOK_MultiThreading())
                    {
                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            if (m_intTCPIPResultID == -1)
                                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailPackageDimension;

                        bThickness_Result = false;
                    }
                }
            }

            // ---------- Set IO to handler (set before save image for faster UPH) -------------------------------
            if (blnInspectionDone && m_bSubTh_CenterTest_Result && m_bSubTh_OrientTest_Result && m_bSubTh_SideTLTest_Result && m_bSubTh_SideBRTest_Result && m_bSubTh_PHTest_Result && bThickness_Result)
            {
                // Wait all images grab done to make sure latest images are saved.
                WaitAllImageGrabDone();

                if (blnAuto)
                {
                    if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                    {
                        WaitEventDone(ref m_blnGrabbing_Out, false, 10000, "m_blnGrabbing_Out");//2021-03-24 ZJYEOH : Wait grab done send to handler first

                        //2021-03-24 ZJYEOH : Wait at least 5ms before send result
                        float fDelay = 5 - Math.Max(0, m_smVisionInfo.g_objTotalTime.Timing - m_smVisionInfo.g_objGrabTime.Duration);
                        if (fDelay >= 1)
                            Thread.Sleep((int)fDelay);

                        m_blnPositionReject_Out = false;
                        m_blnPass1_Out = true;
                        if (m_blnCheckOffset_In)
                            m_smTCPIPIO.Send_ResultForCheckOffset(m_smVisionInfo.g_intVisionIndex, true, m_blnOrientResult1_Out, m_blnOrientResult2_Out, m_fOffsetX, m_fOffsetY, m_fOffsetAngle, true);
                        else
                            m_smTCPIPIO.Send_Result(m_smVisionInfo.g_intVisionIndex, true, m_blnOrientResult1_Out, m_blnOrientResult2_Out, m_intTCPIPResultID);

                        //m_blnGrabbing_Out = false;
                        m_blnEndVision_Out = true;
                    }
                    else
                    {
                        WaitEventDone(ref m_blnGrabbing_Out, false, 10000, "m_blnGrabbing_Out");
                        float fGrabDelay = 5 - m_smVisionInfo.g_objGrabDoneTime.Timing;
                        if (fGrabDelay >= 1)
                            Thread.Sleep((int)fGrabDelay);

                        if (m_objVisionIO.PositionReject != null)
                        {
                            if (m_objVisionIO.PositionReject.IsOff())
                                m_objVisionIO.IOPass1.SetOn("V3 IOPass1 18");
                        }
                        else
                            m_objVisionIO.IOPass1.SetOn("V3 IOPass1 19");

                        m_objVisionIO.IOGrabbing.SetOff("V3 IOGrabbing 62");
                        m_objVisionIO.IOEndVision.SetOn("V3 IOEndVision 20");
                    }
                    m_blnGrabbing_Out = false;
                }
            }
            else
            {
                if (m_smVisionInfo.g_blnStopAfterFail)
                {
                    m_smVisionInfo.g_intMachineStatus = 1;

                }
                else
                {
                    if (blnAuto)
                    {
                        if (m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                        {
                            WaitEventDone(ref m_blnGrabbing_Out, false, 10000, "m_blnGrabbing_Out");//2021-03-24 ZJYEOH : Wait grab done send to handler first

                            //2021-03-24 ZJYEOH : Wait at least 5ms before send result
                            float fDelay = 5 - Math.Max(0, m_smVisionInfo.g_objTotalTime.Timing - m_smVisionInfo.g_objGrabTime.Duration);
                            if (fDelay >= 1)
                                Thread.Sleep((int)fDelay);

                            m_blnGrabbing_Out = false;
                            m_blnEndVision_Out = true;
                            if (m_blnCheckOffset_In)
                                m_smTCPIPIO.Send_ResultForCheckOffset(m_smVisionInfo.g_intVisionIndex, false, m_blnOrientResult1_Out, m_blnOrientResult2_Out, m_fOffsetX, m_fOffsetY, m_fOffsetAngle, false);
                            else
                                m_smTCPIPIO.Send_Result(m_smVisionInfo.g_intVisionIndex, false, m_blnOrientResult1_Out, m_blnOrientResult2_Out, m_intTCPIPResultID);
                        }
                        else
                        {
                            m_objVisionIO.IOGrabbing.SetOff("V3 IOGrabbing 61");
                            m_objVisionIO.IOEndVision.SetOn("V3 IOEndVision 20");
                        }
                    }
                }
            }

            TrackTiming(false, "4", false, m_smVisionInfo.g_blnTrackBasic);
            // ---------------------------------------------------------------------------------------------------

            // Wait all images grab done to make sure latest images are saved.
            WaitAllImageGrabDone();
            m_smVisionInfo.g_blnGrabbing = false;

            TrackTiming(false, "5", false, m_smVisionInfo.g_blnTrackBasic);

            string strPreMessage;
            if (blnAuto)
                strPreMessage = "";
            else
                strPreMessage = "Offline Test: ";

            // ---------- Check pass fail result --------------------------------------------------------
            if (blnInspectionDone)
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("100 - Inspection Done");

                if (!m_blnRepeatTest)
                {
                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("101");

                    if (!m_bGrabImageFinalResult_Center)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("102");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_smVisionInfo.g_strErrorMessage;
                        AddInspectionCounter(ResulType.NotReady, blnAuto);
                    }
                    else if (!m_bSubTh_CenterTest_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("103");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[0];
                        AddInspectionCounter(m_eInspectionResult_Center, blnAuto);

                        if (m_smVisionInfo.g_objGRR.ref_intGRRMode == 1) //2019-12-02 ZJYEOH : Record GRR if selected dynamic
                            RecordGRR2();

                        //Record CPK here
                        if (blnAuto && m_eInspectionResult_Center != ResulType.FailPosition)
                            RecordCPK();
                    }
                    else if (!m_bGrabImageFinalResult_Orient)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("104");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_smVisionInfo.g_strErrorMessage;
                        AddInspectionCounter(ResulType.NotReady, blnAuto);
                    }
                    else if (!m_bSubTh_OrientTest_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("105");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[0];
                        AddInspectionCounter(m_eInspectionResult_Orient, blnAuto);

                        if (m_smVisionInfo.g_objGRR.ref_intGRRMode == 1) //2019-12-02 ZJYEOH : Record GRR if selected dynamic
                            RecordGRR2();

                        //Record CPK here
                        if (blnAuto && m_eInspectionResult_Orient != ResulType.FailPosition)
                            RecordCPK();
                    }
                    else if (!bThickness_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("106");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[1];    // Thickness error msg is been keeping in index 1 during thickness checking in function IsPackageThicknessOK_MultiThreading()
                        AddInspectionCounter(ResulType.FailSidePkgDimension, blnAuto);
                    }
                    else if (!m_bSubTh_SideTLTest_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("107");
                        if (m_arrErrorMessage[1].Length > 0)
                            m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[1];
                        else
                            m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[4];

                        AddInspectionCounter(m_eInspectionResult_SideTL, blnAuto);

                        if (m_smVisionInfo.g_objGRR.ref_intGRRMode == 1)//2019-12-02 ZJYEOH : Record GRR if selected dynamic
                            RecordGRR2();

                        //Record CPK here
                        if (blnAuto && m_eInspectionResult_SideTL != ResulType.FailPosition)
                            RecordCPK();
                    }
                    else if (!m_bSubTh_SideBRTest_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("108");
                        if (m_arrErrorMessage[2].Length > 0)
                            m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[2];
                        else
                            m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[3];

                        AddInspectionCounter(m_eInspectionResult_SideBR, blnAuto);

                        if (m_smVisionInfo.g_objGRR.ref_intGRRMode == 1)//2019-12-02 ZJYEOH : Record GRR if selected dynamic
                            RecordGRR2();

                        //Record CPK here
                        if (blnAuto && m_eInspectionResult_SideBR != ResulType.FailPosition)
                            RecordCPK();
                    }
                    else if (!m_bSubTh_PHTest_Result)
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("109");
                        m_smVisionInfo.g_strErrorMessage = strPreMessage + m_arrErrorMessage[0];

                        AddInspectionCounter(m_eInspectionResult_Center, blnAuto);
                    }
                    else
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("110");
                        if (m_bWantPHTest)
                        {
                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("111");
                            m_smVisionInfo.g_strErrorMessage = strPreMessage + "*PH Inspection Pass.";
                            if (m_smVisionInfo.g_intViewInspectionSetting == 0) //2020-09-22 ZJYEOH : No need set color when trigger from Pre-Inspection
                                m_smVisionInfo.g_cErrorMessageColor = Color.Black;
                            AddInspectionCounter(ResulType.PassPH, blnAuto);
                        }
                        else
                        {
                            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("112");
                            if (!blnAuto)
                            {
                                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("113");
                                m_smVisionInfo.g_strErrorMessage = strPreMessage + "*Inspection Pass.";
                                if (m_smVisionInfo.g_intViewInspectionSetting == 0) //2020-09-22 ZJYEOH : No need set color when trigger from Pre-Inspection
                                    m_smVisionInfo.g_cErrorMessageColor = Color.Black;
                            }
                            AddInspectionCounter(ResulType.Pass, blnAuto);

                            RecordGRR2();

                            //Record CPK here
                            if (blnAuto)
                                RecordCPK();
                        }
                    }
                }
            }
            else
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("114");
                m_smVisionInfo.g_strErrorMessage = strPreMessage + "Wait inspection timeout.";

                AddInspectionCounter(ResulType.Timesout, blnAuto);
            }

            if (!m_blnRepeatTest)
            {
                if (m_smVisionInfo.g_strErrorMessage != "" && m_smVisionInfo.g_intViewInspectionSetting == 0) // 2019-11-04 ZJYEOH : no need to diplay error message when offline test is trigger from line profile form
                    m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                else
                    m_smVisionInfo.g_strErrorMessage = "";
                // ---------- Send position information to handler ----------------------------
#if (RTXDebug || RTXRelease)

            //if (m_thCOMMPort != null)
            {
                if ((m_smCustomizeInfo.g_intWantPositioning & (0x01 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    RS232.RTXSendData(GetTCPPositionResult_FromPositioningObject(blnResultOK), m_smVisionInfo.g_intVisionPos);
                }
            }

#else
                if ((m_smCustomizeInfo.g_intWantPositioning & (0x01 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_blnCustomWantPackage)
                    {
                        if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            m_smComThread.Send(GetTCPPositionResult_RectGauge4L(blnResultOK));

                    }
                    else if (m_blnCustomWantPositioning)
                    {
                        if (!m_smCustomizeInfo.g_blnWantUseTCPIPIO)
                            m_smComThread.Send(GetTCPPositionResult_FromPositioningObject(blnResultOK));
                    }
                }

#endif
                // ----------------------------------------------------------------------------

                // Unlock to allow other thread use the pad variables e.g drawing.
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if (m_smVisionInfo.g_arrPad[i] != null)
                    {
                        if (m_smVisionInfo.g_arrPad[i].ref_blnInspectLock)
                        {
                            m_smVisionInfo.g_arrPad[i].ref_blnInspectLock = false;
                            //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "F001,";
                        }
                    }
                }

                m_smVisionInfo.g_blnInspectionInProgress = false;   // Must set before m_bSubTh_StartAfterInspect
                m_bSubTh_StartAfterInspect = true;
                m_smVisionInfo.g_blnPadInpected = true;

                m_smVisionInfo.g_objProcessTime.Stop();
                if (m_smVisionInfo.g_blnTrackBasic) TrackTiming(false, "Last", m_smVisionInfo.g_blnTrackBasic || m_smVisionInfo.g_blnTrackCenter || m_smVisionInfo.g_blnTrackTL || m_smVisionInfo.g_blnTrackBR, true);

                //STTrackLog.WriteLine(m_strTrack + " === " + m_strTrack_Center + " === " + m_strTrack_TL + " === " + m_strTrack_BR + m_smVisionInfo.g_objProcessTime.Duration.ToString());
                //STTrackLog.WriteLine(m_smVisionInfo.g_objProcessTime.Duration.ToString());
            }

            return true;
        }

        private void AddInspectionCounter(ResulType eResultType, bool blnAuto)
        {
            if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("199 - AddInspectionCounter ResultYpe = " + eResultType.ToString());
            switch (eResultType)
            {
                case ResulType.Pass:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("210");
                        m_smVisionInfo.g_strResult = "Pass";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPassTotal++;
                            m_smVisionInfo.g_intContinuousPassUnitCount++;
                            SavePassImage_AddToBuffer();
                        }
                    }
                    break;
                case ResulType.FailOrient:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("211");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intOrientFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("FailOrient", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("FailPad");
                        }
                    }
                    break;
                case ResulType.FailPad:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("200 - FailPad");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPadFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("FailPad", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("FailPad");
                        }
                    }
                    break;
                case ResulType.FailPackage:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("212");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPackageFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("FailPackage", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("FailPackage");
                        }
                    }
                    break;
                case ResulType.FailPin1:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("213");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPin1FailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("FailPin1", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("FailPosition");
                        }
                    }
                    break;
                case ResulType.FailPosition:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("214");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPositionFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("FailPosition", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("FailPosition");
                        }
                    }
                    break;
                case ResulType.Timesout:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("215");
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("201 - Timeout");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPadFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("Timesout", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("Timesout");
                        }
                    }
                    break;
                case ResulType.FailPH:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("216");
                        m_smVisionInfo.g_strResult = "Fail PH";
                        if (blnAuto)
                        {
                            //m_smVisionInfo.g_intPadFailureTotal++;    // 2019 Dun add counter for PH Fail
                            SaveRejectImage_AddToBuffer("FailPH", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("Timesout");
                        }
                    }
                    break;
                case ResulType.PassPH:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("217");
                        m_smVisionInfo.g_strResult = "Pass PH";
                        if (blnAuto)
                        {
                            // 2019 09 11 - CCENG: Save Pass PH using SaveRejectImage_AddToBuffer() because need to have different folder name. 
                            //                     Although It is Pass image, but tHe Pass PH save count will refer to FailImageCount also for easier coding. 
                            SaveRejectImage_AddToBuffer("PassPH", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadArea:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("218");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadAreaFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadArea", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadOffset:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("219");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadOffsetFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadOffset", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadDimension:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("220");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadDimensionFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadDimension", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadPitchGap:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("221");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadPitchGapFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadPitchGap", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadBroken:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("222");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadBrokenFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadBroken", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadExcess:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("223");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadExcessFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadExcess", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadSmear:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("224");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadSmearFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadSmear", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadEdgeLimit:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("225");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadEdgeLimitFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadEdgeLimit", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadStandOff:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("226");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadStandOffFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadStandOff", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadEdgeDistance:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("225");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadEdgeDistanceFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadEdgeDistance", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadSpan:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("225");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadSpanFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadSpan", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadContamination:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("227");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadContaminationFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadContamination", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadMissing:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("228");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadMissingFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadMissing", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPadColorDefect:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("245");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPadColorDefectFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPadColorDefect", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadArea:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("229");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadAreaFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadArea", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadOffset:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("230");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadOffsetFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadOffset", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadDimension:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("231");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadDimensionFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadDimension", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadPitchGap:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("232");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadPitchGapFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadPitchGap", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadBroken:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("233");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadBrokenFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadBroken", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadExcess:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("234");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadExcessFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadExcess", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadSmear:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("235");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadSmearFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadSmear", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break; 
                case ResulType.FailSidePadEdgeLimit:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("236");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadEdgeLimitFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadEdgeLimit", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadStandOff:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("237");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadStandOffFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadStandOff", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadEdgeDistance:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("236");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadEdgeDistanceFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadEdgeDistance", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadSpan:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("236");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadSpanFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadSpan", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadContamination:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("238");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadContaminationFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadContamination", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadMissing:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("239");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadMissingFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadMissing", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePadColorDefect:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("246");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePadColorDefectFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePadColorDefect", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPkgDefect:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("240");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPkgDefectFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPkgDefect", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailCenterPkgDimension:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("241");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intCenterPkgDimensionFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("CenterPkgDimension", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePkgDefect:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("242");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePkgDefectFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePkgDefect", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                case ResulType.FailSidePkgDimension:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("243");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intSidePkgDimensionFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("SidePkgDimension", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                //case ResulType.FailNoTemplate:
                //    {
                //        m_smVisionInfo.g_strResult = "Fail";
                //        if (blnAuto)
                //        {
                //            m_smVisionInfo.g_intNoTemplateFailureTotal++;
                //        }
                //    }
                //    break;
                case ResulType.FailEdgeNotFound:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("244");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intEdgeNotFoundFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("EdgeNotFound", m_smVisionInfo.g_strErrorMessage);
                        }
                    }
                    break;
                default:
                case ResulType.NotReady:
                    {
                        if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("202 - No Ready");
                        m_smVisionInfo.g_strResult = "Fail";
                        if (blnAuto)
                        {
                            m_smVisionInfo.g_intPadFailureTotal++;
                            m_smVisionInfo.g_intContinuousFailUnitCount++;
                            SaveRejectImage_AddToBuffer("Other", m_smVisionInfo.g_strErrorMessage);
                            //SaveRejectImage("Other");
                        }
                    }
                    break;
            }

            if (blnAuto)
            {
                if (eResultType != ResulType.FailPH && eResultType != ResulType.PassPH)
                {
                    m_smVisionInfo.g_intTestedTotal++;
                    m_smVisionInfo.g_intLowYieldUnitCount++;

                    CheckLowYield();
                    CheckContinuousPass();
                    CheckContinuousFail();
                }
            }
        }

        private void WaitAllImageGrabDone()
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();

            while (true)
            {
                switch (m_intGrabRequire)
                {
                    case 1:
                        if (m_bGrabImage1Done)
                            return;
                        break;
                    case 2:
                        if (m_bGrabImage2Done)
                            return;
                        break;
                    case 3:
                        if (m_bGrabImage3Done)
                            return;
                        break;
                    case 4:
                        if (m_bGrabImage4Done)
                            return;
                        break;
                    case 5:
                        if (m_bGrabImage5Done)
                            return;
                        break;
                    case 6:
                        if (m_bGrabImage6Done)
                            return;
                        break;
                    case 7:
                        if (m_bGrabImage7Done)
                            return;
                        break;
                }

                if (timesout.Timing > 10000)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 8");
                    break;
                }

                Thread.Sleep(1);
            }
        }

        private string GetTCPPositionResult_FromPositioningObject(bool blnResult)
        {
            string strMessage = "<P";

            if (!blnResult)
                strMessage += "FN0000N0000";
            else
            {
                strMessage += "P";

                if (m_smVisionInfo.g_objPositioning.ref_fObjectOffsetX < 0)
                    strMessage += "N";
                else
                    strMessage += "P";
                strMessage += string.Format("{0:0000}", Math.Abs(Math.Round(m_smVisionInfo.g_objPositioning.ref_fObjectOffsetX)));

                if (m_smVisionInfo.g_intForceYZero == 1)
                {
                    strMessage += "P0000";
                }
                else
                {
                    if (m_smVisionInfo.g_objPositioning.ref_fObjectOffsetY < 0)
                        strMessage += "N";
                    else
                        strMessage += "P";
                    strMessage += string.Format("{0:0000}", Math.Abs(Math.Round(m_smVisionInfo.g_objPositioning.ref_fObjectOffsetY)));

                }
            }

            strMessage += ">";

            return strMessage;
        }

        private string GetTCPPositionResult_RectGauge4L(bool blnResult)
        {
            string strMessage = "<P";

            if (!blnResult)
                strMessage += "FN0000N0000";
            else
            {
                PointF pResultCenterPoint = m_smVisionInfo.g_arrPad[0].GetResultCenterPoint_RectGauge4L();
                float fObjectOffSetX = ((pResultCenterPoint.X - m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.ref_intCrosshairX) / m_smVisionInfo.g_fCalibPixelX * 1000);
                float fObjectOffSetY = ((pResultCenterPoint.Y - m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.ref_intCrosshairY) / m_smVisionInfo.g_fCalibPixelY * 1000);

                strMessage += "P";

                if (fObjectOffSetX < 0)
                    strMessage += "N";
                else
                    strMessage += "P";
                strMessage += string.Format("{0:0000}", Math.Abs(Math.Round(fObjectOffSetX)));

                if (m_smVisionInfo.g_intForceYZero == 1)
                {
                    strMessage += "P0000";
                }
                else
                {
                    if (fObjectOffSetY < 0)
                        strMessage += "N";
                    else
                        strMessage += "P";
                    strMessage += string.Format("{0:0000}", Math.Abs(Math.Round(fObjectOffSetY)));

                }
            }

            strMessage += ">";

            return strMessage;
        }

        private void TakeAction(string strMessage)
        {
            if (m_smVisionInfo.g_intMachineStatus == 2 && m_smVisionInfo.AT_PR_StartLiveImage && strMessage == "Client disconnected.")
            {
                m_smVisionInfo.AT_PR_StartLiveImage = false;
                m_smVisionInfo.AT_PR_TriggerLiveImage = true;
            }

            if (!(strMessage.StartsWith("<") && strMessage.EndsWith(">")))
                return;

            try
            {
                string[] strString = strMessage.Split(',', '>');
                switch (strString[0])
                {
                    default:
                        break;
                }

            }
            catch (Exception ex)
            {
                SRMMessageBox.Show(ex.ToString());
            }
        }
        private void TakeAction_TCPIPIO(string strMessage)
        {
            if (m_smVisionInfo.g_intMachineStatus == 2 && m_smVisionInfo.AT_PR_StartLiveImage && strMessage == "Client disconnected.")
            {
                m_smVisionInfo.AT_PR_StartLiveImage = false;
                m_smVisionInfo.AT_PR_TriggerLiveImage = true;
            }

            if (!(strMessage.StartsWith("<") && strMessage.EndsWith(">")))
                return;

            try
            {
                strMessage = strMessage.Remove(0, 1);
                string[] strString = strMessage.Split(',', '>');

                if (strString.Length == 0)
                    return;

                int intTestOption = 0;
                if (strString.Length < 2 || !int.TryParse(strString[1], out intTestOption))
                    intTestOption = -1;

                int intVisionIndex = 0;
                if (strString.Length < 3 || !int.TryParse(strString[2], out intVisionIndex))
                    intVisionIndex = -1;

                switch (strString[0])
                {
                    case "SOV":
                        if (intVisionIndex != Math.Pow(2, m_smVisionInfo.g_intVisionIndex) || intTestOption < 0 || m_smVisionInfo.g_intMachineStatus != 2)
                            m_smTCPIPIO.Send(m_smVisionInfo.g_intVisionIndex, "SOVRP", false, -1/*intTestOption*/);
                        else
                        {
                            m_smTCPIPIO.Send(m_smVisionInfo.g_intVisionIndex, "SOVRP", true, intTestOption);

                            if ((intTestOption & 0x01) > 0)
                                m_blnStartVision_In = true;
                            else
                                m_blnStartVision_In = false;

                            if ((intTestOption & 0x20) > 0)
                                m_blnCheckPH_In = true;
                            else
                                m_blnCheckPH_In = false;
                            
                            if ((intTestOption & 0x40) > 0)
                                m_blnCheckOffset_In = true;
                            else
                                m_blnCheckOffset_In = false;
                            
                        }
                        break;
                    case "EOV":
                        if (intVisionIndex != Math.Pow(2, m_smVisionInfo.g_intVisionIndex) || m_smVisionInfo.g_intMachineStatus != 2)
                            m_smTCPIPIO.Send(m_smVisionInfo.g_intVisionIndex, "EOVRP", false, intTestOption);
                        else
                        {
                            m_smTCPIPIO.Send(m_smVisionInfo.g_intVisionIndex, "EOVRP", true, intTestOption);
                        }
                        break;
                    default:
                        break;
                }

            }
            catch (Exception ex)
            {
                SRMMessageBox.Show(ex.ToString());
            }
        }
        private string GetROIDefinition(int intPadIndex)
        {
            switch (intPadIndex)
            {
                case 0:
                    return "*Center ROI: ";
                case 1:
                    return "*Top ROI: ";
                case 2:
                    return "*Right ROI: ";
                case 3:
                    return "*Bottom ROI: ";
                case 4:
                    return "*Left ROI: ";
                default:
                    SRMMessageBox.Show("GetROIDefinition()->Pad Index " + intPadIndex.ToString() + " no exist.");
                    return "";
            }
        }
        private void RotateImagesToOrientAngle_MultiThreading(int intPadIndex)
        {

            int intSearchROICenterX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterX;
            int intSearchROICenterY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterY;
            int intSearchROIStartX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX;
            int intSearchROIStartY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY;
            int intSearchROIEndX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth;
            int intSearchROIEndY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight;
            float fUnitCenterPointX = 0;
            float fUnitCenterPointY = 0;
            float fUnitAngle = 0;
            float fRotateROIHalfWidth;
            float fRotateROIHalfHeight;

            // Orient PRS Center Point Result
            if (m_smVisionInfo.g_arrPadOrientROIs != null && m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
            {
                //fUnitCenterPointX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIWidth / 2;//m_smVisionInfo.g_fOrientCenterX[0];
                //fUnitCenterPointY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIHeight / 2; //m_smVisionInfo.g_fOrientCenterY[0];
                fUnitCenterPointX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objPadOrient.ref_fObjectX;//m_smVisionInfo.g_fOrientCenterX[0];
                fUnitCenterPointY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objPadOrient.ref_fObjectY; //m_smVisionInfo.g_fOrientCenterY[0];
                fUnitAngle = m_intOrientAngle;
            }

            // Error Checking
            if (fUnitCenterPointX == 0 || fUnitCenterPointY == 0)
            {
                SRMMessageBox.Show("RotateImagesToOrientAngle_MultiThreading() -> Unit Center Point should not 0.");
                return;
            }

            // Define Rotate ROI size (between Unit size and Search ROI Size)
            if (fUnitCenterPointX <= intSearchROICenterX)
            {
                fRotateROIHalfWidth = fUnitCenterPointX - intSearchROIStartX;
            }
            else
            {
                fRotateROIHalfWidth = intSearchROIEndX - fUnitCenterPointX;
            }

            if (fUnitCenterPointY <= intSearchROICenterY)
            {
                fRotateROIHalfHeight = fUnitCenterPointY - intSearchROIStartY;
            }
            else
            {
                fRotateROIHalfHeight = intSearchROIEndY - fUnitCenterPointY;
            }

            // Get rotate roi which center ROI point same as result position unit ROI
            m_arrRotatedROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrImages[0]);
            m_arrRotatedROI[intPadIndex].LoadROISetting((int)Math.Round(fUnitCenterPointX - fRotateROIHalfWidth, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fUnitCenterPointY - fRotateROIHalfHeight, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfWidth * 2, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfHeight * 2, 0, MidpointRounding.AwayFromZero));

            // Rotate image 1 to 0 degree
            if (intPadIndex == 0)
            {
                if (Math.Abs(fUnitAngle) != 0)
                {
                    ROI.Rotate0Degree(m_smVisionInfo.g_arrImages[0], m_arrRotatedROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arrRotatedImages, 0);

                    for (int i = 1; i < m_smVisionInfo.g_arrRotatedImages.Count; i++)
                    {
                        m_arrRotatedROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrImages[i]);
                        ROI.Rotate0Degree(m_smVisionInfo.g_arrImages[i], m_arrRotatedROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arrRotatedImages, i);
                    }
                }
                else
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrRotatedImages.Count; i++)
                    {
                        m_smVisionInfo.g_arrImages[i].CopyTo(m_smVisionInfo.g_arrRotatedImages[i]);
                    }

                }
            }

            m_arrRotatedROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrImages[0]);
        }
        private void RotateImagesTo0Degree_MultiThreading(int intPadIndex, int intImageIndex, bool blnFromPackage)
        {
            if (m_arr5SImageRotated2[intPadIndex][intImageIndex])
                return;

            int intSearchROICenterX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterX;
            int intSearchROICenterY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterY;
            int intSearchROIStartX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX;
            int intSearchROIStartY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY;
            int intSearchROIEndX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth;
            int intSearchROIEndY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight;
            float fUnitCenterPointX = 0;
            float fUnitCenterPointY = 0;
            float fUnitAngle = 0;
            float fRotateROIHalfWidth;
            float fRotateROIHalfHeight;

            // Get result center point and angle
            if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(blnFromPackage))
            {
                fUnitCenterPointX = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X;
                fUnitCenterPointY = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y;
                fUnitAngle = m_smVisionInfo.g_arrPad[intPadIndex].GetResultAngle_RectGauge4L();
            }
            else if (m_blnCustomWantPositioning)
            {
                fUnitCenterPointX = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X;
                fUnitCenterPointY = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y;
                fUnitAngle = m_smVisionInfo.g_objPositioning.ref_fObjectAngle;
            }
            else if (m_blnCustomWantPad || m_blnCustomWant5S)
            {
                // Orient PRS Center Point Result
                fUnitCenterPointX = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X;
                fUnitCenterPointY = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y;
                fUnitAngle = m_smVisionInfo.g_arrPad[intPadIndex].GetResultAngle_UnitMatcher();
            }

            //2020-11-24 ZJYEOH : no need add anymore because inspect using rotated image
            ////2020-08-17 ZJYEOH : Add with Orient angle 
            //if (intPadIndex == 0 && m_blnCustomWantOrient)
            //    fUnitAngle += m_intOrientAngle;

            if (intImageIndex == 0)
            {
                m_arrUnitCenterX[intPadIndex] = fUnitCenterPointX;
                m_arrUnitCenterY[intPadIndex] = fUnitCenterPointY;
            }
            else if (intImageIndex == 2)
            {
                fUnitCenterPointX = m_arrUnitCenterX[intPadIndex];
                fUnitCenterPointY = m_arrUnitCenterY[intPadIndex];
            }

            // Error Checking
            if (fUnitCenterPointX == 0 || fUnitCenterPointY == 0)
            {
                SRMMessageBox.Show("RotateImageTo0Degree() -> Unit Center Point should not 0.");
                return;
            }

            // Define Rotate ROI size (between Unit size and Search ROI Size)
            if (fUnitCenterPointX <= intSearchROICenterX)
            {
                fRotateROIHalfWidth = fUnitCenterPointX - intSearchROIStartX;
            }
            else
            {
                fRotateROIHalfWidth = intSearchROIEndX - fUnitCenterPointX;
            }

            if (fUnitCenterPointY <= intSearchROICenterY)
            {
                fRotateROIHalfHeight = fUnitCenterPointY - intSearchROIStartY;
            }
            else
            {
                fRotateROIHalfHeight = intSearchROIEndY - fUnitCenterPointY;
            }

            // Get rotate roi which center ROI point same as result position unit ROI
            if(m_blnCustomWantOrient)
                m_arrRotatedROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrRotatedImages[intImageIndex]);
            else
                m_arrRotatedROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrImages[intImageIndex]);
            m_arrRotatedROI[intPadIndex].LoadROISetting((int)Math.Round(fUnitCenterPointX - fRotateROIHalfWidth, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fUnitCenterPointY - fRotateROIHalfHeight, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfWidth * 2, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfHeight * 2, 0, MidpointRounding.AwayFromZero));

            // Rotate image 1 to 0 degree
            if (intPadIndex == 0 || (intPadIndex > 0 && m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantRotateSidePadImage))
            {
                // 2021 01 25 - CCENG: 
                // Calculate angle limit using Trigonometry Calculator.
                // base on longer length of ROI, calculate how small angle can be ignore and not affecting standoff result too much?
                double fOpp = 0.5;  // Opp represent pixel will be affected after rotate. 0.5pixel is considered safe and not affecting standard result too much.
                double fHYP = (double)Math.Max(m_arrRotatedROI[intPadIndex].ref_ROIWidth, m_arrRotatedROI[intPadIndex].ref_ROIHeight);
                double dAngleLimit = Math.Asin(fOpp / fHYP) * 180 / Math.PI;
                if (Math.Abs(fUnitAngle) > dAngleLimit)
                //if (Math.Abs(fUnitAngle) > 0.5)
                {
                    if (m_blnCustomWantOrient)
                        ROI.Rotate0Degree(m_smVisionInfo.g_arrRotatedImages[intImageIndex], m_arrRotatedROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arr5SRotatedImages[intPadIndex], intImageIndex);
                    else
                        ROI.Rotate0Degree(m_smVisionInfo.g_arrImages[intImageIndex], m_arrRotatedROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arr5SRotatedImages[intPadIndex], intImageIndex);
                }
                else
                {
                    if (m_blnCustomWantOrient)
                        m_smVisionInfo.g_arrRotatedImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    else
                        m_smVisionInfo.g_arrImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                }
            }
            else
            {
                if (m_blnCustomWantOrient)
                    m_smVisionInfo.g_arrRotatedImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                else
                    m_smVisionInfo.g_arrImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
            }

            m_blnRotateImageUpdated = true;
            m_arr5SImageRotated2[intPadIndex][intImageIndex] = true;
        }
        private void RotateColorImagesTo0Degree_MultiThreading(int intPadIndex, int intImageIndex, bool blnFromPackage)
        {
            List<int> arrDefectImage = new List<int>();
            bool blnAllImageRotated = true;
            for (int i = 0; i < m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo.Count; i++)
            {
                if (CImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo[i], m_smVisionInfo.g_intVisionIndex) != 0 &&
                    !arrDefectImage.Contains(CImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo[i], m_smVisionInfo.g_intVisionIndex)))
                    arrDefectImage.Add(CImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo[i], m_smVisionInfo.g_intVisionIndex));
            }

            for (int i = 0; i < arrDefectImage.Count; i++)
            {
                if (!m_arr5SImageRotated2[intPadIndex][arrDefectImage[i]])
                    blnAllImageRotated = false;
            }

            if (m_arr5SImageRotated2[intPadIndex][intImageIndex] && blnAllImageRotated)
                return;

            int intSearchROICenterX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterX;
            int intSearchROICenterY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalCenterY;
            int intSearchROIStartX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX;
            int intSearchROIStartY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY;
            int intSearchROIEndX = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth;
            int intSearchROIEndY = m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight;
            float fUnitCenterPointX = 0;
            float fUnitCenterPointY = 0;
            float fUnitAngle = 0;
            float fRotateROIHalfWidth;
            float fRotateROIHalfHeight;

            // Get result center point and angle
            if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(blnFromPackage))
            {
                fUnitCenterPointX = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X;
                fUnitCenterPointY = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y;
                fUnitAngle = m_smVisionInfo.g_arrPad[intPadIndex].GetResultAngle_RectGauge4L();
            }
            else if (m_blnCustomWantPositioning)
            {
                fUnitCenterPointX = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.X;
                fUnitCenterPointY = m_smVisionInfo.g_objPositioning.ref_fObjectCenter.Y;
                fUnitAngle = m_smVisionInfo.g_objPositioning.ref_fObjectAngle;
            }
            else if (m_blnCustomWantPad || m_blnCustomWant5S)
            {
                // Orient PRS Center Point Result
                fUnitCenterPointX = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X;
                fUnitCenterPointY = m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y;
                fUnitAngle = m_smVisionInfo.g_arrPad[intPadIndex].GetResultAngle_UnitMatcher();
            }

            //2020-11-24 ZJYEOH : no need add anymore because inspect using rotated image
            ////2020-08-17 ZJYEOH : Add with Orient angle 
            //if (intPadIndex == 0 && m_blnCustomWantOrient)
            //    fUnitAngle += m_intOrientAngle;

            if (intImageIndex == 0)
            {
                m_arrUnitCenterX[intPadIndex] = fUnitCenterPointX;
                m_arrUnitCenterY[intPadIndex] = fUnitCenterPointY;
            }
            else if (intImageIndex == 2)
            {
                fUnitCenterPointX = m_arrUnitCenterX[intPadIndex];
                fUnitCenterPointY = m_arrUnitCenterY[intPadIndex];
            }

            // Error Checking
            if (fUnitCenterPointX == 0 || fUnitCenterPointY == 0)
            {
                SRMMessageBox.Show("RotateImageTo0Degree() -> Unit Center Point should not 0.");
                return;
            }

            // Define Rotate ROI size (between Unit size and Search ROI Size)
            if (fUnitCenterPointX <= intSearchROICenterX)
            {
                fRotateROIHalfWidth = fUnitCenterPointX - intSearchROIStartX;
            }
            else
            {
                fRotateROIHalfWidth = intSearchROIEndX - fUnitCenterPointX;
            }

            if (fUnitCenterPointY <= intSearchROICenterY)
            {
                fRotateROIHalfHeight = fUnitCenterPointY - intSearchROIStartY;
            }
            else
            {
                fRotateROIHalfHeight = intSearchROIEndY - fUnitCenterPointY;
            }

            // Get rotate roi which center ROI point same as result position unit ROI
            m_arrRotatedColorROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrColorImages[intImageIndex]);
            m_arrRotatedColorROI[intPadIndex].LoadROISetting((int)Math.Round(fUnitCenterPointX - fRotateROIHalfWidth, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fUnitCenterPointY - fRotateROIHalfHeight, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfWidth * 2, 0, MidpointRounding.AwayFromZero),
                                            (int)Math.Round(fRotateROIHalfHeight * 2, 0, MidpointRounding.AwayFromZero));

            // Rotate image 1 to 0 degree
            if (intPadIndex == 0 || (intPadIndex > 0 && m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantRotateSidePadImage))
            {  
                // 2021 01 25 - CCENG: 
                // Calculate angle limit using Trigonometry Calculator.
                // base on longer length of ROI, calculate how small angle can be ignore and not affecting standoff result too much?
                double fOpp = 0.5;  // Opp represent pixel will be affected after rotate. 0.5pixel is considered safe and not affecting standard result too much.
                double fHYP = (double)Math.Max(m_arrRotatedROI[intPadIndex].ref_ROIWidth, m_arrRotatedROI[intPadIndex].ref_ROIHeight);
                double dAngleLimit = Math.Asin(fOpp / fHYP) * 180 / Math.PI;
                if (Math.Abs(fUnitAngle) > dAngleLimit)
                {
                    CROI.Rotate0Degree(m_smVisionInfo.g_arrColorImages[intImageIndex], m_arrRotatedColorROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex], intImageIndex);
                    m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][intImageIndex].ConvertColorToMono(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                }
                else
                {
                    m_smVisionInfo.g_arrColorImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][intImageIndex]);
                    m_smVisionInfo.g_arrImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                }
            }
            else
            {
                m_smVisionInfo.g_arrColorImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][intImageIndex]);
                m_smVisionInfo.g_arrImages[intImageIndex].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
            }

            m_blnRotateImageUpdated = true;
            m_arr5SImageRotated2[intPadIndex][intImageIndex] = true;

            List<int> arrColorImageNo = new List<int>();
            for (int i = 0; i < m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo.Count; i++)
            {
                arrColorImageNo.Add(CImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_arrDefectImageNo[i], m_smVisionInfo.g_intVisionIndex));
            }

            for (int i = 0; i < arrDefectImage.Count; i++)
            {
                if (!m_arr5SImageRotated2[intPadIndex][arrDefectImage[i]] && arrColorImageNo.Contains(arrDefectImage[i]))
                {
                    // Get rotate roi which center ROI point same as result position unit ROI
                    m_arrRotatedColorROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrColorImages[arrDefectImage[i]]);
                    m_arrRotatedColorROI[intPadIndex].LoadROISetting((int)Math.Round(fUnitCenterPointX - fRotateROIHalfWidth, 0, MidpointRounding.AwayFromZero),
                                                    (int)Math.Round(fUnitCenterPointY - fRotateROIHalfHeight, 0, MidpointRounding.AwayFromZero),
                                                    (int)Math.Round(fRotateROIHalfWidth * 2, 0, MidpointRounding.AwayFromZero),
                                                    (int)Math.Round(fRotateROIHalfHeight * 2, 0, MidpointRounding.AwayFromZero));

                    // Rotate image 1 to 0 degree
                    if (intPadIndex == 0 || (intPadIndex > 0 && m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantRotateSidePadImage))
                    {
                        if (Math.Abs(fUnitAngle) > 0.5)
                        {
                            CROI.Rotate0Degree(m_smVisionInfo.g_arrColorImages[arrDefectImage[i]], m_arrRotatedColorROI[intPadIndex], fUnitAngle, 4, ref m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex], arrDefectImage[i]);
                            m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][arrDefectImage[i]].ConvertColorToMono(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][arrDefectImage[i]]);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrColorImages[arrDefectImage[i]].CopyTo(m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][arrDefectImage[i]]);
                            m_smVisionInfo.g_arrImages[arrDefectImage[i]].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][arrDefectImage[i]]);
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_arrColorImages[arrDefectImage[i]].CopyTo(m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][arrDefectImage[i]]);
                        m_smVisionInfo.g_arrImages[arrDefectImage[i]].CopyTo(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][arrDefectImage[i]]);
                    }

                    m_blnRotateImageUpdated = true;
                    m_arr5SImageRotated2[intPadIndex][arrDefectImage[i]] = true;

                }
            }

        }
        private bool FindUnit_ForPackage_Multithreading(int intPadIndex, int intImageIndex, ref int intFailType)
        {
            // Pattern Match to find unit location and angle
            m_smVisionInfo.g_arrPadROIs[intPadIndex][0].AttachImage(m_smVisionInfo.g_arrImages[intImageIndex]);

            if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantPRUnitLocationBeforeGauge)
            {
                if (intPadIndex == 0)
                {
                    if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS(m_smVisionInfo.g_arrPadROIs[intPadIndex][0], 5, true))  // 2018 09 10 - CCENG Improve: Can improve the angle tolerance by using small angle first, if score not good, then only go to higher angle. 
                    {
                        m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                        intFailType = 0;
                        return false;
                    }
                }
                else
                {
                    // Dun use FindUnitUsingPRS_SideROI here bcos WantPRUnitLocationBeforeGauge is true mean must use PR result
                    if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS(m_smVisionInfo.g_arrPadROIs[intPadIndex][0], 2, true)) // Side pad not need angle
                    {
                        m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                        intFailType = 0;
                        return false;
                    }
                }
            }

            // 2019-12-17 ZJYEOH : Need use this new measure gauge function as all ROIs have separated Gain
            if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_objWhiteImage))
            {
                m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                intFailType = 1;
                return false;
            }

            //switch (m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.GetGaugeImageMode(0))
            //{
            //    default:
            //    case 0: // Standard Mode = Image + gain only
            //        {
            //            if (m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain == 1)
            //            {
            //                // Use RectGauge4L to find unit size
            //                if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrImages[intImageIndex], m_smVisionInfo.g_objWhiteImage))
            //                {
            //                    m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
            //                    intFailType = 1;
            //                    return false;
            //                }
            //            }
            //            else
            //            {
            //                // add gain to image
            //                m_arrGainImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
            //                                            m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
            //                m_smVisionInfo.g_arrImages[intImageIndex].AddGain(ref m_arrGainImage[intPadIndex], m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain);

            //                // Use RectGauge4L to find unit size
            //                if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrGainImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
            //                {
            //                    m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
            //                    intFailType = 1;
            //                    return false;
            //                }
            //            }
            //        }
            //        break;
            //    case 1: // Standard Mode = Image + gain only > Prewitt.
            //        {
            //            // add gain to image
            //            if (m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain == 1)
            //            {
            //                m_arrTempGaugeImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
            //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
            //                m_smVisionInfo.g_arrImages[intImageIndex].AddPrewitt(ref m_arrTempGaugeImage[intPadIndex]);

            //                // Use RectGauge4L to find unit size
            //                if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrTempGaugeImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
            //                {
            //                    m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
            //                    intFailType = 1;
            //                    return false;
            //                }
            //            }
            //            else
            //            {
            //                m_arrGainImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
            //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
            //                m_smVisionInfo.g_arrImages[intImageIndex].AddGain(ref m_arrGainImage[intPadIndex], m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain);

            //                m_arrTempGaugeImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
            //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
            //                m_arrGainImage[intPadIndex].AddPrewitt(ref m_arrTempGaugeImage[intPadIndex]);

            //                // Use RectGauge4L to find unit size
            //                if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrTempGaugeImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
            //                {
            //                    m_arrErrorMessage[intPadIndex] = "*Fail to find unit." + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
            //                    intFailType = 1;
            //                    return false;
            //                }
            //            }
            //        }
            //        break;
            //}


            m_arr5SFoundUnitPkg[intPadIndex] = true;

            return true;

        }

        private bool FindUnit_ForPad_Multithreading(int intPadIndex, int intImageIndex, int[] arrGaugeImageIndex, ref int intFailType)
        {
            if (m_smVisionInfo.g_arrPadROIs[intPadIndex].Count > 0)
            {
                if (m_blnCustomWantOrient)
                    m_smVisionInfo.g_arrPadROIs[intPadIndex][0].AttachImage(m_smVisionInfo.g_arrRotatedImages[intImageIndex]);
                else
                    m_smVisionInfo.g_arrPadROIs[intPadIndex][0].AttachImage(m_smVisionInfo.g_arrImages[intImageIndex]);
                
            }
            else
            {
                m_arrErrorMessage[intPadIndex] = "*No Template Found";
                intFailType = 1;
                return false;
            }
            /*
             * Algorithm:
             * - if WantGauge, then    
             *      if WantPR 
             *          then Use PR (low accuracy mode) to find unit and then measure unit with Gauge
             *      else 
             *          measure unit with gauge
             *   else 
             *      Use PR (high accracy mode) to find unit
             * 
             */



            if (intPadIndex == 0 &&
                 m_smVisionInfo.g_arrPad[intPadIndex].ref_blnMeasureCenterPkgSizeUsingSidePkg &&
                 m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false) &&
                 m_smVisionInfo.g_arrPad.Length == 5 &&
                 m_smVisionInfo.g_blnCheck4Sides &&
                 m_blnCustomWantPackage)
            {
                // Wait either side package edge found or result fail
                WaitEventDone(ref m_arr5SFoundUnitPkg[1], ref m_bSubTh_SideTLTest, true, false, "A23");
                WaitEventDone(ref m_arr5SFoundUnitPkg[2], ref m_bSubTh_SideBRTest, true, false, "A24");
                WaitEventDone(ref m_arr5SFoundUnitPkg[3], ref m_bSubTh_SideBRTest, true, false, "A25");
                WaitEventDone(ref m_arr5SFoundUnitPkg[4], ref m_bSubTh_SideTLTest, true, false, "A26");

                if (m_arr5SFoundUnitPkg[1] && m_arr5SFoundUnitPkg[2] && m_arr5SFoundUnitPkg[3] && m_arr5SFoundUnitPkg[4])
                {
                    if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_UsingSidePkgCornerPoint(
                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X,
                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y,
                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X,
                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y,
                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X,
                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y,
                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X,
                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y))
                    {
                        m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                        intFailType = 1;
                        return false;
                    }
                }
                else
                {
                    m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                    intFailType = 1;
                    return false;
                }
            }
            else if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
            //if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize())
            {
                if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantPRUnitLocationBeforeGauge)  // Consume time due to Pattern Matching with angle
                {
                    // Accracy is not important PR here because final correct position and angle will done by gauge.
                    if (intPadIndex == 0)
                    {

                        if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS(m_smVisionInfo.g_arrPadROIs[intPadIndex][0], 5, true))
                        {
                            m_arrErrorMessage[intPadIndex] = "*Fail to find unit. " + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                            intFailType = 0;
                            return false;
                        }
                    }
                    else
                    {
                        // Dun use FindUnitUsingPRS_SideROI here bcos WantPRUnitLocationBeforeGauge is true mean must use PR result
                        if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS(m_smVisionInfo.g_arrPadROIs[intPadIndex][0], 2, true)) // Side pad angle is a bit only   
                        {
                            m_arrErrorMessage[intPadIndex] = "*Fail to find unit. " + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                            intFailType = 0;
                            return false;
                        }
                    }
                }

                // Check is side ROI and center ROI has same intGaugeSizeImageIndex value or not. If not, then add gain value to side image as well.
                //if (intPadIndex == 0 || (intPadIndex > 0 && m_smVisionInfo.g_arrPad[intPadIndex].ref_intGaugeSizeImageIndex != m_smVisionInfo.g_arrPad[0].ref_intGaugeSizeImageIndex))
                //{
                // add gain to image
                //m_arrGainImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
                //                            m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
                ////m_smVisionInfo.g_arrImages[intImageIndex].AddGain(ref m_arrGainImage[intPadIndex], m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain);
                //m_smVisionInfo.g_arrImages[intImageIndex].AddPrewitt(ref m_arrGainImage[intPadIndex]);


                bool blnResult = false;

                if (m_blnCustomWantOrient)
                {
                    if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrRotatedImages, m_smVisionInfo.g_objWhiteImage))
                    {
                        blnResult = true;
                    }
                }
                else
                {
                    if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_objWhiteImage))
                    {
                        blnResult = true;
                    }
                }

                //switch (m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.GetGaugeImageMode(0))
                //{
                //    default:
                //    case 0: // Standard Mode = Image + gain only
                //        {
                //            // Use RectGauge4L to find unit size
                //            if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_objWhiteImage))
                //            {
                //                blnResult = true;
                //            }

                //            //if (m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain == 1)
                //            //{
                //            //    // Use RectGauge4L to find unit size
                //            //    if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_smVisionInfo.g_arrImages[intImageIndex], m_smVisionInfo.g_objWhiteImage))
                //            //    {
                //            //        blnResult = true;
                //            //    }
                //            //}
                //            //else
                //            //{
                //            //    // add gain to image
                //            //    m_arrGainImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
                //            //                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
                //            //    m_smVisionInfo.g_arrImages[intImageIndex].AddGain(ref m_arrGainImage[intPadIndex], m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain);

                //            //    // Use RectGauge4L to find unit size
                //            //    if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrGainImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
                //            //    {
                //            //        blnResult = true;
                //            //    }
                //            //}
                //        }
                //        break;
                //    case 1: // Standard Mode = Image + gain only > Prewitt.
                //        {
                //            // add gain to image
                //            if (m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain == 1)
                //            {
                //                m_arrTempGaugeImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
                //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
                //                m_smVisionInfo.g_arrImages[intImageIndex].AddPrewitt(ref m_arrTempGaugeImage[intPadIndex]);

                //                // Use RectGauge4L to find unit size
                //                if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrTempGaugeImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
                //                {
                //                    blnResult = true;
                //                }
                //            }
                //            else
                //            {
                //                m_arrGainImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
                //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
                //                m_smVisionInfo.g_arrImages[intImageIndex].AddGain(ref m_arrGainImage[intPadIndex], m_smVisionInfo.g_arrPad[intPadIndex].ref_fImageGain);

                //                m_arrTempGaugeImage[intPadIndex].SetImageSize(m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageWidth,
                //                                                m_smVisionInfo.g_arrImages[intImageIndex].ref_intImageHeight);
                //                m_arrGainImage[intPadIndex].AddPrewitt(ref m_arrTempGaugeImage[intPadIndex]);

                //                // Use RectGauge4L to find unit size
                //                if (m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure(m_arrTempGaugeImage[intPadIndex], m_smVisionInfo.g_objWhiteImage))
                //                {
                //                    blnResult = true;
                //                }
                //            }
                //        }
                //        break;
                //}
                //}

                //// Use RectGauge4L to find unit size
                //if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantAutoGauge)
                //{
                //    if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_ResetGaugePlaceUsingPRPositionBeforeMeasure_AutoGauge(m_arrGainImage[intPadIndex], intPadIndex))
                //    {
                //        m_arrErrorMessage[intPadIndex] = "*Fail to find unit. Gauge measurement Fail.";
                //        return false;
                //    }
                //}
                //else
                {
                    if (!blnResult)
                    {
                        if (intPadIndex == 0 && m_smVisionInfo.g_arrPad[intPadIndex].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_blnCheck4Sides)
                        {
                            // Wait either side package edge found or result fail
                            WaitEventDone(ref m_arr5SFoundUnitPkg[1], ref m_bSubTh_SideTLTest, true, false, "A27");
                            WaitEventDone(ref m_arr5SFoundUnitPkg[2], ref m_bSubTh_SideBRTest, true, false, "A28");
                            WaitEventDone(ref m_arr5SFoundUnitPkg[3], ref m_bSubTh_SideBRTest, true, false, "A29");
                            WaitEventDone(ref m_arr5SFoundUnitPkg[4], ref m_bSubTh_SideTLTest, true, false, "A30");

                            if (m_arr5SFoundUnitPkg[1] && m_arr5SFoundUnitPkg[2] && m_arr5SFoundUnitPkg[3] && m_arr5SFoundUnitPkg[4])
                            {
                                if (!m_smVisionInfo.g_arrPad[intPadIndex].MeasureEdge_UsingSidePkgCornerPoint(
                                    m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X,
                                    m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y,
                                    m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X,
                                    m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y,
                                    m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X,
                                    m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y,
                                    m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X,
                                    m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y))
                                {
                                    m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                                    intFailType = 1;
                                    return false;
                                }
                            }
                            else
                            {
                                m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                                intFailType = 1;
                                return false;
                            }
                        }
                        else
                        {
                            m_arrErrorMessage[intPadIndex] = "*Fail to find unit. Measure Edge Fail.";
                            intFailType = 1;
                            return false;
                        }
                    }
                }
            }
            else
            {
                if (intPadIndex == 0)
                {
                    if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS(m_smVisionInfo.g_arrPadROIs[intPadIndex][0], 10, false))
                    {
                        m_arrErrorMessage[intPadIndex] = "*Fail to find unit. " + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                        intFailType = 0;
                        return false;
                    }
                }
                else
                {
                    // 2021 07 23 - CCENG: For Side ROI, need to pass Pad ROI center position as parameter. 
                    //            - If score fail, then direct use Pad ROI Center Position.
                    //            - Pad ROI will fail sometime due to user learn side surface with empty pad.
                    if (!m_smVisionInfo.g_arrPad[intPadIndex].FindUnitUsingPRS_SideROI(m_smVisionInfo.g_arrPadROIs[intPadIndex][0],
                                                                               m_smVisionInfo.g_arrPadROIs[intPadIndex][3].ref_ROITotalCenterX,
                                                                               m_smVisionInfo.g_arrPadROIs[intPadIndex][3].ref_ROITotalCenterY, 2, false)) // Side pad angle is a bit only
                    {
                        m_arrErrorMessage[intPadIndex] = "*Fail to find unit. " + m_smVisionInfo.g_arrPad[intPadIndex].ref_strErrorMessage;
                        intFailType = 0;
                        return false;
                    }
                }
            }

            m_arr5SFoundUnit[intPadIndex] = true;

            if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
            {
                m_arr5SFoundUnitPkg[intPadIndex] = true;    // Set True to tell system that current unit measurement in this FindUnit_ForPad_Multithreading() function can used for package size
            }

            return true;
        }

        private bool IsPadOK_CenterPadTest_MultiThreading(int intPadIndex)
        {
            if (!m_smVisionInfo.g_blnCheckPad)
                return true;

            bool blnAutoSensitivity = (m_smVisionInfo.g_arrPad[intPadIndex].ref_intInspectPadMode == 1 && m_smVisionInfo.g_arrPad[intPadIndex].ref_intSensitivityOnPadMethod != 0);
            //Copy rotated image to a temp image
            //m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0].CopyTo(ref m_arrTempImage[intPadIndex]);


            // Define Sample Unit ROI attach to sample image          
            m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
            m_smVisionInfo.g_arrInspectROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);

            // 2019 11 18 - CCENG: Make sure Pad ROI and unit template ROI size are same. (Pad ROI and Unit Template size is different during half way of production. Not sure the root cause yet.)
            if ((m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth != (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight))) ||
                (m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight != (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom))))
            {
                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].LoadROISetting(m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIPositionX,
                                                                            m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIPositionY,
                                                                            (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight)),
                                                                            (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom)));

                STTrackLog.WriteLine("Vision3Process > Call LoadROISetting for PadROI because PadROI size not tally with Unit Template Image Width");
            }

            if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
            {
                // g_arrInspectROI = Package ROI + Pad ROI Tolerance
                //m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                //              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                //              ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance, 0, MidpointRounding.AwayFromZero),
                //              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                //              ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance, 0, MidpointRounding.AwayFromZero),
                //              m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2,
                //              m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2);

                if (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadOffsetReferencePoint == 0)
                {
                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                             (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                             ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero),
                             (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                             ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero),
                             m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                             m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                }
                else
                {
                    switch (intPadIndex)
                    {
                        case 0:
                        default:
                            {
                                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero),
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero),
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                            }
                            break;
                        case 1:
                            {   // Corner Point Fix to Top Left
                                int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero);
                                int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                               m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 -
                                               m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero);

                                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                            }
                            break;
                        case 2:
                            {   // Corner Point Fix to Top Right
                                int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight -
                                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight, 0, MidpointRounding.AwayFromZero);
                                int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                               m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 -
                                               m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero);

                                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                            }
                            break;
                        case 3:
                            {   // Corner Point Fix to Bottom Right
                                int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight -
                                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight, 0, MidpointRounding.AwayFromZero);
                                int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom -
                                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom, 0, MidpointRounding.AwayFromZero);

                                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                            }
                            break;
                        case 4:
                            {   // Corner Point Fix to Bottom Left
                                int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero);
                                int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 +
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom -
                                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop -
                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom, 0, MidpointRounding.AwayFromZero);

                                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);

                            }
                            break;
                    }
                }

                if (blnAutoSensitivity)
                {
                    m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].LoadROISetting(
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight);
                }
                //// Same size as physical unit size
                //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                //     m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2, 0, MidpointRounding.AwayFromZero),
                //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                //    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2, 0, MidpointRounding.AwayFromZero),
                //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth, 0, MidpointRounding.AwayFromZero),
                //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight, 0, MidpointRounding.AwayFromZero));

                // Question: Using the RectGauge4L measurement size or use the learn PackageROI size?
                // -------------RectGauge4L-------------------------------------
                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultUpWidth_RectGauge4L(0),
                                               m_smVisionInfo.g_arrPad[intPadIndex].GetResultDownWidth_RectGauge4L(0));
                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultLeftHeight_RectGauge4L(0),
                                                m_smVisionInfo.g_arrPad[intPadIndex].GetResultRightHeight_RectGauge4L(0));
                //--------------------------------------------------------------

                // Inspection area for package size after include PkgStartPixelFromEdge
                float fInspectionPkgSizeWidth = fPkgSizeWidth;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;
                float fInspectionPkgSizeHeight = fPkgSizeHeight;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;

                // Get First Image Package ROI
                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                     fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                     fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));
            }
            else
            {
                // Same size as Unit ROI 
                //2020-09-24 ZJYEOH : Load ROI using pattern because when learn we save pad ROI with tolerance as pattern
                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
              (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width / 2), 0, MidpointRounding.AwayFromZero),
              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
              (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height / 2), 0, MidpointRounding.AwayFromZero),
              (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width,
              (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height);

                if (blnAutoSensitivity)
                {
                    m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].LoadROISetting(
                      (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                      ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                      (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                      ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                      m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth,
                      m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight);
                }
                //// Same size as Unit ROI since gauge is not using and vision will never know the current physical unit size
                //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                //  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                //  ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                //  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                //  ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                //  m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth,
                //  m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight);

                float fPkgSizeWidth = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth;
                float fPkgSizeHeight = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight;

                // Inspection area for package size after include PkgStartPixelFromEdge
                float fInspectionPkgSizeWidth = fPkgSizeWidth;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;
                float fInspectionPkgSizeHeight = fPkgSizeHeight;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;

                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                  (fInspectionPkgSizeWidth / 2), 0, MidpointRounding.AwayFromZero),
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                  (fInspectionPkgSizeHeight / 2), 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

            }

            m_arrTempImage[intPadIndex].SetImageToBlack();

            if (blnAutoSensitivity)
            {
                m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].CopyTo_ROIToROISamePosition(ref m_arrTempImage[intPadIndex]);

                m_smVisionInfo.g_arrInspectSearchROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
                m_smVisionInfo.g_arrInspectROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
            }
            else
            {
                m_smVisionInfo.g_arrInspectROI[intPadIndex].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                m_smVisionInfo.g_arrInspectROI[intPadIndex].CopyTo_ROIToROISamePosition(ref m_arrTempImage[intPadIndex]);

                m_smVisionInfo.g_arrInspectROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
            }

            int j = 0;
            List<List<PointF>> arrDontCare = new List<List<PointF>>();

            ////Draw don't care ROI edge to make sure Don't Care Area is not inspected
            //for (int k = 4; k < m_smVisionInfo.g_arrPadROIs[intPadIndex].Count; k++)
            //{
            //    PointF ptTemp;
            //    List<PointF> arrTemp = new List<PointF>();

            //    ptTemp = new PointF();
            //    //ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance;
            //    //ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance;
            //    // 2019-11-01 ZJYEOH : Pad ROI Tolerance now separate into 4 sides
            //    ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft; //2019-11-01 ZJYEOH : Changed + to -
            //    ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop; //2019-11-01 ZJYEOH : Changed + to -

            //    arrTemp.Add(ptTemp);

            //    ptTemp = new PointF();
            //    //ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2;
            //    //ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2;
            //    ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight;
            //    ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom;

            //    arrTemp.Add(ptTemp);

            //    arrDontCare.Add(new List<PointF>());
            //    arrDontCare[j].Add(arrTemp[0]);
            //    arrDontCare[j].Add(arrTemp[1]);

            //    j++;

            //    //m_smVisionInfo.g_arrPadROIs[intPadIndex][k].AttachImage(m_smVisionInfo.g_arrInspectROI[intPadIndex]);    // Attach to Sample Unit ROI or Package ROI
            //    //m_smVisionInfo.g_arrPadROIs[intPadIndex][k].DrawDontCareEdge(0);

            //    m_smVisionInfo.g_arrPadROIs[intPadIndex][k].AttachImage(m_smVisionInfo.g_arrInspectROI[intPadIndex]);
            //    ROI objROI = new ROI();
            //    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX, m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY,
            //        m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth, m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight);
            //    objROI.AttachImage(m_smVisionInfo.g_objWhiteImage);
            //    ROI.SubtractROI(m_smVisionInfo.g_arrPadROIs[intPadIndex][k], objROI);
            //    //m_smVisionInfo.g_arrInspectROI[intPadIndex].SaveImage("D:\\aaa.bmp");
            //    objROI.Dispose();
            //}

            //m_fTiming2 = m_T2.Timing;
            //m_strTrack_Center += ", D1=" + (m_fTiming2 - m_fTimingPrev2).ToString();
            //m_fTimingPrev2 = m_fTiming2;

            // 2019 11 18 - CCENG: Make sure g_arrInspectROI and unit template ROI size are same. (g_arrInspectROI and Unit Template size is different during half way of production. Not sure the root cause yet.)
            if ((m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth != m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth) ||
                (m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight != m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight))
            {
                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIPositionX,
                                                                            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIPositionY,
                                                                            m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth,
                                                                            m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight);

                STTrackLog.WriteLine("Vision3Process > Call LoadROISetting for g_arrInspectROI because g_arrInspectROI size not tally with Unit Template Image Width");
            }

            CROI objCROI = new CROI();
            if (m_blnCustomWantColor && m_smVisionInfo.g_blnCheckPadColor)
            {
                objCROI.AttachImage(m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex][0]);
                objCROI.LoadROISetting(m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROITotalY,
                    m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth, m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);
            }

            bool blnCheckContamination = true;
            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false) && !m_smVisionInfo.g_arrPad[0].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                blnCheckContamination = false;

            //if (blnAutoSensitivity)
            {
                ImageDrawing objOriImage = m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0];
                if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_Eblob(
                    ref objOriImage,
                    ref m_arrTempImage[intPadIndex],
                        m_smVisionInfo.g_arrInspectSearchROI[intPadIndex],
                        m_smVisionInfo.g_arrInspectROI[intPadIndex],
                        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                        m_smVisionInfo.g_arrPadROIs[intPadIndex],
                        arrDontCare, blnCheckContamination,
                        objCROI, m_blnCustomWantColor & m_smVisionInfo.g_blnCheckPadColor, m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex],
                        m_smVisionInfo.g_objBlackImage))
                {
                    return false;
                }
            }
            //else
            //{
            //    if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_Eblob(
            //            m_smVisionInfo.g_arrInspectROI[intPadIndex],
            //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
            //            m_smVisionInfo.g_arrPadROIs[intPadIndex],
            //            arrDontCare, blnCheckContamination,
            //            objCROI, m_blnCustomWantColor & m_smVisionInfo.g_blnCheckPadColor, m_smVisionInfo.g_arr5SColorRotatedImages[intPadIndex],
            //            m_smVisionInfo.g_objBlackImage))
            //    {
            //        return false;
            //    }

            //    // Natlinear
            //    //if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_Eblob(
            //    //    m_smVisionInfo.g_arrInspectSearchROI[intPadIndex],
            //    //    m_smVisionInfo.g_arrInspectROI[intPadIndex],
            //    //    m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
            //    //    m_smVisionInfo.g_arrPadROIs[intPadIndex],
            //    //    arrDontCare, blnCheckContamination))
            //    //{
            //    //    return false;
            //    //}

            //}
            objCROI.Dispose();
            //m_strTrack_Center += m_smVisionInfo.g_arrPad[intPadIndex].m_strTrack;

            //m_fTiming2 = m_T2.Timing;
            //m_strTrack_Center += ", D2=" + (m_fTiming2 - m_fTimingPrev2).ToString();
            //m_fTimingPrev2 = m_fTiming2;
            return true;
        }

        private bool IsPadOK_CenterPadTest_MultiThreading_ImageMerge2(int intPadIndex)
        {
            if (!m_smVisionInfo.g_blnCheckPad)
                return true;

            //m_fTiming2 = m_T2.Timing;
            //m_strTrack_Center += ", D=" + (m_fTiming2 - m_fTimingPrev2).ToString();
            //m_fTimingPrev2 = m_fTiming2;

            int intImageIndex = ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_intBrokenPadImageViewNo, m_smVisionInfo.g_intVisionIndex);
            //Copy rotated image to a temp image
            m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex].CopyTo(ref m_arrTempImage[intPadIndex]);
            //if (intPadIndex == 0)
            //{
            //    STTrackLog.WriteLine("TempImage_B");
            //    m_arrTempImage[intPadIndex].SaveImage("D:\\TS\\TempImage_B.bmp");
            //}
            // Define Sample Unit ROI attach to sample image          
            m_InspectROI[intPadIndex].AttachImage(m_arrTempImage[intPadIndex]);
            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);

            if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
            {
                // g_arrInspectROI = Package ROI + Pad ROI Tolerance
                //m_InspectROI[intPadIndex].LoadROISetting(
                //              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                //              ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance, 0, MidpointRounding.AwayFromZero),
                //              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                //              ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance, 0, MidpointRounding.AwayFromZero),
                //              m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2,
                //              m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2);

                // 2019-11-01 ZJYEOH : Pad ROI Tolerance now separate into 4 sides
                m_InspectROI[intPadIndex].LoadROISetting(
                                (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero),
                                (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero),
                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);

                // Question: Using the RectGauge4L measurement size or use the learn PackageROI size?
                // -------------RectGauge4L-------------------------------------
                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultUpWidth_RectGauge4L(0),
                                               m_smVisionInfo.g_arrPad[intPadIndex].GetResultDownWidth_RectGauge4L(0));
                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultLeftHeight_RectGauge4L(0),
                                                m_smVisionInfo.g_arrPad[intPadIndex].GetResultRightHeight_RectGauge4L(0));
                //--------------------------------------------------------------

                // Inspection area for package size after include PkgStartPixelFromEdge
                float fInspectionPkgSizeWidth = fPkgSizeWidth;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;
                float fInspectionPkgSizeHeight = fPkgSizeHeight;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;

                // Get First Image Package ROI
                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                     fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                     fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));
            }
            else
            {
                // Same size as Unit ROI 
                //2020-09-24 ZJYEOH : Load ROI using pattern because when learn we save pad ROI with tolerance as pattern
                m_InspectROI[intPadIndex].LoadROISetting(
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                  (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width / 2), 0, MidpointRounding.AwayFromZero),
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                  (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height / 2), 0, MidpointRounding.AwayFromZero),
                  (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width,
                  (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height);

                float fPkgSizeWidth = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth;
                float fPkgSizeHeight = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight;

                // Inspection area for package size after include PkgStartPixelFromEdge
                float fInspectionPkgSizeWidth = fPkgSizeWidth;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;
                float fInspectionPkgSizeHeight = fPkgSizeHeight;// - m_smVisionInfo.g_arrPad[intPadIndex].GetPkgStartPixelFromEdge(-1) * 2;

                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                  (fInspectionPkgSizeWidth / 2), 0, MidpointRounding.AwayFromZero),
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                  (fInspectionPkgSizeHeight / 2), 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));
            }

            //int j = 0;
            //List<List<PointF>> arrDontCare = new List<List<PointF>>();

            //Draw don't care ROI edge to make sure Don't Care Area is not inspected
            //for (int k = 4; k < m_smVisionInfo.g_arrPadROIs[intPadIndex].Count; k++)
            //{
            //    PointF ptTemp;
            //    List<PointF> arrTemp = new List<PointF>();

            //    ptTemp = new PointF();
            //    //ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance;
            //    //ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance;
            //    // 2019-11-01 ZJYEOH : Pad ROI Tolerance now separate into 4 sides
            //    ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft; //2019-11-01 ZJYEOH : Changed + to -
            //    ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop; //2019-11-01 ZJYEOH : Changed + to -

            //    arrTemp.Add(ptTemp);

            //    ptTemp = new PointF();
            //    //ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2;
            //    //ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROISizeTolerance * 2;
            //    ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight;
            //    ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom;

            //    arrTemp.Add(ptTemp);

            //    arrDontCare.Add(new List<PointF>());
            //    arrDontCare[j].Add(arrTemp[0]);
            //    arrDontCare[j].Add(arrTemp[1]);

            //    j++;

            //    //m_smVisionInfo.g_arrPadROIs[intPadIndex][k].AttachImage(m_smVisionInfo.g_arrInspectROI[intPadIndex]);    // Attach to Sample Unit ROI or Package ROI
            //    //m_smVisionInfo.g_arrPadROIs[intPadIndex][k].DrawDontCareEdge(0);

            //    m_smVisionInfo.g_arrPadROIs[intPadIndex][k].AttachImage(m_InspectROI[intPadIndex]);
            //    ROI objROI = new ROI();
            //    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX, m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY,
            //        m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth, m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight);
            //    objROI.AttachImage(m_smVisionInfo.g_objWhiteImage);
            //    ROI.SubtractROI(m_smVisionInfo.g_arrPadROIs[intPadIndex][k], objROI);
            //    //m_smVisionInfo.g_arrInspectROI2[intPadIndex].SaveImage("D:\\aaa.bmp");
            //    objROI.Dispose();
            //}

            //m_fTiming2 = m_T2.Timing;
            //m_strTrack_Center += ", D1=" + (m_fTiming2 - m_fTimingPrev2).ToString();
            //m_fTimingPrev2 = m_fTiming2;

            bool blnCheckContamination = true;
            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false))
                blnCheckContamination = false;
            if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_Eblob_ImageMerge2(m_InspectROI[intPadIndex], m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0]))
            {
                return false;
            }

            //m_strTrack_Center += m_smVisionInfo.g_arrPad[intPadIndex].m_strTrack;

            //m_fTiming2 = m_T2.Timing;
            //m_strTrack_Center += ", D2=" + (m_fTiming2 - m_fTimingPrev2).ToString();
            //m_fTimingPrev2 = m_fTiming2;
            return true;
        }

        private bool IsBothPadOK(int intPadIndex)
        {
            if (!m_smVisionInfo.g_blnCheckPad)
                return true;

            WriteDebug("b9_" + intPadIndex + "_1");
            //Copy rotated image to a temp image
            //m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_arrPad[intPadIndex].ref_intCheckPadDimensionImageIndex].CopyTo(ref m_objTempImage);

            // Define Sample Unit ROI attach to sample image          
            // Why attach to RotatedImage but not TempImage like coding in IsPadOK?
            // Answer: After inspection, vision will display rotatedimage. 
            //         Attaching ROI to RotatedImage will ensure any changes (dont care area, logic subtract, add) on current rotated image will display to user after inspection.
            //         Attaching ROI to tempImage will ensure the changes is not displayed to user.
            //         In this IsBothPadOK function, the pad from image 1 and 2 will logic.ADD togather, so it is better to show the changes image to user.
            m_smVisionInfo.g_arrInspectROI[intPadIndex].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);

            if ((m_smVisionInfo.g_blnCheckPackage && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)) ||
                  (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false) && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)))
            {
                // Same size as Unit ROI
                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                    ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                    ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth,
                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight);

                // Same size as physical unit size
                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                     m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth, 0, MidpointRounding.AwayFromZero),
                    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight, 0, MidpointRounding.AwayFromZero));

            }
            else
            {
                // Same size as Unit ROI 
                m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                   (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                   ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                   (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                   ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                   m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth,
                   m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight);

                // Same size as Unit ROI 
                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                  ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2), 0, MidpointRounding.AwayFromZero),
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                  ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2), 0, MidpointRounding.AwayFromZero),
                  m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth,
                  m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight);
            }

            //m_smVisionInfo.g_arrInspectROI[intPadIndex].SaveImage("D:\\TS\\InspectPadROI.bmp");
            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].SaveImage("D:\\TS\\InspectPadPkgROI.bmp");
            int j = 0;
            List<List<PointF>> arrDontCare = new List<List<PointF>>();

            //Draw don't care ROI edge to make sure Don't Care Area is not inspected
            for (int k = 3; k < m_smVisionInfo.g_arrPadROIs[intPadIndex].Count; k++)
            {
                PointF ptTemp;
                List<PointF> arrTemp = new List<PointF>();

                ptTemp = new PointF();
                ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX;
                ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY;

                arrTemp.Add(ptTemp);

                ptTemp = new PointF();
                ptTemp.X = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIWidth;
                ptTemp.Y = m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[intPadIndex][k].ref_ROIHeight;

                arrTemp.Add(ptTemp);

                arrDontCare.Add(new List<PointF>());
                arrDontCare[j].Add(arrTemp[0]);
                arrDontCare[j].Add(arrTemp[1]);

                j++;

                m_smVisionInfo.g_arrPadROIs[intPadIndex][k].AttachImage(m_smVisionInfo.g_arrInspectROI[intPadIndex]);    // Attach to Sample Unit ROI or Package ROI
                m_smVisionInfo.g_arrPadROIs[intPadIndex][k].DrawDontCareEdge(0);
            }

            WriteDebug("b9_" + intPadIndex + "_2");

            if (m_smCustomizeInfo.g_intPreviousVersionIndex == 2)
            //if (true)
            {
                bool blnCheckContamination = true;
                if (m_smVisionInfo.g_blnCheckPackage && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                    blnCheckContamination = false;

                if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_WantConsiderPadImage2_0306(
                    m_smVisionInfo.g_arrInspectROI[intPadIndex],
                    m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                    arrDontCare, m_smVisionInfo.g_arrRotatedImages[1], intPadIndex, blnCheckContamination))
                {
                    WriteDebug("b9_" + intPadIndex + "_3");
                    return false;
                }
            }
            else
            {
                bool blnCheckContamination = true;
                if ((m_smVisionInfo.g_blnCheckPackage && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)) && m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false))
                    blnCheckContamination = false;

                if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPad_WantConsiderPadImage2(
                m_smVisionInfo.g_arrInspectROI[intPadIndex],
                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                arrDontCare, m_smVisionInfo.g_arrRotatedImages[1], intPadIndex, blnCheckContamination))
                {
                    WriteDebug("b9_" + intPadIndex + "_3");
                    return false;
                }
            }

            WriteDebug("b9_" + intPadIndex + "_4");
            return true;
        }

        private void GetOtherImageUnitROI(int intPadIndex, ImageDrawing objAttachedImage, ref ROI objUnitROI)
        {
            // Create new Search ROI (same size and location as First Image Search ROI) for second image
            objUnitROI.AttachImage(objAttachedImage);
            objUnitROI.LoadROISetting(
                m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalX,
                m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalY,
                m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIWidth,
                m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROIHeight);

            int intSearchAndUnitROIOffSetX = m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROITotalX -
                                            m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalX;
            int intSearchAndUnitROIOffSetY = m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROITotalY -
                                                        m_smVisionInfo.g_arrPadROIs[intPadIndex][0].ref_ROITotalY;

            PointF pSecondImageUnitCenterPoint = new PointF();
            m_smVisionInfo.g_arrPad[intPadIndex].FindSecondImageUnitLocation_UsingBlobs(objUnitROI,
                intSearchAndUnitROIOffSetX, intSearchAndUnitROIOffSetY, ref pSecondImageUnitCenterPoint);

            float fPkgSizeWidth = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth;
            float fPkgSizeHeight = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight;

            objUnitROI.LoadROISetting(
                (int)Math.Round(pSecondImageUnitCenterPoint.X - fPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                (int)Math.Round(pSecondImageUnitCenterPoint.Y - fPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                (int)Math.Round(fPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                (int)Math.Round(fPkgSizeHeight, 0, MidpointRounding.AwayFromZero));
        }

        private bool IsPackageOK_MultiThreading(int intPadIndex, int intImageIndex, PkgInspectionType ePkgInspectionType)
        {
            if (!m_smVisionInfo.g_arrPad[intPadIndex].GetWantInspectPackage())
                return true;

            //if (!m_smVisionInfo.g_blnCheckPackage)
            //    return true;

            // Question: Using the RectGauge4L measurement size or use the learn PackageROI size?
            // -------------RectGauge4L-------------------------------------
            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultUpWidth_RectGauge4L(0),
                                           m_smVisionInfo.g_arrPad[intPadIndex].GetResultDownWidth_RectGauge4L(0));
            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[intPadIndex].GetResultLeftHeight_RectGauge4L(0),
                                            m_smVisionInfo.g_arrPad[intPadIndex].GetResultRightHeight_RectGauge4L(0));
            //--------------------------------------------------------------
            //float fPkgSizeWidth = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth;
            //float fPkgSizeHeight = m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight;
            float fInspectionPkgSizeWidth = fPkgSizeWidth;
            float fInspectionPkgSizeHeight = fPkgSizeHeight;
            ROI objROI = new ROI();

            bool blnCheckContamination = true;
            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false) &&
                !m_smVisionInfo.g_arrPad[intPadIndex].ref_blnWantViewCheckForeignMaterialOptionWhenPackageON)
                blnCheckContamination = false;
            
            //2022-02-18 ZJYEOH : Need load m_smVisionInfo.g_arrInspectROI ROI setting if no check Pad
            if (!m_smVisionInfo.g_arrPad[intPadIndex].WantCheckPad(blnCheckContamination) || !m_smVisionInfo.g_blnCheckPad)
            {
                // 2019 11 18 - CCENG: Make sure Pad ROI and unit template ROI size are same. (Pad ROI and Unit Template size is different during half way of production. Not sure the root cause yet.)
                if ((m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth != (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight))) ||
                    (m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight != (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom))))
                {
                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].LoadROISetting(m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIPositionX,
                                                                                m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIPositionY,
                                                                                (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight)),
                                                                                (m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight - (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom)));

                    STTrackLog.WriteLine("Vision3Process > Call LoadROISetting for PadROI because PadROI size not tally with Unit Template Image Width");
                }

                if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
                {
                    if (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadOffsetReferencePoint == 0)
                    {
                        m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero),
                                 (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                 ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero),
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                 m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                    }
                    else
                    {
                        switch (intPadIndex)
                        {
                            case 0:
                            default:
                                {
                                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                                     (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                     ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero),
                                     (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                     ((float)m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight / 2) - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero),
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                                }
                                break;
                            case 1:
                                {   // Corner Point Fix to Top Left
                                    int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero);
                                    int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                   m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 -
                                                   m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero);

                                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                                }
                                break;
                            case 2:
                                {   // Corner Point Fix to Top Right
                                    int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight -
                                                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight, 0, MidpointRounding.AwayFromZero);
                                    int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                   m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 -
                                                   m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop, 0, MidpointRounding.AwayFromZero);

                                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                                }
                                break;
                            case 3:
                                {   // Corner Point Fix to Bottom Right
                                    int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight -
                                                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight, 0, MidpointRounding.AwayFromZero);
                                    int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom -
                                                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom, 0, MidpointRounding.AwayFromZero);

                                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);
                                }
                                break;
                            case 4:
                                {   // Corner Point Fix to Bottom Left
                                    int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectWidth / 2 -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft, 0, MidpointRounding.AwayFromZero);
                                    int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_pRectCenterPoint.Y +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_objRectGauge4L.ref_fRectHeight / 2 +
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom -
                                                    m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop -
                                                    m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom, 0, MidpointRounding.AwayFromZero);

                                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(intStartX, intStartY,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIWidth + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight,
                                     m_smVisionInfo.g_arrPadROIs[intPadIndex][2].ref_ROIHeight + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop + m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom);

                                }
                                break;
                        }
                    }
                    
                }
                else
                {
                    // Same size as Unit ROI 
                    //2020-09-24 ZJYEOH : Load ROI using pattern because when learn we save pad ROI with tolerance as pattern
                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().X -
                  (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width / 2), 0, MidpointRounding.AwayFromZero),
                  (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_UnitMatcher().Y -
                  (m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height / 2), 0, MidpointRounding.AwayFromZero),
                  (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Width,
                  (int)m_smVisionInfo.g_arrPad[intPadIndex].GetPatternSize_UnitMatcher().Height);
                    
                }
                
                // 2019 11 18 - CCENG: Make sure g_arrInspectROI and unit template ROI size are same. (g_arrInspectROI and Unit Template size is different during half way of production. Not sure the root cause yet.)
                if ((m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth != m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth) ||
                    (m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight != m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight))
                {
                    m_smVisionInfo.g_arrInspectROI[intPadIndex].LoadROISetting(m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIPositionX,
                                                                                m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIPositionY,
                                                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageWidth,
                                                                                m_smVisionInfo.g_arrPad[intPadIndex].ref_intUnitTemplateImageHeight);

                    STTrackLog.WriteLine("Vision3Process > Call LoadROISetting for g_arrInspectROI because g_arrInspectROI size not tally with Unit Template Image Width");
                }

            }

            switch (ePkgInspectionType)
            {
                case PkgInspectionType.BrightField:
                    {
                        //Copy rotated image to a temp image
                        m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex].CopyTo(ref m_arrTempImage[intPadIndex]);


                        // Define Sample Unit ROI attach to sample image          
                        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);
                        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);

                        // Get First Image Pad ROI
                        //m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                        //m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                        //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                        //     m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                        //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                        //     m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                        //    m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                        //    m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                        // 2020 06 30 - CCENG: need to assign pad roi position according to intPadROIStartPixelFromTop, Bottom, Left and Right Settng
                        if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
                        {
                            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                                (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X +
                                (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft) / 2 -
                                 m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                                (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y +
                                (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop) / 2 -
                                 m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                                m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                                m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                               m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                               m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                              m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                              m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);
                        }

                        // Get First Image Package ROI
                        //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                             fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                             fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                        if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnSeperateMoldFlashDefectSetting && (((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x80) > 0) || ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x1000000) > 0)))   // Want check mold flash
                        {
                            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] == null)
                                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = new ROI();
                            //int intMoldFlashLength = (int)Math.Ceiling(m_smVisionInfo.g_arrPad[intPadIndex].GetMoldFlashLengthLimit(1) * Math.Max(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY));

                            m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][ImageDrawing.GetArrayImageIndex(m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadPkgMoldFlashImageViewNo, m_smVisionInfo.g_intVisionIndex)].CopyTo(ref m_arrTempMoldFlashImage[intPadIndex]);

                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].AttachImage(m_arrTempMoldFlashImage[intPadIndex]);
                            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft;// intMoldFlashLength;
                            int intExtendX;
                            //if (intStartX < 0)
                            //{
                            //    intExtendX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX;
                            //    intStartX = 0;
                            //}
                            //else
                            //    intExtendX = intMoldFlashLength;

                            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge;//intMoldFlashLength;
                            int intExtendY;
                            //if (intStartY < 0)
                            //{
                            //    intExtendY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY;
                            //    intStartY = 0;
                            //}
                            //else
                            //    intExtendY = intMoldFlashLength;



                            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                            //intStartX, intStartY,
                            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + intExtendX * 2,
                            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + intExtendY * 2);
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                            intStartX, intStartY,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromRight,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromBottom + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge);
                        }
                        else
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = null;

                        if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnSeperateChippedOffDefectSetting && (((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x100000) > 0) || ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x200000) > 0)))   // Want check Chipped Off
                        {
                            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] == null)
                                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] = new ROI();

                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4].AttachImage(m_arrTempImage[intPadIndex]);

                            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromLeft;
                            int intExtendX;

                            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromEdge;
                            int intExtendY;

                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4].LoadROISetting(
                            intStartX, intStartY,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromLeft - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromRight,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromEdge - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromBottom);
                        }
                        else
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] = null;

                        m_smVisionInfo.g_arrPad[intPadIndex].ref_blnViewPkgResultDrwaing = true;    // Display package inspection result whether pass or fail

                        if (intPadIndex == 4)
                        {

                        }
                        if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPackage_BrightField(
                            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0],
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3],
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4], //2021-01-11 ZJYEOH : Chipped Off ROI
                            intPadIndex))//, (m_smVisionInfo.g_strVisionName == "PadPackage" || m_smVisionInfo.g_strVisionName == "PadPkg")))
                        {
                            objROI.Dispose();
                            return false;
                        }

                    }
                    break;
                case PkgInspectionType.DarkField:
                    {
                        //Copy rotated image to a temp image
                        m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex].CopyTo(ref m_arrTempImage[intPadIndex]);


                        // Define Sample Unit ROI attach to sample image          
                        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);
                        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_arrTempImage[intPadIndex]);

                        //m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                        //m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                        //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                        //     m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                        //    (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                        //     m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                        //    m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                        //    m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                        // 2020 06 30 - CCENG: need to assign pad roi position according to intPadROIStartPixelFromTop, Bottom, Left and Right Settng
                        if (m_smVisionInfo.g_arrPad[intPadIndex].GetOverallWantGaugeMeasurePkgSize(false))
                        {
                            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                           (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X +
                           (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromRight - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromLeft) / 2 -
                            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                           (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y +
                           (m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromBottom - m_smVisionInfo.g_arrPad[intPadIndex].ref_intPadROIStartPixelFromTop) / 2 -
                            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                           m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                           m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                               (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                                m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                               (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                                m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                               m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                               m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                        }

                        // Get First Image Package ROI
                        //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                             fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                             fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                            (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                        // 2019 12 05 - CCENG: No moldflash checking for dark field
                        //if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnSeperateMoldFlashDefectSetting && (m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x80) > 0)   // Want check mold flash
                        //{
                        //    if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] == null)
                        //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = new ROI();
                        //    int intMoldFlashLength = (int)Math.Ceiling(m_smVisionInfo.g_arrPad[intPadIndex].GetMoldFlashLengthLimit(1) * Math.Max(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY));
                        //    m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                        //    int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft;//intMoldFlashLength;
                        //    int intExtendX;
                        //    //if (intStartX < 0)
                        //    //{
                        //    //    intExtendX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX;
                        //    //    intStartX = 0;
                        //    //}
                        //    //else
                        //    //    intExtendX = intMoldFlashLength;

                        //    int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge;//intMoldFlashLength;
                        //    int intExtendY;
                        //    //if (intStartY < 0)
                        //    //{
                        //    //    intExtendY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY;
                        //    //    intStartY = 0;
                        //    //}
                        //    //else
                        //    //    intExtendY = intMoldFlashLength;


                        //    //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                        //    //intStartX, intStartY,
                        //    //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + intExtendX * 2,
                        //    //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + intExtendY * 2);
                        //    m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                        //                  intStartX, intStartY,
                        //                  m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromRight,
                        //                  m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromBottom + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge);
                        //}
                        //else
                        //{
                        //    m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = null;
                        //}

                        objROI.AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                        objROI.LoadROISetting((int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                                              fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                                              (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                                              fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                                              (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                                              (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));


                        if (m_smVisionInfo.g_arrPad[intPadIndex].ref_blnSeperateChippedOffDefectSetting && (((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x100000) > 0) || ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x200000) > 0)))   // Want check Chipped Off
                        {
                            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] == null)
                                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] = new ROI();

                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4].AttachImage(m_arrTempImage[intPadIndex]);

                            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromLeft_Dark;
                            int intExtendX;

                            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromEdge_Dark;
                            int intExtendY;

                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4].LoadROISetting(
                            intStartX, intStartY,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromLeft_Dark - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromRight_Dark,
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromEdge_Dark - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fChipStartPixelExtendFromBottom_Dark);
                        }
                        else
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4] = null;

                        m_smVisionInfo.g_arrPad[intPadIndex].ref_blnViewPkgResultDrwaing = true;    // Display package inspection result whether pass or fail
                        if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPackage_DarkField(
                                      m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0], // 01-06-2019 ZJYEOH : Should not use this ROI m_smVisionInfo.g_arrInspectROI[0],
                            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                            objROI,//m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex],
                                   //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3],    // 2019 12 05 - CCENG: No moldflash checking for dark field
                                   m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][4], //2021-01-11 ZJYEOH : Chipped Off ROI
                            intPadIndex))//, (m_smVisionInfo.g_strVisionName == "PadPackage" || m_smVisionInfo.g_strVisionName == "PadPkg")))
                        {
                            objROI.Dispose();
                            return false;
                        }
                    }
                    break;
                    //case 1:
                    //    {
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][1].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][1].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                    //        // Get Second Image Package ROI
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][1].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][1].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                    //        if ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x80) > 0)   // Want check mold flash
                    //        {
                    //            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] == null)
                    //                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = new ROI();
                    //            int intMoldFlashLength = (int)Math.Ceiling(m_smVisionInfo.g_arrPad[intPadIndex].GetMoldFlashLengthLimit(1) * Math.Max(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY));

                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex - 1]);
                    //            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft;//intMoldFlashLength;
                    //            int intExtendX;
                    //            //if (intStartX < 0)
                    //            //{
                    //            //    intExtendX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX;
                    //            //    intStartX = 0;
                    //            //}
                    //            //else
                    //            //    intExtendX = intMoldFlashLength;

                    //            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge;//intMoldFlashLength;
                    //            int intExtendY;
                    //            //if (intStartY < 0)
                    //            //{
                    //            //    intExtendY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY;
                    //            //    intStartY = 0;
                    //            //}
                    //            //else
                    //            //    intExtendY = intMoldFlashLength;


                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //            //intStartX, intStartY,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + intExtendX * 2,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + intExtendY * 2);
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //         intStartX, intStartY,
                    //         m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromRight,
                    //         m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromBottom + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge);
                    //        }
                    //        else
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = null;

                    //        //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].SaveImage("D:\\m_smVisionInfo.g_arrInspectPkgROI0.bmp");
                    //        // m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].SaveImage("D:\\m_smVisionInfo.g_arrInspectPkgROI3.bmp");

                    //        objROI.AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                    //        objROI.LoadROISetting(
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //          fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //          fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));
                    //        // objROI.SaveImage("D:\\objROI.bmp");

                    //        m_smVisionInfo.g_arrPad[intPadIndex].ref_blnViewPkgResultDrwaing = true;    // Display package inspection result whether pass or fail

                    //        if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPackage_DarkField(
                    //            m_smVisionInfo.g_arrInspectPadROI[intPadIndex][1],
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][1],
                    //            objROI,
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3],
                    //            intPadIndex))//, (m_smVisionInfo.g_strVisionName == "PadPackage" || m_smVisionInfo.g_strVisionName == "PadPkg")))
                    //        {
                    //            objROI.Dispose();
                    //            return false;
                    //        }

                    //    }

                    //    break;
                    //case 2:
                    //    {
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                    //        // Get First Image Package ROI
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                    //        if ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x80) > 0)   // Want check mold flash
                    //        {
                    //            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] == null)
                    //                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = new ROI();
                    //            int intMoldFlashLength = (int)Math.Ceiling(m_smVisionInfo.g_arrPad[intPadIndex].GetMoldFlashLengthLimit(1) * Math.Max(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY));
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft;//intMoldFlashLength;
                    //            int intExtendX;
                    //            //if (intStartX < 0)
                    //            //{
                    //            //    intExtendX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX;
                    //            //    intStartX = 0;
                    //            //}
                    //            //else
                    //            //    intExtendX = intMoldFlashLength;

                    //            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge;//intMoldFlashLength;
                    //            int intExtendY;
                    //            //if (intStartY < 0)
                    //            //{
                    //            //    intExtendY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY;
                    //            //    intStartY = 0;
                    //            //}
                    //            //else
                    //            //    intExtendY = intMoldFlashLength;


                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //            //intStartX, intStartY,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + intExtendX * 2,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + intExtendY * 2);
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //      intStartX, intStartY,
                    //      m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromRight,
                    //      m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromBottom + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge);
                    //        }
                    //        else
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = null;
                    //        objROI.AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                    //        objROI.LoadROISetting(
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //          fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //          fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                    //        m_smVisionInfo.g_arrPad[intPadIndex].ref_blnViewPkgResultDrwaing = true;    // Display package inspection result whether pass or fail
                    //        if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPackage_DarkField(
                    //                      m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0], // 01-06-2019 ZJYEOH : Should not use this ROI m_smVisionInfo.g_arrInspectROI[0],
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                    //            objROI,//m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex],
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3],
                    //            intPadIndex))//, (m_smVisionInfo.g_strVisionName == "PadPackage" || m_smVisionInfo.g_strVisionName == "PadPkg")))
                    //        {
                    //            objROI.Dispose();
                    //            return false;
                    //        }
                    //    }
                    //    break;
                    //case 4: // Image 5 : Package Dark Field
                    //    {
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIWidth,
                    //            m_smVisionInfo.g_arrInspectROI[intPadIndex].ref_ROIHeight);

                    //        // Get First Image Package ROI
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //        m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].LoadROISetting(
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //             fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //             fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //            (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                    //        if ((m_smVisionInfo.g_arrPad[intPadIndex].ref_intFailPkgOptionMask & 0x80) > 0)   // Want check mold flash
                    //        {
                    //            if (m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] == null)
                    //                m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = new ROI();
                    //            int intMoldFlashLength = (int)Math.Ceiling(m_smVisionInfo.g_arrPad[intPadIndex].GetMoldFlashLengthLimit(1) * Math.Max(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY));
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex]);
                    //            int intStartX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft;//intMoldFlashLength;
                    //            int intExtendX;
                    //            //if (intStartX < 0)
                    //            //{
                    //            //    intExtendX = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalX;
                    //            //    intStartX = 0;
                    //            //}
                    //            //else
                    //            //    intExtendX = intMoldFlashLength;

                    //            int intStartY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY - (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge;//intMoldFlashLength;
                    //            int intExtendY;
                    //            //if (intStartY < 0)
                    //            //{
                    //            //    intExtendY = m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROITotalY;
                    //            //    intStartY = 0;
                    //            //}
                    //            //else
                    //            //    intExtendY = intMoldFlashLength;


                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //            //intStartX, intStartY,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + intExtendX * 2,
                    //            //m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + intExtendY * 2);
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3].LoadROISetting(
                    //      intStartX, intStartY,
                    //      m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIWidth + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromLeft + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromRight,
                    //      m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0].ref_ROIHeight + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromBottom + (int)m_smVisionInfo.g_arrPad[intPadIndex].ref_fMoldStartPixelFromEdge);
                    //        }
                    //        else
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3] = null;
                    //        objROI.AttachImage(m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][0]);
                    //        objROI.LoadROISetting(
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().X -
                    //          fInspectionPkgSizeWidth / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(m_smVisionInfo.g_arrPad[intPadIndex].GetResultCenterPoint_RectGauge4L().Y -
                    //          fInspectionPkgSizeHeight / 2, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeWidth, 0, MidpointRounding.AwayFromZero),
                    //         (int)Math.Round(fInspectionPkgSizeHeight, 0, MidpointRounding.AwayFromZero));

                    //        m_smVisionInfo.g_arrPad[intPadIndex].ref_blnViewPkgResultDrwaing = true;    // Display package inspection result whether pass or fail

                    //        if (!m_smVisionInfo.g_arrPad[intPadIndex].InspectPackage_DarkField(
                    //                      m_smVisionInfo.g_arrInspectPadROI[intPadIndex][0], // 01-06-2019 ZJYEOH : Should not use this ROI m_smVisionInfo.g_arrInspectROI[0],
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][0],
                    //            objROI,//m_smVisionInfo.g_arr5SRotatedImages[intPadIndex][intImageIndex],
                    //            m_smVisionInfo.g_arrInspectPkgROI[intPadIndex][3],
                    //            intPadIndex))//, (m_smVisionInfo.g_strVisionName == "PadPackage" || m_smVisionInfo.g_strVisionName == "PadPkg")))
                    //        {
                    //            objROI.Dispose();
                    //            return false;
                    //        }
                    //    }

                    //    break;
            }
            objROI.Dispose();
            return true;
        }
        private void SetExtraGain(int intImageNo)
        {
            for (int i = 0; i < 5; i++)
            {
                if (m_smVisionInfo.g_arrImageExtraGain[intImageNo][i] != 1f)
                {
                    ROI objROI = new ROI();
                    try
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                        objROI.AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);
                        objROI.AddExtraGain(m_smVisionInfo.g_arrImageExtraGain[intImageNo][i]);
                        objROI.Dispose();
                    }
                    catch
                    {
                        if (objROI != null)
                            objROI.Dispose();
                    }

                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        CROI objCROI = new CROI();
                        try
                        {
                            objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                            objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                            objCROI.AddExtraGain(m_smVisionInfo.g_arrImageExtraGain[intImageNo][i]);
                            objCROI.Dispose();
                        }
                        catch
                        {
                            if (objCROI != null)
                                objCROI.Dispose();
                        }

                    }
                }
            }
        }
        private void ImageUniformize(int intImageNo)
        {
            if (!m_smVisionInfo.g_intViewUniformize || m_smVisionInfo.g_intImageMergeType == 0 || m_smVisionInfo.g_arrImageMaskingAvailable.Count <= intImageNo || m_smVisionInfo.g_arrReferenceImages.Count <= intImageNo)
                return;
            List<int> arrROIIndex = new List<int>();
            int intImageIndex = 0;
            //if (m_smVisionInfo.g_arrImageMaskingAvailable[intImageNo] && GetWantImageUniformize(m_smVisionInfo.g_arrImageMaskingSetting, intImageNo, ref arrROIIndex, ref intImageIndex))//m_smVisionInfo.g_arrImageMaskingSetting[intImageNo] != 0
            if (GetWantImageUniformize(m_smVisionInfo.g_arrImageMaskingSetting, intImageNo, ref arrROIIndex, ref intImageIndex))//m_smVisionInfo.g_arrImageMaskingSetting[intImageNo] != 0
            {
                ROI objROI = new ROI();
                objROI.AttachImage(m_smVisionInfo.g_arrImages[intImageIndex]);
                for (int i = 0; i < arrROIIndex.Count; i++)
                {
                    if (arrROIIndex[i] == 1) //Top
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 4) //Right
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 3) //Bottom
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 2) //Left
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    ImageDrawing.UniformizeImage(objROI, m_smVisionInfo.g_arrReferenceImages[intImageIndex], m_smVisionInfo.g_arrInvertedReferenceImages[intImageIndex], m_smVisionInfo.g_arrImageMaskingSetting[intImageIndex], m_smVisionInfo.g_intImageMaskingThreshold);
                }
                objROI.Dispose();
            }
        }

        private void ImageUniformizeColor(int intImageNo)
        {
            if (!m_smVisionInfo.g_intViewUniformize || m_smVisionInfo.g_intImageMergeType == 0 || m_smVisionInfo.g_arrImageMaskingAvailable.Count <= intImageNo || m_smVisionInfo.g_arrReferenceImages.Count <= intImageNo)
                return;
            List<int> arrROIIndex = new List<int>();
            int intImageIndex = 0;
            //if (m_smVisionInfo.g_arrImageMaskingAvailable[intImageNo] && GetWantImageUniformize(m_smVisionInfo.g_arrImageMaskingSetting, intImageNo, ref arrROIIndex, ref intImageIndex))//m_smVisionInfo.g_arrImageMaskingSetting[intImageNo] != 0
            if (GetWantImageUniformize(m_smVisionInfo.g_arrImageMaskingSetting, intImageNo, ref arrROIIndex, ref intImageIndex))//m_smVisionInfo.g_arrImageMaskingSetting[intImageNo] != 0
            {
                CROI objROI = new CROI();
                objROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageIndex]);
                for (int i = 0; i < arrROIIndex.Count; i++)
                {
                    if (arrROIIndex[i] == 1) //Top
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 4) //Right
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 3) //Bottom
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 2) //Left
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    ImageDrawing.UniformizeColorImage(objROI,
                                                    m_smVisionInfo.g_arrReferenceColorImages[intImageIndex],
                                                    m_smVisionInfo.g_arrInvertedReferenceColorImages[intImageIndex],
                                                    m_smVisionInfo.g_arrImageMaskingSetting[intImageIndex],
                                                    m_smVisionInfo.g_intImageMaskingThreshold
                                                    );
                }
                objROI.Dispose();
            }
        }

        private bool GetWantImageUniformize(List<int> arrMaskingSetting, int intImageNo, ref List<int> arrROIIndex, ref int intImageIndex)
        {
            switch (m_smVisionInfo.g_intImageMergeType)
            {
                case 1:
                    {
                        if (intImageNo == 0)
                            return false;
                        else if (intImageNo == 1)
                        {
                            if(arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            if (arrMaskingSetting.Count <= intImageNo)
                                return false;

                            if (arrMaskingSetting[intImageNo] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = intImageNo;
                                return true;
                            }
                            else
                                return false;
                        }
                    }
                    break;
                case 2:
                    {
                        if (intImageNo == 0)
                            return false;
                        else if (intImageNo == 1)
                        {
                            if (arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else if (intImageNo == 2)
                        {
                            if (arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            if (arrMaskingSetting.Count <= intImageNo)
                                return false;

                            if (arrMaskingSetting[intImageNo] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = intImageNo;
                                return true;
                            }
                            else
                                return false;
                        }
                    }
                    break;
                case 3:
                    {
                        if (intImageNo == 0 || intImageNo == 2)
                            return false;
                        else if (intImageNo == 1)
                        {
                            if (arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else if (intImageNo == 3)
                        {
                            if (arrMaskingSetting.Count <= 2)
                                return false;

                            if (arrMaskingSetting[2] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 2;
                                return true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            if (arrMaskingSetting.Count <= intImageNo)
                                return false;

                            if (arrMaskingSetting[intImageNo] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = intImageNo;
                                return true;
                            }
                            else
                                return false;
                        }
                    }
                    break;
                case 4:
                    {
                        if (intImageNo == 0 || intImageNo == 3)
                            return false;
                        else if (intImageNo == 1)
                        {
                            if (arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else if (intImageNo == 2)
                        {
                            if (arrMaskingSetting.Count <= 0)
                                return false;

                            if (arrMaskingSetting[0] != 0)
                            {
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 0;
                                return true;
                            }
                            else
                                return false;
                        }
                        else if (intImageNo == 4)
                        {
                            if (arrMaskingSetting.Count <= 3)
                                return false;

                            if (arrMaskingSetting[3] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = 3;
                                return true;
                            }
                            else
                                return false;
                        }
                        else
                        {
                            if (arrMaskingSetting.Count <= intImageNo)
                                return false;

                            if (arrMaskingSetting[intImageNo] != 0)
                            {
                                arrROIIndex.Add(1);
                                arrROIIndex.Add(2);
                                arrROIIndex.Add(3);
                                arrROIIndex.Add(4);
                                intImageIndex = intImageNo;
                                return true;
                            }
                            else
                                return false;
                        }
                    }
                    break;

            }
            return false;
        }

        // Merged grab 2 & 3 to grab 1
        private void ImageMerge(int intImageNo)
        {
            if (m_smVisionInfo.g_intImageMergeType != 0)
            {
                if (m_smVisionInfo.g_intImageMergeType == 1)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else if (m_smVisionInfo.g_intImageMergeType == 3)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 3:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 3)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[2]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[2]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else if (m_smVisionInfo.g_intImageMergeType == 4)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 2 side of ROI (Top, Left to grab image 1)
                            for (int i = 1; i < 3; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 2:
                            //Copy 2 side of ROI (Bottom, Right to grab image 1)
                            for (int i = 3; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 4:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 4)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[3]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[3]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 2 side of ROI (Top, Left to grab image 1)
                            for (int i = 1; i < 3; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 2:
                            //Copy 2 side of ROI (Bottom, Right to grab image 1)
                            for (int i = 3; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
            }
        }
        private void SetExtraGain(int intImageNo, List<ImageDrawing> arrImage)
        {
            for (int i = 0; i < 5; i++)
            {
                if (m_smVisionInfo.g_arrImageExtraGain[intImageNo][i] != 1f)
                {
                    ROI objROI = new ROI();
                    try
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                        objROI.AttachImage(arrImage[intImageNo]);
                        objROI.AddExtraGain(m_smVisionInfo.g_arrImageExtraGain[intImageNo][i]);
                        objROI.Dispose();
                    }
                    catch
                    {
                        if (objROI != null)
                            objROI.Dispose();
                    }
                }
            }
        }
        private void ImageUniformize(int intImageNo, List<ImageDrawing> arrImage)
        {
            if (!m_smVisionInfo.g_intViewUniformize || m_smVisionInfo.g_intImageMergeType == 0 || m_smVisionInfo.g_arrImageMaskingAvailable.Count < intImageNo || m_smVisionInfo.g_arrReferenceImages.Count < intImageNo)
                return;
            List<int> arrROIIndex = new List<int>();
            int intImageIndex = 0;
            if (m_smVisionInfo.g_arrImageMaskingAvailable[intImageNo] && GetWantImageUniformize(m_smVisionInfo.g_arrImageMaskingSetting, intImageNo, ref arrROIIndex, ref intImageIndex))//m_smVisionInfo.g_arrImageMaskingSetting[intImageNo] != 0
            {
                ROI objROI = new ROI();
                objROI.AttachImage(arrImage[intImageIndex]);
                for (int i = 0; i < arrROIIndex.Count; i++)
                {
                    if (arrROIIndex[i] == 1) //Top
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 4) //Right
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 3) //Bottom
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIHeight);
                    }
                    else if (arrROIIndex[i] == 2) //Left
                    {
                        objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY,
                            m_smVisionInfo.g_arrSystemROI[arrROIIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                    }
                    ImageDrawing.UniformizeImage(objROI, m_smVisionInfo.g_arrReferenceImages[intImageIndex], m_smVisionInfo.g_arrInvertedReferenceImages[intImageIndex], m_smVisionInfo.g_arrImageMaskingSetting[intImageIndex], m_smVisionInfo.g_intImageMaskingThreshold);
                }
                objROI.Dispose();
            }
        }
        private void ImageMerge(int intImageNo, List<ImageDrawing> arrImage)
        {
            if (m_smVisionInfo.g_intImageMergeType != 0)
            {
                if (m_smVisionInfo.g_intImageMergeType == 1)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else if (m_smVisionInfo.g_intImageMergeType == 3)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 3:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[2]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[2]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else if (m_smVisionInfo.g_intImageMergeType == 4)
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 2 side of ROI (Top, Left to grab image 1)
                            for (int i = 1; i < 3; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 2:
                            //Copy 2 side of ROI (Bottom, Right to grab image 1)
                            for (int i = 3; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 4:
                            //Copy 4 side of ROI (Top, Left, Bottom, Right to grab image 1)
                            for (int i = 1; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[3]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[3]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
                else
                {
                    switch (intImageNo)
                    {
                        case 1:
                            //Copy 2 side of ROI (Top, Left to grab image 1)
                            for (int i = 1; i < 3; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                        case 2:
                            //Copy 2 side of ROI (Bottom, Right to grab image 1)
                            for (int i = 3; i < 5; i++)
                            {
                                m_smVisionInfo.g_arrSystemROI[i].AttachImage(arrImage[intImageNo]);

                                ROI objROI = new ROI();
                                objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                    m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                objROI.AttachImage(arrImage[0]);
                                m_smVisionInfo.g_arrSystemROI[i].CopyImage(ref objROI);
                                objROI.Dispose();

                                if (m_smVisionInfo.g_blnViewColorImage)
                                {
                                    CROI objSystemCROI = new CROI();
                                    CROI objCROI = new CROI();
                                    objCROI.AttachImage(m_smVisionInfo.g_arrColorImages[0]);
                                    objCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);

                                    objSystemCROI.AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);
                                    objSystemCROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[i].ref_ROIPositionY,
                                        m_smVisionInfo.g_arrSystemROI[i].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[i].ref_ROIHeight);
                                    objSystemCROI.CopyImage(ref objCROI);

                                    objCROI.Dispose();
                                    objSystemCROI.Dispose();
                                }
                            }
                            break;
                    }
                }
            }
        }
        private void RotatedImageMerge()
        {
            if (m_smVisionInfo.g_arrSystemROI == null)
                return;

            int[] intSystemIndex = { 0, 1, 4, 3, 2 };
            //Copy center and 4 side ROI of 5SRotatedImage (Center Top, Left, Bottom, Right) to rotated image 1)
            ROI objROI = new ROI();
            int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);
            
            for (int intSelectImageViewIndex = 0; intSelectImageViewIndex < intViewImageCount; intSelectImageViewIndex++)
            {
                int intImageNo = ImageDrawing.GetArrayImageIndex(intSelectImageViewIndex, m_smVisionInfo.g_intVisionIndex);

                for (int i = 0; i < 5; i++)
                {
                    if (m_arr5SImageRotated2[i][intImageNo])
                        m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[i][intImageNo]);
                    else
                        m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                    objROI.LoadROISetting(m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].ref_ROIPositionY,
                        m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].ref_ROIWidth, m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].ref_ROIHeight);
                    objROI.AttachImage(m_smVisionInfo.g_arrRotatedImages[intImageNo]);
                    m_smVisionInfo.g_arrSystemROI[intSystemIndex[i]].CopyImage(ref objROI);
                }
            }
            objROI.Dispose();
        }

        private void CopyToRotatedImage()
        {
            //Copy center and 4 side ROI of 5SRotatedImage (Center Top, Left, Bottom, Right) to rotated image 1)
            ROI objROI = new ROI();

            try
            {

                int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                for (int intSelectImageViewIndex = 0; intSelectImageViewIndex < intViewImageCount; intSelectImageViewIndex++)
                {
                    int intImageNo = ImageDrawing.GetArrayImageIndex(intSelectImageViewIndex, m_smVisionInfo.g_intVisionIndex);

                    for (int i = 0; i < 5; i++)
                    {
                        if (m_smVisionInfo.g_blnPadInpected)
                        {
                            if (m_arr5SImageRotated2[i] == null)
                                continue;
                            if (m_arr5SImageRotated2[i][intImageNo])
                                m_arrRotatedROI[i].AttachImage(m_smVisionInfo.g_arr5SRotatedImages[i][intImageNo]);
                            else
                                m_arrRotatedROI[i].AttachImage(m_smVisionInfo.g_arrImages[intImageNo]);

                            objROI.LoadROISetting(m_arrRotatedROI[i].ref_ROIPositionX, m_arrRotatedROI[i].ref_ROIPositionY,
                                m_arrRotatedROI[i].ref_ROIWidth, m_arrRotatedROI[i].ref_ROIHeight);
                            objROI.AttachImage(m_smVisionInfo.g_arrRotatedImages[intImageNo]);
                            m_arrRotatedROI[i].CopyImage(ref objROI);
                        }
                    }
                }
            }
            catch
            {
                // let ignore it if exception happen because it is for drawing only. 
                // Exception happen because another new cycle of isnpection start already and the g_arr5SRotatedImages is being used for rotation.
            }
            objROI.Dispose();
        }
        private void CopyToColorRotatedImage()
        {
            //Copy center and 4 side ROI of 5SRotatedImage (Center Top, Left, Bottom, Right) to rotated image 1)
            CROI objROI = new CROI();

            try
            {

                int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                for (int intSelectImageViewIndex = 0; intSelectImageViewIndex < intViewImageCount; intSelectImageViewIndex++)
                {
                    int intImageNo = CImageDrawing.GetArrayImageIndex(intSelectImageViewIndex, m_smVisionInfo.g_intVisionIndex);

                    for (int i = 0; i < 5; i++)
                    {
                        if (m_smVisionInfo.g_blnPadInpected)
                        {
                            if (m_arr5SImageRotated2[i] == null)
                                continue;
                            if (m_arr5SImageRotated2[i][intImageNo])
                                m_arrRotatedColorROI[i].AttachImage(m_smVisionInfo.g_arr5SColorRotatedImages[i][intImageNo]);
                            else
                                m_arrRotatedColorROI[i].AttachImage(m_smVisionInfo.g_arrColorImages[intImageNo]);

                            objROI.LoadROISetting(m_arrRotatedColorROI[i].ref_ROIPositionX, m_arrRotatedColorROI[i].ref_ROIPositionY,
                                m_arrRotatedColorROI[i].ref_ROIWidth, m_arrRotatedColorROI[i].ref_ROIHeight);
                            objROI.AttachImage(m_smVisionInfo.g_arrColorRotatedImages[intImageNo]);
                            m_arrRotatedColorROI[i].CopyImage(ref objROI);
                        }
                    }
                }
            }
            catch
            {
                // let ignore it if exception happen because it is for drawing only. 
                // Exception happen because another new cycle of isnpection start already and the g_arr5SRotatedImages is being used for rotation.
            }
            objROI.Dispose();
        }
        private void LoadSystemROISetting()
        {
            string strFolderPath = m_smProductionInfo.g_strRecipePath + m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex] + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\System\\ROI.xml";
            ROI.LoadFile(strFolderPath, m_smVisionInfo.g_arrSystemROI);
            ROI objROI;
            for (int i = 0; i < 5; i++)
            {
                switch (i)
                {
                    case 0:
                        //Middle
                        if (m_smVisionInfo.g_arrSystemROI.Count == 0)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            objROI.LoadROISetting(m_smVisionInfo.g_intCameraResolutionWidth / 4, m_smVisionInfo.g_intCameraResolutionHeight / 4, m_smVisionInfo.g_intCameraResolutionWidth / 2, m_smVisionInfo.g_intCameraResolutionHeight / 2);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIPositionX,
                                                                             ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIPositionY,
                                                                            ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIWidth,
                                                                            ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIHeight);
                        }

                        m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[0]);
                        break;
                    case 1:
                        //Top
                        if (m_smVisionInfo.g_arrSystemROI.Count < 2)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(0, 0, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth,
                                                m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY);
                        break;
                    case 2:
                        //Left
                        if (m_smVisionInfo.g_arrSystemROI.Count < 3)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(0, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX,
                            m_smVisionInfo.g_intCameraResolutionHeight - m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY);
                        break;
                    case 3:
                        //Bottom
                        if (m_smVisionInfo.g_arrSystemROI.Count < 4)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight,
                            m_smVisionInfo.g_intCameraResolutionWidth - m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX,
                            m_smVisionInfo.g_intCameraResolutionHeight - (m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight));
                        break;
                    case 4:
                        //Right
                        if (m_smVisionInfo.g_arrSystemROI.Count < 5)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, 0,
                            m_smVisionInfo.g_intCameraResolutionWidth - (m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth),
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                        break;
                }
            }
        }

        private void WriteDebug(string strWrite)
        {
            if (m_smCustomizeInfo.g_blnDebugMode)
            {
                if (m_objPosTL == null)
                {
                    string strFileName = "DebugPad_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_" + DateTime.Now.Day + "_" + DateTime.Now.Minute;
                    m_objPosTL = new TrackLog("D:\\DebugFile\\", strFileName);
                    m_intDebugHour = DateTime.Now.Minute;
                }

                //if (DateTime.Now.Hour != m_intDebugHour)
                if (DateTime.Now.Minute != m_intDebugHour)
                {
                    string strFileName = "DebugPad_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_" + DateTime.Now.Day + "_" + DateTime.Now.Minute;
                    m_objPosTL = new TrackLog("D:\\DebugFile\\", strFileName);
                    m_intDebugHour = DateTime.Now.Minute;
                }

                m_objPosTL.WriteLine(strWrite);
            }
        }

        private void TrackTiming(bool blnResetTiming, string strDataName, bool blnWrite, bool blnRecord)
        {
            if (blnResetTiming)
            {
                m_smVisionInfo.m_tTrackTiming.Start();
                if (blnRecord)
                    m_smVisionInfo.g_strTrackPad = strDataName + "=" + (m_fTiming - m_fTimingPrev).ToString();
                else
                m_smVisionInfo.g_strTrackPad = "";


                m_fTimingPrev = 0;
                m_fTiming = 0;
            }
            else
            {
                if (blnRecord)
                {
                    m_fTiming = m_smVisionInfo.m_tTrackTiming.Timing;
                    m_smVisionInfo.g_strTrackPad += ", " + strDataName + "=" + (m_fTiming - m_fTimingPrev).ToString();
                    m_fTimingPrev = m_fTiming;
                }
            }

            if (blnWrite)
            {
                STTrackLog.WriteLine(m_smVisionInfo.g_strTrackPad);
            }
        }

        private void WaitEventDone(ref bool bTriggerEvent, bool bBreakResult, int intTimeout, string strTrackName)
        {
            HiPerfTimer timeout = new HiPerfTimer();
            timeout.Start();

            while (true)
            {
                if (bTriggerEvent == bBreakResult)
                {
                    //STTrackLog.WriteLine("Time = " + timeout.Timing.ToString());
                    return;
                }

                if (timeout.Timing > intTimeout)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> Vision 3 time out 9 - " + strTrackName);
                    STTrackLog.WriteLine("Waiting event timeout");
                    bTriggerEvent = bBreakResult;
                    break;
                }
                Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
            }

            timeout.Stop();
        }

        private bool WaitEventDone(int intImageIndex, ROIPartition eROIArea, string strTrackName)
        {
            if (eROIArea == ROIPartition.Side)
            {
                if (m_smVisionInfo.g_intImageMergeType == 0)
                {
                    if (intImageIndex == 0)
                        return WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intImageIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intImageIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intImageIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intImageIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intImageIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intImageIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
                else if (m_smVisionInfo.g_intImageMergeType == 1)   // Merge grab 1 and 2
                {
                    if (intImageIndex == 0)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intImageIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intImageIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intImageIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intImageIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intImageIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intImageIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
                else if (m_smVisionInfo.g_intImageMergeType == 2)   // Merge grab 1 , 2, grab 3
                {
                    if (intImageIndex == 0)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intImageIndex == 1)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intImageIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intImageIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intImageIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intImageIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intImageIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
                else if (m_smVisionInfo.g_intImageMergeType == 3)   // Merge grab 1 and 2, Merge grab 3 and 4
                {
                    if (intImageIndex == 0)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intImageIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intImageIndex == 2)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intImageIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intImageIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intImageIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intImageIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
                else if (m_smVisionInfo.g_intImageMergeType == 4)   // Merge grab 1 , 2, grab 3 and Merge grab 4 , 5
                {
                    if (intImageIndex == 0)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intImageIndex == 1)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intImageIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intImageIndex == 3)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intImageIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intImageIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intImageIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
            }
            else // Center ROI
            {
                if (intImageIndex == 0)
                    return WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, strTrackName);
                else if (intImageIndex == 1)
                    return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                else if (intImageIndex == 2)
                    return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                else if (intImageIndex == 3)
                    return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                else if (intImageIndex == 4)
                    return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                else if (intImageIndex == 5)
                    return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                else if (intImageIndex == 6)
                    return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
            }

            return m_bGrabImageFinalResult_Center;
        }

        private bool WaitEventDone(int[] arrImageIndex, ROIPartition eROIArea, string strTrackName)
        {
            if (arrImageIndex == null || arrImageIndex.Length == 0)
                return true;

            // 2021 01 14 - CCENG: Since the coding will direct call "return after WaitEventDone", so the i above 0 will not be checked.
            //for (int i = 0; i < arrImageIndex.Length; i++)
            int intBiggestIndex = arrImageIndex.Max();

            if (eROIArea == ROIPartition.Side)
            {
                if (m_smVisionInfo.g_intImageMergeType == 0)
                {
                    if (intBiggestIndex == 0)
                        return WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intBiggestIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intBiggestIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intBiggestIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intBiggestIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intBiggestIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intBiggestIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                    else
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);

                }
                else if (m_smVisionInfo.g_intImageMergeType == 1)   // Merge grab 1 and 2
                {
                    if (intBiggestIndex == 0)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intBiggestIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intBiggestIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intBiggestIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intBiggestIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intBiggestIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intBiggestIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                    else
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);

                }
                else if (m_smVisionInfo.g_intImageMergeType == 2)   // Merge grab 1 , 2 , grab 3
                {
                    if (intBiggestIndex == 0)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intBiggestIndex == 1)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intBiggestIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intBiggestIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intBiggestIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intBiggestIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intBiggestIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                    else
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);

                }
                else if (m_smVisionInfo.g_intImageMergeType == 3)   // Merge grab 1 and 2, Merge grab 3 and 4
                {
                    if (intBiggestIndex == 0)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intBiggestIndex == 1)
                        return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intBiggestIndex == 2)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intBiggestIndex == 3)
                        return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intBiggestIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intBiggestIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intBiggestIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                    else
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);

                }
                else if (m_smVisionInfo.g_intImageMergeType == 4)   // Merge grab 1 , 2 , grab 3 and Merge grab 4, 5
                {
                    if (intBiggestIndex == 0)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage1Result, strTrackName);
                    else if (intBiggestIndex == 1)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage2Result, strTrackName);
                    else if (intBiggestIndex == 2)
                        return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                    else if (intBiggestIndex == 3)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage4Result, strTrackName);
                    else if (intBiggestIndex == 4)
                        return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                    else if (intBiggestIndex == 5)
                        return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                    else if (intBiggestIndex == 6)
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                    else
                        return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                }
            }
            else // Center ROI
            {
                if (intBiggestIndex == 0)
                    return WaitEventDone(ref m_bGrabImage1Done, true, ref m_bGrabImage1Result, strTrackName);
                else if (intBiggestIndex == 1)
                    return WaitEventDone(ref m_bGrabImage2Done, true, ref m_bGrabImage2Result, strTrackName);
                else if (intBiggestIndex == 2)
                    return WaitEventDone(ref m_bGrabImage3Done, true, ref m_bGrabImage3Result, strTrackName);
                else if (intBiggestIndex == 3)
                    return WaitEventDone(ref m_bGrabImage4Done, true, ref m_bGrabImage4Result, strTrackName);
                else if (intBiggestIndex == 4)
                    return WaitEventDone(ref m_bGrabImage5Done, true, ref m_bGrabImage5Result, strTrackName);
                else if (intBiggestIndex == 5)
                    return WaitEventDone(ref m_bGrabImage6Done, true, ref m_bGrabImage6Result, strTrackName);
                else if (intBiggestIndex == 6)
                    return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);
                else
                    return WaitEventDone(ref m_bGrabImage7Done, true, ref m_bGrabImage7Result, strTrackName);

            }

            return m_bGrabImageFinalResult_Center;
        }

        private void WaitDrawingLockEventDone()
        {
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                HiPerfTimer timesout = new HiPerfTimer();
                timesout.Start();

                while (true)
                {
                    if (m_smVisionInfo.g_arrPad[i].ref_blnDrawingLock == false)
                    {
                        break;
                    }

                    if (timesout.Timing > 10000)
                    {
                        STTrackLog.WriteLine(">>>>>>>>>>>>> time out 10");
                        break;
                    }

                    Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
                }
            }
        }

        private void WaitEventDone(ref bool bTriggerEvent, bool bBreakResult)
        {
            while (true)
            {
                if (bTriggerEvent == bBreakResult)
                {
                    return;
                }

                Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
            }
        }
        private bool WaitEventDone(ref bool bTriggerEvent, bool bBreakResult, string strTrackName)
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();

            while (true)
            {
                if (bTriggerEvent == bBreakResult)
                {
                    return true;
                }

                if (timesout.Timing > 10000)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 11 - " + strTrackName);
                    break;
                }

                Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
            }

            return false;
        }
        private bool WaitEventDone(ref bool bTriggerEvent, bool bBreakResult, ref bool bReturnResult, string strTrackName)
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();

            while (true)
            {
                if (bTriggerEvent == bBreakResult)
                {
                    return bReturnResult;
                }

                if (timesout.Timing > 10000)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 11 - " + strTrackName);
                    break;
                }

                Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
            }

            return false;
        }

        private void WaitEventDone(ref bool bTriggerEvent1, ref bool bTriggerEvent2, bool bBreakResult1, bool bBreakResult2, string strTrackName)
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();

            while (true)
            {
                if (bTriggerEvent1 == bBreakResult1)
                {
                    return;
                }

                if (bTriggerEvent2 == bBreakResult2)
                {
                    return;
                }

                if (timesout.Timing > 10000)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 12 - " + strTrackName);
                    break;
                }

                Thread.Sleep(1);    // 2018 10 01 - CCENG: Dun use Sleep(0) as it may cause other internal thread hang especially during waiting for grab image done. (Grab frame timeout happen)
            }
        }

        private void UpdateSubProgress_SaveImage()
        {
            while (!m_blnStopping)
            {

                try
                {
                    if ((m_intPassStartNode != m_intPassEndNode) ||
                        (m_intFailStartNode != m_intFailEndNode))
                    {
                        SaveImageBuffer();
                    }
                }
                catch (Exception ex)
                {
                    SRMMessageBox.Show("Vision3Process->UpdateSubProgress_SaveImage() :" + ex.ToString());
                }
                Thread.Sleep(1);
            }

            m_thSubThread_SaveImage = null;
            m_blnStopped_SaveImage = true;
        }

        private void SavePassImage_AddToBuffer()
        {
            if (m_smCustomizeInfo.g_blnSavePassImage)
            {
                if (m_smVisionInfo.g_intPassImageCount < m_smCustomizeInfo.g_intPassImagePics)
                {
                    WaitImageBufferClear(ref m_intPassStartNode, ref m_intPassEndNode);

                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[0].CopyTo(ref m_arrPassCImage1Buffer[m_intPassEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[0].CopyTo(ref m_arrPassImage1Buffer[m_intPassEndNode]);

                    if ((m_smVisionInfo.g_arrImages.Count > 1) && WantSaveImageAccordingMergeType(1))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[1].CopyTo(ref m_arrPassCImage2Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[1].CopyTo(ref m_arrPassImage2Buffer[m_intPassEndNode]);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 2) && WantSaveImageAccordingMergeType(2))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[2].CopyTo(ref m_arrPassCImage3Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[2].CopyTo(ref m_arrPassImage3Buffer[m_intPassEndNode]);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 3) && WantSaveImageAccordingMergeType(3))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[3].CopyTo(ref m_arrPassCImage4Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[3].CopyTo(ref m_arrPassImage4Buffer[m_intPassEndNode]);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 4) && WantSaveImageAccordingMergeType(4))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[4].CopyTo(ref m_arrPassCImage5Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[4].CopyTo(ref m_arrPassImage5Buffer[m_intPassEndNode]);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 5) && WantSaveImageAccordingMergeType(5))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[5].CopyTo(ref m_arrPassCImage6Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[5].CopyTo(ref m_arrPassImage6Buffer[m_intPassEndNode]);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 6) && WantSaveImageAccordingMergeType(6))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                            m_smVisionInfo.g_arrColorImages[6].CopyTo(ref m_arrPassCImage7Buffer[m_intPassEndNode]);
                        else
                            m_smVisionInfo.g_arrImages[6].CopyTo(ref m_arrPassImage7Buffer[m_intPassEndNode]);
                    }

                    //m_arrPassNoBuffer[m_intPassEndNode] = m_smVisionInfo.g_intPassImageCount;
                    //STTrackLog.WriteLine("P1 - g_intTotalImageCount=" + m_smVisionInfo.g_intTotalImageCount);
                    m_arrPassNoBuffer[m_intPassEndNode] = m_smVisionInfo.g_intTotalImageCount;  // 2019 09 18 - CCENG: Use total image count instead of Pass Image count so that pass fail image will display in sequence.
                    m_smVisionInfo.g_intTotalImageCount++;
                    m_smVisionInfo.g_intPassImageCount++;
                    

                    m_intPassEndNode++;
                    if (m_intPassEndNode == m_smVisionInfo.g_intSaveImageBufferSize)
                        m_intPassEndNode = 0;
                }
            }
        }

        private void SaveRejectImage_AddToBuffer(string strRejectName, string strRejectMessage)
        {
            if (m_smCustomizeInfo.g_blnSaveFailImage)
            {
                if (m_smCustomizeInfo.g_intSaveImageMode == 0)
                {
                    if (m_smVisionInfo.g_intFailImageCount >= m_smCustomizeInfo.g_intFailImagePics)
                        return;
                }

                WaitImageBufferClear(ref m_intFailStartNode, ref m_intFailEndNode);

                //To handle case when test fail before all image grab complete
                WaitAllImageGrabDone();

                if (m_smVisionInfo.g_blnViewColorImage)
                    m_smVisionInfo.g_arrColorImages[0].CopyTo(ref m_arrFailCImage1Buffer[m_intFailEndNode]);
                else
                    m_smVisionInfo.g_arrImages[0].CopyTo(ref m_arrFailImage1Buffer[m_intFailEndNode]);

                if ((m_smVisionInfo.g_arrImages.Count > 1) && WantSaveImageAccordingMergeType(1))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[1].CopyTo(ref m_arrFailCImage2Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[1].CopyTo(ref m_arrFailImage2Buffer[m_intFailEndNode]);
                }

                if ((m_smVisionInfo.g_arrImages.Count > 2) && WantSaveImageAccordingMergeType(2))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[2].CopyTo(ref m_arrFailCImage3Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[2].CopyTo(ref m_arrFailImage3Buffer[m_intFailEndNode]);
                }

                if ((m_smVisionInfo.g_arrImages.Count > 3) && WantSaveImageAccordingMergeType(3))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[3].CopyTo(ref m_arrFailCImage4Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[3].CopyTo(ref m_arrFailImage4Buffer[m_intFailEndNode]);
                }

                if ((m_smVisionInfo.g_arrImages.Count > 4) && WantSaveImageAccordingMergeType(4))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[4].CopyTo(ref m_arrFailCImage5Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[4].CopyTo(ref m_arrFailImage5Buffer[m_intFailEndNode]);
                }

                if ((m_smVisionInfo.g_arrImages.Count > 5) && WantSaveImageAccordingMergeType(5))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[5].CopyTo(ref m_arrFailCImage6Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[5].CopyTo(ref m_arrFailImage6Buffer[m_intFailEndNode]);
                }

                if ((m_smVisionInfo.g_arrImages.Count > 6) && WantSaveImageAccordingMergeType(6))
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                        m_smVisionInfo.g_arrColorImages[6].CopyTo(ref m_arrFailCImage7Buffer[m_intFailEndNode]);
                    else
                        m_smVisionInfo.g_arrImages[6].CopyTo(ref m_arrFailImage7Buffer[m_intFailEndNode]);
                }

                m_arrRejectNameBuffer[m_intFailEndNode] = strRejectName;
                m_arrRejectMessageBuffer[m_intFailEndNode] = strRejectMessage;
                //m_arrFailNoBuffer[m_intFailEndNode] = m_smVisionInfo.g_intFailImageCount;
                m_arrFailNoBuffer[m_intFailEndNode] = m_smVisionInfo.g_intTotalImageCount;  // 2019 09 18 - CCENG: Use total image count instead of Fail Image count so that pass fail image will display in sequence.
                m_smVisionInfo.g_intTotalImageCount++;
                m_smVisionInfo.g_intFailImageCount++;

                m_intFailEndNode++;
                if (m_smVisionInfo.g_blnViewColorImage)
                {
                    if (m_intFailEndNode == m_smVisionInfo.g_intSaveImageBufferSize)
                        m_intFailEndNode = 0;
                }
                else
                {
                    if (m_intFailEndNode == m_smVisionInfo.g_intSaveImageBufferSize)
                        m_intFailEndNode = 0;
                }
            }
        }

        private void SaveImageBuffer()
        {
            try
            {
                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("P1 - Start=" + m_intPassStartNode.ToString() + ", End=" + m_intPassEndNode.ToString());

                if (m_intPassStartNode != m_intPassEndNode)
                {
                    
                    //string strPath = m_smVisionInfo.g_strSaveImageLocation +
                    //            m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                    //            "\\" + m_smVisionInfo.g_strVisionFolderName +
                    //            "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" +
                    //            "\\Pass\\";

                    // 2020 03 27 - JBTAN: Save to different folder if reset count
                    string strPath;
                    if (m_smVisionInfo.g_intVisionResetCount == 0)
                    {
                        strPath = m_smVisionInfo.g_strSaveImageLocation +
                                m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                                "\\" + m_smVisionInfo.g_strVisionFolderName +
                                "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smProductionInfo.g_strLotStartTime +
                                "\\Pass\\";
                    }
                    else
                    {
                        string strLotSaveImagePath = m_smVisionInfo.g_strSaveImageLocation + m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime;
                        string strVisionImageFolderName = m_smVisionInfo.g_strVisionFolderName + "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smVisionInfo.g_strVisionResetCountTime;

                        if (!Directory.Exists(strLotSaveImagePath + "\\" + strVisionImageFolderName))
                            Directory.CreateDirectory(strLotSaveImagePath + "\\" + strVisionImageFolderName);
                        if (!Directory.Exists(strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\Pass"))
                            Directory.CreateDirectory(strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\Pass");

                        strPath = strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\Pass\\";
                    }

                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("P2 - " + strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + ".bmp");

                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_arrPassCImage1Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + ".bmp");
                        //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                        m_arrPassCImage1Buffer[m_intPassStartNode].Dispose();
                        m_arrPassCImage1Buffer[m_intPassStartNode] = new CImageDrawing(true);
                    }
                    else
                    {
                        m_arrPassImage1Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + ".bmp");
                        //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                        m_arrPassImage1Buffer[m_intPassStartNode].Dispose();
                        m_arrPassImage1Buffer[m_intPassStartNode] = new ImageDrawing(true);
                    }
                    if ((m_smVisionInfo.g_arrImages.Count > 1) && WantSaveImageAccordingMergeType(1))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage2Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image1.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage2Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage2Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage2Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image1.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage2Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage2Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 2) && WantSaveImageAccordingMergeType(2))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage3Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image2.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage3Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage3Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage3Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image2.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage3Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage3Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 3) && WantSaveImageAccordingMergeType(3))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage4Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image3.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage4Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage4Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage4Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image3.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage4Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage4Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }

                    if (m_smVisionInfo.g_arrImages.Count > 4 && WantSaveImageAccordingMergeType(4))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage5Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image4.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage5Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage5Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage5Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image4.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage5Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage5Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }

                    if (m_smVisionInfo.g_arrImages.Count > 5 && WantSaveImageAccordingMergeType(5))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage6Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image5.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage6Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage6Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage6Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image5.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage6Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage6Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }

                    if (m_smVisionInfo.g_arrImages.Count > 6 && WantSaveImageAccordingMergeType(6))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrPassCImage7Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image6.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassCImage7Buffer[m_intPassStartNode].Dispose();
                            m_arrPassCImage7Buffer[m_intPassStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrPassImage7Buffer[m_intPassStartNode].SaveImage(strPath + m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + "_Image6.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrPassImage7Buffer[m_intPassStartNode].Dispose();
                            m_arrPassImage7Buffer[m_intPassStartNode] = new ImageDrawing(true);
                        }
                    }
                    m_smVisionInfo.g_strLastImageFolder = strPath;
                    m_smVisionInfo.g_strLastImageName = m_arrPassNoBuffer[m_intPassStartNode] + "_Pass" + ".bmp";

                    m_intPassStartNode++;
                    if (m_intPassStartNode == m_smVisionInfo.g_intSaveImageBufferSize)
                    {
                        m_intPassStartNode = 0;
                    }
                }


                if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("F1 - Start=" + m_intFailStartNode.ToString() + ", End=" + m_intFailEndNode.ToString());

                if (m_intFailStartNode != m_intFailEndNode)
                {
                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("F2 - m_arrFailNoBuffer[m_intFailStartNode]=" + m_arrFailNoBuffer[m_intFailStartNode].ToString());

                    //2021-02-24 ZJYEOH : Should use m_smVisionInfo.g_intFailImageCount to compare
                    if (/*m_arrFailNoBuffer[m_intFailStartNode]*/ m_smVisionInfo.g_intFailImageCount > m_smCustomizeInfo.g_intFailImagePics)//>=
                    {
                        if (!m_blnLoadRejectImageListPath)
                        {
                            LoadRejectImageListPath();

                            m_blnLoadRejectImageListPath = true;
                        }

                        if (m_arrRejectImageListPath.Count > 0)
                        {
                            string strDeleteFile = m_arrRejectImageListPath[0];
                            if (File.Exists(strDeleteFile))
                            {
                                try
                                {
                                    File.Delete(strDeleteFile);
                                }
                                catch (Exception ex)
                                {
                                    STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image0 > Ex=" + ex.ToString());
                                }

                            }

                            if (m_smVisionInfo.g_arrImages.Count > 1)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage1 = strDeleteFile.Substring(0, intStartIndex) + "_Image1.bmp";
                                    if (File.Exists(strDeleteFileImage1))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage1);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image1 > Ex=" + ex.ToString());
                                        }
                                    }
                                }
                            }

                            if (m_smVisionInfo.g_arrImages.Count > 2)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage2 = strDeleteFile.Substring(0, intStartIndex) + "_Image2.bmp";
                                    if (File.Exists(strDeleteFileImage2))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage2);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image2 > Ex=" + ex.ToString());
                                        }

                                    }
                                }
                            }
                            if (m_smVisionInfo.g_arrImages.Count > 3)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage3 = strDeleteFile.Substring(0, intStartIndex) + "_Image3.bmp";
                                    if (File.Exists(strDeleteFileImage3))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage3);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image3 > Ex=" + ex.ToString());
                                        }

                                    }
                                }
                            }
                            if (m_smVisionInfo.g_arrImages.Count > 4)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage4 = strDeleteFile.Substring(0, intStartIndex) + "_Image4.bmp";
                                    if (File.Exists(strDeleteFileImage4))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage4);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image4 > Ex=" + ex.ToString());
                                        }

                                    }
                                }
                            }
                            if (m_smVisionInfo.g_arrImages.Count > 5)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage5 = strDeleteFile.Substring(0, intStartIndex) + "_Image5.bmp";
                                    if (File.Exists(strDeleteFileImage5))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage5);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image5 > Ex=" + ex.ToString());
                                        }

                                    }
                                }
                            }
                            if (m_smVisionInfo.g_arrImages.Count > 6)
                            {
                                int intStartIndex = strDeleteFile.LastIndexOf(".bmp");
                                if (intStartIndex > 0)
                                {
                                    string strDeleteFileImage6 = strDeleteFile.Substring(0, intStartIndex) + "_Image6.bmp";
                                    if (File.Exists(strDeleteFileImage6))
                                    {
                                        try
                                        {
                                            File.Delete(strDeleteFileImage6);
                                        }
                                        catch (Exception ex)
                                        {
                                            STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Delete _image6 > Ex=" + ex.ToString());
                                        }

                                    }
                                }
                            }
                            m_arrRejectImageListPath.RemoveAt(0);
                        }
                        if (m_arrRejectImageErrorMessageListPath.Count > 0)
                        {
                            string strDeleteFile = m_arrRejectImageErrorMessageListPath[0];
                            if (File.Exists(strDeleteFile))
                            {
                                File.Delete(strDeleteFile);
                            }

                            m_arrRejectImageErrorMessageListPath.RemoveAt(0);
                        }
                    }
                    else if (m_arrFailNoBuffer[m_intFailStartNode] == 0)
                    {
                        m_arrRejectImageListPath.Clear();
                        m_arrRejectImageErrorMessageListPath.Clear();
                    }

                    //string strPath = m_smVisionInfo.g_strSaveImageLocation +
                    //        m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                    //        "\\" + m_smVisionInfo.g_strVisionFolderName +
                    //        "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" +
                    //        "\\" + m_arrRejectNameBuffer[m_intFailStartNode] + "\\";

                    // 2020 03 27 - JBTAN: Save to different folder if reset count
                    string strPath;
                    if (m_smVisionInfo.g_intVisionResetCount == 0)
                    {
                        strPath = m_smVisionInfo.g_strSaveImageLocation +
                            m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                            "\\" + m_smVisionInfo.g_strVisionFolderName +
                            "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smProductionInfo.g_strLotStartTime +
                            "\\" + m_arrRejectNameBuffer[m_intFailStartNode] + "\\";
                    }
                    else
                    {
                        string strLotSaveImagePath = m_smVisionInfo.g_strSaveImageLocation + m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime;
                        string strVisionImageFolderName = m_smVisionInfo.g_strVisionFolderName + "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smVisionInfo.g_strVisionResetCountTime;

                        if (!Directory.Exists(strLotSaveImagePath + "\\" + strVisionImageFolderName))
                            Directory.CreateDirectory(strLotSaveImagePath + "\\" + strVisionImageFolderName);
                        if (!Directory.Exists(strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\" + m_arrRejectNameBuffer[m_intFailStartNode] + "\\"))
                            Directory.CreateDirectory(strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\" + m_arrRejectNameBuffer[m_intFailStartNode] + "\\");

                        strPath = strLotSaveImagePath + "\\" + strVisionImageFolderName + "\\" + m_arrRejectNameBuffer[m_intFailStartNode] + "\\";
                    }

                    if (m_smVisionInfo.g_blnTrackBasic) STTrackLog.WriteLine("F3 - " + strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp");

                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        m_arrFailCImage1Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp");
                        //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                        m_arrFailCImage1Buffer[m_intFailStartNode].Dispose();
                        m_arrFailCImage1Buffer[m_intFailStartNode] = new CImageDrawing(true);
                    }
                    else
                    {
                        m_arrFailImage1Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp");
                        //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                        m_arrFailImage1Buffer[m_intFailStartNode].Dispose();
                        m_arrFailImage1Buffer[m_intFailStartNode] = new ImageDrawing(true);
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 1) && WantSaveImageAccordingMergeType(1))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage2Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image1.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage2Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage2Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage2Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image1.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage2Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage2Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 2) && WantSaveImageAccordingMergeType(2))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage3Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image2.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage3Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage3Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage3Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image2.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage3Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage3Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 3) && WantSaveImageAccordingMergeType(3))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage4Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image3.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage4Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage4Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage4Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image3.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage4Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage4Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 4) && WantSaveImageAccordingMergeType(4))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage5Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image4.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage5Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage5Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage5Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image4.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage5Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage5Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 5) && WantSaveImageAccordingMergeType(5))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage6Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image5.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage6Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage6Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage6Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image5.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage6Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage6Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }

                    if ((m_smVisionInfo.g_arrImages.Count > 6) && WantSaveImageAccordingMergeType(6))
                    {
                        if (m_smVisionInfo.g_blnViewColorImage)
                        {
                            m_arrFailCImage7Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image6.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailCImage7Buffer[m_intFailStartNode].Dispose();
                            m_arrFailCImage7Buffer[m_intFailStartNode] = new CImageDrawing(true);
                        }
                        else
                        {
                            m_arrFailImage7Buffer[m_intFailStartNode].SaveImage(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + "_Image6.bmp");
                            //2021-02-04 ZJYEOH : Dispose and init again can reduce RAM consumption
                            m_arrFailImage7Buffer[m_intFailStartNode].Dispose();
                            m_arrFailImage7Buffer[m_intFailStartNode] = new ImageDrawing(true);
                        }
                    }
                    //m_smVisionInfo.g_strLastImageFolder = strPath;
                    //m_smVisionInfo.g_strLastImageName = m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp";
                    //m_arrRejectImageListPath.Add(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp");
                    //m_intFailStartNode++;
                    //if (m_intFailStartNode == BUFFERSIZE)
                    //{
                    //    m_intFailStartNode = 0;
                    //}
                    if (m_smCustomizeInfo.g_blnSaveFailImageErrorMessage)
                    {
                        XmlParser objFile = new XmlParser(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".xml");
                        objFile.WriteSectionElement("ErrorMessage");
                        objFile.WriteElement1Value("Message_" + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode], m_arrRejectMessageBuffer[m_intFailStartNode]);
                        objFile.WriteEndElement();
                    }

                    m_smVisionInfo.g_strLastImageFolder = strPath;
                    m_smVisionInfo.g_strLastImageName = m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp";
                    m_arrRejectImageListPath.Add(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".bmp");
                    m_arrRejectImageErrorMessageListPath.Add(strPath + m_arrFailNoBuffer[m_intFailStartNode] + "_" + m_arrRejectNameBuffer[m_intFailStartNode] + ".xml");
                    m_intFailStartNode++;
                    if (m_intFailStartNode == m_smVisionInfo.g_intSaveImageBufferSize)
                    {
                        m_intFailStartNode = 0;
                    }
                }
            }
            catch (Exception ex)
            {
                STTrackLog.WriteLine("Vision3Process.cs > SaveImageBuffer Ex=" + ex.ToString());
                //SRMMessageBox.Show("Vision3Process.cs > SaveImageBuffer > Ex=" + ex.ToString());
            }
        }

        private void LoadRejectImageListPath()
        {
            //string strRejectImageFolderPath = m_smVisionInfo.g_strSaveImageLocation +
            //               m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
            //               "\\" + m_smVisionInfo.g_strVisionFolderName +
            //               "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")";

            // 2020 03 27 - JBTAN: Load from different folder if reset count
            string strRejectImageFolderPath;
            if (m_smVisionInfo.g_intVisionResetCount == 0)
            {
                strRejectImageFolderPath = m_smVisionInfo.g_strSaveImageLocation +
                    m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                    "\\" + m_smVisionInfo.g_strVisionFolderName +
                    "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smProductionInfo.g_strLotStartTime;
            }
            else
            {
                strRejectImageFolderPath = m_smVisionInfo.g_strSaveImageLocation +
                    m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime +
                    "\\" + m_smVisionInfo.g_strVisionFolderName +
                    "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smVisionInfo.g_strVisionResetCountTime;
            }

            string[] arrRejectImageFoldderList = Directory.GetDirectories(strRejectImageFolderPath);

            List<int> arrRejectImageNo = new List<int>();
            m_arrRejectImageListPath.Clear();
            m_arrRejectImageErrorMessageListPath.Clear();
            foreach (string strFolderPath in arrRejectImageFoldderList)
            {  
                //2021-02-24 ZJYHEOH : No need to delete pass image
                if (strFolderPath.Substring(strFolderPath.LastIndexOf('\\') + 1, strFolderPath.Length - strFolderPath.LastIndexOf('\\') - 1) == "Pass")
                    continue;

                string[] arrRejectImageList = Directory.GetFiles(strFolderPath);

                foreach (string strFilePath in arrRejectImageList)
                {
                    string strFileName = Path.GetFileNameWithoutExtension(strFilePath);

                    if (strFileName.LastIndexOf("_Image") > 0)
                    {
                        continue;
                    }

                    int intFileNo = 0;
                    if (int.TryParse(new string(strFileName
                     .SkipWhile(x => !char.IsDigit(x))
                     .TakeWhile(x => char.IsDigit(x))
                     .ToArray()), out intFileNo))
                    {
                        int intSelectedIndex = arrRejectImageNo.Count;
                        for (int i = 0; i < arrRejectImageNo.Count; i++)
                        {
                            if (intFileNo < arrRejectImageNo[i])
                            {
                                intSelectedIndex = i;
                                break;
                            }

                        }

                        m_arrRejectImageListPath.Insert(intSelectedIndex, strFilePath);
                        arrRejectImageNo.Insert(intSelectedIndex, intFileNo);

                        //for error message xml file
                        string strErrorMessagePath = strFilePath.Replace(".bmp", ".xml");
                        if (File.Exists(strErrorMessagePath))
                        {
                            if (intSelectedIndex > m_arrRejectImageErrorMessageListPath.Count)
                            {
                                if (m_arrRejectImageErrorMessageListPath.Count == 0)
                                    m_arrRejectImageErrorMessageListPath.Insert(0, strErrorMessagePath);
                                else
                                    m_arrRejectImageErrorMessageListPath.Insert(m_arrRejectImageErrorMessageListPath.Count - 1, strErrorMessagePath);
                            }
                            else
                                m_arrRejectImageErrorMessageListPath.Insert(intSelectedIndex, strErrorMessagePath);
                        }
                    }

                }
            }
        }

        private void WaitImageBufferClear(ref int intStartNode, ref int intEndNode)
        {
            HiPerfTimer timesout = new HiPerfTimer();
            timesout.Start();


            while (true)
            {
                int intNextEndNode = intEndNode + 1;
                if (intNextEndNode >= m_smVisionInfo.g_intSaveImageBufferSize)
                    intNextEndNode = 0;

                if (intNextEndNode != intStartNode)
                {
                    return;
                }

                if (timesout.Timing > 200)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 13. intStartNode=" + intStartNode.ToString() + ", intEndNode=" + intEndNode.ToString());
                    break;
                }

                Thread.Sleep(1);
            }
        }

        private void LoadNextImageForDebugRunTest()
        {
            if (m_smVisionInfo.g_arrImageFiles.Count == 0)
                return;

            if (m_smVisionInfo.g_intFileIndex < 0 || m_smVisionInfo.g_intFileIndex >= m_smVisionInfo.g_arrImageFiles.Count)
                m_smVisionInfo.g_intFileIndex = 0;

            string strFileName = m_smVisionInfo.g_arrImageFiles[m_smVisionInfo.g_intFileIndex].ToString();

            if (!m_smVisionInfo.g_blnViewColorImage)
            {
                m_smVisionInfo.g_arrImages[0].LoadImage(strFileName);
                for (int i = 1; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    string strDirPath = Path.GetDirectoryName(strFileName);
                    string strPkgView = strDirPath + "\\" + Path.GetFileNameWithoutExtension(strFileName) + "_Image" + i.ToString() + ".BMP";

                    if (File.Exists(strPkgView))
                        m_smVisionInfo.g_arrImages[i].LoadImage(strPkgView);
                    else
                        m_smVisionInfo.g_arrImages[i].LoadImage(strFileName);
                }
            }
            else
            {
                m_smVisionInfo.g_arrColorImages[0].LoadImage(strFileName);
                m_smVisionInfo.g_arrColorImages[0].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, 0);
                for (int i = 1; i < m_smVisionInfo.g_arrColorImages.Count; i++)
                {
                    string strDirPath = Path.GetDirectoryName(strFileName);
                    string strPkgView = strDirPath + "\\" + Path.GetFileNameWithoutExtension(strFileName) + "_Image" + i.ToString() + ".BMP";

                    if (File.Exists(strPkgView))
                        m_smVisionInfo.g_arrColorImages[i].LoadImage(strPkgView);
                    else
                        m_smVisionInfo.g_arrColorImages[i].LoadImage(strFileName);
                    m_smVisionInfo.g_arrColorImages[i].ConvertColorToMono(ref m_smVisionInfo.g_arrImages, i);
                }
            }

            if (++m_smVisionInfo.g_intFileIndex == m_smVisionInfo.g_arrImageFiles.Count)
                m_smVisionInfo.g_intFileIndex = 0;
        }

        private void InitSaveImageBuffer(int intGrabRequire)
        {
            if (m_smVisionInfo.g_blnViewColorImage)
            {
                if (intGrabRequire > 0)
                    m_arrPassCImage1Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                    m_arrPassCImage2Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                    m_arrPassCImage3Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                    m_arrPassCImage4Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                    m_arrPassCImage5Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                    m_arrPassCImage6Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                    m_arrPassCImage7Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];

                if (intGrabRequire > 0)
                    m_arrFailCImage1Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                    m_arrFailCImage2Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                    m_arrFailCImage3Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                    m_arrFailCImage4Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                    m_arrFailCImage5Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                    m_arrFailCImage6Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                    m_arrFailCImage7Buffer = new CImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];

                for (int i = 0; i < m_smVisionInfo.g_intSaveImageBufferSize; i++)
                {
                    if (intGrabRequire > 0)
                        m_arrPassCImage1Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                        m_arrPassCImage2Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                        m_arrPassCImage3Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                        m_arrPassCImage4Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                        m_arrPassCImage5Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                        m_arrPassCImage6Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                        m_arrPassCImage7Buffer[i] = new CImageDrawing(true);

                    if (intGrabRequire > 0)
                        m_arrFailCImage1Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                        m_arrFailCImage2Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                        m_arrFailCImage3Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                        m_arrFailCImage4Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                        m_arrFailCImage5Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                        m_arrFailCImage6Buffer[i] = new CImageDrawing(true);
                    if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                        m_arrFailCImage7Buffer[i] = new CImageDrawing(true);
                }
            }
            else
            {
                if (intGrabRequire > 0)
                    m_arrPassImage1Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                    m_arrPassImage2Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                    m_arrPassImage3Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                    m_arrPassImage4Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                    m_arrPassImage5Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                    m_arrPassImage6Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                    m_arrPassImage7Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];

                if (intGrabRequire > 0)
                    m_arrFailImage1Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                    m_arrFailImage2Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                    m_arrFailImage3Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                    m_arrFailImage4Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                    m_arrFailImage5Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                    m_arrFailImage6Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];
                if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                    m_arrFailImage7Buffer = new ImageDrawing[m_smVisionInfo.g_intSaveImageBufferSize];

                for (int i = 0; i < m_smVisionInfo.g_intSaveImageBufferSize; i++)
                {
                    if (intGrabRequire > 0)
                        m_arrPassImage1Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                        m_arrPassImage2Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                        m_arrPassImage3Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                        m_arrPassImage4Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                        m_arrPassImage5Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                        m_arrPassImage6Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                        m_arrPassImage7Buffer[i] = new ImageDrawing(true);

                    if (intGrabRequire > 0)
                        m_arrFailImage1Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 1 && WantSaveImageAccordingMergeType(1))
                        m_arrFailImage2Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 2 && WantSaveImageAccordingMergeType(2))
                        m_arrFailImage3Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 3 && WantSaveImageAccordingMergeType(3))
                        m_arrFailImage4Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 4 && WantSaveImageAccordingMergeType(4))
                        m_arrFailImage5Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 5 && WantSaveImageAccordingMergeType(5))
                        m_arrFailImage6Buffer[i] = new ImageDrawing(true);
                    if (intGrabRequire > 6 && WantSaveImageAccordingMergeType(6))
                        m_arrFailImage7Buffer[i] = new ImageDrawing(true);
                }
            }
            m_arrPassNoBuffer = new int[m_smVisionInfo.g_intSaveImageBufferSize];
            m_arrFailNoBuffer = new int[m_smVisionInfo.g_intSaveImageBufferSize];
            m_arrRejectNameBuffer = new string[m_smVisionInfo.g_intSaveImageBufferSize];
            m_arrRejectMessageBuffer = new string[m_smVisionInfo.g_intSaveImageBufferSize];
        }

        private void RecordResultLog()
        {
            string strLotSaveResultLogPath;
            string strVisionResultLogFileName;
            string strPath;
            if (m_smVisionInfo.g_intVisionResetCount == 0)
            {
                strLotSaveResultLogPath = m_smProductionInfo.g_strHistoryDataLocation + "ResultLog\\" + m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime;
                strVisionResultLogFileName = m_smVisionInfo.g_strVisionFolderName + "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smProductionInfo.g_strLotStartTime;

                if (!Directory.Exists(strLotSaveResultLogPath))
                    Directory.CreateDirectory(strLotSaveResultLogPath);

                strPath = strLotSaveResultLogPath + "\\" + strVisionResultLogFileName + ".txt";
            }
            else
            {
                strLotSaveResultLogPath = m_smProductionInfo.g_strHistoryDataLocation + "ResultLog\\" + m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime;
                strVisionResultLogFileName = m_smVisionInfo.g_strVisionFolderName + "(" + m_smVisionInfo.g_strVisionDisplayName + " " + m_smVisionInfo.g_strVisionNameRemark + ")" + "_" + m_smVisionInfo.g_strVisionResetCountTime;

                if (!Directory.Exists(strLotSaveResultLogPath))
                    Directory.CreateDirectory(strLotSaveResultLogPath);

                strPath = strLotSaveResultLogPath + "\\" + strVisionResultLogFileName + ".txt";
            }

            string ResultData = "";

            for (int a = 0; a < m_smVisionInfo.g_arrPad.Length; a++)
            {
                if (a > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                string strBlobsFeatures = m_smVisionInfo.g_arrPad[a].GetBlobsFeaturesInspectRealData();
                string[] strFeature = strBlobsFeatures.Split('#');

                int intBlobsCount = m_smVisionInfo.g_arrPad[a].GetBlobsFeaturesNumber();

                int intBlobsTotalCount_Side = 0;
          
                if(m_smVisionInfo.g_arrPad.Length > 1 && m_smVisionInfo.g_blnCheck4Sides)
                    intBlobsTotalCount_Side += m_smVisionInfo.g_arrPad[1].GetBlobsFeaturesNumber();
                if (m_smVisionInfo.g_arrPad.Length > 2 && m_smVisionInfo.g_blnCheck4Sides)
                    intBlobsTotalCount_Side += m_smVisionInfo.g_arrPad[2].GetBlobsFeaturesNumber();
                if (m_smVisionInfo.g_arrPad.Length > 3 && m_smVisionInfo.g_blnCheck4Sides)
                    intBlobsTotalCount_Side += m_smVisionInfo.g_arrPad[3].GetBlobsFeaturesNumber();
                if (m_smVisionInfo.g_arrPad.Length > 4 && m_smVisionInfo.g_blnCheck4Sides)
                    intBlobsTotalCount_Side += m_smVisionInfo.g_arrPad[4].GetBlobsFeaturesNumber();

                //int[] intBlobsCount_Side = { 0, 0, 0, 0};
                //if (m_smVisionInfo.g_arrPad.Length > 1)
                //    intBlobsCount_Side[0] = m_smVisionInfo.g_arrPad[1].GetBlobsFeaturesNumber();
                //if (m_smVisionInfo.g_arrPad.Length > 2)
                //    intBlobsCount_Side[1] = m_smVisionInfo.g_arrPad[2].GetBlobsFeaturesNumber();
                //if (m_smVisionInfo.g_arrPad.Length > 3)
                //    intBlobsCount_Side[2] = m_smVisionInfo.g_arrPad[3].GetBlobsFeaturesNumber();
                //if (m_smVisionInfo.g_arrPad.Length > 4)
                //    intBlobsCount_Side[3] = m_smVisionInfo.g_arrPad[4].GetBlobsFeaturesNumber();

               if((a == 0) && ((m_smVisionInfo.g_arrPad[0].GetBlobsFeaturesNumber() + intBlobsTotalCount_Side) > 0))
                    ResultData += "Date Time=" + DateTime.Now.ToString() + ",";

                string strPadDirection = "";
                switch (a)
                {
                    case 0:
                        strPadDirection = "Center ";
                        break;
                    case 1:
                        strPadDirection = "Top ";
                        break;
                    case 2:
                        strPadDirection = "Right ";
                        break;
                    case 3:
                        strPadDirection = "Bottom ";
                        break;
                    case 4:
                        strPadDirection = "Left ";
                        break;
                }

                for (int i = 0; i < intBlobsCount; i++)
                {
                    List<string> arrResultList = new List<string>();

                    arrResultList = m_smVisionInfo.g_arrPad[a].GetBlobFeaturesResult_WithPassFailIndicator(i);

                    long intFailMask = Convert.ToInt64(arrResultList[arrResultList.Count - 1]);
                    int intFailOptionMask = m_smVisionInfo.g_arrPad[a].ref_intFailOptionMask;
                    bool blnWantCheckPadArea = false, blnWantCheckPadWidthLength = false, blnWantCheckPadPitchGap = false;

                    if ((intFailOptionMask & 0x20) > 0)
                        blnWantCheckPadArea = true;
                    if ((intFailOptionMask & 0xC0) > 0)
                        blnWantCheckPadWidthLength = true;
                    if ((intFailOptionMask & 0x600) > 0)
                        blnWantCheckPadPitchGap = true;

                    if (blnWantCheckPadArea)
                    {
                        ResultData += strPadDirection + "Pad " + (i + 1).ToString() + " Area=" + arrResultList[1].ToString() + ",";
                    }

                    if (blnWantCheckPadWidthLength)
                    {
                        ResultData += strPadDirection + "Pad " + (i + 1).ToString() + " Width=" + arrResultList[2].ToString() + ",";

                        ResultData += strPadDirection + "Pad " + (i + 1).ToString() + " Length=" + arrResultList[3].ToString() + ",";
                    }

                    if (blnWantCheckPadPitchGap)
                    {
                        ResultData += strPadDirection + "Pad " + (i + 1).ToString() + " Pitch=" + arrResultList[4].ToString() + ",";

                        ResultData += strPadDirection + "Pad " + (i + 1).ToString() + " Gap=" + arrResultList[5].ToString() + ",";
                    }

                }
                
            }

            bool blnWantCheckPackageSize = false;

            if (m_smVisionInfo.g_arrPad.Length > 0)
                if ((m_smVisionInfo.g_arrPad[0].ref_intFailPkgOptionMask & 0x01) > 0)
                    blnWantCheckPackageSize = true;

            if (blnWantCheckPackageSize)
            {
                float fWidthMin = m_smVisionInfo.g_arrPad[0].GetUnitWidthMin(1);
                float fWidthMax = m_smVisionInfo.g_arrPad[0].GetUnitWidthMax(1);
                float fHeightMin = m_smVisionInfo.g_arrPad[0].GetUnitHeightMin(1);
                float fHeightMax = m_smVisionInfo.g_arrPad[0].GetUnitHeightMax(1);
                float fThicknessMin = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMin(1);
                float fThicknessMax = m_smVisionInfo.g_arrPad[0].GetUnitThicknessMax(1);

                float fWidth = (m_smVisionInfo.g_arrPad[0].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[0].GetResultDownWidth_RectGauge4L(1)) / 2;

                // 2019-10-25 ZJYEOH : Add Offset to package width
                fWidth += m_smVisionInfo.g_arrPad[0].ref_fPackageWidthOffsetMM;

                float fHeight = (m_smVisionInfo.g_arrPad[0].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[0].GetResultRightHeight_RectGauge4L(1)) / 2;

                // 2019-10-25 ZJYEOH : Add Offset to package height
                fHeight += m_smVisionInfo.g_arrPad[0].ref_fPackageHeightOffsetMM;

                float fThickness = 0;
                float fTotalThickness = 0;
                int intCount = 0;
                for (int j = 1; j < m_smVisionInfo.g_arrPad.Length; j++)
                {
                    if (j == 1 || j == 3)
                        fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultLeftHeight_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultRightHeight_RectGauge4L(1);
                    else
                        fTotalThickness += m_smVisionInfo.g_arrPad[j].GetResultUpWidth_RectGauge4L(1) + m_smVisionInfo.g_arrPad[j].GetResultDownWidth_RectGauge4L(1);

                    intCount += 2;
                }
                fThickness = fTotalThickness / intCount;

                // 2019-10-25 ZJYEOH : Add Offset to package thickness
                fThickness += m_smVisionInfo.g_arrPad[1].ref_fPackageThicknessOffsetMM;

                if(ResultData == "")
                    ResultData += "Date Time=" + DateTime.Now.ToString() + ",";

                ResultData += "Package Width=" + fWidth.ToString() + ",";
                ResultData += "Package Length=" + fHeight.ToString() + ",";

                if (m_smVisionInfo.g_blnCheck4Sides)
                    ResultData += "Package Thickness=" + fThickness.ToString() + ",";
            }

            if (ResultData != "")
            {
                ResultData = ResultData.Substring(0, ResultData.Length - 1); // Remove comma
                STTrackLog.WriteLine_ForResultLog(strLotSaveResultLogPath, strVisionResultLogFileName, ResultData);
            }
        }
        private bool WantSaveImageAccordingMergeType(int intImageIndex)
        {
            switch (m_smVisionInfo.g_intImageMergeType)
            {
                case 0:
                    return true;
                    break;
                case 1:
                    if (intImageIndex == 1)
                        return false;
                    break;
                case 2:
                    if ((intImageIndex == 1) || (intImageIndex == 2))
                        return false;
                    break;
                case 3:
                    if ((intImageIndex == 1) || (intImageIndex == 3))
                        return false;
                    break;
                case 4:
                    if ((intImageIndex == 1) || (intImageIndex == 2) || (intImageIndex == 4))
                        return false;
                    break;
            }

            return true;
        }
        private void SetPackageResultID(int intFailResultMask)
        {
            if ((intFailResultMask & 0x400) > 0) //Crack
                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailCrack;
            else if (((intFailResultMask & 0x08) > 0) || ((intFailResultMask & 0x04) > 0)) //Chipped Off, Scratches
                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailChippedOffOrScractches;
            else if (((intFailResultMask & 0x10) > 0) || ((intFailResultMask & 0x80) > 0) || ((intFailResultMask & 0x40000) > 0)) //Contamination
                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailForeignMaterial;
            else
                m_intTCPIPResultID = (int)TCPIPResulID.Fail;//FailPackage;
        }
    }
}
