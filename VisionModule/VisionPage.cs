using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using Microsoft.Win32;
using Common;
using ImageAcquisition;
using Lighting;
using SharedMemory;
using VisionProcessing;
using VisionProcessForm;
using System.Threading;

namespace VisionModule
{
    public partial class VisionPage : Form
    {
        #region dllImport

        [DllImportAttribute("gdi32.dll")]
        private static extern bool BitBlt(
            IntPtr hdcDest, // handle to destination DC
            int nXDest,  // x-coord of destination upper-left corner
            int nYDest,  // y-coord of destination upper-left corner
            int nWidth,  // width of destination rectangle
            int nHeight, // height of destination rectangle
            IntPtr hdcSrc,  // handle to source DC
            int nXSrc,   // x-coordinate of source upper-left corner
            int nYSrc,   // y-coordinate of source upper-left corner
            System.Int32 dwRop  // raster operation code
            );
        #endregion

        #region Constant Variables

        private const int EM_LINESCROLL = 0x00B6;

        #endregion

        #region Member Variables
        private TextureBrush m_objTextureBrush;
        private float m_fFeretWidth, m_fFeretHeight, m_FeretAngle, m_fAngle;
        private int m_startX, m_startY, m_width, m_height, m_LineCount, m_FeretStartX, m_FeretStartY, m_MaxX, m_MaxY, m_MinX, m_MinY, m_intLengthMode;
        private int m_intClickedPad0T;
        private int m_intClickedPad0R;
        private int m_intClickedPad0B;
        private int m_intClickedPad0L;
        private int m_intClickedPad1T;
        private int m_intClickedPad1R;
        private int m_intClickedPad1B;
        private int m_intClickedPad1L;
        private int m_intClickedPad2T;
        private int m_intClickedPad2R;
        private int m_intClickedPad2B;
        private int m_intClickedPad2L;
        private int m_intClickedPad3T;
        private int m_intClickedPad3R;
        private int m_intClickedPad3B;
        private int m_intClickedPad3L;
        private int m_intClickedPad4T;
        private int m_intClickedPad4R;
        private int m_intClickedPad4B;
        private int m_intClickedPad4L;
        private int m_intClickedX;
        private int m_intClickedXRe;
        private float m_fCalibrateImageGain = 1.0f;
        private bool m_blnDrawLineDone = true;
        private bool m_blnDrawLine = false;
        private bool m_blnDrawRectDone = true;
        private bool m_blnDrawRect = false;
        private bool m_blnDrawDontCareArea = true;
        private bool m_blnDeviceReady = false;
        private bool m_blnFormOpen = false;
        private List<Color> m_arrRowColor = new List<Color>();
        private int m_intUserGroup;
        private int m_intMachineStatus = 1;
        private int m_intVisionType = 0;
        private int m_intMouseHitX = 0;
        private int m_intMouseHitY = 0;
        //private string m_smVisionInfo.g_strSelectedPage = "";
        private string m_strSelectedRecipe = "";
        private string m_strSelectedPagePrev = "";
        private bool m_blnUpdatedMultiOffStatus = false;
        private float m_fTempZoomCount = 1f;
        private float m_fZoomCount = 1f;
        private float m_fZoomCountPrev = 1f;
        private float m_fOriScaleX = 1f;
        private float m_fOriScaleY = 1f;
        private int m_intScollValueXPrev = 0;
        private int m_intScollValueYPrev = 0;
        private int m_intZoomImageFocusPointX = 0;
        private int m_intZoomImageFocusPointY = 0;
        private float m_fStrFileNamePointX = 0;
        private float m_fStrFileNamePointY = 0;
        private int m_intZoomImageMouseDownPointX = 0;
        private int m_intZoomImageMouseDownPointY = 0;
        private bool m_blnEnableDragZoomImage = false;
        private List<string> m_arrRowErrorMessage = new List<string>();
        private int m_intSelectedTabPage = 0;
        private bool m_blnMultipleImageView = false;
        private int m_intTopParentPositionXPrev = 0;
        private int m_intTopParentPositionYPrev = 0;
        private int m_intTopParentPositionXCurr = 0;
        private int m_intTopParentPositionYCurr = 0;
        private int m_intTopParentOffsetX = 0;
        private int m_intTopParentOffsetY = 0;

        //ROI cursor shape
        private int m_intSelectedROIPrev = 0;
        private bool m_blnCursorShapeVerifying = false;

        // Gauge     
        private int m_intGaugeFilter = 1;
        private int m_intGaugeMinArea = 0;
        private int m_intGaugeMinAmp = 0;
        private int m_intGaugeThickness = 13;
        private int m_intGaugeTransChoice = 0;
        private int m_intGaugeTransType = 0;
        private int m_intGaugeNumFilteringPass = 0;
        private float m_fGaugeFilteringThreshold = 3f;

        private Vision1Page m_objVision1Page;
        private Vision2Page m_objVision2Page;
        private Vision3Page m_objVision3Page;
        private Vision3Lead3DPage m_objVision3Lead3DPage;
        private Vision4Page m_objVision4Page;
        private Vision6Page m_objVision6Page;
        private Vision7Page m_objVision7Page;
        private Vision1OfflinePage m_objVision1OfflinePage;
        private Vision2OfflinePage m_objVision2OfflinePage;
        private Vision3OfflinePage m_objVision3OfflinePage;
        private Vision3Lead3DOfflinePage m_objVision3Lead3DOfflinePage;
        private Vision4OfflinePage m_objVision4OfflinePage;
        private Vision6OfflinePage m_objVision6OfflinePage;
        private Vision7OfflinePage m_objVision7OfflinePage;
        private Vision1Process m_objVision1Process;
        private Vision2Process m_objVision2Process;
        private Vision3Process m_objVision3Process;
        private Vision3Lead3DProcess m_objVision3Lead3DProcess;
        private Vision4Process m_objVision4Process;
        private Vision6Process m_objVision6Process;
        private Vision7Process m_objVision7Process;

        private PadToleranceSettingForm m_objPadToleranceSettingForm;
        private CheckPresentToleranceSettingForm m_objCheckPresentToleranceSettingForm;
        private LeadToleranceSettingForm m_objLeadToleranceSettingForm;
        private Lead3DToleranceSettingForm m_objLead3DToleranceSettingForm;
        private SealToleranceSettingForm m_objSealToleranceSettingForm;
        private BarcodeToleranceSettingForm m_objBarcodeToleranceSettingForm;

        // GRR
        private VisionGRRPage m_objVisionGRRPage;
        private PocketPositionMeanStatisticForm m_objPocketPositionMeanStatisticForm = null;
        private ImageStatisticAnalisysForm m_objImageStatisticAnalisysForm = null;
        private bool m_blnViewGRR = false;

        // Templates
        private ImageDrawing m_objTemplate;

        private Point m_pLineStart;
        private Point m_pLineStop;
        private Point m_pRectStart;
        private Point m_pRectStop;
        protected Point m_pLineStartPrev = new Point(0, 0);
        protected Point m_pLineStopPrev = new Point(0, 0);
        protected TextureBrush staticTextureBrush = null;
        protected Pen staticPenRubout = null;

        private VisionInfo m_smVisionInfo;
        private ProductionInfo m_smProductionInfo;
        private CustomOption m_smCustomizeInfo;
        private Graphics m_Graphic;
        private Graphics m_Graphic1;
        private Graphics m_Graphic2;
        private Graphics m_Graphic3;
        private Graphics m_Graphic4;
        private AVTVimba m_objAVTFireGrab;
        private TeliCamera m_objTeliCamera;
        private IDSuEyeCamera m_objIDSCamera;
        private VisionComThread m_smComThread;
        private TCPIPIO m_smTCPIPIO;
        private RS232 m_thCOMMPort;
        private ROI m_objSubRulerROI = new ROI();
        private Rectangle rc = new Rectangle();


        #endregion



        public VisionPage(CustomOption smCustomizeInfo, ProductionInfo smProductionInfo, VisionInfo smVisionInfo,
            bool blnDeviceReady, VisionComThread smComThread, RS232 thCOMMPort, TCPIPIO smTCPIPIO)
        {
            InitializeComponent();

            m_smCustomizeInfo = smCustomizeInfo;
            m_smProductionInfo = smProductionInfo;
            m_smVisionInfo = smVisionInfo;
            m_smComThread = smComThread;
            m_smTCPIPIO = smTCPIPIO;
            m_thCOMMPort = thCOMMPort;
            m_intUserGroup = smProductionInfo.g_intUserGroup;
            m_strSelectedRecipe = m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex];
            m_blnDeviceReady = blnDeviceReady;

            VisionPageInitialization();
        }

        public VisionPage(CustomOption smCustomizeInfo, ProductionInfo smProductionInfo, VisionInfo smVisionInfo,
         bool blnDeviceReady, VisionComThread smComThread, RS232 thCOMMPort, IDSuEyeCamera objIDSCamera, TCPIPIO smTCPIPIO)
        {
            InitializeComponent();

            m_smCustomizeInfo = smCustomizeInfo;
            m_smProductionInfo = smProductionInfo;
            m_smVisionInfo = smVisionInfo;
            m_smComThread = smComThread;
            m_smTCPIPIO = smTCPIPIO;
            m_thCOMMPort = thCOMMPort;
            m_intUserGroup = smProductionInfo.g_intUserGroup;
            m_strSelectedRecipe = m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex];
            m_blnDeviceReady = blnDeviceReady;
            m_objIDSCamera = objIDSCamera;

            VisionPageInitialization();
        }
        private void CreateBlackWhiteImage()
        {
            ROI objROI = new ROI();
            m_smVisionInfo.g_objBlackWhiteLeftImage = new ImageDrawing(true, m_smVisionInfo.g_objBlackImage.ref_intImageWidth, m_smVisionInfo.g_objBlackImage.ref_intImageHeight);
            m_smVisionInfo.g_objBlackWhiteRightImage = new ImageDrawing(true, m_smVisionInfo.g_objBlackImage.ref_intImageWidth, m_smVisionInfo.g_objBlackImage.ref_intImageHeight);
            m_smVisionInfo.g_objBlackWhiteBottomImage = new ImageDrawing(true, m_smVisionInfo.g_objBlackImage.ref_intImageWidth, m_smVisionInfo.g_objBlackImage.ref_intImageHeight);
            m_smVisionInfo.g_objBlackWhiteTopImage = new ImageDrawing(true, m_smVisionInfo.g_objBlackImage.ref_intImageWidth, m_smVisionInfo.g_objBlackImage.ref_intImageHeight);

            m_smVisionInfo.g_objBlackImage.CopyTo(ref m_smVisionInfo.g_objBlackWhiteLeftImage);
            objROI.AttachImage(m_smVisionInfo.g_objBlackWhiteLeftImage);
            objROI.LoadROISetting(0, 0, m_smVisionInfo.g_objBlackWhiteLeftImage.ref_intImageWidth / 2, m_smVisionInfo.g_objBlackWhiteLeftImage.ref_intImageHeight);
            ROI.InvertOperationROI(objROI);

            m_smVisionInfo.g_objBlackImage.CopyTo(ref m_smVisionInfo.g_objBlackWhiteRightImage);
            objROI.AttachImage(m_smVisionInfo.g_objBlackWhiteRightImage);
            objROI.LoadROISetting(m_smVisionInfo.g_objBlackWhiteRightImage.ref_intImageWidth / 2, 0, m_smVisionInfo.g_objBlackWhiteRightImage.ref_intImageWidth / 2, m_smVisionInfo.g_objBlackWhiteRightImage.ref_intImageHeight);
            ROI.InvertOperationROI(objROI);

            m_smVisionInfo.g_objBlackImage.CopyTo(ref m_smVisionInfo.g_objBlackWhiteTopImage);
            objROI.AttachImage(m_smVisionInfo.g_objBlackWhiteTopImage);
            objROI.LoadROISetting(0, 0, m_smVisionInfo.g_objBlackWhiteTopImage.ref_intImageWidth, m_smVisionInfo.g_objBlackWhiteTopImage.ref_intImageHeight / 2);
            ROI.InvertOperationROI(objROI);

            m_smVisionInfo.g_objBlackImage.CopyTo(ref m_smVisionInfo.g_objBlackWhiteBottomImage);
            objROI.AttachImage(m_smVisionInfo.g_objBlackWhiteBottomImage);
            objROI.LoadROISetting(0, m_smVisionInfo.g_objBlackWhiteBottomImage.ref_intImageHeight / 2, m_smVisionInfo.g_objBlackWhiteBottomImage.ref_intImageWidth, m_smVisionInfo.g_objBlackWhiteBottomImage.ref_intImageHeight / 2);
            ROI.InvertOperationROI(objROI);

            objROI.Dispose();
        }
        private void VisionPageInitialization()
        {
            string strMisc = AppDomain.CurrentDomain.BaseDirectory + "Misc\\";
            //if (File.Exists(strMisc + "White.bmp"))
            //    m_smVisionInfo.g_objWhiteImage.LoadImage(strMisc + "White.bmp");
            //if (File.Exists(strMisc + "Black.bmp"))
            //    m_smVisionInfo.g_objBlackImage.LoadImage(strMisc + "Black.bmp");

            //2020-11-19 ZJYEOH : Direct create image ourself so that wont limit by default image size
            m_smVisionInfo.g_objWhiteImage = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_smVisionInfo.g_objWhiteImage.SetImageToWhite();
            m_smVisionInfo.g_objWhiteImage.SaveImage(strMisc + "White.bmp");

            m_smVisionInfo.g_objBlackImage = new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            m_smVisionInfo.g_objBlackImage.SetImageToBlack();
            m_smVisionInfo.g_objBlackImage.SaveImage(strMisc + "Black.bmp");

            CreateBlackWhiteImage();
            if (File.Exists(strMisc + "DontCare.png"))
                m_smVisionInfo.g_objDontCareImage = Image.FromFile(strMisc + "DontCare.png");
            m_objTextureBrush = new TextureBrush(m_smVisionInfo.g_objDontCareImage);
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "Package":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLiPkg":

                    //* Total 3 images
                    //* Only got 2 gauge : Package Gauge 1 for image 2 and Package Gauge 2 for image 3
                    //* Image 1 unit edge is not clear, but image 2 and 3 have clear edge.
                    //* Image 2 has the best clear edge.
                    //* Image 1 for mark test only. 
                    //* Pkg Gauge 1 will measure image 2 unit edge,
                    //* then the unit size, location and angle will use in image 1.
                    m_smVisionInfo.g_blnDisableMOGauge = false;
                    break;
                default:
                    m_smVisionInfo.g_blnDisableMOGauge = false;
                    break;
            }

            m_objTemplate = new ImageDrawing(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            DefineResolutionSize();
            m_Graphic = Graphics.FromHwnd(pic_Image.Handle);
            m_Graphic1 = Graphics.FromHwnd(pic_Image1.Handle);
            m_Graphic2 = Graphics.FromHwnd(pic_Image2.Handle);
            m_Graphic3 = Graphics.FromHwnd(pic_Image3.Handle);
            m_Graphic4 = Graphics.FromHwnd(pic_Image4.Handle);

            // Init camera
            if (m_smVisionInfo.g_strCameraModel == "AVT")
            {
                m_objAVTFireGrab = new AVTVimba(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            }
            else if (m_smVisionInfo.g_strCameraModel == "Teli")
            {
                m_objTeliCamera = new TeliCamera(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight);
            }

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "MOLi":
                case "Package":
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision1Process = new Vision1Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision1Process = new Vision1Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision1Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision1Process.GrabImage(false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision1Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision1Process.GrabImage(false);
                        }
                    }

                    break;
                case "UnitPresent":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision2Process = new Vision2Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision2Process = new Vision2Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_objVision2Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                    {
                        m_objVision2Process.GrabImage();
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objVision3Process = new Vision3Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objIDSCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision3Process = new Vision3Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision3Process = new Vision3Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision3Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision3Process.GrabImage(0, false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision3Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision3Process.GrabImage(0, false);
                        }
                    }

                    m_objSubRulerROI = new ROI();
                    m_objSubRulerROI.AttachImage(m_smVisionInfo.g_objCameraROI);
                    m_objSubRulerROI.LoadROISetting(m_smVisionInfo.g_objCameraROI.ref_ROIWidth / 4,
                        m_smVisionInfo.g_objCameraROI.ref_ROIHeight / 4,
                        m_smVisionInfo.g_objCameraROI.ref_ROIWidth / 2,
                        m_smVisionInfo.g_objCameraROI.ref_ROIHeight / 2);

                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_smVisionInfo.g_strCameraModel == "IDS")
                        m_objVision3Lead3DProcess = new Vision3Lead3DProcess(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objIDSCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision3Lead3DProcess = new Vision3Lead3DProcess(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision3Lead3DProcess = new Vision3Lead3DProcess(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision3Lead3DProcess.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision3Lead3DProcess.GrabImage(0, false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision3Lead3DProcess.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision3Lead3DProcess.GrabImage(0, false);
                        }
                    }

                    m_objSubRulerROI = new ROI();
                    m_objSubRulerROI.AttachImage(m_smVisionInfo.g_objCameraROI);
                    m_objSubRulerROI.LoadROISetting(m_smVisionInfo.g_objCameraROI.ref_ROIWidth / 4,
                        m_smVisionInfo.g_objCameraROI.ref_ROIHeight / 4,
                        m_smVisionInfo.g_objCameraROI.ref_ROIWidth / 2,
                        m_smVisionInfo.g_objCameraROI.ref_ROIHeight / 2);

                    break;

                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision4Process = new Vision4Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision4Process = new Vision4Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision4Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision4Process.GrabImage(false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision4Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision4Process.GrabImage(false);
                        }
                    }
                    break;
                //Post Seal
                case "Seal":
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision6Process = new Vision6Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision6Process = new Vision6Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision6Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision6Process.GrabImage(false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision6Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision6Process.GrabImage(false);
                        }
                    }
                    break;
                case "Barcode":
                    if (m_smVisionInfo.g_strCameraModel == "AVT")
                        m_objVision7Process = new Vision7Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objAVTFireGrab, m_smComThread, m_thCOMMPort, m_smTCPIPIO);
                    else if (m_smVisionInfo.g_strCameraModel == "Teli")
                        m_objVision7Process = new Vision7Process(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_objTeliCamera, m_smComThread, m_thCOMMPort, m_smTCPIPIO);

                    if (m_smVisionInfo.g_intLightControllerType == 1)
                    {
                        if (m_objVision7Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision7Process.GrabImage(false);
                        }
                    }
                    else
                    {
                        // Only for VT Current(electric) light source controller
                        if (m_objVision7Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, true))
                        {
                            m_objVision7Process.GrabImage(false);
                        }
                    }
                    break;
                default:
                    SRMMessageBox.Show("VisionPage() --> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;

            }

            m_smVisionInfo.g_blnGRRON = false;

            // Make sure ReadFromXML function is called after GrabImage. Failing to do that will cause ROI attach image done by 2 thread at the same time.
            if (m_blnDeviceReady)
                ReadFromXML(m_strSelectedRecipe, true);

            SetScaleToComponents(true, false, false);

            SetCustomView_Visible(m_blnDeviceReady);
            CustomizeGUI();

        }
        public void UpdateGlobalSharingFile(string strRecipeCurrent)
        {
            string strRecipePath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + strRecipeCurrent;
            string strSelectedRecipe = strRecipeCurrent;

            if (m_smCustomizeInfo.g_blnGlobalSharingCalibrationData)
            {
                m_smVisionInfo.g_blnGlobalSharingCalibrationData = true;

                //2020-11-25 ZJYEOH : Copy global calibration data to local folder
                if (File.Exists(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml"))
                {
                    if (Directory.Exists(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\"))
                    {
                        File.Copy(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml", strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml", true);
                        File.WriteAllText(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "CalibrationSharingMode.txt", "1");
                    }
                }
            }
            else
            {
                m_smVisionInfo.g_blnGlobalSharingCalibrationData = false;

                if (Directory.Exists(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\"))
                {
                    File.WriteAllText(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "CalibrationSharingMode.txt", "0");
                }
            }

            if (m_smCustomizeInfo.g_blnGlobalSharingCameraData)
            {
                m_smVisionInfo.g_blnGlobalSharingCameraData = true;

                //2020-11-25 ZJYEOH : Copy global Camera data to local folder
                if (File.Exists(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + m_smVisionInfo.g_strVisionFolderName + "Camera.xml"))
                {
                    if (Directory.Exists(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\"))
                    {
                        File.Copy(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + m_smVisionInfo.g_strVisionFolderName + "Camera.xml", strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + m_smVisionInfo.g_strVisionFolderName + "Camera.xml", true);
                        File.WriteAllText(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "CameraSharingMode.txt", "1");
                    }
                }

                //2020-11-25 ZJYEOH : Copy global Camera data to local folder
                if (File.Exists(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml"))
                {
                    if (Directory.Exists(strRecipePath + "\\"))
                    {
                        File.Copy(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\GlobalCamera.xml", strRecipePath + "\\GlobalCamera.xml", true);
                        File.WriteAllText(strRecipePath + "\\CameraSharingMode.txt", "1");
                    }
                }

            }
            else
            {
                m_smVisionInfo.g_blnGlobalSharingCameraData = false;

                if (Directory.Exists(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\"))
                {
                    File.WriteAllText(strRecipePath + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "CameraSharingMode.txt", "0");
                }

                if (Directory.Exists(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\"))
                {
                    File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\CameraSharingMode.txt", "0");
                }

                if (Directory.Exists(strRecipePath + "\\"))
                {
                    File.WriteAllText(strRecipePath + "\\CameraSharingMode.txt", "0");
                }
            }
        }
        public void VisionPageReinitialization(bool blnDeviceReady, bool blnDifferentRecipe)
        {
            m_intUserGroup = m_smProductionInfo.g_intUserGroup;
            m_strSelectedRecipe = m_smProductionInfo.g_strRecipeID;
            m_blnDeviceReady = blnDeviceReady;

            if (blnDifferentRecipe)
            {
                m_smVisionInfo.PR_MN_UpdateSettingInfo = true; // 2021-08-20 ZJYEOH : Update info for offline page
                if (m_blnDeviceReady)
                {
                    ReadFromXML(m_strSelectedRecipe, true);
                    ReInitCamera();
                }
            }

            SetCustomView_Visible(m_blnDeviceReady);
            CustomizeGUI();

            // 2020 05 25 - CCENG: Auto lougout feature cause right menu button are enabled back when trigger ReloadAutoMode() from MainForm. 
            //            - set the machine status to 1 allow the right menu button are disabled back.
            m_intMachineStatus = 1;     

        }

        /// <summary>
        /// Make sure that only when form is focused, then enable timer.
        /// By this way, CPU usage can be reduced.
        /// </summary>
        ///  <param name="blnEnable">true = enable timer, false = disable timer</param>
        public void ActivateTimer(bool blnEnable)
        {
            timer_Live.Enabled = blnEnable;
            m_smVisionInfo.g_blnVisionPageTimerON = blnEnable;
            m_smVisionInfo.ALL_VM_UpdatePictureBox = blnEnable;
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "MOLi":
                case "Package":
                    if (m_objVision1Page != null) m_objVision1Page.ActivateTimer(blnEnable);
                    break;
                case "UnitPresent":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    if (m_objVision2Page != null) m_objVision2Page.ActivateTimer(blnEnable);
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_objVision3Page != null) m_objVision3Page.ActivateTimer(blnEnable);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_objVision3Lead3DPage != null) m_objVision3Lead3DPage.ActivateTimer(blnEnable);
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    if (m_objVision4Page != null) m_objVision4Page.ActivateTimer(blnEnable);
                    break;
                case "Seal":
                    if (m_objVision6Page != null) m_objVision6Page.ActivateTimer(blnEnable);
                    break;
                case "Barcode":
                    if (m_objVision7Page != null) m_objVision7Page.ActivateTimer(blnEnable);
                    break;
                default:
                    SRMMessageBox.Show("VisionPage-ActivateTimer() --> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            UpdateContextMenuStrip();
        }

        /// <summary>
        /// Clear all error messages in error messages list
        /// </summary>
        public void ClearErrorMessage()
        {
            m_arrRowErrorMessage.Clear();
            m_arrRowColor.Clear();
            lst_ErrorMessage.Items.Clear();
        }

        /// <summary>
        /// Read settings of particular recipe from xml file
        /// </summary>
        /// <param name="strRecipe">recipe name</param>
        /// <param name="blnFirstInit">If it is first initializing, then attach ROI to image</param>
        /// <summary>
        /// Read settings of particular recipe from xml file
        /// </summary>
        /// <param name="strRecipe">recipe name</param>
        /// <param name="blnFirstInit">If it is first initializing, then attach ROI to image</param>
        public void ReadFromXML(string strRecipe, bool blnFirstInit)
        {
            try
            {
                //Vision Name will be used involved Mark
                //--> MarkOrient
                //--> MarkPkg
                //--> MOPkg
                //--> MOLi
                //--> MOLiPkg
                //--> InPocket
                //--> InPocketPkg
                //--> IPMLi
                //--> IPMLiPkg

                string strFolderPath = m_smProductionInfo.g_strRecipePath + strRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\";

                // 2020 05 27 - Check recipe corrupted or not during save. If yes, recovered back.
                if (!Directory.Exists(strFolderPath))
                {
                    string strFolderBackup = m_smProductionInfo.g_strRecipePath + strRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "_Backup\\";
                    if (Directory.Exists(strFolderBackup))
                    {
                        SRMMessageBox.Show("Vision " + m_smVisionInfo.g_strVisionName + " recipe is missing. Software will recover back the recipe.", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        Directory.Move(strFolderBackup, strFolderPath);
                    }
                }
                LoadROIColorSetting(strFolderPath + "ROIColor.xml");
                LoadYieldSetting(strFolderPath + "General.xml");
                LoadResultLogSetting(strFolderPath + "General.xml");
                LoadPreTestSetting(strFolderPath + "General.xml");
                LoadToleranceReferenceSetting(m_smProductionInfo.g_strRecipePath + strRecipe + "\\" + m_smVisionInfo.g_strVisionName + "_Setting.stol");

                //Orient settings
                if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    LoadGeneralSetting(strFolderPath + "General.xml");
                    ROI.LoadFile(strFolderPath + "Orient\\ROI.xml", m_smVisionInfo.g_arrOrientROIs);

                    //LoadGaugeSetting2(strFolderPath + "Orient\\Gauge.xml", m_smVisionInfo.g_arrOrientGauge);
                    if (m_smVisionInfo.g_arrOrientGaugeM4L != null)
                        LoadGaugeM4LSetting(strFolderPath + "Orient\\GaugeM4L.xml", m_smVisionInfo.g_arrOrientGaugeM4L);
                    LoadOrientSettings(strFolderPath + "Orient\\");
                    LoadControlSettings(strFolderPath + "Orient\\");
                }

                //Mark settings
                if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    LoadGeneralSetting(strFolderPath + "General.xml");
                    ROI.LoadFile(strFolderPath + "Mark\\ROI.xml", m_smVisionInfo.g_arrMarkROIs);

                    ROI.LoadFile(strFolderPath + "Mark\\DontCareROI.xml", m_smVisionInfo.g_arrMarkDontCareROIs);
                    if (m_smVisionInfo.g_arrMarkROIs.Count > 0)
                    {
                        if (m_smVisionInfo.g_arrMarkROIs[0].Count > 1)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                            {
                                m_smVisionInfo.g_arrMarkDontCareROIs[i].AttachImage(m_smVisionInfo.g_arrMarkROIs[0][1]);
                            }
                        }
                    }

                    LoadMarkSettings(strFolderPath + "Mark\\");
                    //LoadGaugeSetting2(strFolderPath + "Mark\\Gauge.xml", m_smVisionInfo.g_arrMarkGauge);
                    if (m_smVisionInfo.g_arrMarkGaugeM4L != null)
                        LoadGaugeM4LSetting(strFolderPath + "Mark\\GaugeM4L.xml", m_smVisionInfo.g_arrMarkGaugeM4L);
                    LoadControlSettings(strFolderPath + "Mark\\Template\\");

                    if (m_smVisionInfo.g_arrPolygon_Mark != null)
                        LoadPolygonSetting_Mark(strFolderPath + "Mark\\Template\\Polygon.xml");

                    //if (File.Exists(strFolderPath + "Mark\\Template\\DontCareImage.bmp"))
                    //    m_smVisionInfo.g_objDontCareImage_Mark.LoadImage(strFolderPath + "Mark\\Template\\DontCareImage.bmp");
                }

                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    ROI.LoadFile(strFolderPath + "Package\\ROI.xml", m_smVisionInfo.g_arrPackageROIs);
                    CROI.LoadFile(strFolderPath + "Package\\CROI.xml", m_smVisionInfo.g_arrPackageColorROIs);

                    if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        ROI.LoadFile(strFolderPath + "Package\\DontCareROI.xml", m_smVisionInfo.g_arrPadPackageDontCareROIs);

                    }
                    else
                    {
                        ROI.LoadFile(strFolderPath + "Package\\DontCareROI.xml", m_smVisionInfo.g_arrPackageDontCareROIs);
                        LoadROISetting(strFolderPath + "Package\\ColorDontCareROI.xml", m_smVisionInfo.g_arrPackageColorDontCareROIs, m_smVisionInfo.g_intUnitsOnImage);
                        ROI.LoadFile(strFolderPath + "Package\\MoldFlashDontCareROI.xml", m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs);

                        if (m_smVisionInfo.g_arrPackageDontCareROIs.Count > 0)
                        {
                            if (m_smVisionInfo.g_arrPackageDontCareROIs.Count == 1)
                                m_smVisionInfo.g_arrPackageDontCareROIs.Add(new List<ROI>());

                            for (int i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPackageDontCareROIs[i].Count; j++)
                                {
                                    m_smVisionInfo.g_arrPackageDontCareROIs[i][j].AttachImage(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1]);
                                }
                            }

                        }

                        for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                            {
                                if (m_smVisionInfo.g_arrPackageColorDontCareROIs.Count > i)
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPackageColorDontCareROIs[i].Count; j++)
                                    {
                                        for (int k = 0; k < m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j].Count; k++)
                                        {
                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].AttachImage(m_smVisionInfo.g_arrPackageROIs[i][1]);
                                        }
                                    }
                                }

                            }
                        }
                    }
                    //LoadGaugeSetting2(strFolderPath + "Package\\Gauge.xml", m_smVisionInfo.g_arrPackageGauge);
                    if (m_smVisionInfo.g_arrPackageGaugeM4L != null)
                        LoadGaugeM4LSetting(strFolderPath + "Package\\GaugeM4L.xml", m_smVisionInfo.g_arrPackageGaugeM4L);
                    if (m_smVisionInfo.g_arrPackageGauge2M4L != null)
                        LoadGaugeM4LSetting(strFolderPath + "Package\\Gauge2M4L.xml", m_smVisionInfo.g_arrPackageGauge2M4L);

                    //if (m_smVisionInfo.g_blnViewColorImage)
                    //    LoadColorPackageSettings(strFolderPath + "Package\\Settings.xml");
                    //else
                    LoadPackageSettings(strFolderPath + "Package\\");

                    if (m_smVisionInfo.g_arrPolygon_Package != null)
                        LoadPolygonSetting_Package(strFolderPath + "Package\\Template\\Polygon.xml");

                    if (m_smVisionInfo.g_arrPolygon_PackageColor != null)
                        Polygon.LoadPolygon(strFolderPath + "Package\\Template\\ColorPolygon.xml", m_smVisionInfo.g_arrPolygon_PackageColor, m_smVisionInfo.g_intUnitsOnImage);

                    if (File.Exists(strFolderPath + "Package\\Template\\DontCareImage0_0.bmp"))
                        m_smVisionInfo.g_objDontCareImage_Package_Bright.LoadImage(strFolderPath + "Package\\Template\\DontCareImage0_0.bmp");
                    if (File.Exists(strFolderPath + "Package\\Template\\DontCareImage0_1.bmp"))
                        m_smVisionInfo.g_objDontCareImage_Package_Dark.LoadImage(strFolderPath + "Package\\Template\\DontCareImage0_1.bmp");

                    for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                    {
                        if (m_smVisionInfo.g_arrPackage.Count > u)
                            m_smVisionInfo.g_arrPackage[u].LoadColorDontCareImage(strFolderPath + "Package\\Template\\", u);
                    }
                    //if (m_smVisionInfo.g_blnViewColorImage)
                    //{
                    //    m_smVisionInfo.g_arrColorPackageROIs.Clear();
                    //    for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                    //    {
                    //        m_smVisionInfo.g_arrColorPackageROIs.Add(new List<CROI>());
                    //        for (int j = 0; j < m_smVisionInfo.g_arrPackageROIs[i].Count; j++)
                    //        {
                    //            CROI objCROI = new CROI();
                    //            m_smVisionInfo.g_arrPackageROIs[i][j].CopyToNew(ref objCROI);
                    //            m_smVisionInfo.g_arrColorPackageROIs[i].Add(objCROI);
                    //        }
                    //    }
                    //}

                    LoadControlSettings(strFolderPath + "Package\\Template\\");
                }
                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                {
                    menuItem_ViewPackageResult.Visible = false;
                    menuItem_ViewPackageTolerance.Visible = false;
                }
                else
                {
                    menuItem_ViewPackageResult.Visible = true;
                    //if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    menuItem_ViewPackageTolerance.Visible = true;
                    //else
                    //    menuItem_ViewPackageTolerance.Visible = false;
                }
                //Pad settings //5s pad settings
                if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    LoadROISetting(strFolderPath + "Pad\\ROI.xml", m_smVisionInfo.g_arrPadROIs, m_smVisionInfo.g_arrPad.Length);
                    LoadColorROISetting(strFolderPath + "Pad\\CROI.xml", m_smVisionInfo.g_arrPadColorROIs, m_smVisionInfo.g_arrPad.Length);
                    LoadROISetting(strFolderPath + "Orient\\ROI.xml", m_smVisionInfo.g_arrPadOrientROIs);
                    LoadROISetting(strFolderPath + "Pad\\DontCareROI.xml", m_smVisionInfo.g_arrPadDontCareROIs, m_smVisionInfo.g_arrPad.Length);
                    LoadROISetting(strFolderPath + "Pad\\ColorDontCareROI.xml", m_smVisionInfo.g_arrPadColorDontCareROIs, m_smVisionInfo.g_arrPad.Length);

                    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrPadROIs[i].Count > 3)
                        {
                            if (m_smVisionInfo.g_arrPadDontCareROIs.Count > i)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadDontCareROIs[i].Count; j++)
                                {
                                    m_smVisionInfo.g_arrPadDontCareROIs[i][j].AttachImage(m_smVisionInfo.g_arrPadROIs[i][3]);
                                }
                            }

                        }
                    }

                    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrPadROIs[i].Count > 3)
                        {
                            if (m_smVisionInfo.g_arrPadColorDontCareROIs.Count > i)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadColorDontCareROIs[i].Count; j++)
                                {
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadColorDontCareROIs[i][j].Count; k++)
                                    {
                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].AttachImage(m_smVisionInfo.g_arrPadROIs[i][3]);
                                    }
                                }
                            }

                        }
                    }

                    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPadPackageDontCareROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Count == 0)
                                m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Add(new List<ROI>());
                            if (m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Count == 1)
                                m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Add(new List<ROI>());

                            for (int j = 0; j < m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Count; j++)
                            {
                                for (int k = 0; k < m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j].Count; k++)
                                {
                                    if (i < m_smVisionInfo.g_arrPadROIs.Count && m_smVisionInfo.g_arrPadROIs[i].Count > 2)
                                        m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].AttachImage(m_smVisionInfo.g_arrPadROIs[i][2]);
                                }
                            }

                        }
                    }
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadPadOffSetSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadPadOffSetSetting(strFolderPath + "Calibration.xml");
                    LoadPadSetting(strFolderPath);
                    LoadMatcherFile(strFolderPath, m_smVisionInfo.g_arrPad);
                    if (((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                    {
                        LoadPadOrientSettings(strFolderPath + "Orient\\");
                    }
                    LoadControlSettings(strFolderPath + "Pad\\Template\\");

                    if (m_smVisionInfo.g_arrPolygon_Pad != null)
                        LoadPolygonSetting_Pad(strFolderPath + "Pad\\Template\\Polygon.xml");

                    if (m_smVisionInfo.g_arrPolygon_PadColor != null)
                        Polygon.LoadPolygon(strFolderPath + "Pad\\Template\\ColorPolygon.xml", m_smVisionInfo.g_arrPolygon_PadColor, m_smVisionInfo.g_arrPad.Length);

                }

                if (((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                {
                    LoadPadOrientSettings(strFolderPath + "Orient\\");
                }

                //Lead settings
                if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    LoadROISetting(strFolderPath + "Lead\\ROI.xml", m_smVisionInfo.g_arrLeadROIs, m_smVisionInfo.g_arrLead.Length);
                    LoadROISetting(strFolderPath + "Lead\\PocketDontCareROIFix.xml", m_smVisionInfo.g_arrLeadPocketDontCareROIsFix, 5);
                    LoadROISetting(strFolderPath + "Lead\\PocketDontCareROIManual.xml", m_smVisionInfo.g_arrLeadPocketDontCareROIsManual, 5);
                    LoadROISetting(strFolderPath + "Lead\\PocketDontCareROIAuto.xml", m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto, 5);
                    LoadROISetting(strFolderPath + "Lead\\PocketDontCareROIBlob.xml", m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob, 5);
                    LoadLeadSetting(strFolderPath + "Lead\\");
                    LoadControlSettings(strFolderPath + "Lead\\Template\\");

                    if (m_smVisionInfo.g_arrPackageGaugeM4L != null)
                        LoadGaugeM4LSetting(strFolderPath + "Package\\GaugeM4L.xml", m_smVisionInfo.g_arrPackageGaugeM4L);
                }

                //Lead3D settings
                if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadLead3DCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadLead3DCalibrationSetting(strFolderPath + "Calibration.xml");
                    LoadROISetting(strFolderPath + "Lead3D\\ROI.xml", m_smVisionInfo.g_arrLeadROIs, m_smVisionInfo.g_arrLead3D.Length);

                    LoadROISetting(strFolderPath + "Lead3D\\DontCareROI.xml", m_smVisionInfo.g_arrLead3DDontCareROIs, m_smVisionInfo.g_arrLead3D.Length);

                    for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                        {
                            if (m_smVisionInfo.g_arrLead3DDontCareROIs.Count > i)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLead3DDontCareROIs[i].Count; j++)
                                {
                                    m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].AttachImage(m_smVisionInfo.g_arrLeadROIs[i][0]);
                                }
                            }

                        }
                    }

                    LoadLead3DSetting(strFolderPath + "Lead3D\\");
                    LoadControlSettings(strFolderPath + "Lead3D\\Template\\");

                    if (m_smVisionInfo.g_arrPolygon_Lead3D != null)
                        LoadPolygonSetting_Lead3D(strFolderPath + "Lead3D\\Template\\Polygon.xml");
                }

                //Seal settings
                if ((m_smCustomizeInfo.g_intWantSeal & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    LoadSealGeneralSetting(strFolderPath + "General.xml");
                    LoadSealSettings(strFolderPath + "Seal\\");
                    ROI.LoadFile(strFolderPath + "Seal\\ROI.xml", m_smVisionInfo.g_arrSealROIs);
                    LGauge.LoadFile(strFolderPath + "Seal\\Gauge.xml", m_smVisionInfo.g_arrSealGauges, m_smVisionInfo.g_WorldShape);
                    m_smVisionInfo.g_objSealCircleGauges.LoadCircleGauge(strFolderPath + "Seal\\CircleGauge.xml", "CircleGauge");
                    m_smVisionInfo.g_objSeal.LoadTemplateCircleImage(strFolderPath + "Seal\\Template\\SprocketHoleCircleImage.bmp");
                    m_smVisionInfo.g_objSeal.LoadSeal(strFolderPath + "Seal\\Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX);
                    m_smVisionInfo.g_objSeal.LoadPositionPattern(strFolderPath + "Seal\\Template\\Position\\");
                    m_smVisionInfo.g_objSeal.LoadPocketPattern(strFolderPath + "Seal\\Template\\Pocket\\");
                    m_smVisionInfo.g_objSeal.LoadMarkPattern4Direction(strFolderPath + "Seal\\Template\\Mark\\");
                    m_smVisionInfo.g_objSeal.LoadMarkPatternImage(strFolderPath + "Seal\\Template\\Mark\\");
                    LoadControlSettings(strFolderPath + "Seal\\");
                    //LoadSealSettings(strFolderPath + "Seal\\Settings.xml");
                    //LoadSealGaugeGlobalSettings(strFolderPath + "Gauge.xml");
                    //LoadSealGaugeSettings(strFolderPath + "Seal\\Gauge.xml", m_smVisionInfo.g_arrSealGauges);
                }

                if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnGlobalSharingCalibrationData)
                        LoadCalibrationSetting(strFolderPath + m_smVisionInfo.g_strVisionFolderName + "Calibration.xml");
                    else
                        LoadCalibrationSetting(strFolderPath + "Calibration.xml");
                    ROI.LoadFile(strFolderPath + "Positioning\\ROI.xml", m_smVisionInfo.g_arrPositioningROIs);
                    LGauge.LoadFile(strFolderPath + "Positioning\\Gauge.xml", m_smVisionInfo.g_arrPositioningGauges, m_smVisionInfo.g_WorldShape);

                    LoadPositioningSettings(strFolderPath + "Positioning\\");
                }

                if ((m_smCustomizeInfo.g_intWantCheckPresent & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {

                    ROI.LoadFile(strFolderPath + "CheckPresent\\ROI.xml", m_smVisionInfo.g_arrPositioningROIs);
                    m_smVisionInfo.g_objUnitPresent.LoadUnitPresent(strFolderPath + "CheckPresent\\Setting.xml", "UnitPresentSetting");
                }
                if (m_smVisionInfo.g_blnWantCheckPH)
                {
                    ROI.LoadFile(strFolderPath + "Positioning\\PHROI.xml", m_smVisionInfo.g_arrPHROIs);
                    LoadPositioningSettings(strFolderPath + "Positioning\\");
                }
                //Load system ROI
                if (m_smVisionInfo.g_intImageMergeType != 0)
                {
                    LoadSystemROISetting(strFolderPath + "System\\ROI.xml");
                    LoadSystemSetting(strFolderPath + "System\\");
                }

                if (m_smVisionInfo.g_strVisionName.Contains("InPocket") || m_smVisionInfo.g_strVisionName.Contains("IPM"))
                {
                    if (File.Exists(strFolderPath + "Positioning\\" + "Template\\EmptyTemplate0.mch"))
                        m_smVisionInfo.g_objPositioning.LoadEmptyPattern(strFolderPath + "Positioning\\" + "Template\\EmptyTemplate0.mch");
                    if (File.Exists(strFolderPath + "Positioning\\" + "Settings.xml"))
                        m_smVisionInfo.g_objPositioning.LoadPosition(strFolderPath + "Positioning\\" + "Settings.xml", "General");
                    if (File.Exists(strFolderPath + "Positioning\\" + "ROI.xml"))
                        ROI.LoadFile(strFolderPath + "Positioning\\ROI.xml", m_smVisionInfo.g_arrPositioningROIs);

                    LoadPocketPositionSettings(strFolderPath + "PocketPosition\\");
                }

                //Load Barcode Settings
                if ((m_smCustomizeInfo.g_intWantBarcode & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    LoadBarcodeSettings(strFolderPath + "Barcode\\");
                }
            }
            catch (Exception ex)
            {
                SRMMessageBox.Show("VisionPage > ReadFromXML > ex = " + ex.ToString());
                STTrackLog.WriteLine("VisionPage > ReadFromXML > ex = " + ex.ToString());
            }

            m_smVisionInfo.AT_PR_AttachImagetoROI = true;
        }

        public void ReInitCamera()
        {
            if (m_objVision1Process != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision1Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision1Process.GrabImage(false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision1Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision1Process.GrabImage(false);
                    }
                }
            }
            else if (m_objVision2Process != null)
            {
                m_objVision2Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false);
                m_objVision2Process.GrabImage();
            }
            else if (m_objVision3Process != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision3Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision3Process.GrabImage(0, false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision3Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision3Process.GrabImage(0, false);
                    }
                }
            }
            else if (m_objVision3Lead3DProcess != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision3Lead3DProcess.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision3Lead3DProcess.GrabImage(0, false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision3Lead3DProcess.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision3Lead3DProcess.GrabImage(0, false);
                    }
                }
            }
            else if (m_objVision4Process != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision4Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision4Process.GrabImage(false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision4Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision4Process.GrabImage(false);
                    }
                }
            }
            else if (m_objVision6Process != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision6Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision6Process.GrabImage(false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision6Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision6Process.GrabImage(false);
                    }
                }
            }
            else if (m_objVision7Process != null)
            {
                if (m_smVisionInfo.g_intLightControllerType == 1)
                {
                    if (m_objVision7Process.InitCamera(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision7Process.GrabImage(false);
                    }
                }
                else
                {
                    // Only for VT Current(electric) light source controller
                    if (m_objVision7Process.InitCameraSequence(m_smVisionInfo.g_intCameraPortNo, m_smVisionInfo.g_strCameraSerialNo, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, false))
                    {
                        m_objVision7Process.GrabImage(false);
                    }
                }
            }

            //    private Vision1Process m_objVision1Process;
            //private Vision2Process m_objVision2Process;
            //private Vision3Process m_objVision3Process;
            //private Vision3Lead3DProcess m_objVision3Lead3DProcess;
            //private Vision4Process m_objVision4Process;
            //private Vision6Process m_objVision6Process;
        }

        /// <summary>
        /// Save all error messages into specific file 
        /// </summary>
        /// <param name="strFileName">file name</param>
        public void SaveErrorMessage(string strFileName)
        {
            FileInfo fi = new FileInfo(strFileName);

            // Dialog box will ask this question.
            //if (fi.Exists)
            //{
            //    if (SRMMessageBox.Show("Are you sure you want to overwrite the existing file?", "SRM Vision", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
            //        return;
            //    fi.Delete();
            //}

            StreamWriter sw = fi.CreateText();
            sw.Close();

            using (sw = fi.AppendText())
            {
                for (int i = 0; i < lst_ErrorMessage.Items.Count; i++)
                {
                    sw.WriteLine(lst_ErrorMessage.Items[i].ToString());
                }
                sw.Close();
            }
        }

        /// <summary>
        /// Stop all vision process thread
        /// </summary>
        public void StopThread()
        {
            if (m_objVision1Process != null) m_objVision1Process.StopThread();
            if (m_objVision2Process != null) m_objVision2Process.StopThread();
            if (m_objVision3Process != null) m_objVision3Process.StopThread();
            if (m_objVision3Lead3DProcess != null) m_objVision3Lead3DProcess.StopThread();
            if (m_objVision4Process != null) m_objVision4Process.StopThread();
            //          if (m_objVision5Process != null) m_objVision5Process.StopThread();
            if (m_objVision6Process != null) m_objVision6Process.StopThread();
            if (m_objVision7Process != null) m_objVision7Process.StopThread();
        }

        public void PauseThread()
        {
            if (m_objVision1Process != null) m_objVision1Process.PauseThread();
            if (m_objVision2Process != null) m_objVision2Process.PauseThread();
            if (m_objVision3Process != null) m_objVision3Process.PauseThread();
            if (m_objVision3Lead3DProcess != null) m_objVision3Lead3DProcess.PauseThread();
            if (m_objVision4Process != null) m_objVision4Process.PauseThread();
            if (m_objVision6Process != null) m_objVision6Process.PauseThread();
            if (m_objVision7Process != null) m_objVision7Process.PauseThread();

            timer_Live.Stop();
        }

        public void StartThread()
        {
            m_Graphic = Graphics.FromHwnd(pic_Image.Handle);
            m_Graphic1 = Graphics.FromHwnd(pic_Image1.Handle);
            m_Graphic2 = Graphics.FromHwnd(pic_Image2.Handle);
            m_Graphic3 = Graphics.FromHwnd(pic_Image3.Handle);
            m_Graphic4 = Graphics.FromHwnd(pic_Image4.Handle);

            if (m_objVision1Process != null) m_objVision1Process.StartThread();
            if (m_objVision2Process != null) m_objVision2Process.StartThread();
            if (m_objVision3Process != null) m_objVision3Process.StartThread();
            if (m_objVision3Lead3DProcess != null) m_objVision3Lead3DProcess.StartThread();
            if (m_objVision4Process != null) m_objVision4Process.StartThread();
            if (m_objVision6Process != null) m_objVision6Process.StartThread();
            if (m_objVision7Process != null) m_objVision7Process.StartThread();

            //timer_Live.Start();
        }

        private void ClearDragHandle(List<List<CROI>> arrROIs)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs.Count; j++)
                {
                    CROI objROI = arrROIs[i][j];
                    if (objROI.GetROIHandle())
                    {
                        // Hit Test - Detects if the cursor is placed over one of the dragging handles
                        objROI.ClearDragHandle();
                        arrROIs[i][j] = objROI;
                        break;
                    }
                }
            }
        }

        private void ClearDragHandle(List<List<List<ROI>>> arrROIs)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                ClearDragHandle(arrROIs[i]);
            }
        }

        private void ClearDragHandle(List<List<ROI>> arrROIs)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                ClearDragHandle(arrROIs[i]);
            }
        }

        private void ClearDragHandle(List<ROI> arrROIs)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                ROI objROI = arrROIs[i];
                if (objROI.GetROIHandle())
                {
                    // Hit Test - Detects if the cursor is placed over one of the dragging handles
                    objROI.ClearDragHandle();
                    arrROIs[i] = objROI;
                    break;
                }
            }
        }

        /// <summary>
        /// Customize the layout of particular vision station GUI
        /// </summary>
        public void CustomizeGUI()
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "MOLi":
                case "Package":
                    if (m_objVisionGRRPage == null)
                    {
                        m_objVisionGRRPage = new VisionGRRPage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVisionGRRPage.TopLevel = false;
                    }
                    if (m_objVision1Page == null)
                    {
                        m_objVision1Page = new Vision1Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision1Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision1Page);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision1Page.DisableField();
                        m_objVision1Page.LoadTemplateImage();
                        m_objVision1Page.CustomizeGUI();
                    }
                    break;
                case "UnitPresent":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    if (m_objVision2Page == null)
                    {
                        m_objVision2Page = new Vision2Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision2Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision2Page);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision2Page.LoadTemplateImage();
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_objVisionGRRPage == null)
                    {
                        m_objVisionGRRPage = new VisionGRRPage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVisionGRRPage.TopLevel = false;
                    }
                    if (m_objVision3Page == null)
                    {
                        m_objVision3Page = new Vision3Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision3Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision3Page);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision3Page.DisableField();
                        m_objVision3Page.LoadTemplateImage();
                        m_objVision3Page.CustomizeGUI();
                    }
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_objVisionGRRPage == null)
                    {
                        m_objVisionGRRPage = new VisionGRRPage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVisionGRRPage.TopLevel = false;
                    }
                    if (m_objVision3Lead3DPage == null)
                    {
                        m_objVision3Lead3DPage = new Vision3Lead3DPage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision3Lead3DPage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision3Lead3DPage);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision3Lead3DPage.DisableField();
                        m_objVision3Lead3DPage.LoadTemplateImage();
                        m_objVision3Lead3DPage.CustomizeGUI();
                    }
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    if (m_objVisionGRRPage == null)
                    {
                        m_objVisionGRRPage = new VisionGRRPage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVisionGRRPage.TopLevel = false;
                    }
                    if (m_objVision4Page == null)
                    {
                        m_objVision4Page = new Vision4Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision4Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision4Page);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision4Page.DisableField();
                        m_objVision4Page.LoadTemplateImage();
                        m_objVision4Page.CustomizeGUI();
                    }
                    break;
                case "Seal":
                    if (m_objVision6Page == null)
                    {
                        m_objVision6Page = new Vision6Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision6Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision6Page);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        m_objVision6Page.DisableField();
                        m_objVision6Page.LoadTemplateImage();
                    }
                    break;
                case "Barcode":
                    if (m_objVision7Page == null)
                    {
                        m_objVision7Page = new Vision7Page(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo);
                        m_objVision7Page.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision7Page);
                        pnl_Production.Controls[0].Show();
                    }
                    else
                    {
                        //m_objVision7Page.DisableField();
                        m_objVision7Page.LoadTemplateImage();
                    }
                    break;
                default:
                    SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            btn_SystemCalibration.Visible = false;

            btn_Recipe.Visible = btn_Recipe.Enabled;
            btn_RecipeLearn.Visible = btn_RecipeLearn.Enabled;
            btn_LearnPocketPosition.Visible = btn_LearnPocketPosition.Enabled && m_smVisionInfo.g_blnWantCheckPocketPosition;
            btn_LearnEmptyUnit.Visible = btn_LearnEmptyUnit.Enabled && m_smVisionInfo.g_blnWantCheckEmpty;
            btn_LearnPH.Visible = btn_LearnPH.Enabled && m_smVisionInfo.g_blnWantCheckPH;
            btn_LearnReferenceImage.Visible = false;
            btn_LearnSealMark.Visible = false;
            btn_LearnSealEmpty.Visible = false;
            btn_Gauge.Visible = false;
            btn_AdvanceSetting.Visible = false;
            btn_OtherSetting.Visible = false;
            btn_LearnOCR.Visible = false;

            btn_TolerancePackage.Visible = false;
            btn_Tolerance.Visible = btn_Tolerance.Enabled;

            btn_Options.Visible = btn_Options.Enabled;

            btn_ManualTest.Visible = btn_ManualTest.Enabled;

            if ((m_smCustomizeInfo.g_intWantBarcode & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Barcode");
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
                btn_OtherSetting.Visible = false;// btn_OtherSetting.Enabled;
                btn_Options.Visible = false;
                btn_LearnReferenceImage.Visible = true;
            }

            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Mark");
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;

                if ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_blnUseOCR || m_smVisionInfo.g_blnUseOCRandOCV))
                    btn_LearnOCR.Visible = true;
            }

            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");

                if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                    btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Orient");

                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) == 1 && !m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                {
                    btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
                    btn_OtherSetting.Visible = false;
                }

                if (m_smVisionInfo.g_strVisionName.Contains("BottomPosition") || m_smVisionInfo.g_strVisionName.Contains("BottomOrient"))
                {
                    if (m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                        btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Position");

                    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        if (m_smVisionInfo.g_blnOrientWantPackage)
                        {
                            btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled = true;
                            btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = true;
                        }
                        else
                        {
                            btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled = true;
                            btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = false;
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_strVisionName.Contains("BottomOrient"))
                            btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled = true;
                        else
                            btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled = false;
                    }

                    btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
                    btn_OtherSetting.Visible = false;
                    btn_PkgOtherSetting.Visible = false;
                    btn_PkgAdvanceSetting.Visible = false;
                }
                else
                    btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
            }

            if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;

                btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Pad");
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tol Pad");
                btn_TolerancePackage.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;
                btn_TolerancePackage.Visible = true; // 2020-08-17 ZJYEOH : btn_TolerancePackage always Visible for pad because need set tolerance for position
            }

            if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;

                btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Lead3D");
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tol. Lead");
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;
                btn_Tolerance.Visible = btn_Tolerance.Enabled;
                btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled; // 2020-07-28 ZJYEOH : To Set Position Tolerance
            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_PackageSetUp.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Package");
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "Li3DPkg":
                    case "Package":
                    case "PadPkgPos":
                    case "PadPkg":
                    case "Pad5SPkg":
                    case "Pad5SPkgPos":
                        btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled;
                        btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled;
                        break;
                    default:
                        btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
                        break;

                }
            }
            else
                btn_PackageSetUp.Visible = false;

            if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "UnitPresent":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":
                        btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
                        btn_Recipe.Visible = false;
                        break;
                    case "PadPkgPos":
                        btn_Position.Visible = false;
                        break;
                }
            }
            else btn_Position.Visible = false;

            if ((m_smCustomizeInfo.g_intWantCheckPresent & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;
                btn_Options.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantSeal & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
                btn_Recipe.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Seal");
                btn_Tolerance.Text = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, "Tolerance");
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled;
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled;
                btn_LearnSealMark.Visible = btn_LearnSealMark.Enabled;
                btn_LearnSealEmpty.Visible = btn_LearnSealEmpty.Enabled;
            }

            if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Lead.Visible = btn_Lead.Enabled;
                btn_ToleranceLead.Visible = btn_ToleranceLead.Enabled;
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled;
            }
            else
            {
                btn_Lead.Visible = false;
                btn_ToleranceLead.Visible = false;
            }
        }

        public void CustomizeButtonGUI()
        {
            if (m_smVisionInfo.VM_AT_SettingInDialog)
                return;

            if (btn_ToleranceReference.Visible != (m_smVisionInfo.g_strVisionName == "PadPkg" || m_smVisionInfo.g_strVisionName == "Pad5SPkg"))
                btn_ToleranceReference.Visible = (m_smVisionInfo.g_strVisionName == "PadPkg" || m_smVisionInfo.g_strVisionName == "Pad5SPkg");

            if (btn_RecipeVerification.Visible != m_smProductionInfo.g_blnWantRecipeVerification)
                btn_RecipeVerification.Visible = m_smProductionInfo.g_blnWantRecipeVerification;

            if (menuItem_ViewPocketPositionResult.Visible != m_smVisionInfo.g_blnWantCheckPocketPosition)
                menuItem_ViewPocketPositionResult.Visible = m_smVisionInfo.g_blnWantCheckPocketPosition;

            if (btn_LearnPocketPosition.Visible != m_smVisionInfo.g_blnWantCheckPocketPosition)
                btn_LearnPocketPosition.Visible = m_smVisionInfo.g_blnWantCheckPocketPosition;

            if (btn_LearnEmptyUnit.Visible != m_smVisionInfo.g_blnWantCheckEmpty)
                btn_LearnEmptyUnit.Visible = m_smVisionInfo.g_blnWantCheckEmpty;

            if (btn_LearnPH.Visible != m_smVisionInfo.g_blnWantCheckPH)
                btn_LearnPH.Visible = m_smVisionInfo.g_blnWantCheckPH;

            if (btn_LearnOCR.Visible != ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_blnUseOCR || m_smVisionInfo.g_blnUseOCRandOCV)))
                btn_LearnOCR.Visible = ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_blnUseOCR || m_smVisionInfo.g_blnUseOCRandOCV));

            if (m_smVisionInfo.g_strVisionName == "BottomOrientPad" || m_smVisionInfo.g_strVisionName == "BottomOPadPkg")
            {
                if (!btn_LearnPadOrient.Visible)
                    btn_LearnPadOrient.Visible = true;
                
                if (btn_RecipeLearn.Text != "Learn Pad")
                    btn_RecipeLearn.Text = "Learn Pad";

            }
            else
            {
                if (btn_LearnPadOrient.Visible)
                    btn_LearnPadOrient.Visible = false;

            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_strVisionName.Contains("BottomPosition") || m_smVisionInfo.g_strVisionName.Contains("BottomOrient")))
            {
                if (m_smVisionInfo.g_blnOrientWantPackage)
                    btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = true;
                else
                    btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = false;
            }

            if (((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_strVisionName.Contains("Pad"))
            {
                if (!btn_LearnPadColor.Visible)
                    btn_LearnPadColor.Visible = true;
            }
            else
            {
                if (btn_LearnPadColor.Visible)
                    btn_LearnPadColor.Visible = false;
            }

            if (((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && !m_smVisionInfo.g_strVisionName.Contains("Pad"))
            {
                if (!btn_LearnPackageColor.Visible)
                    btn_LearnPackageColor.Visible = true;
            }
            else
            {
                if (btn_LearnPackageColor.Visible)
                    btn_LearnPackageColor.Visible = false;
            }

            if (m_smVisionInfo.g_strVisionName == "Barcode")
            {
                if (btn_Yield.Visible)
                    btn_Yield.Visible = false;


                if (m_smVisionInfo.g_objBarcode != null)
                    if (btn_LearnReferenceImage.Visible != m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage)
                        btn_LearnReferenceImage.Visible = m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage;
            }

            if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (btn_LearnLeadPocketDontCareAreaFix.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead)
                    btn_LearnLeadPocketDontCareAreaFix.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead;

                if (btn_LearnLeadPocketDontCareAreaManual.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead)
                    btn_LearnLeadPocketDontCareAreaManual.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead;

                if (btn_LearnLeadPocketDontCareAreaAuto.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead)
                    btn_LearnLeadPocketDontCareAreaAuto.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead;

                if (btn_LearnLeadPocketDontCareAreaBlob.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead)
                    btn_LearnLeadPocketDontCareAreaBlob.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead;
            }
            else
            {
                if (btn_LearnLeadPocketDontCareAreaFix.Visible != false)
                    btn_LearnLeadPocketDontCareAreaFix.Visible = false;

                if (btn_LearnLeadPocketDontCareAreaManual.Visible != false)
                    btn_LearnLeadPocketDontCareAreaManual.Visible = false;

                if (btn_LearnLeadPocketDontCareAreaAuto.Visible != false)
                    btn_LearnLeadPocketDontCareAreaAuto.Visible = false;

                if (btn_LearnLeadPocketDontCareAreaBlob.Visible != false)
                    btn_LearnLeadPocketDontCareAreaBlob.Visible = false;
            }
            
            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (!btn_SearchROI.Visible)
                    btn_SearchROI.Visible = true;

                if (m_smVisionInfo.g_intTotalTemplates > 0)
                {
                    if (!btn_MarkROI.Visible)
                        btn_MarkROI.Visible = true;

                    if (!btn_MarkSegmentation.Visible)
                        btn_MarkSegmentation.Visible = true;

                    if (!btn_CharROI.Visible)
                        btn_CharROI.Visible = true;

                    if (btn_DontCareROI.Visible != m_smVisionInfo.g_blnWantDontCareArea_Mark)
                        btn_DontCareROI.Visible = m_smVisionInfo.g_blnWantDontCareArea_Mark;

                    if (m_smVisionInfo.g_strVisionName.Contains("InPocket") || m_smVisionInfo.g_strVisionName.Contains("IPM"))
                    {
                        if (!btn_UnitPRROI.Visible)
                            btn_UnitPRROI.Visible = true;
                    }
                }
                else
                {
                    if (btn_MarkROI.Visible)
                        btn_MarkROI.Visible = false;

                    if (btn_CharROI.Visible)
                        btn_CharROI.Visible = false;

                    if (btn_DontCareROI.Visible)
                        btn_DontCareROI.Visible = false;

                    if (m_smVisionInfo.g_strVisionName.Contains("InPocket") || m_smVisionInfo.g_strVisionName.Contains("IPM"))
                    {
                        if (btn_UnitPRROI.Visible)
                            btn_UnitPRROI.Visible = false;
                    }
                }

                if (btn_GaugeROI.Visible != m_smVisionInfo.g_blnWantGauge)
                    btn_GaugeROI.Visible = m_smVisionInfo.g_blnWantGauge;
                
            }

            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (!btn_SearchROI.Visible)
                    btn_SearchROI.Visible = true;

                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) == 1)
                {
                    //btn_SearchROI.Visible = true;

                    if (m_smVisionInfo.g_intTotalTemplates > 0)
                    {
                        if (!btn_OrientationROI.Visible)
                            btn_OrientationROI.Visible = true;

                        if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                            btn_OrientationROI.Text = "Unit ROI";
                    }
                    else
                    {
                        if (btn_OrientationROI.Visible)
                            btn_OrientationROI.Visible = false;
                    }
                }

                if (((m_smCustomizeInfo.g_intWantOrient0Deg & (1 << m_smVisionInfo.g_intVisionPos)) == 0) && (!m_smVisionInfo.g_strVisionName.Contains("InPocket") && !m_smVisionInfo.g_strVisionName.Contains("IPM")))
                {
                    //btn_SearchROI.Visible = true;
                    if (m_smVisionInfo.g_intTotalTemplates > 0)
                    {
                        if (!btn_OrientationROI.Visible)
                            btn_OrientationROI.Visible = true;
                    }
                    else
                    {
                        if (btn_OrientationROI.Visible)
                            btn_OrientationROI.Visible = false;
                    }
                }

                if (m_smVisionInfo.g_arrPin1 != null)
                {
                    if (m_smVisionInfo.g_intTotalTemplates > 0)
                    {
                        if (m_smVisionInfo.g_arrPin1.Count >= m_smVisionInfo.g_intUnitsOnImage)
                        {
                            if (btn_Pin1ROI.Visible != m_smVisionInfo.g_blnWantPin1)
                                btn_Pin1ROI.Visible = m_smVisionInfo.g_blnWantPin1;
                        }
                    }
                    else
                    {
                        if (btn_Pin1ROI.Visible)
                            btn_Pin1ROI.Visible = false;
                    }
                }
                else
                {
                    if (btn_Pin1ROI.Visible)
                        btn_Pin1ROI.Visible = false;
                }

            }
            if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (!btn_SearchROI.Visible)
                    btn_SearchROI.Visible = true;

                if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 1)
                {
                    if (!btn_GaugeROI.Visible)
                        btn_GaugeROI.Visible = true;
                }
                else
                {
                    if (btn_GaugeROI.Visible)
                        btn_GaugeROI.Visible = false;
                }

                if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 2)
                {
                    if (!btn_PadROI.Visible)
                        btn_PadROI.Visible = true;
                }
                else
                {
                    if (btn_PadROI.Visible)
                        btn_PadROI.Visible = false;
                }

                if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 2)
                {
                    if (btn_DontCareROI.Visible != m_smVisionInfo.g_blnWantDontCareArea_Pad)
                        btn_DontCareROI.Visible = m_smVisionInfo.g_blnWantDontCareArea_Pad;
                }
                else
                {
                    if (btn_DontCareROI.Visible)
                        btn_DontCareROI.Visible = false;
                }

                if (m_smVisionInfo.g_arrPin1 != null)
                {
                    if (m_smVisionInfo.g_arrPin1.Count > 0)
                    {
                        if (btn_Pin1ROI.Visible != m_smVisionInfo.g_blnWantPin1)
                            btn_Pin1ROI.Visible = m_smVisionInfo.g_blnWantPin1;
                    }
                    else
                    {
                        if (btn_Pin1ROI.Visible)
                            btn_Pin1ROI.Visible = false;
                    }
                }
                else
                {
                    if (btn_Pin1ROI.Visible)
                        btn_Pin1ROI.Visible = false;
                }

                if (!btn_IdentifyPad.Visible)
                {
                    int BlobCount = 0;
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        //if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                        //    continue;

                        BlobCount = m_smVisionInfo.g_arrPad[i].GetBlobsFeaturesNumber();
                        if (BlobCount > 0)
                        {
                            btn_IdentifyPad.Visible = true;
                            break;
                        }
                    }
                }

                if (!btn_IdentifyPitchGap.Visible)
                {
                    int PitchGapCount = 0;
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        //if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                        //    continue;

                        PitchGapCount = m_smVisionInfo.g_arrPad[i].GetTotalPitchGap();
                        if (PitchGapCount > 0)
                        {
                            btn_IdentifyPitchGap.Visible = true;
                            break;
                        }
                    }
                }

            }
            if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {

            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "Li3DPkg":
                    case "BottomPosition":
                    case "BottomOrient":
                        break;
                    case "Package":
                    case "PadPkgPos":
                    case "PadPkg":
                    case "Pad5SPkg":
                    case "Pad5SPkgPos":

                        if (!btn_PackageSizeGaugeROI.Visible)
                            btn_PackageSizeGaugeROI.Visible = true;

                        if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 1)
                        {
                            if (!btn_PackageROITolerance.Visible)
                                btn_PackageROITolerance.Visible = true;
                        }
                        else
                        {
                            if (btn_PackageROITolerance.Visible)
                                btn_PackageROITolerance.Visible = false;
                        }

                        if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 1)
                        {
                            if (btn_PackageDontCareROI.Visible != m_smVisionInfo.g_blnWantDontCareArea_Package)
                                btn_PackageDontCareROI.Visible = m_smVisionInfo.g_blnWantDontCareArea_Package;
                        }
                        else
                        {
                            if (btn_PackageDontCareROI.Visible)
                                btn_PackageDontCareROI.Visible = false;
                        }

                        if (m_smVisionInfo.g_arrPadROIs.Count > 0 && m_smVisionInfo.g_arrPadROIs[0].Count > 1)
                        {
                            if (btn_PackageChippedOffROITolerance.Visible != m_smVisionInfo.g_arrPad[0].ref_blnSeperateChippedOffDefectSetting)
                                btn_PackageChippedOffROITolerance.Visible = m_smVisionInfo.g_arrPad[0].ref_blnSeperateChippedOffDefectSetting;

                            if (btn_PackageMoldFlashROITolerance.Visible != m_smVisionInfo.g_arrPad[0].ref_blnSeperateMoldFlashDefectSetting)
                                btn_PackageMoldFlashROITolerance.Visible = m_smVisionInfo.g_arrPad[0].ref_blnSeperateMoldFlashDefectSetting;
                        }
                        else
                        {
                            if (btn_PackageChippedOffROITolerance.Visible)
                                btn_PackageChippedOffROITolerance.Visible = false;

                            if (btn_PackageMoldFlashROITolerance.Visible)
                                btn_PackageMoldFlashROITolerance.Visible = false;
                        }

                        break;
                    default:

                        if (m_smVisionInfo.g_arrOrientROIs.Count > 0)
                        {
                            if (!btn_PackageSizeGaugeROI.Visible)
                                btn_PackageSizeGaugeROI.Visible = true;
                        }
                        else
                        {
                            if (btn_PackageSizeGaugeROI.Visible)
                                btn_PackageSizeGaugeROI.Visible = false;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs.Count > 0)
                        {
                            if (btn_PackageDirectLightGaugeROI.Visible != !m_smVisionInfo.g_blnWantUseSideLightGauge)
                                btn_PackageDirectLightGaugeROI.Visible = !m_smVisionInfo.g_blnWantUseSideLightGauge;
                        }
                        else
                        {
                            if (btn_PackageDirectLightGaugeROI.Visible)
                                btn_PackageDirectLightGaugeROI.Visible = false;
                        }

                        if (m_smVisionInfo.g_arrPackageROIs.Count > 0)
                        {
                            if (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit].Count > 0)
                            {
                                if (!btn_PackageROITolerance.Visible)
                                    btn_PackageROITolerance.Visible = true;

                                if (btn_PackageChippedOffROITolerance.Visible != m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateChippedOffDefectSetting)
                                    btn_PackageChippedOffROITolerance.Visible = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateChippedOffDefectSetting;

                                if (btn_PackageMoldFlashROITolerance.Visible != m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateMoldFlashDefectSetting)
                                    btn_PackageMoldFlashROITolerance.Visible = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateMoldFlashDefectSetting;

                                if (btn_PackageDarkField2ROITolerance.Visible != m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateDarkField2DefectSetting)
                                    btn_PackageDarkField2ROITolerance.Visible = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateDarkField2DefectSetting;
                            }
                            else
                            {
                                if (btn_PackageROITolerance.Visible)
                                    btn_PackageROITolerance.Visible = false;

                                if (btn_PackageChippedOffROITolerance.Visible)
                                    btn_PackageChippedOffROITolerance.Visible = false;

                                if (btn_PackageMoldFlashROITolerance.Visible)
                                    btn_PackageMoldFlashROITolerance.Visible = false;

                                if (btn_PackageDarkField2ROITolerance.Visible)
                                    btn_PackageDarkField2ROITolerance.Visible = false;
                            }


                            if (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit].Count > 1)
                            {
                                if (btn_PackageDontCareROI.Visible != m_smVisionInfo.g_blnWantDontCareArea_Package)
                                    btn_PackageDontCareROI.Visible = m_smVisionInfo.g_blnWantDontCareArea_Package;
                            }
                            else
                            {
                                if (btn_PackageDontCareROI.Visible)
                                    btn_PackageDontCareROI.Visible = false;
                            }
                        }
                        else
                        {
                            if (btn_PackageROITolerance.Visible)
                                btn_PackageROITolerance.Visible = false;

                            if (btn_PackageChippedOffROITolerance.Visible)
                                btn_PackageChippedOffROITolerance.Visible = false;

                            if (btn_PackageMoldFlashROITolerance.Visible)
                                btn_PackageMoldFlashROITolerance.Visible = false;

                            if (btn_PackageDarkField2ROITolerance.Visible)
                                btn_PackageDarkField2ROITolerance.Visible = false;

                            if (btn_PackageDontCareROI.Visible)
                                btn_PackageDontCareROI.Visible = false;
                        }

                        break;
                }
            }


            if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "UnitPresent":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":

                        break;
                    case "PadPkgPos":

                        break;
                }
            }


            if ((m_smCustomizeInfo.g_intWantCheckPresent & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {

            }

            if ((m_smCustomizeInfo.g_intWantSeal & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (!btn_PositionSearchROI.Visible)
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 0)
                    //    if (m_smVisionInfo.g_arrSealROIs[0].Count > 0)
                    btn_PositionSearchROI.Visible = true;

                if (m_smVisionInfo.g_arrSealROIs.Count > 0)
                {
                    if (m_smVisionInfo.g_arrSealROIs[0].Count > 1)
                    {
                        if (!btn_PositionPatternROI.Visible)
                            btn_PositionPatternROI.Visible = true;
                    }
                    else
                    {
                        if (btn_PositionPatternROI.Visible)
                            btn_PositionPatternROI.Visible = false;
                    }
                }
                else
                {
                    if (btn_PositionPatternROI.Visible)
                        btn_PositionPatternROI.Visible = false;
                }

                if (!btn_SealROI.Visible)
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 1)
                    //    if (m_smVisionInfo.g_arrSealROIs[1].Count > 0)
                    btn_SealROI.Visible = true;

                if (m_smVisionInfo.g_arrSealROIs.Count > 1)
                {
                    if (m_smVisionInfo.g_arrSealROIs[1].Count > 0)
                    {
                        if (!btn_Segmentation.Visible)
                            btn_Segmentation.Visible = true;
                    }
                    else
                    {
                        if (btn_Segmentation.Visible)
                            btn_Segmentation.Visible = false;
                    }
                }
                else
                {
                    if (btn_Segmentation.Visible)
                        btn_Segmentation.Visible = false;
                }

                if (!btn_DistanceROI.Visible)
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 3)
                    //    if (m_smVisionInfo.g_arrSealROIs[3].Count > 0)
                    btn_DistanceROI.Visible = true;

                if (btn_CircleGaugeROI.Visible != (!m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHole || !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect || !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness))
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 6)
                    //    if (m_smVisionInfo.g_arrSealROIs[6].Count > 0)
                    btn_CircleGaugeROI.Visible = (!m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHole || !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect || !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness);

                if (btn_SealSprocketHoleDefect.Visible != !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect)
                    btn_SealSprocketHoleDefect.Visible = !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect;

                if (btn_SealSprocketHoleBroken.Visible != !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness)
                    btn_SealSprocketHoleBroken.Visible = !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness;

                if (btn_SealSprocketHoleRoundness.Visible != !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness)
                    btn_SealSprocketHoleRoundness.Visible = !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness;

                if (btn_SealEdgeStraightness.Visible != m_smVisionInfo.g_objSeal.ref_blnWantCheckSealEdgeStraightness)
                    btn_SealEdgeStraightness.Visible = m_smVisionInfo.g_objSeal.ref_blnWantCheckSealEdgeStraightness;

                if (!btn_OverHeatROI.Visible)
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 4)
                    //    if (m_smVisionInfo.g_arrSealROIs[4].Count > 0)
                    btn_OverHeatROI.Visible = true;

                if (!btn_TestROI.Visible)
                    //if (m_smVisionInfo.g_arrSealROIs.Count > 5)
                    //    if (m_smVisionInfo.g_arrSealROIs[5].Count > 0)
                    btn_TestROI.Visible = true;
            }
            
        }

        /// <summary>
        /// Separate 1 blob object into few blob objects
        /// </summary>
        /// <param name="objROI">ROI</param>
        /// <param name="blnCutMode">true = set black pixel, false = set white pixel</param>
        /// <param name="blnWhiteOnBlack">true = white on black, false = otherwise</param>
        /// <param name="pStartPoint">cut start point</param>
        /// <param name="pStopPoint">cut stop point</param>
        private void CutObject(ROI objROI, bool blnCutMode, bool blnWhiteOnBlack, Point pStartPoint, Point pStopPoint)
        {
            int intPositionPrev = 0;
            bool blnNegativeX = false;
            bool blnNegativeY = false;

            int intDistanceY = pStopPoint.Y - pStartPoint.Y;
            int intDistanceX = pStopPoint.X - pStartPoint.X;

            // c =  y - mx
            double dFormulaM = 0.00;
            if (intDistanceX != 0)
                dFormulaM = intDistanceY / Convert.ToDouble(intDistanceX);
            double dFormulaC = pStopPoint.Y - (dFormulaM * pStopPoint.X);

            if (intDistanceY < 0)
            {
                blnNegativeY = true;
                intDistanceY = -intDistanceY;
            }
            if (intDistanceX < 0)
            {
                blnNegativeX = true;
                intDistanceX = -intDistanceX;
            }

            int intPositionY = pStopPoint.Y, intPositionX = pStopPoint.X;
            int intIncrease = 0;
            // ------------------- checking loop timeout ---------------------------------------------------
            HiPerfTimer timeout = new HiPerfTimer();
            timeout.Start();

            do
            {
                // ------------------- checking loop timeout ---------------------------------------------------
                if (timeout.Timing > 10000)
                {
                    STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1007");
                    break;
                }
                // ---------------------------------------------------------------------------------------------

                if (m_smVisionInfo.g_blnViewRotatedImage)
                {
                    m_smVisionInfo.g_arrRotatedImages[0].DrawLine(blnCutMode, blnWhiteOnBlack,
                        intPositionX, intPositionY);
                }
                else
                {
                    m_smVisionInfo.g_arrImages[0].DrawLine(blnCutMode, blnWhiteOnBlack, intPositionX, intPositionY);
                }

                intIncrease++;
                if (intDistanceY > intDistanceX)
                {
                    if (intPositionY == pStartPoint.Y)
                        break;
                    if (blnNegativeY)
                        intPositionY = pStopPoint.Y + intIncrease;
                    else
                        intPositionY = pStopPoint.Y - intIncrease;

                    // x = (y - c) / m
                    if (dFormulaM != 0)
                        intPositionX = Convert.ToInt32((intPositionY - dFormulaC) / dFormulaM);
                    //Due to pixel connexity, neighboring pixels are considered to belong to the same objects need to be broken
                    if (intPositionPrev == 0)
                        intPositionPrev = intPositionX;
                    else if (intPositionPrev != intPositionX)
                    {
                        m_smVisionInfo.g_arrRotatedImages[0].DrawLine(blnCutMode, blnWhiteOnBlack,
                            intPositionPrev, intPositionY);
                        intPositionPrev = intPositionX;
                    }
                }
                else if (intDistanceY < intDistanceX)
                {
                    if (intPositionX == pStartPoint.X)
                        break;

                    if (blnNegativeX)
                        intPositionX = pStopPoint.X + intIncrease;
                    else
                        intPositionX = pStopPoint.X - intIncrease;

                    // y = mx + c
                    intPositionY = Convert.ToInt32((dFormulaM * intPositionX) + dFormulaC);
                    //Due to pixel connexity, neighboring pixels are considered to belong to the same objects need to be broken
                    if (intPositionPrev == 0)
                        intPositionPrev = intPositionY;
                    else if (intPositionPrev != intPositionY)
                    {
                        m_smVisionInfo.g_arrRotatedImages[0].DrawLine(blnCutMode, blnWhiteOnBlack,
                            intPositionX, intPositionPrev);
                        intPositionPrev = intPositionY;
                    }
                }
                else
                    break;

            } while (true);
            timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------

            if (m_smVisionInfo.g_blnViewRotatedImage)
                objROI.AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
            else
                objROI.AttachImage(m_smVisionInfo.g_arrImages[0]);
        }

        private void DefineResolutionSize()
        {
            if (m_smVisionInfo.g_strCameraModel == "IDS")
            {
                pnl_PictureBox.MinimumSize = new Size(10, 10);
                pnl_PictureBox.MaximumSize = new Size(640, 480);
                pnl_PictureBox.Size = new Size(640, 480);
            }
        }

        private void SetScaleToComponents(bool blnFirstTime, bool blnScaleToPictureBox, bool blnScaleToPictureBox2)
        {
            if (blnFirstTime)
            {
                if ((float)m_smVisionInfo.g_intCameraResolutionHeight / (float)m_smVisionInfo.g_intCameraResolutionWidth != 0.75)
                {
                    if ((float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth >= (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight)
                    {
                        m_smVisionInfo.g_fScaleX = m_fOriScaleX = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                        m_smVisionInfo.g_fScaleY = m_fOriScaleY = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;

                        pnl_PicSideBlock.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                        pnl_PicSideBlock.Width = (int)(pnl_PictureBox.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                        pnl_PicSideBlock.Height = pnl_PictureBox.Size.Height;
                        pnl_PicSideBlock.BringToFront();
                    }
                    else
                    {
                        m_smVisionInfo.g_fScaleX = m_fOriScaleX = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                        m_smVisionInfo.g_fScaleY = m_fOriScaleY = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;

                        pnl_PicSideBlock.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                        pnl_PicSideBlock.Width = pnl_PictureBox.Size.Width;
                        pnl_PicSideBlock.Height = (int)(pnl_PictureBox.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                        pnl_PicSideBlock.BringToFront();
                    }
                }
                else
                {
                    m_smVisionInfo.g_fScaleX = m_fOriScaleX = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                    m_smVisionInfo.g_fScaleY = m_fOriScaleY = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                }
            }

            if (blnScaleToPictureBox)
            {
                if ((float)m_smVisionInfo.g_intCameraResolutionHeight / (float)m_smVisionInfo.g_intCameraResolutionWidth != 0.75)
                {
                    if ((float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth >= (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight)
                    {
                        m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                        m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;

                        pnl_PicSideBlock.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                        pnl_PicSideBlock.Width = (int)(pnl_PictureBox.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                        pnl_PicSideBlock.Height = pnl_PictureBox.Size.Height;
                        pnl_PicSideBlock.BringToFront();
                    }
                    else
                    {
                        m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                        m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;

                        pnl_PicSideBlock.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                        pnl_PicSideBlock.Width = pnl_PictureBox.Size.Width;
                        pnl_PicSideBlock.Height = (int)(pnl_PictureBox.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                        pnl_PicSideBlock.BringToFront();
                    }
                }
                else
                {
                    m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                    m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                }
            }

            if (blnScaleToPictureBox2)
            {
                if ((float)m_smVisionInfo.g_intCameraResolutionHeight / (float)m_smVisionInfo.g_intCameraResolutionWidth != 0.75)
                {
                    if ((float)pnl_PictureBox.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth >= (float)pnl_PictureBox.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight)
                    {
                        m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox2.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                        m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox2.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;

                        pnl_PicSideBlock1.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                        pnl_PicSideBlock1.Width = (int)(pnl_PictureBox2.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                        pnl_PicSideBlock1.Height = pnl_PictureBox2.Size.Height;
                        pnl_PicSideBlock1.BringToFront();

                        pnl_PicSideBlock2.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                        pnl_PicSideBlock2.Width = (int)(pnl_PictureBox2.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                        pnl_PicSideBlock2.Height = pnl_PictureBox2.Size.Height;
                        pnl_PicSideBlock2.BringToFront();

                        int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                        if (intViewImageCount > 2)
                        {
                            pnl_PicSideBlock3.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                            pnl_PicSideBlock3.Width = (int)(pnl_PictureBox2.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                            pnl_PicSideBlock3.Height = pnl_PictureBox2.Size.Height;
                            pnl_PicSideBlock3.BringToFront();
                        }

                        if (intViewImageCount > 3)
                        {
                            pnl_PicSideBlock4.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                            pnl_PicSideBlock4.Width = (int)(pnl_PictureBox2.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                            pnl_PicSideBlock4.Height = pnl_PictureBox2.Size.Height;
                            pnl_PicSideBlock4.BringToFront();
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox2.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                        m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox2.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;

                        pnl_PicSideBlock1.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                        pnl_PicSideBlock1.Width = pnl_PictureBox2.Size.Width;
                        pnl_PicSideBlock1.Height = (int)(pnl_PictureBox2.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                        pnl_PicSideBlock1.BringToFront();

                        pnl_PicSideBlock2.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                        pnl_PicSideBlock2.Width = pnl_PictureBox2.Size.Width;
                        pnl_PicSideBlock2.Height = (int)(pnl_PictureBox2.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                        pnl_PicSideBlock2.BringToFront();

                        int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                        if (intViewImageCount > 2)
                        {
                            pnl_PicSideBlock3.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                            pnl_PicSideBlock3.Width = pnl_PictureBox2.Size.Width;
                            pnl_PicSideBlock3.Height = (int)(pnl_PictureBox2.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                            pnl_PicSideBlock3.BringToFront();
                        }

                        if (intViewImageCount > 3)
                        {
                            pnl_PicSideBlock4.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                            pnl_PicSideBlock4.Width = pnl_PictureBox2.Size.Width;
                            pnl_PicSideBlock4.Height = (int)(pnl_PictureBox2.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                            pnl_PicSideBlock4.BringToFront();
                        }
                    }
                }
                else
                {
                    m_smVisionInfo.g_fScaleX = (float)pnl_PictureBox2.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth;
                    m_smVisionInfo.g_fScaleY = (float)pnl_PictureBox2.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight;
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrMemoryImage.Count; i++)
            {
                if (m_smVisionInfo.g_arrMemoryImage[i] != null)
                {
                    m_smVisionInfo.g_arrMemoryImage[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                    m_smVisionInfo.g_arrMemoryImage[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrMemoryColorImage.Count; i++)
            {
                if (m_smVisionInfo.g_arrMemoryColorImage[i] != null)
                {
                    m_smVisionInfo.g_arrMemoryColorImage[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                    m_smVisionInfo.g_arrMemoryColorImage[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                }
            }

            if (m_smVisionInfo.g_objMemoryImage != null)
            {
                m_smVisionInfo.g_objMemoryImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_objMemoryImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_objMemoryColorImage != null)
            {
                m_smVisionInfo.g_objMemoryColorImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_objMemoryColorImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_ojRotateImage != null)
            {
                m_smVisionInfo.g_ojRotateImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_ojRotateImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_objPackageImage != null)
            {
                m_smVisionInfo.g_objPackageImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_objPackageImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_objPkgProcessImage != null)
            {
                m_smVisionInfo.g_objPkgProcessImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_objPkgProcessImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_objSealImage != null)
            {
                m_smVisionInfo.g_objSealImage.ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                m_smVisionInfo.g_objSealImage.ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
            }

            if (m_smVisionInfo.g_arrImages != null)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                {
                    if (m_smVisionInfo.g_arrImages[i] != null)
                    {
                        m_smVisionInfo.g_arrImages[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                        m_smVisionInfo.g_arrImages[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                    }
                }
            }

            if (m_smVisionInfo.g_arrRotatedImages != null)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrRotatedImages.Count; i++)
                {
                    if (m_smVisionInfo.g_arrRotatedImages[i] != null)
                    {
                        m_smVisionInfo.g_arrRotatedImages[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                        m_smVisionInfo.g_arrRotatedImages[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                    }
                }
            }

            if (m_smVisionInfo.g_arrColorImages != null)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrColorImages.Count; i++)
                {
                    if (m_smVisionInfo.g_arrColorImages[i] != null)
                    {
                        m_smVisionInfo.g_arrColorImages[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                        m_smVisionInfo.g_arrColorImages[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                    }
                }
            }

            if (m_smVisionInfo.g_arrColorRotatedImages != null)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrColorRotatedImages.Count; i++)
                {
                    if (m_smVisionInfo.g_arrColorRotatedImages[i] != null)
                    {
                        m_smVisionInfo.g_arrColorRotatedImages[i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                        m_smVisionInfo.g_arrColorRotatedImages[i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                    }
                }
            }

            for (int h = 0; h < m_smVisionInfo.g_arr5SRotatedImages.Length; h++)
            {
                if (m_smVisionInfo.g_arr5SRotatedImages[h] != null)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arr5SRotatedImages[h].Count; i++)
                    {
                        if (m_smVisionInfo.g_arr5SRotatedImages[h][i] != null)
                        {
                            m_smVisionInfo.g_arr5SRotatedImages[h][i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                            m_smVisionInfo.g_arr5SRotatedImages[h][i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                        }
                    }
                }
            }

            for (int h = 0; h < m_smVisionInfo.g_arr5SColorRotatedImages.Length; h++)
            {
                if (m_smVisionInfo.g_arr5SColorRotatedImages[h] != null)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arr5SColorRotatedImages[h].Count; i++)
                    {
                        if (m_smVisionInfo.g_arr5SColorRotatedImages[h][i] != null)
                        {
                            m_smVisionInfo.g_arr5SColorRotatedImages[h][i].ref_fDrawingScaleX = m_smVisionInfo.g_fScaleX;
                            m_smVisionInfo.g_arr5SColorRotatedImages[h][i].ref_fDrawingScaleY = m_smVisionInfo.g_fScaleY;
                        }
                    }
                }
            }

            if (m_smVisionInfo.g_WorldShape != null)
                m_smVisionInfo.g_WorldShape.SetZoom(m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
        }

        private void SetMultipleImageViewGUI()
        {
            if (m_blnMultipleImageView)
            {
                lst_ErrorMessage.Visible = false;

                Rectangle objScreenRect = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                panel_Left.Size = new Size(objScreenRect.Width - 6 - 64, objScreenRect.Height - 193);
                panel_Left.BringToFront();
                pnl_PictureBox.SendToBack();
                pnl_PictureBox1.Size = new Size(380, 285);
                pnl_PictureBox2.Size = new Size(380, 285);
                pnl_PictureBox3.Size = new Size(380, 285);
                pnl_PictureBox4.Size = new Size(380, 285);
                pic_Image1.Size = new Size(380, 285);
                pic_Image2.Size = new Size(380, 285);
                pic_Image3.Size = new Size(380, 285);
                pic_Image4.Size = new Size(380, 285);
                pnl_PictureBox2.Location = new Point(380, 0);
                pnl_PictureBox3.Location = new Point(0, 286);
                pnl_PictureBox4.Location = new Point(380, 286);
                pnl_PictureBox.Visible = false;

                int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                // 2022 01 06 - CCENG: Current GUI design allow 3 image view only.
                if (intViewImageCount >= 4)
                    intViewImageCount = 3; 

                if (intViewImageCount < 4)
                {
                    switch (intViewImageCount)
                    {
                        case 2:
                            pnl_PictureBox3.Controls.Add(pnl_Production2);
                            pnl_Production2.BringToFront();
                            pnl_Production2.Location = new Point(0, 0);
                            break;
                        case 3:
                            pnl_PictureBox4.Controls.Add(pnl_Production2);
                            pnl_Production2.BringToFront();
                            pnl_Production2.Location = new Point(0, 0);
                            break;
                    }

                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLiPkg":
                        case "MOLi":
                        case "Package":
                            m_objVision1Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision1Page);
                            pnl_Production2.Controls.Add(m_objVisionGRRPage);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "UnitPresent":
                        case "BottomPositionOrient":
                        case "TapePocketPosition":
                            m_objVision2Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision2Page);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            m_objVision3Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision3Page);
                            pnl_Production2.Controls.Add(m_objVisionGRRPage);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "Li3D":
                        case "Li3DPkg":
                            m_objVision3Lead3DPage.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision3Lead3DPage);
                            pnl_Production2.Controls.Add(m_objVisionGRRPage);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            m_objVision4Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision4Page);
                            pnl_Production2.Controls.Add(m_objVisionGRRPage);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "Seal":
                            m_objVision6Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision6Page);
                            pnl_Production2.Controls[0].Show();
                            break;
                        case "Barcode":
                            m_objVision7Page.SetMultiViewGUI(true);
                            pnl_Production2.Controls.Add(m_objVision7Page);
                            pnl_Production2.Controls[0].Show();
                            break;
                        default:
                            SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                            break;
                    }
                }
            }
            else
            {
                lst_ErrorMessage.Visible = true;

                Rectangle objScreenRect = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                panel_Left.Size = new Size(objScreenRect.Width - 18 - 371, objScreenRect.Height - 193);
                pnl_PictureBox.BringToFront();
                panel_Right.Controls.Add(pnl_Production2);
                pnl_PictureBox1.Size = new Size(320, 240);
                pnl_PictureBox2.Size = new Size(320, 240);
                pnl_PictureBox3.Size = new Size(320, 240);
                pnl_PictureBox4.Size = new Size(320, 240);
                pic_Image1.Size = new Size(320, 240);
                pic_Image2.Size = new Size(320, 240);
                pic_Image3.Size = new Size(320, 240);
                pic_Image4.Size = new Size(320, 240);
                pnl_PictureBox2.Location = new Point(320, 0);
                pnl_PictureBox3.Location = new Point(0, 240);
                pnl_PictureBox4.Location = new Point(320, 240);
                pnl_PictureBox.Visible = true;

                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "Orient":
                    case "BottomOrient":
                    case "BottomPosition":
                    case "Mark":
                    case "MarkOrient":
                    case "MarkPkg":
                    case "MOPkg":
                    case "MOLiPkg":
                    case "MOLi":
                    case "Package":
                        m_objVision1Page.SetMultiViewGUI(false);
                        //pnl_Production.Controls.Clear();
                        pnl_Production.Controls.Add(m_objVision1Page);
                        pnl_Production.Controls[0].Show();
                        m_objVision1Page.LoadTemplateImage();
                        break;
                    case "UnitPresent":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":
                        m_objVision2Page.SetMultiViewGUI(false);
                        pnl_Production.Controls.Add(m_objVision2Page);
                        pnl_Production.Controls[0].Show();
                        m_objVision2Page.LoadTemplateImage();
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "PadPos":
                    case "PadPkg":
                    case "PadPkgPos":
                    case "Pad5S":
                    case "Pad5SPos":
                    case "Pad5SPkg":
                    case "Pad5SPkgPos":
                        m_objVision3Page.SetMultiViewGUI(false);
                        pnl_Production.Controls.Add(m_objVision3Page);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                        m_objVision3Page.LoadTemplateImage();
                        break;
                    case "Li3D":
                    case "Li3DPkg":
                        m_objVision3Lead3DPage.SetMultiViewGUI(false);
                        pnl_Production.Controls.Add(m_objVision3Lead3DPage);
                        pnl_Production.Controls.Add(m_objVisionGRRPage);
                        pnl_Production.Controls[0].Show();
                        m_objVision3Lead3DPage.LoadTemplateImage();
                        break;
                    case "InPocket":
                    case "InPocketPkg":
                    case "InPocketPkgPos":
                    case "IPMLi":
                    case "IPMLiPkg":
                        m_objVision4Page.SetMultiViewGUI(false);
                        //pnl_Production.Controls.Clear();
                        pnl_Production.Controls.Add(m_objVision4Page);
                        pnl_Production.Controls[0].Show();
                        m_objVision4Page.DisableField();
                        m_objVision4Page.LoadTemplateImage();
                        break;
                    case "Seal":
                        m_objVision6Page.SetMultiViewGUI(false);
                        pnl_Production.Controls.Add(m_objVision6Page);
                        pnl_Production.Controls[0].Show();
                        m_objVision6Page.DisableField();
                        m_objVision6Page.LoadTemplateImage();
                        break;
                    case "Barcode":
                        m_objVision7Page.SetMultiViewGUI(false);
                        pnl_Production.Controls.Add(m_objVision7Page);
                        pnl_Production.Controls[0].Show();
                        //m_objVision7Page.DisableField();
                        m_objVision7Page.LoadTemplateImage();
                        break;
                    default:
                        SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                        break;
                }

                //11-06-2019 ZJYEOH : To avoid offline Page displayed after disabled multi View
                //04-07-2019 ZJYEOH : Set also the variavle to false so that user able to exit auto mode
                if (m_objVision1OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision1OfflinePage.Hide();
                }
                else if (m_objVision2OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision2OfflinePage.Hide();
                }
                else if (m_objVision3OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision3OfflinePage.Hide();
                }
                else if (m_objVision4OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision4OfflinePage.Hide();
                }
                else if (m_objVision6OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision6OfflinePage.Hide();
                }
                else if (m_objVision7OfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision7OfflinePage.Hide();
                }
                else if (m_objVision3Lead3DOfflinePage != null)
                {
                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    m_smVisionInfo.g_blnViewOfflinePage = false;
                    //m_smVisionInfo.VM_AT_SettingInDialog = false;
                    m_smVisionInfo.AT_VM_ManualTestMode = false;
                    m_objVision3Lead3DOfflinePage.Hide();
                }
            }
        }

        private void DragROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    if (arrROIs[i][j].GetROIHandle())
                    {
                        arrROIs[i][j].DragROI(intPositionX, intPositionY);

                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    }
                }
            }
        }
        private void DragROI_LeadPocketDonCareROIFix(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 1; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].Count > 0)
                {
                    if (arrROIs[i][0].GetROIHandle())
                    {
                        arrROIs[i][0].DragFixROI2(intPositionX, intPositionY);

                        if (i == 1)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY + intOffset, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight + intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX - intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth - intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }


                            }

                        }
                        else if (i == 2)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth - intOffset, arrROIs[2][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0)
                            {
                                if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0)
                                    {
                                        if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                        else if (i == 3)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight - intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX - intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth - intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                {
                                    int intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX + intOffset, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                    {
                                        intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth + intOffset, arrROIs[4][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0)
                            {
                                if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0)
                                    {
                                        if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }

                }

            }
        }
        private void DragROI_LeadPocketDonCareROIManual(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 1; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].Count > 0)
                {
                    if (arrROIs[i][0].GetROIHandle())
                    {
                        arrROIs[i][0].DragFixROI2(intPositionX, intPositionY);

                        if (i == 1)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY + intOffset, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight + intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX - intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth - intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }


                            }

                        }
                        else if (i == 2)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth - intOffset, arrROIs[2][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0)
                            {
                                if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0)
                                    {
                                        if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                        else if (i == 3)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight - intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX - intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth - intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                {
                                    int intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX + intOffset, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                    {
                                        intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth + intOffset, arrROIs[4][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0)
                            {
                                if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0)
                                    {
                                        if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                  
                }
               
            }
        }
        private void DragROI_LeadPocketDonCareROIAuto(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 1; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].Count > 0)
                {
                    if (arrROIs[i][0].GetROIHandle())
                    {
                        arrROIs[i][0].DragFixROI2(intPositionX, intPositionY);

                        if (i == 1)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROIPositionY))
                                {
                                    int intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX, arrROIs[1][0].ref_ROIPositionY + intOffset, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROIPositionY))
                                    {
                                        intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight + intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROIPositionX;
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX + intOffset, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROIPositionX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth);
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX - intOffset, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth);
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX + intOffset, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX + intOffset, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[1][0].ref_ROIPositionX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROIPositionX;
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth - intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROIPositionX;
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROIPositionX + intOffset, arrROIs[1][0].ref_ROIPositionY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }


                            }

                            m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.SetPGaugePlace(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionY,
                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIHeight);
                        }
                        else if (i == 2)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0)
                            {
                                if (arrROIs[2][0].ref_ROIPositionX < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROIPositionX;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX + intOffset, arrROIs[2][0].ref_ROIPositionY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROIPositionX < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROIPositionX;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX + intOffset, arrROIs[2][0].ref_ROIPositionY, arrROIs[2][0].ref_ROIWidth - intOffset, arrROIs[2][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0)
                            {
                                if (arrROIs[2][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROIPositionY;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROIPositionY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight);
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight);
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0)
                            {
                                if ((arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight);
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if ((arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[2][0].ref_ROIPositionY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0)
                                    {
                                        if (arrROIs[2][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROIPositionY;
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[2][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROIPositionY;
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROIPositionX, arrROIs[2][0].ref_ROIPositionY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.SetPGaugePlace(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionY,
                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIHeight);
                        }
                        else if (i == 3)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROIPositionY) < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROIPositionY;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX, arrROIs[3][0].ref_ROIPositionY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROIPositionY) < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROIPositionY;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX, arrROIs[3][0].ref_ROIPositionY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight - intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROIPositionX;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX + intOffset, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROIPositionX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth);
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX - intOffset, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth);
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX + intOffset, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth);
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX + intOffset, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROIPositionX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROIPositionX) - (arrROIs[3][0].ref_ROIPositionX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROIPositionX;
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth - intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROIPositionX) < (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROIPositionX;
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROIPositionX + intOffset, arrROIs[3][0].ref_ROIPositionY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }
                            }

                            m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.SetPGaugePlace(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionY,
                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIHeight);
                        }
                        else if (i == 4)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROIPositionX)
                                {
                                    int intOffset = arrROIs[2][0].ref_ROIPositionX - (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX + intOffset, arrROIs[4][0].ref_ROIPositionY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROIPositionX)
                                    {
                                        intOffset = arrROIs[2][0].ref_ROIPositionX - (arrROIs[4][0].ref_ROIPositionX + arrROIs[4][0].ref_ROIWidth);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY, arrROIs[4][0].ref_ROIWidth + intOffset, arrROIs[4][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0)
                            {
                                if (arrROIs[4][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROIPositionY;
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if (arrROIs[4][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROIPositionY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight);
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight);
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROIPositionY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROIPositionY - (arrROIs[4][0].ref_ROIPositionY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0)
                                    {
                                        if (arrROIs[4][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROIPositionY;
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[4][0].ref_ROIPositionY < (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROIPositionY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROIPositionY;
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROIPositionX, arrROIs[4][0].ref_ROIPositionY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.SetPGaugePlace(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIPositionY,
                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ref_ROIHeight);
                        }
                    }

                }

            }
        }
        private void DragROI_LeadPocketDonCareROIBlob(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 1; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].Count > 0)
                {
                    if (arrROIs[i][0].GetROIHandle())
                    {
                        arrROIs[i][0].DragFixROI2(intPositionX, intPositionY);

                        if (i == 1)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY + intOffset, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight + intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX - intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0)
                            {
                                if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth - intOffset, arrROIs[1][0].ref_ROIHeight);
                                            if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                                arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }


                            }

                        }
                        else if (i == 2)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalX < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth - intOffset, arrROIs[2][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0)
                            {
                                if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0)
                            {
                                if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0)
                                    {
                                        if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                                arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                        else if (i == 3)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight - intOffset);
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX - intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                            {
                                                intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }


                                    }
                                }

                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0)
                            {
                                if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0)
                                    {
                                        if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth - intOffset, arrROIs[3][0].ref_ROIHeight);
                                            if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                            {
                                                intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                                arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                            }
                                        }

                                    }
                                }
                            }
                        }
                        else if (i == 4)
                        {
                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                {
                                    int intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX + intOffset, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[2][0].ref_ROITotalX)
                                    {
                                        intOffset = arrROIs[2][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth + intOffset, arrROIs[4][0].ref_ROIHeight);

                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0)
                            {
                                if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0)
                                    {
                                        if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);
                                            if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                            {
                                                intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0)
                            {
                                if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0)
                                    {
                                        if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight - intOffset);
                                            if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                            {
                                                intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                                arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }

                }

            }
        }
        private void DragROI_With5SearchROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            int intPositionX0, intPositionX1, intPositionX2, intPositionX3, intPositionX4;
            intPositionX0 = intPositionX1 = intPositionX2 = intPositionX3 = intPositionX4 = intPositionX;
            int intPositionY0, intPositionY1, intPositionY2, intPositionY3, intPositionY4;
            intPositionY0 = intPositionY1 = intPositionY2 = intPositionY3 = intPositionY4 = intPositionY;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs.Count > 1)
                {
                    if (arrROIs.Count > i)
                    {
                        if (arrROIs[i][0].GetROIHandle())
                        {
                            //arrROIs[i][0].DragFixROI2(intPositionX, intPositionY);

                            if (i == 0)
                            {
                                arrROIs[i][0].DragFixROI(intPositionX, intPositionY,
                                                         arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight,
                                                         arrROIs[2][0].ref_ROITotalX,
                                                         arrROIs[3][0].ref_ROITotalY,
                                                         arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);

                                if ((arrROIs[0][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[0][0].ref_ROITotalY;
                                    arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY + intOffset, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);
                                    if ((arrROIs[0][0].ref_ROITotalY) < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[0][0].ref_ROITotalY;
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY + intOffset, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight - intOffset);
                                    }
                                }

                                if ((arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight);
                                    arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY + intOffset, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);
                                    if ((arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight) > (arrROIs[3][0].ref_ROITotalY))
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight);
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight + intOffset);
                                    }
                                }

                                if ((arrROIs[0][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[0][0].ref_ROITotalX;
                                    arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX + intOffset, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);
                                    if ((arrROIs[0][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[0][0].ref_ROITotalX;
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth + intOffset, arrROIs[0][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth);
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX - intOffset, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth + intOffset, arrROIs[0][0].ref_ROIHeight);
                                        if ((arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth);
                                            arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX + intOffset, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);

                                        }
                                    }
                                }

                                if ((arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth);
                                    arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX + intOffset, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);
                                    if ((arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth);
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth + intOffset, arrROIs[0][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[0][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[0][0].ref_ROITotalX;
                                        arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth - intOffset, arrROIs[0][0].ref_ROIHeight);
                                        if ((arrROIs[0][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[0][0].ref_ROITotalX;
                                            arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROITotalX + intOffset, arrROIs[0][0].ref_ROITotalY, arrROIs[0][0].ref_ROIWidth, arrROIs[0][0].ref_ROIHeight);

                                        }
                                    }
                                }
                            }
                            else if (i == 1)
                            {
                                arrROIs[i][0].DragFixROI(intPositionX, intPositionY,
                                                        0,
                                                        arrROIs[2][0].ref_ROITotalX,
                                                        arrROIs[0][0].ref_ROITotalY,
                                                        arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);

                                if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[0][0].ref_ROITotalY))
                                {
                                    int intOffset = arrROIs[0][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY + intOffset, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) > (arrROIs[0][0].ref_ROITotalY))
                                    {
                                        intOffset = arrROIs[0][0].ref_ROITotalY - (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight + intOffset);
                                    }
                                }

                                if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX - intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);
                                        if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                        }
                                    }
                                }

                                if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                    arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);
                                    if ((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth);
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth + intOffset, arrROIs[1][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                        arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth - intOffset, arrROIs[1][0].ref_ROIHeight);
                                        if ((arrROIs[1][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[1][0].ref_ROITotalX;
                                            arrROIs[1][0].LoadROISetting(arrROIs[1][0].ref_ROITotalX + intOffset, arrROIs[1][0].ref_ROITotalY, arrROIs[1][0].ref_ROIWidth, arrROIs[1][0].ref_ROIHeight);

                                        }
                                    }
                                }
                            }
                            else if (i == 2)
                            {
                                arrROIs[i][0].DragFixROI(intPositionX, intPositionY,
                                                          arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight,
                                                          arrROIs[i][0].ref_ROIWidth_TopParent,
                                                          arrROIs[3][0].ref_ROITotalY,
                                                          arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth);

                                if (arrROIs[2][0].ref_ROITotalX < (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalX < (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) - arrROIs[2][0].ref_ROITotalX;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX + intOffset, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth - intOffset, arrROIs[2][0].ref_ROIHeight);

                                    }
                                }

                                if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);
                                        if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                        }
                                    }
                                }


                                if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                    arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);
                                    if ((arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[2][0].ref_ROITotalY + arrROIs[2][0].ref_ROIHeight);
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight + intOffset);

                                    }

                                    if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                        arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight - intOffset);
                                        if (arrROIs[2][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[2][0].ref_ROITotalY;
                                            arrROIs[2][0].LoadROISetting(arrROIs[2][0].ref_ROITotalX, arrROIs[2][0].ref_ROITotalY + intOffset, arrROIs[2][0].ref_ROIWidth, arrROIs[2][0].ref_ROIHeight);

                                        }
                                    }

                                }


                            }
                            else if (i == 3)
                            {
                                arrROIs[i][0].DragFixROI(intPositionX, intPositionY,
                                                        arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight,
                                                        arrROIs[2][0].ref_ROITotalX,
                                                        arrROIs[i][0].ref_ROIHeight_TopParent,
                                                        arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                
                                if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalY) < (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight) - arrROIs[3][0].ref_ROITotalY;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY + intOffset, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight - intOffset);
                                    }
                                }


                                if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                {
                                    int intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX - intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);
                                        if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                        {
                                            intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                        }
                                    }

                                }


                                if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                {
                                    int intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                    arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);
                                    if ((arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth) > (arrROIs[2][0].ref_ROITotalX))
                                    {
                                        intOffset = (arrROIs[2][0].ref_ROITotalX) - (arrROIs[3][0].ref_ROITotalX + arrROIs[3][0].ref_ROIWidth);
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth + intOffset, arrROIs[3][0].ref_ROIHeight);

                                    }

                                    if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                    {
                                        intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                        arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth - intOffset, arrROIs[3][0].ref_ROIHeight);
                                        if ((arrROIs[3][0].ref_ROITotalX) < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
                                        {
                                            intOffset = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) - arrROIs[3][0].ref_ROITotalX;
                                            arrROIs[3][0].LoadROISetting(arrROIs[3][0].ref_ROITotalX + intOffset, arrROIs[3][0].ref_ROITotalY, arrROIs[3][0].ref_ROIWidth, arrROIs[3][0].ref_ROIHeight);

                                        }
                                    }

                                }

                            }
                            else if (i == 4)
                            {
                                arrROIs[i][0].DragFixROI(intPositionX, intPositionY,
                                                           arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight,
                                                           arrROIs[0][0].ref_ROITotalX,
                                                           arrROIs[3][0].ref_ROITotalY,
                                                           0);
                                
                                if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[0][0].ref_ROITotalX)
                                {
                                    int intOffset = arrROIs[0][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX + intOffset, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) > arrROIs[0][0].ref_ROITotalX)
                                    {
                                        intOffset = arrROIs[0][0].ref_ROITotalX - (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth + intOffset, arrROIs[4][0].ref_ROIHeight);

                                    }
                                }

                                if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                {
                                    int intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);
                                        if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                        {
                                            intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                        }
                                    }

                                }

                                if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                {
                                    int intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                    arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);
                                    if ((arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight) > arrROIs[3][0].ref_ROITotalY)
                                    {
                                        intOffset = arrROIs[3][0].ref_ROITotalY - (arrROIs[4][0].ref_ROITotalY + arrROIs[4][0].ref_ROIHeight);
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight + intOffset);

                                    }

                                    if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                    {
                                        intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                        arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight - intOffset);
                                        if (arrROIs[4][0].ref_ROITotalY < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
                                        {
                                            intOffset = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) - arrROIs[4][0].ref_ROITotalY;
                                            arrROIs[4][0].LoadROISetting(arrROIs[4][0].ref_ROITotalX, arrROIs[4][0].ref_ROITotalY + intOffset, arrROIs[4][0].ref_ROIWidth, arrROIs[4][0].ref_ROIHeight);

                                        }
                                    }

                                }


                            }
                        }

                    }
                }
                else
                {
                    for (int j = 0; j < arrROIs[i].Count; j++)
                    {
                        if (arrROIs[i][j].GetROIHandle())
                        {
                            arrROIs[i][j].DragROI(intPositionX, intPositionY);

                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                }
            }
        }
        //private void DragROI_With5SearchROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        //{
        //    int intPositionX0, intPositionX1, intPositionX2, intPositionX3, intPositionX4;
        //    intPositionX0 = intPositionX1 = intPositionX2 = intPositionX3 = intPositionX4 = intPositionX;
        //    int intPositionY0, intPositionY1, intPositionY2, intPositionY3, intPositionY4;
        //    intPositionY0 = intPositionY1 = intPositionY2 = intPositionY3 = intPositionY4 = intPositionY;
        //    for (int i = 0; i < arrROIs.Count; i++)
        //    {
        //        if (arrROIs.Count > 1)
        //        {
        //            if (i == 0)
        //            {
        //                if (intPositionX0 + m_intClickedPad0R > (arrROIs[2][0].ref_ROITotalX))
        //                {
        //                    intPositionX0 = arrROIs[2][0].ref_ROITotalX - m_intClickedPad0R;
        //                }
        //                if (intPositionX0 - m_intClickedPad0L < (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth))
        //                {

        //                    intPositionX0 = (arrROIs[4][0].ref_ROITotalX + arrROIs[4][0].ref_ROIWidth) + m_intClickedPad0L;

        //                }
        //                if (intPositionY0 + m_intClickedPad0B > (arrROIs[3][0].ref_ROITotalY))
        //                {
        //                    intPositionY0 = arrROIs[3][0].ref_ROITotalY - m_intClickedPad0B;
        //                }
        //                if (intPositionY0 - m_intClickedPad0T < (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight))
        //                {

        //                    intPositionY0 = (arrROIs[1][0].ref_ROITotalY + arrROIs[1][0].ref_ROIHeight) + m_intClickedPad0T;

        //                }
        //            }
        //            else if (i == 1)
        //            {

        //                if (intPositionY1 + m_intClickedPad1B > (arrROIs[0][0].ref_ROITotalY))
        //                {
        //                    intPositionY1 = arrROIs[0][0].ref_ROITotalY - m_intClickedPad1B;
        //                }

        //            }
        //            else if (i == 2)
        //            {

        //                if (intPositionX2 - m_intClickedPad2L < (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth))
        //                {

        //                    intPositionX2 = (arrROIs[0][0].ref_ROITotalX + arrROIs[0][0].ref_ROIWidth) + m_intClickedPad2L;

        //                }

        //            }
        //            else if (i == 3)
        //            {

        //                if (intPositionY3 - m_intClickedPad3T < (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight))
        //                {

        //                    intPositionY3 = (arrROIs[0][0].ref_ROITotalY + arrROIs[0][0].ref_ROIHeight) + m_intClickedPad3T;

        //                }
        //            }
        //            else if (i == 4)
        //            {
        //                if (intPositionX4 + m_intClickedPad4R > (arrROIs[0][0].ref_ROITotalX))
        //                {
        //                    intPositionX4 = arrROIs[0][0].ref_ROITotalX - m_intClickedPad4R;
        //                }

        //            }
        //            for (int j = 0; j < arrROIs[i].Count; j++)
        //            {
        //                if (arrROIs[i][j].GetROIHandle())
        //                {
        //                    if (i == 0)
        //                        arrROIs[i][j].DragROI(intPositionX0, intPositionY0);
        //                    else if (i == 1)
        //                        arrROIs[i][j].DragROI(intPositionX1, intPositionY1);
        //                    else if (i == 2)
        //                        arrROIs[i][j].DragROI(intPositionX2, intPositionY2);
        //                    else if (i == 3)
        //                        arrROIs[i][j].DragROI(intPositionX3, intPositionY3);
        //                    else if (i == 4)
        //                        arrROIs[i][j].DragROI(intPositionX4, intPositionY4);
        //                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        //                    break;
        //                }
        //            }
        //        }
        //        else
        //        {
        //            for (int j = 0; j < arrROIs[i].Count; j++)
        //            {
        //                if (arrROIs[i][j].GetROIHandle())
        //                {
        //                    arrROIs[i][j].DragROI(intPositionX, intPositionY);

        //                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        //                    break;
        //                }
        //            }
        //        }
        //    }
        //}
        private void DragROI_Calibrate5S(List<ROI> arrROIs, int intPositionX, int intPositionY)
        {
            int intPositionX0, intPositionX1, intPositionX2, intPositionX3, intPositionX4;
            intPositionX0 = intPositionX1 = intPositionX2 = intPositionX3 = intPositionX4 = intPositionX;
            int intPositionY0, intPositionY1, intPositionY2, intPositionY3, intPositionY4;
            intPositionY0 = intPositionY1 = intPositionY2 = intPositionY3 = intPositionY4 = intPositionY;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs.Count > 1)
                {
                    if (i == 0)
                    {
                        //if (intPositionX0 + m_intClickedPad0R > (arrROIs[2].ref_ROITotalX))
                        //{
                        //    intPositionX0 = arrROIs[2].ref_ROITotalX - m_intClickedPad0R;
                        //}
                        //if (intPositionX0 - m_intClickedPad0L < (arrROIs[4].ref_ROITotalX + arrROIs[4].ref_ROIWidth))
                        //{

                        //    intPositionX0 = (arrROIs[4].ref_ROITotalX + arrROIs[4].ref_ROIWidth) + m_intClickedPad0L;

                        //}
                        //if (intPositionY0 + m_intClickedPad0B > (arrROIs[3].ref_ROITotalY))
                        //{
                        //    intPositionY0 = arrROIs[3].ref_ROITotalY - m_intClickedPad0B;
                        //}
                        //if (intPositionY0 - m_intClickedPad0T < (arrROIs[1].ref_ROITotalY + arrROIs[1].ref_ROIHeight))
                        //{

                        //    intPositionY0 = (arrROIs[1].ref_ROITotalY + arrROIs[1].ref_ROIHeight) + m_intClickedPad0T;

                        //}
                    }
                    else if (i == 1)
                    {

                        if (intPositionY1 + m_intClickedPad1B > (arrROIs[0].ref_ROITotalY))
                        {
                            intPositionY1 = arrROIs[0].ref_ROITotalY - m_intClickedPad1B;
                        }

                    }
                    else if (i == 2)
                    {

                        if (intPositionX2 - m_intClickedPad2L < (arrROIs[0].ref_ROITotalX + arrROIs[0].ref_ROIWidth))
                        {

                            intPositionX2 = (arrROIs[0].ref_ROITotalX + arrROIs[0].ref_ROIWidth) + m_intClickedPad2L;

                        }

                    }
                    else if (i == 3)
                    {

                        if (intPositionY3 - m_intClickedPad3T < (arrROIs[0].ref_ROITotalY + arrROIs[0].ref_ROIHeight))
                        {

                            intPositionY3 = (arrROIs[0].ref_ROITotalY + arrROIs[0].ref_ROIHeight) + m_intClickedPad3T;

                        }
                    }
                    else if (i == 4)
                    {
                        if (intPositionX4 + m_intClickedPad4R > (arrROIs[0].ref_ROITotalX))
                        {
                            intPositionX4 = arrROIs[0].ref_ROITotalX - m_intClickedPad4R;
                        }

                    }
                }

                if (arrROIs[i].GetROIHandle())
                {
                    STTrackLog.WriteLine(i.ToString() + ": " + intPositionX0.ToString() + ", " + intPositionY0.ToString());
                    if (i == 0)
                        arrROIs[i].DragROI(intPositionX0, intPositionY0);
                    else if (i == 1)
                        arrROIs[i].DragROI(intPositionX1, intPositionY1);
                    else if (i == 2)
                        arrROIs[i].DragROI(intPositionX2, intPositionY2);
                    else if (i == 3)
                        arrROIs[i].DragROI(intPositionX3, intPositionY3);
                    else if (i == 4)
                        arrROIs[i].DragROI(intPositionX4, intPositionY4);
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }
        private void DragMarkDontCareROI(List<ROI> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].GetROIHandle())
                {
                    if (m_smVisionInfo.g_intSelectedUnit < m_smVisionInfo.g_arrPolygon_Mark.Count && i < m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit].Count)
                    {
                        if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_intFormMode == 2)
                        {
                            if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_arrPoints.Count > 0)
                            {
                                if (arrROIs[i].GetROIInsideHandle())
                                {
                                    arrROIs[i].DragFixROI2(intPositionX, intPositionY);

                                    m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ResetPointsUsingOffset(arrROIs[i].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                            {
                                arrROIs[i].DragFixROI2(intPositionX, intPositionY);

                                m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ResetPointsUsingOffset(arrROIs[i].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                            }
                        }
                        else
                            arrROIs[i].DragFixROI2(intPositionX, intPositionY);
                    }

                    //if (m_smVisionInfo.g_arrPolygon_Mark[i].Count > m_smVisionInfo.g_intSelectedTemplate)
                    //{
                    //    if (m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                    //    {
                    //        if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_arrPoints.Count > 0)
                    //        {
                    //            if (arrROIs[i].GetROIInsideHandle())
                    //            {
                    //                arrROIs[i].DragFixROI2(intPositionX, intPositionY);

                    //                m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ResetPointsUsingOffset(arrROIs[i].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            arrROIs[i].DragFixROI2(intPositionX, intPositionY);

                    //            m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ResetPointsUsingOffset(arrROIs[i].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                    //        }
                    //    }
                    //    else
                    //        arrROIs[i].DragFixROI2(intPositionX, intPositionY);
                    //}


                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }
        private void DragPackageDontCareROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    if (m_smVisionInfo.g_intSelectedType == i)
                    {
                        if (arrROIs[i][j].GetROIHandle())
                        {
                            if (m_smVisionInfo.g_arrPolygon_Package.Count > m_smVisionInfo.g_intSelectedUnit &&
                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedType &&
                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType].Count > j)
                            //m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                            {
                                if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][j].ref_intFormMode == 2)
                                {
                                    if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][j].ref_arrPoints.Count > 0)
                                    {
                                        if (arrROIs[i][j].GetROIInsideHandle())
                                        {
                                            arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                            m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                        }
                                    }
                                    else
                                    {
                                        arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                    }
                                }
                                else
                                    arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);
                            }


                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }


                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                        {
                            if (m_smVisionInfo.g_intSelectedType == 0)
                            {
                                //if (m_smVisionInfo.g_arrPolygon_Package[0][1].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                if (m_smVisionInfo.g_arrPolygon_Package.Count > 0 &&
                                    m_smVisionInfo.g_arrPolygon_Package[0].Count > 1 &&
                                    m_smVisionInfo.g_arrPolygon_Package[0][0].Count > j &&
                                    m_smVisionInfo.g_arrPolygon_Package[0][1].Count > j)
                                {
                                    m_smVisionInfo.g_arrPolygon_Package[0][0][j].CopyAllTo(m_smVisionInfo.g_arrPolygon_Package[0][1][j]);
                                    arrROIs[1][j].LoadROISetting(arrROIs[0][j].ref_ROIPositionX, arrROIs[0][j].ref_ROIPositionY, arrROIs[0][j].ref_ROIWidth, arrROIs[0][j].ref_ROIHeight);

                                    m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][1][j].ResetPointsUsingOffset(arrROIs[1][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[1][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrPolygon_Package.Count > 0 &&
                                    m_smVisionInfo.g_arrPolygon_Package[0].Count > 1 &&
                                    m_smVisionInfo.g_arrPolygon_Package[0][0].Count > j &&
                                    m_smVisionInfo.g_arrPolygon_Package[0][1].Count > j &&
                                    m_smVisionInfo.g_arrPolygon_Package.Count > m_smVisionInfo.g_intSelectedUnit &&
                                    m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit].Count > 1 &&
                                    m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][0].Count > j)
                                {
                                    //if (m_smVisionInfo.g_arrPolygon_Package[0][0].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                    m_smVisionInfo.g_arrPolygon_Package[0][1][j].CopyAllTo(m_smVisionInfo.g_arrPolygon_Package[0][0][j]);
                                    arrROIs[0][j].LoadROISetting(arrROIs[1][j].ref_ROIPositionX, arrROIs[1][j].ref_ROIPositionY, arrROIs[1][j].ref_ROIWidth, arrROIs[1][j].ref_ROIHeight);

                                    m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][0][j].ResetPointsUsingOffset(arrROIs[0][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[0][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                        }
                    }
                }
            }
        }
        private void DragPadPackageDontCareROI(List<List<List<ROI>>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    if (m_smVisionInfo.g_intSelectedType == j)
                    {
                        for (int k = 0; k < arrROIs[i][j].Count; k++)
                        {
                            if (arrROIs[i][j][k].GetROIHandle())
                            {
                                if (m_smVisionInfo.g_arrPolygon_PadPackage.Count > i &&
                                               m_smVisionInfo.g_arrPolygon_PadPackage[i].Count > j &&
                                               m_smVisionInfo.g_arrPolygon_PadPackage[i][j].Count > k)
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_intFormMode == 2)
                                    {
                                        if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_arrPoints.Count > 0)
                                        {
                                            if (arrROIs[i][j][k].GetROIInsideHandle())
                                            {
                                                arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                                m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                            }
                                        }
                                        else
                                        {
                                            arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                            m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                        }
                                    }
                                    else
                                        arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);
                                }
                                else
                                    arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }

                            if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                            {
                                if (m_smVisionInfo.g_intSelectedType == 0)
                                {
                                    m_smVisionInfo.g_arrPolygon_PadPackage[i][0][k].CopyAllTo(m_smVisionInfo.g_arrPolygon_PadPackage[i][1][k]);
                                    arrROIs[i][1][k].LoadROISetting(arrROIs[i][0][k].ref_ROIPositionX, arrROIs[i][0][k].ref_ROIPositionY, arrROIs[i][0][k].ref_ROIWidth, arrROIs[i][0][k].ref_ROIHeight);

                                    m_smVisionInfo.g_arrPolygon_PadPackage[i][1][k].ResetPointsUsingOffset(arrROIs[i][1][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][1][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPolygon_PadPackage[i][1][k].CopyAllTo(m_smVisionInfo.g_arrPolygon_PadPackage[i][0][k]);
                                    arrROIs[i][0][k].LoadROISetting(arrROIs[i][1][k].ref_ROIPositionX, arrROIs[i][1][k].ref_ROIPositionY, arrROIs[i][1][k].ref_ROIWidth, arrROIs[i][1][k].ref_ROIHeight);

                                    m_smVisionInfo.g_arrPolygon_PadPackage[i][0][k].ResetPointsUsingOffset(arrROIs[i][0][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][0][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                        }
                    }
                }
            }
        }
        private void DragPadDontCareROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {

                    if (arrROIs[i][j].GetROIHandle())
                    {
                        if (m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_intFormMode == 2)
                        {
                            if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_arrPoints.Count > 0)
                            {
                                if (arrROIs[i][j].GetROIInsideHandle())
                                {
                                    arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                    m_smVisionInfo.g_arrPolygon_Pad[i][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                            {
                                arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                m_smVisionInfo.g_arrPolygon_Pad[i][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                            }
                        }
                        else
                            arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);



                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    }

                }
            }
        }
        private void DragPadColorDontCareROI(List<List<List<ROI>>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    for (int k = 0; k < arrROIs[i][j].Count; k++)
                    {

                        if (arrROIs[i][j][k].GetROIHandle())
                        {
                            if (m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_intFormMode == 2)
                            {
                                if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_arrPoints.Count > 0)
                                {
                                    if (arrROIs[i][j][k].GetROIInsideHandle())
                                    {
                                        arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                        m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                    }
                                }
                                else
                                {
                                    arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                    m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                                arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);



                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }

                    }
                }
            }
        }
        private void DragPackageColorDontCareROI(List<List<List<ROI>>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    for (int k = 0; k < arrROIs[i][j].Count; k++)
                    {

                        if (arrROIs[i][j][k].GetROIHandle())
                        {
                            if (m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_intFormMode == 2)
                            {
                                if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_arrPoints.Count > 0)
                                {
                                    if (arrROIs[i][j][k].GetROIInsideHandle())
                                    {
                                        arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                        m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                    }
                                }
                                else
                                {
                                    arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);

                                    m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ResetPointsUsingOffset(arrROIs[i][j][k].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j][k].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                                arrROIs[i][j][k].DragFixROI2(intPositionX, intPositionY);



                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }

                    }
                }
            }
        }
        private void DragLead3DDontCareROI(List<List<ROI>> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {

                    if (arrROIs[i][j].GetROIHandle())
                    {
                        if (m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_intFormMode == 2)
                        {
                            if (m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_arrPoints.Count > 0)
                            {
                                if (arrROIs[i][j].GetROIInsideHandle())
                                {
                                    arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                    m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                            }
                            else
                            {
                                arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);

                                m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ResetPointsUsingOffset(arrROIs[i][j].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount, arrROIs[i][j].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                            }
                        }
                        else
                            arrROIs[i][j].DragFixROI2(intPositionX, intPositionY);



                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    }

                }
            }
        }
        private void DragROI(List<ROI> arrROIs, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].GetROIHandle())
                {
                    arrROIs[i].DragROI(intPositionX, intPositionY);

                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }
        private void DragROI_Pad5SGauge(List<ROI> arrROIs, List<LGauge> arrGauges, int intPositionX, int intPositionY)
        {
            int intPositionX0, intPositionX1, intPositionX2, intPositionX3, intPositionX4;
            intPositionX0 = intPositionX1 = intPositionX2 = intPositionX3 = intPositionX4 = intPositionX;
            int intPositionY0, intPositionY1, intPositionY2, intPositionY3, intPositionY4;
            intPositionY0 = intPositionY1 = intPositionY2 = intPositionY3 = intPositionY4 = intPositionY;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (i == 0)
                {
                    if (intPositionX0 + m_intClickedPad0R > (arrROIs[2].ref_ROITotalX))
                    {
                        intPositionX0 = arrROIs[2].ref_ROITotalX - m_intClickedPad0R;
                    }
                    if (intPositionX0 - m_intClickedPad0L < (arrROIs[4].ref_ROITotalX + arrROIs[4].ref_ROIWidth))
                    {

                        intPositionX0 = (arrROIs[4].ref_ROITotalX + arrROIs[4].ref_ROIWidth) + m_intClickedPad0L;

                    }
                    if (intPositionY0 + m_intClickedPad0B > (arrROIs[3].ref_ROITotalY))
                    {
                        intPositionY0 = arrROIs[3].ref_ROITotalY - m_intClickedPad0B;
                    }
                    if (intPositionY0 - m_intClickedPad0T < (arrROIs[1].ref_ROITotalY + arrROIs[1].ref_ROIHeight))
                    {

                        intPositionY0 = (arrROIs[1].ref_ROITotalY + arrROIs[1].ref_ROIHeight) + m_intClickedPad0T;

                    }
                }
                else if (i == 1)
                {

                    if (intPositionY1 + m_intClickedPad1B > (arrROIs[0].ref_ROITotalY))
                    {
                        intPositionY1 = arrROIs[0].ref_ROITotalY - m_intClickedPad1B;
                    }

                }
                else if (i == 2)
                {

                    if (intPositionX2 - m_intClickedPad2L < (arrROIs[0].ref_ROITotalX + arrROIs[0].ref_ROIWidth))
                    {

                        intPositionX2 = (arrROIs[0].ref_ROITotalX + arrROIs[0].ref_ROIWidth) + m_intClickedPad2L;

                    }

                }
                else if (i == 3)
                {

                    if (intPositionY3 - m_intClickedPad3T < (arrROIs[0].ref_ROITotalY + arrROIs[0].ref_ROIHeight))
                    {

                        intPositionY3 = (arrROIs[0].ref_ROITotalY + arrROIs[0].ref_ROIHeight) + m_intClickedPad3T;

                    }
                }
                else if (i == 4)
                {
                    if (intPositionX4 + m_intClickedPad4R > (arrROIs[0].ref_ROITotalX))
                    {
                        intPositionX4 = arrROIs[0].ref_ROITotalX - m_intClickedPad4R;
                    }

                }

                if (arrROIs[i].GetROIHandle())
                {
                    if (i == 0)
                        arrROIs[i].DragROI(intPositionX0, intPositionY0);
                    else if (i == 1)
                        arrROIs[i].DragROI(intPositionX1, intPositionY1);
                    else if (i == 2)
                        arrROIs[i].DragROI(intPositionX2, intPositionY2);
                    else if (i == 3)
                        arrROIs[i].DragROI(intPositionX3, intPositionY3);
                    else if (i == 4)
                        arrROIs[i].DragROI(intPositionX4, intPositionY4);
                    switch (i)
                    {
                        case 4:
                            if (arrGauges.Count > 5)
                            {
                                arrGauges[4].SetGaugePlacement(arrROIs[i]);
                                arrGauges[5].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 5:
                            if (arrGauges.Count > 7)
                            {
                                arrGauges[6].SetGaugePlacement(arrROIs[i]);
                                arrGauges[7].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 6:
                            if (arrGauges.Count > 9)
                            {
                                arrGauges[8].SetGaugePlacement(arrROIs[i]);
                                arrGauges[9].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 7:
                            if (arrGauges.Count > 11)
                            {
                                arrGauges[10].SetGaugePlacement(arrROIs[i]);
                                arrGauges[11].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        default:
                            if (arrGauges.Count > i)
                            {
                                arrGauges[i].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                    }
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }
        private void DragROI_PocketPosition(List<ROI> arrROIs, List<LGauge> arrGauges, int intPositionX, int intPositionY, int intGaugeIndex)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].GetROIHandle())
                {
                    arrROIs[i].DragROI(intPositionX, intPositionY);


                    arrGauges[intGaugeIndex].SetGaugePlacement(arrROIs[intGaugeIndex + 2]);
                    if (intGaugeIndex == 1)
                        m_smVisionInfo.g_blnMeasurePocketPosition = true;
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }
        
        private void DragROI(List<ROI> arrROIs, List<LGauge> arrGauges, int intPositionX, int intPositionY)
        {
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs[i].GetROIHandle())
                {
                    arrROIs[i].DragROI(intPositionX, intPositionY);

                    switch (i)
                    {
                        case 4:
                            if (arrGauges.Count > 5)
                            {
                                arrGauges[4].SetGaugePlacement(arrROIs[i]);
                                arrGauges[5].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 5:
                            if (arrGauges.Count > 7)
                            {
                                arrGauges[6].SetGaugePlacement(arrROIs[i]);
                                arrGauges[7].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 6:
                            if (arrGauges.Count > 9)
                            {
                                arrGauges[8].SetGaugePlacement(arrROIs[i]);
                                arrGauges[9].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        case 7:
                            if (arrGauges.Count > 11)
                            {
                                arrGauges[10].SetGaugePlacement(arrROIs[i]);
                                arrGauges[11].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                        default:
                            if (arrGauges.Count > i)
                            {
                                arrGauges[i].SetGaugePlacement(arrROIs[i]);
                            }
                            break;
                    }
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                }
            }
        }

        private void DragROI(List<List<ROI>> arrROIs, List<RectGauge> arrGauges, int intPositionX, int intPositionY)
        {
            ROI objROI;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    objROI = arrROIs[i][j];
                    if (objROI.GetROIHandle())
                    {
                        objROI.DragROI(intPositionX, intPositionY);
                        if (objROI.ref_intType == 1)
                            arrGauges[i].ModifyGauge(objROI);

                        arrROIs[i][j] = objROI;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    }
                }
            }
        }
        private void DragROI_With2SearchROI(List<List<ROI>> arrROIs, List<RectGauge> arrGauges, int intPositionX, int intPositionY)
        {
            ROI objROI;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs.Count > 1)
                {
                    if (m_smVisionInfo.g_intSelectedUnit == 0)
                    {
                        if (intPositionX - m_intClickedX < (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth))
                        {
                            // if(intPositionX > (arrROIs[0][0].ref_ROITotalX - 1))
                            intPositionX = (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) + m_intClickedX;

                        }

                        //if (intPositionX >= m_smVisionInfo.g_intCameraResolutionWidth)
                        //{
                        //if (intPositionX >= m_smVisionInfo.g_intCameraResolutionWidth)
                        //{
                        //arrROIs[0][0].LoadROISetting(arrROIs[0][0].ref_ROIOriPositionX, arrROIs[0][0].ref_ROITotalY, m_smVisionInfo.g_intCameraResolutionWidth - arrROIs[0][0].ref_ROIOriPositionX, arrROIs[0][0].ref_ROIHeight);
                        //// arrROIs[0][0].ref_ROIWidth = m_smVisionInfo.g_intCameraResolutionWidth - arrROIs[1][0].ref_ROITotalX - arrROIs[1][0].ref_ROIWidth;

                        //}
                        //}
                    }
                    else if (m_smVisionInfo.g_intSelectedUnit == 1)
                    {
                        //if (((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth)) > arrROIs[0][0].ref_ROITotalX)
                        //{
                        //    arrROIs[1][0].ref_ROIWidth = arrROIs[0][0].ref_ROITotalX - arrROIs[1][0].ref_ROITotalX-1;
                        //    if(intPositionX> arrROIs[0][0].ref_ROITotalX)
                        //    intPositionX = arrROIs[0][0].ref_ROITotalX - 1;
                        //}
                        if ((intPositionX + m_intClickedXRe) > arrROIs[0][0].ref_ROITotalX)
                        {
                            //   if(m_intClickedXRe< arrROIs[1][0].ref_ROIWidth)
                            // if(intPositionX > (arrROIs[0][0].ref_ROITotalX - 1))
                            intPositionX = arrROIs[0][0].ref_ROITotalX - m_intClickedXRe;// arrROIs[0][0].ref_ROITotalX - arrROIs[1][0].ref_ROIWidth + m_intClickedXRe;
                                                                                         // arrROIs[1][0].ref_ROIWidth = arrROIs[0][0].ref_ROITotalX - arrROIs[1][0].ref_ROITotalX;
                        }

                        //if (arrROIs[1][0].ref_ROITotalX == 0)
                        //    if (((arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) >= (arrROIs[0][0].ref_ROITotalX - 1)))//&& arrROIs[1][0].ref_ROITotalX == 0)
                        //        arrROIs[1][0].ref_ROIWidth = arrROIs[0][0].ref_ROITotalX - arrROIs[1][0].ref_ROITotalX;
                    }
                    for (int j = 0; j < arrROIs[i].Count; j++)
                    {
                        objROI = arrROIs[i][j];
                        if (objROI.GetROIHandle())
                        {
                            objROI.DragROI(intPositionX, intPositionY);
                            if (objROI.ref_intType == 1)
                            {
                                arrGauges[i].ModifyGauge(objROI);
                            }

                            arrROIs[i][j] = objROI;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }

                }
                else
                {
                    for (int j = 0; j < arrROIs[i].Count; j++)
                    {
                        objROI = arrROIs[i][j];
                        if (objROI.GetROIHandle())
                        {
                            objROI.DragROI(intPositionX, intPositionY);
                            if (objROI.ref_intType == 1)
                            {
                                arrGauges[i].ModifyGauge(objROI);
                            }
                            arrROIs[i][j] = objROI;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                }
            }
        }
        /// <summary>
        ///  Modify ROI size, location according to mouse event
        /// </summary>
        /// <param name="intPositionX">new location X of selected ROIs</param>
        /// <param name="intPositionY">new location Y of selected ROIs</param>
        private void DragROI(int intPositionX, int intPositionY)
        {
            ROI objROI = new ROI();

            if (m_smVisionInfo.VM_AT_ColorGuideline)
            {
                if (m_smVisionInfo.g_objColorROI.GetROIHandle())
                {
                    m_smVisionInfo.g_objColorROI.DragROI(intPositionX, intPositionY);
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }

            if (m_smProductionInfo.g_blnViewROITool)
            {
                if (m_smVisionInfo.g_objCameraROI.GetROIHandle())
                {
                    m_smVisionInfo.g_objCameraROI.DragROI(intPositionX, intPositionY);
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }

            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "Calibrate":

                    if (m_smVisionInfo.g_intCalibrationType == 0 ||
                        m_smVisionInfo.g_intCalibrationType == 3 ||
                        m_smVisionInfo.g_intCalibrationType == 4)
                    {
                        if (m_smVisionInfo.g_objCalibrateROI.GetROIHandle())
                        {
                            m_smVisionInfo.g_objCalibrateROI.DragROI(intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                    }
                    else if (m_smVisionInfo.g_intCalibrationType == 2)
                    {
                        if (m_smVisionInfo.g_objCalibrateROI.GetROIHandle())
                        {
                            m_smVisionInfo.g_objCalibrateROI.DragROI(intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                    }
                    break;
                case "Calibrate5S":
                    m_smVisionInfo.g_objCalibration.DragROI(intPositionX, intPositionY, m_intClickedPad0T, m_intClickedPad0R, m_intClickedPad0B, m_intClickedPad0L, m_intClickedPad1B, m_intClickedPad2L, m_intClickedPad3T, m_intClickedPad4R);
                    DragROI_Calibrate5S(m_smVisionInfo.g_objCalibration.ref_arrROIs, intPositionX, intPositionY);
                    //m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                case "CalibrateLead3D":
                    m_smVisionInfo.g_objCalibrationLead3D.DragROI(intPositionX, intPositionY, m_intClickedPad0T, m_intClickedPad0R, m_intClickedPad0B, m_intClickedPad0L, m_intClickedPad1B, m_intClickedPad2L, m_intClickedPad3T, m_intClickedPad4R);
                    DragROI_Calibrate5S(m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs, intPositionX, intPositionY);
                    break;
                case "Orient":
                    DragROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrOrientGaugeM4L, intPositionX, intPositionY);
                    break;
                case "Mark":
                case "OCR":
                    if (m_smVisionInfo.g_intLearnStepNo != 14)
                        DragROI(m_smVisionInfo.g_arrMarkROIs, m_smVisionInfo.g_arrMarkGaugeM4L, intPositionX, intPositionY);
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                        DragROI(m_smVisionInfo.g_arrMarkDontCareROIs, intPositionX, intPositionY);
                    break;
                case "MarkOrient":
                case "MOLi":
                    if (m_smVisionInfo.g_blnViewSearchROI)
                    {
                        //if (m_smVisionInfo.g_blnWantGauge)// (m_smVisionInfo.g_blnDisableMOGauge)
                        //    DragROI_With2SearchROI(m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_arrPackageGaugeM4L, intPositionX, intPositionY);
                        //else
                        {
                            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            {
                                DragROI_With2SearchROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrOrientGaugeM4L, intPositionX, intPositionY);
                            }
                            else
                            {
                                DragROI_With2SearchROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrMarkGaugeM4L, intPositionX, intPositionY);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewMOGauge)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrOrientGaugeM4L[i].DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_intSelectedGaugeEdgeMask);
                            UpdatePackageImage_ForRectGaugeM4L(); //2020-06-12 ZJYEOH : Update image withing ROI as user drag
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewOrientTrainROI)
                    {
                        DragROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrPackageGaugeM4L, intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_blnViewPin1TrainROI)
                    {
                        for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                        {
                            if (m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.GetROIHandle())
                            {
                                m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.DragROI(intPositionX, intPositionY);
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewMarkTrainROI || m_smVisionInfo.g_blnViewMark2DCodeROI)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo != 14)
                            DragROI(m_smVisionInfo.g_arrMarkROIs, m_smVisionInfo.g_arrPackageGaugeM4L, intPositionX, intPositionY);
                        else if (m_smVisionInfo.g_intLearnStepNo == 14 && m_smVisionInfo.g_blnDrawFreeShapeDone)
                        {
                            DragMarkDontCareROI(m_smVisionInfo.g_arrMarkDontCareROIs, intPositionX, intPositionY);
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewUnitROI)
                    {

                    }
                    else if (m_smVisionInfo.g_blnViewUnitSurfaceROI)
                    {
                        m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].DragROI(intPositionX, intPositionY);
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }


                    break;
                case "ColorPackage":
                    if (m_smVisionInfo.g_blnViewSearchROI || m_smVisionInfo.g_blnViewPackageTrainROI ||
                        m_smVisionInfo.g_blnViewPackageMaskROI)
                    {
                        DragROI(m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_arrPackageGauge, intPositionX, intPositionY);
                        for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrPackageROIs[i].Count; j++)
                            {
                                m_smVisionInfo.g_arrColorPackageROIs[i][j].LoadROISetting(m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIPositionX,
                                    m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIPositionY, m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIWidth,
                                    m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIHeight);
                            }
                        }
                    }
                    break;
                case "Package":
                    if (m_smVisionInfo.g_blnViewSearchROI || m_smVisionInfo.g_blnViewPackageTrainROI ||
                        m_smVisionInfo.g_blnViewPackageMaskROI)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo != 20 && m_smVisionInfo.g_intLearnStepNo != 21 && m_smVisionInfo.g_intLearnStepNo != 22)
                        {
                            if (m_smVisionInfo.g_blnViewUnitROI)
                            {
                                m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].DragROI(intPositionX, intPositionY);
                                //m_smVisionInfo.g_arrPackageGauge[m_smVisionInfo.g_intSelectedUnit].ModifyGauge(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1]);
                                m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].SetGaugePlace_BasedOnEdgeROI();
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            else
                            {
                                if (m_smVisionInfo.g_intLearnStepNo == 1)
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrPackageGauge2M4L[i].DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_intSelectedGaugeEdgeMask);
                                        UpdatePackageImage_ForRectGaugeM4L(); //2020-06-12 ZJYEOH : Update image withing ROI as user drag
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_intSelectedGaugeEdgeMask);
                                        UpdatePackageImage_ForRectGaugeM4L(); //2020-06-12 ZJYEOH : Update image withing ROI as user drag
                                    }
                                }
                                //m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].DragROI(intPositionX, intPositionY);
                                //m_smVisionInfo.g_arrPackageGauge[m_smVisionInfo.g_intSelectedUnit].ModifyGauge(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0]);
                                //m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_intLearnStepNo == 20 && m_smVisionInfo.g_blnDrawFreeShapeDone)
                            {
                                DragPackageDontCareROI(m_smVisionInfo.g_arrPackageDontCareROIs, intPositionX, intPositionY);
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 22 && m_smVisionInfo.g_blnDrawFreeShapeDone)
                            {
                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                      )
                                {
                                    DragPackageColorDontCareROI(m_smVisionInfo.g_arrPackageColorDontCareROIs, intPositionX, intPositionY);
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 21)
                            {
                                DragROI(m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs, intPositionX, intPositionY);
                            }
                        }
                        //DragROI(m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_arrPackageGauge, intPositionX, intPositionY);
                    }
                    break;
                case "Gauge":
                    int x = 0;
                    switch (m_smVisionInfo.g_strSelectedRectGauge)
                    {
                        case "MarkOrient":
                        case "MOLi":
                            DragROI_With2SearchROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrOrientGaugeM4L, intPositionX, intPositionY);
                            for (x = 0; x < m_smVisionInfo.g_arrOrientROIs.Count; x++)
                            {
                                objROI = (ROI)m_smVisionInfo.g_arrOrientROIs[x][0];
                                if (objROI.GetROIHandle())
                                {
                                    m_smVisionInfo.g_arrMarkGaugeM4L[x] = m_smVisionInfo.g_arrOrientGaugeM4L[x];
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                            break;
                        case "Orient":
                            DragROI(m_smVisionInfo.g_arrOrientROIs, m_smVisionInfo.g_arrOrientGaugeM4L, intPositionX, intPositionY);
                            break;
                        case "Mark":
                            DragROI(m_smVisionInfo.g_arrMarkROIs, m_smVisionInfo.g_arrMarkGaugeM4L, intPositionX, intPositionY);
                            break;
                        case "Package":
                        case "Package1":
                            DragROI(m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_arrPackageGaugeM4L, intPositionX, intPositionY);
                            break;
                        case "Package2":
                            DragROI(m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_arrPackageGauge2, intPositionX, intPositionY);
                            break;
                    }

                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "Pad5S":
                    if (m_smVisionInfo.g_intLearnStepNo == 1)   // Define Positioning
                        DragROI_Pad5SGauge(m_smVisionInfo.g_arrPositioningROIs, m_smVisionInfo.g_arrPositioningGauges, intPositionX, intPositionY);
                    else if (m_smVisionInfo.g_intLearnStepNo == 4)
                    {
                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                if (m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.GetROIHandle())
                                {
                                    m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.DragROI(intPositionX, intPositionY);
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }
                            }
                        }
                    }
                    //else
                    //{
                    //    DragROI_With5SearchROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);

                    //    if (m_smVisionInfo.g_intLearnStepNo == 2)   // Define Package
                    //    {
                    //        // Set RectGauge4L Placement
                    //        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    //        {
                    //            PointF pCenter = new PointF(m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalCenterX,
                    //                                        m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalCenterY);

                    //            // Set gauge with max blue line gauge is outside roi and min blue line gauge is inside roi
                    //            //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(pCenter, 0, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROIWidth, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROIHeight);

                    //            // Set gauge with both max and min blue line gauge are inside roi
                    //            m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);
                    //        }
                    //    }
                    //}
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        if (m_smVisionInfo.g_blnDrawFreeShapeDone)
                            DragPadDontCareROI(m_smVisionInfo.g_arrPadDontCareROIs, intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 16)
                    {
                        if (m_smVisionInfo.g_blnDrawFreeShapeDone)
                        {
                            if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                               )
                            {
                                DragPadColorDontCareROI(m_smVisionInfo.g_arrPadColorDontCareROIs, intPositionX, intPositionY);
                            }
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 2)   // Define Package
                        {
                            if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                            {
                                int intLimitStartX = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth;
                                int intLimitStartY = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight;
                                int intLimitEndX = 0;
                                int intLimitEndY = 0;
                                // Set RectGauge4L Placement
                                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                                {
                                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    // Set gauge with both max and min blue line gauge are inside roi
                                    //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);

                                    m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrPad[i].ref_intSelectedGaugeEdgeMask);
                                    m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.SetGaugePlace_BasedOnEdgeROI();
                                    UpdatePackageImage_ForRectGauge4LPad();

                                    for (int j = 0; j < m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI.Count; j++)
                                    {
                                        if (intLimitStartX > m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionX)
                                            intLimitStartX = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionX;
                                        if (intLimitStartY > m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionY)
                                            intLimitStartY = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionY;

                                        if (intLimitEndX < m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionX + m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIWidth)
                                            intLimitEndX = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionX + m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIWidth;
                                        if (intLimitEndY < m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionY + m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIHeight)
                                            intLimitEndY = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIPositionY + m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrEdgeROI[j].ref_ROIHeight;
                                    }

                                }
                                m_smVisionInfo.g_objTopParentROI.LoadROISetting(intLimitStartX, intLimitStartY, intLimitEndX - intLimitStartX, intLimitEndY - intLimitStartY);
                            }
                            else
                            {
                                // 2021-11-24 CCENG : Facing issue not able to drag pad ROI if using DragROI_With5SearchROI
                                // 2020-05-04 ZJYEOH : Need to consider when user dont want 4 sides
                                //if (!m_smVisionInfo.g_blnCheck4Sides)
                                //    DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                                //else
                                //    DragROI_With5SearchROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                                DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                            }
                            if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                            {
                                if (m_smVisionInfo.g_objTopParentROI.GetROIHandle())
                                {
                                    //add condition to prevent user drag ROI outside picture box
                                    m_smVisionInfo.g_objTopParentROI.DragFixROI3(intPositionX, intPositionY);
                                    m_intTopParentPositionXCurr = m_smVisionInfo.g_objTopParentROI.ref_ROITotalX;
                                    m_intTopParentPositionYCurr = m_smVisionInfo.g_objTopParentROI.ref_ROITotalY;
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 0)
                        {
                            if (m_intVisionType == 0)
                            {
                                // 2020-05-04 ZJYEOH : Need to consider when user dont want 4 sides
                                if (!m_smVisionInfo.g_blnCheck4Sides)
                                    DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                                else
                                    DragROI_With5SearchROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                            }
                            else
                            {
                                DragROI(m_smVisionInfo.g_arrPadOrientROIs, intPositionX, intPositionY);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 14 || m_smVisionInfo.g_intLearnStepNo == 15)
                        {
                            DragROI(m_smVisionInfo.g_arrPadOrientROIs, intPositionX, intPositionY);
                        }
                        else
                        {
                            // 2020-05-04 ZJYEOH : Need to consider when user dont want 4 sides
                            if (!m_smVisionInfo.g_blnCheck4Sides)
                                DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                            else
                                DragROI_With5SearchROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                        }
                    }
                    break;
                case "PadPackage":
                    //DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);

                    //if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Package
                    //{
                    //    // Set RectGauge4L Placement
                    //    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    //    {
                    //        PointF pCenter = new PointF(m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalCenterX,
                    //                                    m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalCenterY);

                    //        // Set gauge with max blue line gauge is outside roi and min blue line gauge is inside roi
                    //        //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(pCenter, 0, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROIWidth, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROIHeight);

                    //        // Set gauge with both max and min blue line gauge are inside roi
                    //        m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);
                    //    }
                    //}

                    if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Package
                    {
                        // Set RectGauge4L Placement
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            // Set gauge with both max and min blue line gauge are inside roi
                            // m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);

                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrPad[i].ref_intSelectedGaugeEdgeMask);
                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.SetGaugePlace_BasedOnEdgeROI();
                            UpdatePackageImage_ForRectGauge4LPad();

                        }
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        if (m_smVisionInfo.g_blnDrawFreeShapeDone)
                            DragPadPackageDontCareROI(m_smVisionInfo.g_arrPadPackageDontCareROIs, intPositionX, intPositionY);
                    }
                    else
                    {
                        DragROI(m_smVisionInfo.g_arrPadROIs, intPositionX, intPositionY);
                    }
                    break;
                case "LeadPackage":

                    if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Package
                    {
                        // Set RectGauge4L Placement
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                        {
                            if (i != 0)
                                break;
                            // Set gauge with both max and min blue line gauge are inside roi
                            // m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);
                            if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                            {
                                m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrLead3D[i].ref_intSelectedGaugeEdgeMask);
                                m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.SetGaugePlace_BasedOnEdgeROI();
                            }
                        }
                    }
                    else
                    {
                        DragROI(m_smVisionInfo.g_arrLeadROIs, intPositionX, intPositionY);
                    }
                    break;
                case "Seal":
                    if (m_smVisionInfo.g_intLearnStepNo == 13 || m_smVisionInfo.g_intLearnStepNo == 14 || m_smVisionInfo.g_intLearnStepNo == 10) //m_smVisionInfo.g_intLearnStepNo == 2 || 
                    {
                        DragROI(m_smVisionInfo.g_arrSealROIs, intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2) //2020-07-02 ZJYEOH : Limit position pattern ROI within position search ROI
                    {
                        //DragROI(m_smVisionInfo.g_arrSealROIs, intPositionX, intPositionY);
                        if (m_smVisionInfo.g_arrSealROIs.Count > 0)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[0].Count; j++)
                            {
                                if (m_smVisionInfo.g_arrSealROIs[0][j].GetROIHandle())
                                {
                                    m_smVisionInfo.g_arrSealROIs[0][j].DragROI(intPositionX, intPositionY);

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth > m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth)
                                    {
                                        int intOffset = (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth) - (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth);
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX - intOffset, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight);
                                    }

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight > m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight)
                                    {
                                        int intOffset = (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight) - (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight);
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY - intOffset, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight);
                                    }

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth > m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth)
                                    {
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY, m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight);
                                    }

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight > m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight)
                                    {
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight);
                                    }

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX < m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX)
                                    {
                                        //int intOffset = m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX - m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX;
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX /*+ intOffset*/, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight);
                                    }

                                    if (m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY < m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY)
                                    {
                                        //int intOffset = m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY - m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionY;
                                        m_smVisionInfo.g_arrSealROIs[0][j].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIPositionX, m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY /*+ intOffset*/, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIWidth, m_smVisionInfo.g_arrSealROIs[0][j].ref_ROIHeight);
                                    }

                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1 && m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                    {
                        if (m_smVisionInfo.g_arrSealROIs[0][0].GetROIHandle())
                        {
                            //if (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX < m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth)
                            //    intPositionX = m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth + 
                            //        (m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX + m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth - m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX);

                            // 2020 04 15 - Draw 1 position search ROI only with x length same as image size
                            m_smVisionInfo.g_arrSealROIs[0][0].DragROI_SealSprocketSearchROI(intPositionX, intPositionY,
                                                                        0, m_smVisionInfo.g_arrImages[0].ref_intImageWidth,
                                                                        m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0, 0);

                            //m_smVisionInfo.g_arrSealROIs[0][0].DragROI(intPositionX, intPositionY);
                            ////if (intPositionX - (intPositionX - m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX) - m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth > 0)
                            //if (m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX > 0 || ((intPositionX - m_intClickedX) > 0))
                            //{

                            //    m_smVisionInfo.g_arrSealROIs[0][2].LoadROISetting((int)(m_smVisionInfo.g_arrSealROIs[0][0].ref_ROICenterX - (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * m_smVisionInfo.g_fCalibPixelX) - (m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth / 2)),
                            //        m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY,
                            //        m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth,
                            //        m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight);
                            //}
                            //else
                            //{

                            //    m_smVisionInfo.g_arrSealROIs[0][2].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX,
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY,
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth,
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight);

                            //    m_smVisionInfo.g_arrSealROIs[0][0].LoadROISetting((int)(m_smVisionInfo.g_arrSealROIs[0][2].ref_ROICenterX + (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * m_smVisionInfo.g_fCalibPixelX) - (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth / 2)),
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionY,
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth,
                            //                                                      m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIHeight);
                            //}

                        }

                        // 2020 04 15 - CCENG: No longer using position search ROI 2
                        //if (m_smVisionInfo.g_arrSealROIs[0][2].GetROIHandle())
                        //{
                        //    m_smVisionInfo.g_arrSealROIs[0][2].DragROI(intPositionX, intPositionY);
                        //    //if (intPositionX + (m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth - (intPositionX - m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionX)) + m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth < m_smVisionInfo.g_intCameraResolutionWidth)
                        //    if ((int)(m_smVisionInfo.g_arrSealROIs[0][2].ref_ROICenterX + (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * m_smVisionInfo.g_fCalibPixelX) + (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth / 2)) < m_smVisionInfo.g_intCameraResolutionWidth)
                        //    {
                        //        m_smVisionInfo.g_arrSealROIs[0][0].LoadROISetting((int)(m_smVisionInfo.g_arrSealROIs[0][2].ref_ROICenterX + (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * m_smVisionInfo.g_fCalibPixelX) - (m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth / 2)),
                        //            m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionY,
                        //            m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth,
                        //            m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIHeight);
                        //    }
                        //    else
                        //    {
                        //        m_smVisionInfo.g_arrSealROIs[0][0].LoadROISetting(m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionX,
                        //           m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIPositionY,
                        //           m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth,
                        //           m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIHeight);

                        //        m_smVisionInfo.g_arrSealROIs[0][2].LoadROISetting((int)(m_smVisionInfo.g_arrSealROIs[0][0].ref_ROICenterX - (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * m_smVisionInfo.g_fCalibPixelX) - (m_smVisionInfo.g_arrSealROIs[0][2].ref_ROIWidth / 2)),
                        //            m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIPositionY,
                        //            m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIWidth,
                        //            m_smVisionInfo.g_arrSealROIs[0][0].ref_ROIHeight);
                        //    }
                        //}
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        if (m_smVisionInfo.g_arrSealROIs[1][0].GetROIHandle())
                        {
                            if (intPositionY > m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionY)
                                intPositionY = m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionY;

                            // 2020 09 23 - Control Seal ROI width not less than pocket pitch. x 1.1 to make sure Seal ROI width no less than pocket pitch due to calibration value.
                            m_smVisionInfo.g_arrSealROIs[1][0].DragROIWithMinWidth(intPositionX, intPositionY, (int)Math.Ceiling(m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * 1.1 * m_smVisionInfo.g_fCalibPixelX));

                            m_smVisionInfo.g_arrSealROIs[2][0].LoadROISetting(m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionX,
                                m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionY,
                                m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIWidth,
                                m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIHeight);

                            m_smVisionInfo.g_objSeal.BuildObjects(m_smVisionInfo.g_arrSealROIs);

                            //m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIWidth = m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIWidth;
                            //m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIHeight = m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIHeight;
                            //m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionX = m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionX;
                        }

                        if (m_smVisionInfo.g_arrSealROIs[2][0].GetROIHandle())
                        {

                            if (intPositionY < m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIHeight)
                                intPositionY = m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionY + m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIHeight;

                            // 2020 09 23 - Control Seal ROI width not less than pocket pitch. x 1.1 to make sure Seal ROI width no less than pocket pitch due to calibration value.
                            m_smVisionInfo.g_arrSealROIs[2][0].DragROIWithMinWidth(intPositionX, intPositionY, (int)Math.Ceiling(m_smVisionInfo.g_objSeal.ref_intTapePocketPitch * 1.1 * m_smVisionInfo.g_fCalibPixelX));

                            m_smVisionInfo.g_arrSealROIs[1][0].LoadROISetting(m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionX,
                                m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionY,
                                m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIWidth,
                                m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIHeight);

                            m_smVisionInfo.g_objSeal.BuildObjects(m_smVisionInfo.g_arrSealROIs);

                            //m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIWidth = m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIWidth;
                            //m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIHeight = m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIHeight;
                            //m_smVisionInfo.g_arrSealROIs[1][0].ref_ROIPositionX = m_smVisionInfo.g_arrSealROIs[2][0].ref_ROIPositionX;
                        }
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 6)
                    {
                        if (m_smVisionInfo.g_arrSealROIs.Count > 6)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[6].Count > 0)
                            {
                                if (m_smVisionInfo.g_arrSealROIs[6][0].GetROIHandle())
                                {
                                    m_smVisionInfo.g_arrSealROIs[6][0].DragROI(intPositionX, intPositionY);
                                    m_smVisionInfo.g_objSealCircleGauges.SetGaugePlacement(m_smVisionInfo.g_arrSealROIs[6][0], 20, m_smVisionInfo.g_objSeal.ref_intSpocketHolePosition == 0);
                                }
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 15)
                    {
                        DragROI(m_smVisionInfo.g_arrSealDontCareROIs, intPositionX, intPositionY);
                    }
                    else
                    {
                        for (x = 0; x < m_smVisionInfo.g_arrSealROIs.Count; x++)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[x].Count > 0)
                            {
                                objROI = (ROI)m_smVisionInfo.g_arrSealROIs[x][0];
                                if (objROI.GetROIHandle())
                                {
                                    objROI.DragROI(intPositionX, intPositionY);
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                    }
                    break;
                case "Position":
                    if (m_smVisionInfo.g_objPositioning.ref_intMethod == 0)
                        DragROI(m_smVisionInfo.g_arrPositioningROIs, m_smVisionInfo.g_arrPositioningGauges, intPositionX, intPositionY);
                    else
                    {
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 2:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Search ROI")
                                    {
                                        if (m_smVisionInfo.g_arrPositioningROIs[i].GetROIHandle())
                                        {
                                            m_smVisionInfo.g_arrPositioningROIs[i].DragROI(intPositionX, intPositionY);
                                        }
                                    }
                                }
                                break;
                            case 4:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Pocket ROI")
                                    {
                                        if (m_smVisionInfo.g_arrPositioningROIs[i].GetROIHandle())
                                        {
                                            m_smVisionInfo.g_arrPositioningROIs[i].DragROI(intPositionX, intPositionY);
                                        }
                                    }
                                }
                                break;
                            case 5:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                    {
                                        if (m_smVisionInfo.g_arrPositioningROIs[i].GetROIHandle())
                                        {
                                            m_smVisionInfo.g_arrPositioningROIs[i].DragROI(intPositionX, intPositionY);
                                        }
                                    }
                                }
                                break;
                            case 7:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Empty ROI")
                                    {
                                        if (m_smVisionInfo.g_arrPositioningROIs[i].GetROIHandle())
                                        {
                                            m_smVisionInfo.g_arrPositioningROIs[i].DragROI(intPositionX, intPositionY);
                                        }
                                    }
                                }
                                break;
                            case 8:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Orient ROI")
                                    {
                                        if (m_smVisionInfo.g_arrPositioningROIs[i].GetROIHandle())
                                        {
                                            m_smVisionInfo.g_arrPositioningROIs[i].DragROI(intPositionX, intPositionY);
                                        }
                                    }
                                }
                                break;
                        }

                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //DragROI(m_smVisionInfo.g_arrPositioningROIs, intPositionX, intPositionY);
                    }

                    break;
                case "PocketPosition":

                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Search ROI")
                                {
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 1:
                            for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pattern ROI")
                                {
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 2:
                            for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pocket Gauge ROI")
                                {
                                    DragROI_PocketPosition(m_smVisionInfo.g_arrPocketPositionROIs, m_smVisionInfo.g_arrPocketPositionGauges, intPositionX, intPositionY, 0);
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 3:
                            for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Gauge ROI")
                                {
                                    DragROI_PocketPosition(m_smVisionInfo.g_arrPocketPositionROIs, m_smVisionInfo.g_arrPocketPositionGauges, intPositionX, intPositionY, 1);
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }

                    break;
                case "Barcode":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Search ROI")
                                {
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 1:
                            for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Pattern ROI")
                                {
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 2:
                            for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Barcode ROI")
                                {
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }
                    break;
                case "LeadPocketDontCareFix":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            DragROI_LeadPocketDonCareROIFix(m_smVisionInfo.g_arrLeadPocketDontCareROIsFix, intPositionX, intPositionY);

                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }

                    break;
                case "LeadPocketDontCareManual":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 1)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 2:
                            DragROI_LeadPocketDonCareROIManual(m_smVisionInfo.g_arrLeadPocketDontCareROIsManual, intPositionX, intPositionY);

                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }

                    break;
                case "LeadPocketDontCareAuto":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 1)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1].GetROIHandle())
                                    {
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1].DragROI(intPositionX, intPositionY);
                                    }
                                }
                            }
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 2:
                            DragROI_LeadPocketDonCareROIAuto(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto, intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        case 3:
                            DragROI_LeadPocketDonCareROIAuto(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto, intPositionX, intPositionY);
                            UpdatePocketEdgeDontCareImage();
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }

                    break;
                case "LeadPocketDontCareBlob":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            DragROI_LeadPocketDonCareROIBlob(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob, intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                    }

                    break;
                //case "Camera":
                //    if (m_smVisionInfo.g_objCameraROI.GetROIHandle())
                //    {
                //        m_smVisionInfo.g_objCameraROI.DragROI(intPositionX, intPositionY);
                //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //    }
                //    break;
                case "System":
                    if (m_smVisionInfo.g_arrSystemROI[0].GetROIHandle())
                    {
                        m_smVisionInfo.g_arrSystemROI[0].DragROI(intPositionX, intPositionY);
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    break;
                case "UnitPresent":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (m_smVisionInfo.g_arrPositioningROIs.Count > 0 && m_smVisionInfo.g_arrPositioningROIs[0].GetROIHandle())
                        {
                            m_smVisionInfo.g_arrPositioningROIs[0].DragROI(intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        if (m_smVisionInfo.g_objUnitPresent.DragTemporaryUnitROI(intPositionX, intPositionY))
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    break;
                case "Lead":
                    if (m_smVisionInfo.g_intLearnStepNo == 0 || m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        DragROI(m_smVisionInfo.g_arrLeadROIs, intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DragEdgeROI(intPositionX, intPositionY, m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_intSelectedGaugeEdgeMask);
                            UpdatePackageImage_ForRectGaugeM4L(); //2020-08-07 ZJYEOH : Update image withing ROI as user drag
                        }
                    }
                    break;
                case "Li3D":
                case "Lead3D":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        DragROI(m_smVisionInfo.g_arrLeadROIs, intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                if (m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.GetROIHandle())
                                {
                                    m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.DragROI(intPositionX, intPositionY);
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        if (m_smVisionInfo.g_blnDrawFreeShapeDone)
                            DragLead3DDontCareROI(m_smVisionInfo.g_arrLead3DDontCareROIs, intPositionX, intPositionY);
                    }

                    break;
                case "PH":
                    if (m_smVisionInfo.g_arrPHROIs[0].GetROIHandle())
                    {
                        m_smVisionInfo.g_arrPHROIs[0].DragROI(intPositionX, intPositionY);
                    }
                    break;
                default:
                    {
                        if (m_smProductionInfo.g_blnView5SRuler)
                        {
                            if (m_objSubRulerROI.GetROIHandle())
                            {
                                m_objSubRulerROI.DragROI(intPositionX, intPositionY);
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            else if (m_smVisionInfo.g_objCameraROI.GetROIHandle())
                            {
                                m_smVisionInfo.g_objCameraROI.DragROI(intPositionX, intPositionY);
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// Draw cross line on the picture box center
        /// </summary>
        private void DrawCrosshair()
        {
            if (m_smProductionInfo.g_blnViewCrosshair)
            {
                m_Graphic.DrawLine(new Pen(Color.Blue), new Point((int)Math.Round((float)m_smVisionInfo.g_intCameraResolutionWidth / 2 * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero), 0), new Point((int)Math.Round((float)m_smVisionInfo.g_intCameraResolutionWidth / 2 * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero), pic_Image.Height));
                m_Graphic.DrawLine(new Pen(Color.Blue), new Point(0, (int)Math.Round((float)m_smVisionInfo.g_intCameraResolutionHeight / 2 * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero)), new Point(pic_Image.Width, (int)Math.Round((float)m_smVisionInfo.g_intCameraResolutionHeight / 2 * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero)));
            }

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_smVisionInfo.g_strSelectedPage == "" || m_smProductionInfo.g_blnViewROITool) //m_smVisionInfo.g_strSelectedPage == "Camera")
                    {
                        if (m_smProductionInfo.g_blnView5SRuler)
                        {
                            m_smVisionInfo.g_objCameraROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                            m_objSubRulerROI.AttachImage(m_smVisionInfo.g_objCameraROI);
                            int intRulerDistanceX = m_smVisionInfo.g_objCameraROI.ref_ROIWidth - m_objSubRulerROI.ref_ROIWidth;
                            int intRulerDistanceY = m_smVisionInfo.g_objCameraROI.ref_ROIHeight - m_objSubRulerROI.ref_ROIHeight;
                            m_objSubRulerROI.LoadROISetting(intRulerDistanceX / 2, intRulerDistanceY / 2,
                                m_objSubRulerROI.ref_ROIWidth,
                                m_objSubRulerROI.ref_ROIHeight);
                            m_objSubRulerROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, "", 1, Color.Pink);
                        }
                    }

                    //if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        if (m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.ref_blnDrawCrasshair)
                        {
                            m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.DrawCrosshair(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.DrawCrosshairROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                        else if (m_smProductionInfo.g_blnViewPosCrosshair)
                            m_smVisionInfo.g_arrPad[0].ref_objPosCrosshair.DrawCrosshair(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                    }
                    break;
                default:



                    if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        if (m_smProductionInfo.g_blnViewPosCrosshair)
                            m_smVisionInfo.g_objPositioning.ref_objCrosshair.DrawCrosshair(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_objPositioning.ref_objCrosshair.ref_blnDrawCrasshair)
                        {
                            m_smVisionInfo.g_objPositioning.ref_objCrosshair.DrawCrosshair(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            m_smVisionInfo.g_objPositioning.ref_objCrosshair.DrawCrosshairROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                    }

                    break;

            }


        }

        /// <summary>
        /// Draw dont care area
        /// </summary>
        /// <param name="minX">min x</param>
        /// <param name="maxX">max x</param>
        /// <param name="minY">min y</param>
        /// <param name="maxY">max y</param>
        /// <param name="index">ROI index</param>
        private void DrawDontCareArea(int minX, int maxX, int minY, int maxY, int index)
        {
            int intWidth, intHeight, intX = 0, intY = 0;

            if (((m_pRectStart.X >= minX && m_pRectStart.X <= maxX) && (m_pRectStart.Y >= minY && m_pRectStart.Y <= maxY)) ||
                ((m_pRectStop.X >= minX && m_pRectStop.X <= maxX) && (m_pRectStop.Y >= minY && m_pRectStop.Y <= maxY)))
            {
                if (m_pRectStop.X > m_pRectStart.X)
                    intX = m_pRectStart.X - minX;
                else
                    intX = m_pRectStop.X - minX;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intY = m_pRectStart.Y - minY;
                else
                    intY = m_pRectStop.Y - minY;
            }
            else
            {
                m_blnDrawRect = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                return;
            }

            if (m_pRectStop.X > m_pRectStart.X)
                intWidth = m_pRectStop.X - m_pRectStart.X;
            else
                intWidth = m_pRectStart.X - m_pRectStop.X;

            if (m_pRectStop.Y > m_pRectStart.Y)
                intHeight = m_pRectStop.Y - m_pRectStart.Y;
            else
                intHeight = m_pRectStart.Y - m_pRectStop.Y;

            if (intX < 0)
            {
                intX = 0;

                if (m_pRectStop.X > m_pRectStart.X)
                    intWidth = intWidth - (minX - m_pRectStart.X);
                else
                    intWidth = intWidth - (minX - m_pRectStop.X);
            }
            if (intY < 0)
            {
                intY = 0;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intHeight = intHeight - (minY - m_pRectStart.Y);
                else
                    intHeight = intHeight - (minY - m_pRectStop.Y);
            }

            float fWidth = (intX + intWidth) / m_smVisionInfo.g_fScaleX;
            //if (intX + intWidth > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIWidth)
            if (fWidth > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIWidth)
                intWidth = m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIWidth;

            float fHeight = (intY + intHeight) / m_smVisionInfo.g_fScaleY;
            //if (intY + intHeight > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIHeight)
            if (fHeight > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIHeight)
                intHeight = m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIHeight;

            ROI objROI = new ROI("Don't Care ROI", 3);  // ROI Type set to 3 bcos it will attach to Package ROI(train roi)
            objROI.LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX - (m_smVisionInfo.g_arrPadROIs[index][2].ref_ROIPositionX)),
                                  (int)(intY / m_smVisionInfo.g_fScaleY - (m_smVisionInfo.g_arrPadROIs[index][2].ref_ROIPositionY)),
                                (int)(intWidth / m_smVisionInfo.g_fScaleX), (int)(intHeight / m_smVisionInfo.g_fScaleY));
            objROI.AttachImage(m_smVisionInfo.g_arrPadROIs[index][2]);  // PadROis index 2 is Package ROI
            m_smVisionInfo.g_arrPadROIs[index].Add(objROI);
        }
        /// <summary>
        /// Draw dont care area
        /// </summary>
        /// <param name="minX">min x</param>
        /// <param name="maxX">max x</param>
        /// <param name="minY">min y</param>
        /// <param name="maxY">max y</param>
        /// <param name="index">ROI index</param>
        private void DrawDontCareArea_New(int minX, int maxX, int minY, int maxY, int index)
        {
            int intWidth, intHeight, intX = 0, intY = 0;

            if (((m_pRectStart.X >= minX && m_pRectStart.X <= maxX) && (m_pRectStart.Y >= minY && m_pRectStart.Y <= maxY)) ||
                ((m_pRectStop.X >= minX && m_pRectStop.X <= maxX) && (m_pRectStop.Y >= minY && m_pRectStop.Y <= maxY)))
            {
                if (m_pRectStop.X > m_pRectStart.X)
                    intX = m_pRectStart.X;// - minX;
                else
                    intX = m_pRectStop.X;// - minX;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intY = m_pRectStart.Y;// - minY;
                else
                    intY = m_pRectStop.Y;// - minY;
            }
            else
            {
                m_blnDrawRect = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                return;
            }

            if (m_pRectStop.X > m_pRectStart.X)
                intWidth = m_pRectStop.X - m_pRectStart.X;
            else
                intWidth = m_pRectStart.X - m_pRectStop.X;

            if (m_pRectStop.Y > m_pRectStart.Y)
                intHeight = m_pRectStop.Y - m_pRectStart.Y;
            else
                intHeight = m_pRectStart.Y - m_pRectStop.Y;

            if (intX < 0)
            {
                intX = 0;

                if (m_pRectStop.X > m_pRectStart.X)
                    intWidth = intWidth - (minX - m_pRectStart.X);
                else
                    intWidth = intWidth - (minX - m_pRectStop.X);
            }
            if (intY < 0)
            {
                intY = 0;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intHeight = intHeight - (minY - m_pRectStart.Y);
                else
                    intHeight = intHeight - (minY - m_pRectStop.Y);
            }

            //float fWidth = (intX + intWidth) / m_smVisionInfo.g_fScaleX;
            ////if (intX + intWidth > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIWidth)
            //if (fWidth > m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIWidth)
            //    intWidth = m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIWidth;

            //float fHeight = (intY + intHeight) / m_smVisionInfo.g_fScaleY;
            ////if (intY + intHeight > m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIHeight)
            //if (fHeight > m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIHeight)
            //    intHeight = m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIHeight;

            ROI objROI = new ROI("Don't Care ROI", 2);  // ROI Type set to 3 bcos it will attach to Package ROI(train roi)
            objROI.LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX - (m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIPositionX)),//-m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIPositionX)),
                                  (int)(intY / m_smVisionInfo.g_fScaleY - (m_smVisionInfo.g_arrPadROIs[index][3].ref_ROIPositionY)),//-m_smVisionInfo.g_arrPadROIs[index][0].ref_ROIPositionY)),
                                (int)(intWidth / m_smVisionInfo.g_fScaleX), (int)(intHeight / m_smVisionInfo.g_fScaleY));
            objROI.AttachImage(m_smVisionInfo.g_arrPadROIs[index][3]);  // PadROis index 2 is Package ROI
            m_smVisionInfo.g_arrPadROIs[index].Add(objROI);
        }

        private void DrawDontCareArea_NewPackage(int minX, int maxX, int minY, int maxY, int index)
        {
            int intWidth, intHeight, intX = 0, intY = 0;

            if (((m_pRectStart.X >= minX && m_pRectStart.X <= maxX) && (m_pRectStart.Y >= minY && m_pRectStart.Y <= maxY)) ||
                ((m_pRectStop.X >= minX && m_pRectStop.X <= maxX) && (m_pRectStop.Y >= minY && m_pRectStop.Y <= maxY)))
            {
                if (m_pRectStop.X > m_pRectStart.X)
                    intX = m_pRectStart.X;// - minX;
                else
                    intX = m_pRectStop.X;// - minX;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intY = m_pRectStart.Y;// - minY;
                else
                    intY = m_pRectStop.Y;// - minY;
            }
            else
            {
                m_blnDrawRect = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                return;
            }

            if (m_pRectStop.X > m_pRectStart.X)
                intWidth = m_pRectStop.X - m_pRectStart.X;
            else
                intWidth = m_pRectStart.X - m_pRectStop.X;

            if (m_pRectStop.Y > m_pRectStart.Y)
                intHeight = m_pRectStop.Y - m_pRectStart.Y;
            else
                intHeight = m_pRectStart.Y - m_pRectStop.Y;

            if (intX < 0)
            {
                intX = 0;

                if (m_pRectStop.X > m_pRectStart.X)
                    intWidth = intWidth - (minX - m_pRectStart.X);
                else
                    intWidth = intWidth - (minX - m_pRectStop.X);
            }
            if (intY < 0)
            {
                intY = 0;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intHeight = intHeight - (minY - m_pRectStart.Y);
                else
                    intHeight = intHeight - (minY - m_pRectStop.Y);
            }

            ROI objROI = new ROI("Don't Care ROI", 2);  // ROI Type set to 3 bcos it will attach to Package ROI(train roi)
            objROI.LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX - (m_smVisionInfo.g_arrPackageROIs[index][2].ref_ROITotalX)),//-m_smVisionInfo.g_arrPackageROIs[index][0].ref_ROIPositionX)),
                                  (int)(intY / m_smVisionInfo.g_fScaleY - (m_smVisionInfo.g_arrPackageROIs[index][2].ref_ROITotalY)),//-m_smVisionInfo.g_arrPackageROIs[index][0].ref_ROIPositionY)),
                                (int)(intWidth / m_smVisionInfo.g_fScaleX), (int)(intHeight / m_smVisionInfo.g_fScaleY));
            objROI.AttachImage(m_smVisionInfo.g_arrPackageROIs[index][2]);  // PackageROis index 1 is Package ROI
            m_smVisionInfo.g_arrPackageROIs[index].Add(objROI);
        }

        /// <summary>
        /// Draw dont care area
        /// </summary>
        /// <param name="minX">min x</param>
        /// <param name="maxX">max x</param>
        /// <param name="minY">min y</param>
        /// <param name="maxY">max y</param>
        /// <param name="index">ROI index</param>
        private void DrawDontCareArea_Lead(int minX, int maxX, int minY, int maxY, int index)
        {
            int intWidth, intHeight, intX = 0, intY = 0;

            if (((m_pRectStart.X >= minX && m_pRectStart.X <= maxX) && (m_pRectStart.Y >= minY && m_pRectStart.Y <= maxY)) ||
                ((m_pRectStop.X >= minX && m_pRectStop.X <= maxX) && (m_pRectStop.Y >= minY && m_pRectStop.Y <= maxY)))
            {
                if (m_pRectStop.X > m_pRectStart.X)
                    intX = m_pRectStart.X - minX;
                else
                    intX = m_pRectStop.X - minX;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intY = m_pRectStart.Y - minY;
                else
                    intY = m_pRectStop.Y - minY;
            }
            else
            {
                m_blnDrawRect = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                return;
            }

            if (m_pRectStop.X > m_pRectStart.X)
                intWidth = m_pRectStop.X - m_pRectStart.X;
            else
                intWidth = m_pRectStart.X - m_pRectStop.X;

            if (m_pRectStop.Y > m_pRectStart.Y)
                intHeight = m_pRectStop.Y - m_pRectStart.Y;
            else
                intHeight = m_pRectStart.Y - m_pRectStop.Y;

            if (intX < 0)
            {
                intX = 0;

                if (m_pRectStop.X > m_pRectStart.X)
                    intWidth = intWidth - (minX - m_pRectStart.X);
                else
                    intWidth = intWidth - (minX - m_pRectStop.X);
            }
            if (intY < 0)
            {
                intY = 0;

                if (m_pRectStop.Y > m_pRectStart.Y)
                    intHeight = intHeight - (minY - m_pRectStart.Y);
                else
                    intHeight = intHeight - (minY - m_pRectStop.Y);
            }

            float fWidth = (intX + intWidth) / m_smVisionInfo.g_fScaleX;
            //if (intX + intWidth > m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIWidth)
            if (fWidth > m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIWidth)
                intWidth = m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIWidth;

            float fHeight = (intY + intHeight) / m_smVisionInfo.g_fScaleY;
            //if (intY + intHeight > m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIHeight)
            if (fHeight > m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIHeight)
                intHeight = m_smVisionInfo.g_arrLeadROIs[index][0].ref_ROIHeight;

            ROI objROI = new ROI("Don't Care ROI", 3);
            objROI.LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX), (int)(intY / m_smVisionInfo.g_fScaleY),
                                (int)(intWidth / m_smVisionInfo.g_fScaleX), (int)(intHeight / m_smVisionInfo.g_fScaleY));
            objROI.AttachImage(m_smVisionInfo.g_arrLeadROIs[index][0]);
            m_smVisionInfo.g_arrLeadROIs[index].Add(objROI);
        }

        /// <summary>
        /// Draw dont care area
        /// </summary>
        private void DrawDontCareArea()
        {
            //if (m_smVisionInfo.g_blnViewDontCareArea)
            //{
            //    m_smVisionInfo.g_arrPolygon[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPoint(m_Graphic);
            //    m_smVisionInfo.g_arrPolygon[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPolygon(m_Graphic);
            //}
            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "Orient":
                case "MarkOrient":
                case "MOLi":
                case "OCR":
                    if (m_blnDrawRectDone)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 12)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_blnDrawDraggingBox)
                                {
                                    m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                        if (m_smVisionInfo.g_intLearnStepNo == 14)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_intSelectedUnit < m_smVisionInfo.g_arrPolygon_Mark.Count && i < m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit].Count)
                                {
                                    m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                    m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].DrawPolygon(m_Graphic, m_fZoomCount, m_fZoomCount);
                                }

                                //if (m_smVisionInfo.g_arrPolygon_Mark[i].Count > m_smVisionInfo.g_intSelectedTemplate)
                                //{
                                //    //m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPoint(m_Graphic);
                                //    //m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPolygon(m_Graphic);
                                //    m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                //    m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].DrawPolygon(m_Graphic, m_fZoomCount, m_fZoomCount);
                                //}
                            }
                        }
                    }
                    break;
                case "Package":
                    if (m_blnDrawRectDone)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_blnDrawDraggingBox)
                                {
                                    m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 0)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                {
                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }

                        if (m_smVisionInfo.g_intLearnStepNo == 20)
                        {
                            if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrPolygon_Package[0].Count > m_smVisionInfo.g_intSelectedType)
                                {

                                    //m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPoint(m_Graphic);
                                    //m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].DrawPolygon(m_Graphic);
                                    for (int i = 0; i < m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count; i++)
                                    {
                                        m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][i].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                        m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][i].DrawPolygon(m_Graphic, m_smVisionInfo.g_intSelectedType, m_fZoomCount, m_fZoomCount);
                                    }


                                }
                            }
                        }

                        if (m_smVisionInfo.g_intLearnStepNo == 22)
                        {
                            if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                      )
                            {
                                if (m_smVisionInfo.g_arrPolygon_PackageColor.Count > m_smVisionInfo.g_intSelectedUnit)
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                        {
                                            m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][j].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "PadPackage":
                    if (m_blnDrawRectDone)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrPolygon_PadPackage.Count > i)
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PadPackage[i].Count > m_smVisionInfo.g_intSelectedType)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].Count; j++)
                                        {
                                            m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType][j].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                            m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType][j].DrawPolygon(m_Graphic, m_smVisionInfo.g_intSelectedType, m_fZoomCount, m_fZoomCount);
                                        }
                                    }
                                }
                            }
                        }

                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "Pad5S":
                    if (m_blnDrawRectDone)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrPolygon_Pad.Count > i)
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPolygon_Pad[i].Count; j++)
                                    {
                                        m_smVisionInfo.g_arrPolygon_Pad[i][j].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                        m_smVisionInfo.g_arrPolygon_Pad[i][j].DrawPolygon(m_Graphic, m_fZoomCount, m_fZoomCount);
                                    }
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 16)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                   )
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PadColor.Count > i)
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_PadColor[i].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                        {
                                            for (int j = 0; j < m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                            {
                                                m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][j].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                                //m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][j].DrawPolygon(m_Graphic, m_fZoomCount, m_fZoomCount);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "Li3D":
                case "Lead3D":
                    if (m_blnDrawRectDone)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrPolygon_Lead3D.Count > i)
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPolygon_Lead3D[i].Count; j++)
                                    {
                                        m_smVisionInfo.g_arrPolygon_Lead3D[i][j].DrawPoint(m_Graphic, m_fZoomCount, m_fZoomCount);
                                        m_smVisionInfo.g_arrPolygon_Lead3D[i][j].DrawPolygon(m_Graphic, m_fZoomCount, m_fZoomCount);
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// Draw gauge object
        /// </summary>
        private void DrawGauge()
        {
            int i = 0;
            if (m_smVisionInfo.g_blnViewGauge)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "Orient":
                    case "MarkOrient":
                    case "MOLi":
                        if (((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                            return;
                        if (!m_smVisionInfo.g_blnWantGauge)
                            return;

                        if (m_smVisionInfo.g_blnViewPackageImage && m_smVisionInfo.g_blnDisableMOGauge)
                        {
                            if (m_smVisionInfo.g_arrPackageROIs.Count > 0)
                            {
                                m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                            }
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult(m_Graphic);
                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint(m_Graphic);

                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else if (m_smVisionInfo.g_blnViewMOGauge)
                        {
                            if (m_smVisionInfo.g_blnViewPackageImage)
                                m_smVisionInfo.g_arrOrientROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                            else
                                m_smVisionInfo.g_arrOrientROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);

                            for (i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrOrientGaugeM4L[i].AttachEdgeROI(m_smVisionInfo.g_objPackageImage);
                                m_smVisionInfo.g_arrOrientGaugeM4L[i].SetGaugePlace_BasedOnEdgeROI();
                                m_smVisionInfo.g_arrOrientGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrOrientROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                //m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                if (m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_blnDrawSamplingPoint)
                                    m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            m_smVisionInfo.g_arrOrientROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                            for (i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrOrientGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrOrientROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                //m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult(m_Graphic);
                                if (m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_blnDrawSamplingPoint)
                                    m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult_SamplingPoint(m_Graphic);

                                m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        break;
                    case "ColorPackage":
                        for (i = 0; i < m_smVisionInfo.g_arrPackageGauge.Count; i++)
                        {
                            m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[1]);
                            //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][0], m_Graphic);
                            //m_smVisionInfo.g_arrPackageGauge[i].DrawRectGauge(m_Graphic);
                            m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                            //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult(m_Graphic);
                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint(m_Graphic);
                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeSetting_Inside(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            else
                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                        }
                        break;
                    case "Package":
                        //if (!m_smVisionInfo.g_blnWantGauge)
                        //    return;
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrPackage[i].ref_intUseOtherGaugeMeasurePackage > 0)  // Use package gauge
                                    {
                                        m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                        m_smVisionInfo.g_arrPackageGauge2M4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        //m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                        if (m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_blnDrawSamplingPoint)
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                        m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_blnViewPackageImage)
                                            m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        else
                                            m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);

                                        if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                        {
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].SetGaugePlace_BasedOnEdgeROI();
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                            //m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                            if (m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_blnDrawSamplingPoint)
                                                m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_blnViewAutoTuning)
                        {
                            UpdatePackageImage_ForRectGaugeM4L();
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intUseOtherGaugeMeasurePackage > 0)  // Use package gauge
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                    }
                                }
                            }
                        }
                        else
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intUseOtherGaugeMeasurePackage > 0)  // Use package gauge
                                    {
                                        m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_blnViewPackageImage)
                                            m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        else
                                            m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);

                                        if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                        {
                                            //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].SetGaugePlace_BasedOnEdgeROI();
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage,
                                             m_smVisionInfo.g_blnReferTemplateSize, m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fTemplateUnitSizeX, m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fTemplateUnitSizeY);
                                            //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "Lead":
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0) && (m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2))
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                    {

                                        //if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intUseOtherGaugeMeasurePackage > 0)  // Use package gauge
                                        //{
                                        //    m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        //    //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                        //}
                                        //else
                                        {
                                            if (m_smVisionInfo.g_blnViewPackageImage)
                                                m_smVisionInfo.g_arrLeadROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                            else
                                                m_smVisionInfo.g_arrLeadROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);

                                            if (i < m_smVisionInfo.g_arrLeadROIs.Count && m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                            {
                                                //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].SetGaugePlace_BasedOnEdgeROI();
                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrLeadROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                                //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                    {
                                        //if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intUseOtherGaugeMeasurePackage > 0)  // Use package gauge
                                        //{
                                        //    m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                        //    //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                        //}
                                        //else
                                        {
                                            if (m_smVisionInfo.g_blnViewPackageImage)
                                                m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_objPackageImage);
                                            else
                                                m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);

                                            if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                            {
                                                //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][1], m_Graphic);
                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].SetGaugePlace_BasedOnEdgeROI();
                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                                //m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic); //DrawGaugeResult
                                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawSamplingPoint)
                                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_SamplingPoint_ForLearning(m_Graphic);

                                                m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "Mark":
                        if (!m_smVisionInfo.g_blnWantGauge)
                            return;

                        for (i = 0; i < m_smVisionInfo.g_arrMarkGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrMarkGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, (ROI)m_smVisionInfo.g_arrMarkROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                            //m_smVisionInfo.g_arrMarkGaugeM4L[i].DrawGaugeResult(m_Graphic);
                            if (m_smVisionInfo.g_arrMarkGaugeM4L[i].ref_blnDrawSamplingPoint)
                                m_smVisionInfo.g_arrMarkGaugeM4L[i].DrawGaugeResult_SamplingPoint(m_Graphic);
                            if (m_smVisionInfo.g_arrMarkGaugeM4L[i].ref_blnDrawDraggingBox)
                                m_smVisionInfo.g_arrMarkGaugeM4L[i].DrawGaugeSetting_Inside(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            else
                                m_smVisionInfo.g_arrMarkGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                        break;
                    case "Gauge":
                        switch (m_smVisionInfo.g_strSelectedRectGauge)
                        {
                            case "Orient":
                            case "MarkOrient":
                            case "MOLi":
                                if (m_smVisionInfo.g_blnWantGauge)
                                {
                                    for (i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrOrientGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, (ROI)m_smVisionInfo.g_arrOrientROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawGaugeResult(m_Graphic);
                                        //m_smVisionInfo.g_arrOrientGauge[i].DrawRectGauge(m_Graphic);
                                    }
                                }
                                break;
                            case "Mark":
                                if (m_smVisionInfo.g_blnWantGauge)
                                {
                                    for (i = 0; i < m_smVisionInfo.g_arrMarkGaugeM4L.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrMarkGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, (ROI)m_smVisionInfo.g_arrMarkROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                        m_smVisionInfo.g_arrMarkGaugeM4L[i].DrawGaugeResult(m_Graphic);
                                    }
                                }
                                break;
                            case "Package":
                            case "Package1":
                                for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    //m_smVisionInfo.g_arrPackageGauge[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][0], m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[i][0], m_smVisionInfo.g_objWhiteImage);
                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult(m_Graphic);

                                }
                                break;
                            case "Package2":
                                for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    m_smVisionInfo.g_arrPackageGauge2[i].MeasureAndDrawGauge(m_smVisionInfo.g_arrPackageROIs[i][0], m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                                break;
                        }
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "Pad5S":
                        if (m_smVisionInfo.g_intLearnStepNo == 1)   // Define Positioning
                        {
                            m_smVisionInfo.g_objPositioning.InspectionWithLineGauges(m_smVisionInfo.g_objPackageImage,
                               m_smVisionInfo.g_arrPositioningGauges, m_smVisionInfo.g_fCalibPixelXInUM, m_smVisionInfo.g_fCalibPixelYInUM);

                            m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_objPositioning.ref_strErrorMessage;
                            m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            m_smVisionInfo.AT_VM_UpdateResult = true;

                            m_smVisionInfo.g_objPositioning.DrawGaugeMeasurePosition(m_Graphic, m_smVisionInfo.g_arrPositioningGauges);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 2)   // Define Package Size
                        {
                            bool blnAllSideROIResult = true;
                            for (i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);  // 2018 12 31 - ZJYeoh: Make sure gauge is always place within ROI area.

                                if (m_smVisionInfo.g_blnViewPackageImage)
                                {
                                    if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    {
                                        // 2020-02-17 ZJYEOH : no need measure center ROI gauge if use side pkg to measure center pkg
                                    }
                                    else
                                    {
                                        if (m_intVisionType == 0 && ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                                            blnAllSideROIResult &= m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrRotatedImages, m_smVisionInfo.g_objWhiteImage, m_smVisionInfo.g_blnReferTemplateSize);
                                        else
                                            blnAllSideROIResult &= m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_objWhiteImage, m_smVisionInfo.g_blnReferTemplateSize);
                                    }
                                }
                                //else
                                //    m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);   // 2019 10 09 - CCENG: Under LearnPadPackageForm > Step 1, only g_objPackageImage will be used. Hide this code to prevent gauge measure g_arrImages during close LearnPadPackageForm.

                                if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                {
                                    // 2020 02 23 - Draw after all sides ROI measure edge done
                                }
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawGauge_ForLearning(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }

                            if (m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                            {
                                // 2020 02 23 - Draw after all sides ROI measure edge done
                                PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y);
                                PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y);
                                PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y);
                                PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y);

                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                   !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                       !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                   !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                    !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                if (blnAllSideROIResult)
                                {

                                    if (!m_smVisionInfo.g_arrPad[0].MeasureEdge_UsingSidePkgCornerPoint(
                                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X,
                                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y,
                                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X,
                                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y,
                                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X,
                                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y,
                                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X,
                                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y))
                                    {
                                        //m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                                        //intFailType = 1;
                                        //return false;
                                    }


                                }
                            }

                            //for (i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;

                            //    if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                            //        continue;

                            //    //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);  // 2018 12 31 - ZJYeoh: Make sure gauge is always place within ROI area.

                            //    if (m_smVisionInfo.g_blnViewPackageImage)
                            //        m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_objWhiteImage);
                            //    else
                            //        m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage], m_smVisionInfo.g_objWhiteImage);
                            //    m_smVisionInfo.g_arrPad[i].DrawGauge_ForLearning(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            //}

                        }
                        break;
                    case "PadPackage":
                        if (m_smVisionInfo.g_blnViewAutoTuning)
                        {
                            UpdatePackageImage_ForRectGauge4LPad();
                            for (i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_intSelectedROI != i)
                                    continue;

                                if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                {
                                    // 2020 02 23 - Draw after all sides ROI measure edge done
                                }
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawGauge_ForLearning(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }

                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Package Size
                        {
                            bool blnAllSideROIResult = true;
                            for (i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                //m_smVisionInfo.g_arrPad[i].SetRectGauge4LPlacement(m_smVisionInfo.g_arrPadROIs[i][1]);  // 2018 12 31 - ZJYeoh: Make sure gauge is always place within ROI area.

                                if (m_smVisionInfo.g_blnViewPackageImage)
                                {
                                    if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    {
                                        // 2020-02-17 ZJYEOH : no need measure center ROI gauge if use side pkg to measure center pkg
                                    }
                                    else
                                    {
                                        blnAllSideROIResult &= m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_objWhiteImage, m_smVisionInfo.g_blnReferTemplateSize);
                                    }
                                }
                                //else
                                //    m_smVisionInfo.g_arrPad[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);   // 2019 10 09 - CCENG: Under LearnPadPackageForm > Step 1, only g_objPackageImage will be used. Hide this code to prevent gauge measure g_arrImages during close LearnPadPackageForm.

                                if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                {
                                    // 2020 02 23 - Draw after all sides ROI measure edge done
                                }
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawGauge_ForLearning(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }

                            if (m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                            {
                                // 2020 02 23 - Draw after all sides ROI measure edge done
                                PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y);
                                PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y);
                                PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y);
                                PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y);

                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                   !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                       !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                   !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                    !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                if (blnAllSideROIResult)
                                {

                                    if (!m_smVisionInfo.g_arrPad[0].MeasureEdge_UsingSidePkgCornerPoint(
                                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X,
                                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y,
                                        m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X,
                                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y,
                                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X,
                                        m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y,
                                        m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X,
                                        m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y))
                                    {
                                        //m_arrErrorMessage[intPadIndex] = "*Fail to find center unit. Side ROI Measure Edge Fail.";
                                        //intFailType = 1;
                                        //return false;
                                    }


                                }
                            }

                        }
                        break;
                    case "LeadPackage":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Package Size
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if (i != 0)
                                    break;
                                if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    continue;

                                if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                                {
                                    if (m_smVisionInfo.g_blnViewPackageImage)
                                        m_smVisionInfo.g_arrLead3D[i].MeasureEdge_UsingRectGauge4L(m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_objWhiteImage);

                                    m_smVisionInfo.g_arrLead3D[i].DrawGauge_ForLearning(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                        break;
                    case "SealOtherSettingForm":

                        if (m_smVisionInfo.g_objSealCircleGauges != null && m_smVisionInfo.g_intGaugeDisplayIndex == 1)
                            m_smVisionInfo.g_objSealCircleGauges.DrawSealCircleGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_objSealCircleGauges.ref_blnDrawSamplingPoint, m_smVisionInfo.g_objSealCircleGauges.ref_blnDrawDraggingBox, m_smVisionInfo.g_arrSealROIColor[3]);

                        if (!m_smVisionInfo.g_blnViewDimension && m_smVisionInfo.g_arrSealGauges.Count != 0 && m_smVisionInfo.g_intGaugeDisplayIndex == 0)
                            m_smVisionInfo.g_objSeal.DrawGauge(m_Graphic, m_smVisionInfo.g_arrSealGauges, m_smVisionInfo.g_arrSealROIs, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                        break;
                    case "Seal":
                    case "MNSeal":
                        if (m_smVisionInfo.g_intLearnStepNo == 6)
                        {
                            m_smVisionInfo.g_objSealCircleGauges.DrawSealCircleGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_objSealCircleGauges.ref_blnDrawSamplingPoint, m_smVisionInfo.g_objSealCircleGauges.ref_blnDrawDraggingBox, m_smVisionInfo.g_arrSealROIColor[3]);
                        }
                        if (m_smVisionInfo.g_intLearnStepNo == 4)
                        {
                            if (!m_smVisionInfo.g_blnViewDimension)
                                m_smVisionInfo.g_objSeal.DrawGauge(m_Graphic, m_smVisionInfo.g_arrSealGauges, m_smVisionInfo.g_arrSealROIs, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                        break;

                    case "Position":
                        if (m_smVisionInfo.g_objPositioning.ref_intMethod == 1)
                            break;

                        for (i = 0; i < m_smVisionInfo.g_arrPositioningGauges.Count; i++)
                        {
                            m_smVisionInfo.g_arrPositioningGauges[i].Measure(m_smVisionInfo.g_arrPositioningROIs[i]);
                        }

                        m_smVisionInfo.g_objPositioning.InspectionWithLineGauges(m_smVisionInfo.g_objPackageImage,
                               m_smVisionInfo.g_arrPositioningGauges, m_smVisionInfo.g_fCalibPixelXInUM, m_smVisionInfo.g_fCalibPixelYInUM);

                        m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_objPositioning.ref_strErrorMessage;
                        m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                        m_smVisionInfo.AT_VM_UpdateResult = true;

                        m_smVisionInfo.g_objPositioning.DrawGaugeMeasurePosition(m_Graphic, m_smVisionInfo.g_arrPositioningGauges);

                        //for (int v = 0; v < m_smVisionInfo.g_arrPositioningGauges.Count; v++)
                        //{                     
                        //    m_smVisionInfo.g_arrPositioningGauges[v].Measure(m_smVisionInfo.g_arrPositioningROIs[v]);
                        //    m_smVisionInfo.g_arrPositioningGauges[v].DrawGauge(m_Graphic);
                        //    m_smVisionInfo.AT_VM_UpdateResult = true;                            
                        //}
                        break;
                    case "PocketPosition":
                        if (m_smVisionInfo.g_intLearnStepNo == 2)
                        {
                            //for (i = 0; i < m_smVisionInfo.g_arrPocketPositionGauges.Count; i++)
                            //{
                            //    m_smVisionInfo.g_arrPocketPositionGauges[i].Measure(m_smVisionInfo.g_arrPocketPositionROIs[2]);
                            //}

                            m_smVisionInfo.g_objPocketPosition.MeasureGauge(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_objPocketPosition.GetGrabImageIndex(0)],
                                   m_smVisionInfo.g_arrPocketPositionGauges, 0);

                            //m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_objPocketPosition.ref_strErrorMessage;
                            //m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            //m_smVisionInfo.AT_VM_UpdateResult = true;

                            m_smVisionInfo.g_objPocketPosition.DrawGaugeMeasurePosition(m_Graphic, m_smVisionInfo.g_arrPocketPositionGauges, 0);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            //for (i = 0; i < m_smVisionInfo.g_arrPocketPositionGauges.Count; i++)
                            //{
                            //    m_smVisionInfo.g_arrPocketPositionGauges[i].Measure(m_smVisionInfo.g_arrPocketPositionROIs[2]);
                            //}

                            m_smVisionInfo.g_objPocketPosition.MeasureGauge(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_objPocketPosition.GetGrabImageIndex(1)],
                                   m_smVisionInfo.g_arrPocketPositionGauges, 1);

                            //m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_objPocketPosition.ref_strErrorMessage;
                            //m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            //m_smVisionInfo.AT_VM_UpdateResult = true;

                            m_smVisionInfo.g_objPocketPosition.DrawGaugeMeasurePosition(m_Graphic, m_smVisionInfo.g_arrPocketPositionGauges, 1);
                        }
                        break;
                    case "LeadPocketDontCareAuto":
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            UpdatePocketEdgeDontCareImage();
                            for (i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) == 0))
                                    continue;
                                if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) == 0))
                                    continue;
                                if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) == 0))
                                    continue;
                                if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) == 0))
                                    continue;

                                if (m_smVisionInfo.g_blnViewPackageImage)
                                    m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.MeasurePGauge(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0], m_smVisionInfo.g_objPackageImage);
                                else
                                    m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.MeasurePGauge(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0], m_smVisionInfo.g_arrImages[m_smVisionInfo.g_arrLead[0].ref_intImageViewNo]);
                                m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.DrawPGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead[i].ref_intLineOffset, m_smVisionInfo.g_arrLead[i].ref_intMaskThickness, m_objTextureBrush);
                            }
                            //m_smVisionInfo.g_strErrorMessage = m_smVisionInfo.g_objPocketPosition.ref_strErrorMessage;
                            //m_smVisionInfo.VM_AT_UpdateErrorMessage = true;
                            //m_smVisionInfo.AT_VM_UpdateResult = true;


                        }
                        break;
                    case "MNPosition":
                        if (m_smVisionInfo.g_objPositioning.ref_intMethod == 1)
                            break;

                        for (int v = 0; v < m_smVisionInfo.g_arrPositioningGauges.Count; v++)
                        {
                            m_smVisionInfo.g_arrPositioningGauges[v].DrawGauge(m_Graphic);
                        }
                        break;
                    case "Calibrate":
                        if (m_smVisionInfo.g_intCalibrationType == 3)
                        {
                            m_smVisionInfo.g_objCalibrateRectGauge.MeasureAndDrawGauge(m_smVisionInfo.g_objCalibrateROI, m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                        break;
                }
            }

            if (m_smVisionInfo.g_blnViewPointGauge)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "LeadLineProfileGaugeSetting":
                    case "MarkOtherSettingForm":
                        if (m_smVisionInfo.g_arrLead.Length > 0 || m_smVisionInfo.g_arrLead[0] != null)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrLead.Length; j++)
                            {
                                if (m_smVisionInfo.g_arrLead[j] != null && m_smVisionInfo.g_arrLead[j].ref_blnSelected)// && (m_smVisionInfo.g_intSelectedROI == j || m_smVisionInfo.g_blnSetToAllROIs))
                                {
                                    m_smVisionInfo.g_arrLead[j].DrawPointGauge_AllLeadsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                        m_smVisionInfo.g_blnSetToAllROIs, m_smVisionInfo.g_blnSetToAllLeadPad, m_smVisionInfo.g_blnSetToAllPoints,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_intPointSelectedNumber);
                                }
                            }
                        }
                        break;
                    case "LineProfileGaugeSetting":
                        if (m_smVisionInfo.g_arrPad.Length > 0 || m_smVisionInfo.g_arrPad[0] != null)
                        {
                            //m_smVisionInfo.g_arrPad[0].DrawPointGauge(m_Graphic);
                            for (int j = 0; j < m_smVisionInfo.g_arrPad.Length; j++)
                            {
                                if (m_smVisionInfo.g_arrPad[j] != null && m_smVisionInfo.g_intSelectedROI == j)
                                    m_smVisionInfo.g_arrPad[j].DrawPointGauge_AllPadsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            }
                        }
                        break;
                    case "Lead3DLineProfileGaugeSetting":
                        if (m_smVisionInfo.g_arrLead3D.Length > 0 || m_smVisionInfo.g_arrLead3D[0] != null)
                        {
                            //m_smVisionInfo.g_arrLead3D[0].DrawPointGauge(m_Graphic);
                            for (int j = 0; j < m_smVisionInfo.g_arrLead3D.Length; j++)
                            {
                                if (m_smVisionInfo.g_arrLead3D[j] != null && m_smVisionInfo.g_intSelectedROI == j)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == 0)
                                        m_smVisionInfo.g_arrLead3D[j].DrawCenterPointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                             m_smVisionInfo.g_blnSetToAllLeadPad_Center, m_smVisionInfo.g_blnSetToAllPoints_Center,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_intPointSelectedNumber);
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrLead3D[j].ref_blnDrawSidePointGauge)
                                            m_smVisionInfo.g_arrLead3D[j].DrawSidePointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true,
                                             m_smVisionInfo.g_blnSetToAllROIs_Side, m_smVisionInfo.g_blnSetToAllLeadPad_Side, m_smVisionInfo.g_blnSetToAllPoints_Side,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_intPointSelectedNumber_Side);
                                        else
                                            m_smVisionInfo.g_arrLead3D[j].DrawCornerPointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true,
                                             m_smVisionInfo.g_blnSetToAllROIs_Corner, m_smVisionInfo.g_blnSetToAllPoints_Corner,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intPointSelectedNumber_Corner);
                                    }
                                }
                            }

                            if (m_smVisionInfo.g_blnDrawThresholdAllSideROI)
                            {
                                for (int j = 1; j < m_smVisionInfo.g_arrLead3D.Length; j++)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == j)
                                        continue;

                                    if (m_smVisionInfo.g_arrLead3D[j] != null)
                                    {
                                        if (m_smVisionInfo.g_intSelectedROI == 0)
                                            m_smVisionInfo.g_arrLead3D[j].DrawCenterPointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                             m_smVisionInfo.g_blnSetToAllLeadPad_Center, m_smVisionInfo.g_blnSetToAllPoints_Center,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_intPointSelectedNumber);
                                        else
                                        {
                                            if (m_smVisionInfo.g_arrLead3D[j].ref_blnDrawSidePointGauge)
                                                m_smVisionInfo.g_arrLead3D[j].DrawSidePointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false,
                                             m_smVisionInfo.g_blnSetToAllROIs_Side, m_smVisionInfo.g_blnSetToAllLeadPad_Side, m_smVisionInfo.g_blnSetToAllPoints_Side,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_intPointSelectedNumber_Side);
                                            else
                                                m_smVisionInfo.g_arrLead3D[j].DrawCornerPointGauge_AllLead3DsPoint(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false,
                                             m_smVisionInfo.g_blnSetToAllROIs_Corner, m_smVisionInfo.g_blnSetToAllPoints_Corner,
                                        m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intPointSelectedNumber_Corner);
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }
            }
        }

        /// <summary>
        /// Draw main image or threshold main image together with image text
        /// </summary>
        private void DrawMainImage()
        {
            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawA]";
            // 2022 04 11 - CCENG: Bug! Should be >=.
            // 2020 02 20 - CCENG: make sure g_intSelectedImage within image counter.
            if (m_smVisionInfo.g_intSelectedImage >= m_smVisionInfo.g_arrImages.Count)
            {
                if (m_smVisionInfo.g_arrImages.Count > 0)
                    m_smVisionInfo.g_intSelectedImage = 0;
            }

            if (m_smVisionInfo.g_blnViewThreshold)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "Calibrate":
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_objCalibrateROI);
                        break;
                    case "CalibrateLead3D":
                        int intSelectedLeadCalibrationROI = m_smVisionInfo.g_intSelectedROI;
                        //for (int i = 0; i < m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs.Count; i++)
                        //{
                        //    if (intSelectedLeadCalibrationROI == -1)
                        //        intSelectedLeadCalibrationROI = i;

                        //    if (m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[i].GetROIHandle())   // 0: search ROI
                        //    {
                        //        intSelectedLeadCalibrationROI = i;
                        //    }
                        //}

                        if (intSelectedLeadCalibrationROI != -1)
                        {

                            if (m_smVisionInfo.g_blnViewPackageImage)
                                m_smVisionInfo.g_objPackageImage.RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs, intSelectedLeadCalibrationROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            else if (m_smVisionInfo.g_blnViewRotatedImage)
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs, intSelectedLeadCalibrationROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs, intSelectedLeadCalibrationROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            
                        }
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                        {
                            int intROIIndex = 0;
                            if (m_smVisionInfo.g_intLearnStepNo == 16)
                                intROIIndex = 3;
                            int intSelectedROI = -1;
                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[j].ref_blnSelected)
                                    continue;

                                if (intSelectedROI == -1)
                                    intSelectedROI = j;

                                if (m_smVisionInfo.g_arrPadROIs[j][intROIIndex].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }

                            if (intSelectedROI != -1)
                            {

                                if (m_smVisionInfo.g_blnViewPackageImage)
                                    m_smVisionInfo.g_objPackageImage.RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, intROIIndex, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                else if (m_smVisionInfo.g_blnViewRotatedImage)
                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, intROIIndex, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, intROIIndex, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                
                                //if (m_smVisionInfo.g_blnViewPackageImage)
                                //    m_smVisionInfo.g_objPackageImage.RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                                //else if (m_smVisionInfo.g_blnViewRotatedImage)
                                //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                                //else
                                //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);

                            }
                        }
                        break;
                    case "PadPackage":
                        {
                            int intSelectedROI = -1;
                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[j].ref_blnSelected)
                                    continue;

                                if (intSelectedROI == -1)
                                    intSelectedROI = j;

                                if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }

                            if (intSelectedROI != -1)
                            {

                                if ((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                    m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertColorToMono(m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage]);


                                if (m_smVisionInfo.g_blnViewThresholdWithGain)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }

                                //if (m_smVisionInfo.g_blnViewThresholdWithGain)
                                //{
                                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                                //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                                //    else
                                //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                                //}
                                //else
                                //{
                                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                                //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                                //    else
                                //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                                //}
                            }
                        }
                        break;
                    case "LeadPackage":
                        {
                            int intSelectedROI = -1;
                            for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                            {
                                if (j != 0)
                                    break;
                                if (!m_smVisionInfo.g_arrLead3D[j].ref_blnSelected)
                                    continue;

                                if (intSelectedROI == -1)
                                    intSelectedROI = j;
                                if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }
                            }

                            if (intSelectedROI != -1)
                            {

                                if (m_smVisionInfo.g_blnViewThresholdWithGain)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }

                                //if (m_smVisionInfo.g_blnViewThresholdWithGain)
                                //{
                                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                                //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                                //    else
                                //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                                //}
                                //else
                                //{
                                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                                //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                                //    else
                                //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                                //}
                            }
                        }
                        break;
                    case "MNPad":
                    case "PadOtherSettingForm":
                        {

                            // 2020 03 25 - CCENG
                            int intSelectedROI = m_smVisionInfo.g_intSelectedROI;   //int intSelectedROI = 0;
                            if ((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0) 
                                m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertColorToMono(m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage]);

                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }

                            if (intSelectedROI >= m_smVisionInfo.g_arrPadROIs.Count)
                                intSelectedROI = 0;



                            if (m_smVisionInfo.g_blnViewThresholdWithGain)
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, m_smVisionInfo.g_fThresholdGainValue, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            }
                            else if (m_smVisionInfo.g_blnViewPackageImage)
                            {
                                m_smVisionInfo.g_objPackageImage.RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            }
                            else
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            }









                            //if (m_smVisionInfo.g_blnViewThresholdWithGain)
                            //{
                            //    if (m_smVisionInfo.g_blnViewRotatedImage)
                            //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                            //    else
                            //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImageWithGain(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0, m_smVisionInfo.g_fThresholdGainValue);
                            //}
                            //else if (m_smVisionInfo.g_blnViewPackageImage)
                            //{
                            //    m_smVisionInfo.g_objPackageImage.RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                            //}
                            //else
                            //{
                            //    if (m_smVisionInfo.g_blnViewRotatedImage)
                            //        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                            //    else
                            //        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI], 0);
                            //}
                        }
                        break;
                    case "Pad5S":
                        {
                            int intSelectedROI = -1;
                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[j][1].GetROIHandle())
                                {
                                    intSelectedROI = j;
                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[j], 1);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[j], 1);
                                }

                            }

                            if (intSelectedROI > -1)
                            {
                                if (intSelectedROI >= m_smVisionInfo.g_arrPadROIs.Count)
                                    intSelectedROI = 0;

                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 1, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 1, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            }
                            break;
                        }
                    case "MNPad5S":
                        {
                            int intSelectedROI = -1;
                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())
                                {
                                    intSelectedROI = j;
                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[j], 1);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs[j], 1);
                                }

                                if (intSelectedROI > -1)
                                {
                                    if (intSelectedROI >= m_smVisionInfo.g_arrPadROIs.Count)
                                        intSelectedROI = 0;

                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 1, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPadROIs, 1, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }
                            }
                            break;
                        }
                    case "Seal":
                    case "MNSeal":
                    case "SealOtherSettingForm":
                        if (m_smVisionInfo.g_blnViewSprocketHoleDefectThreshold)
                        {
                            ImageDrawing objImg_Temp = new ImageDrawing(true, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight);
                            ImageDrawing objImg_Temp2 = new ImageDrawing(true, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                            ROI objROITemp = new ROI();
                            objROITemp.AttachImage(objImg_Temp2);
                            objROITemp.LoadROISetting((int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter));
                            float fScale = Math.Max(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter - m_smVisionInfo.g_objSeal.ref_intSprocketHoleInspectionAreaInwardTolerance, 5) / m_smVisionInfo.g_objSealCircleGauges.ref_fTemplateObjectDiameter;

                            ImageDrawing.ScaleImage(m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage, ref objImg_Temp, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth / 2, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight / 2,
                                                  objImg_Temp.ref_intImageWidth / 2, objImg_Temp.ref_intImageHeight / 2,
                                                  fScale, fScale);

                            ROI objCircleROI1 = new ROI();
                            objCircleROI1.AttachImage(objImg_Temp);
                            objCircleROI1.LoadROISetting((int)Math.Round((objImg_Temp.ref_intImageWidth / 2) - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                                (int)Math.Round((objImg_Temp.ref_intImageHeight / 2) - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                                (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter),
                                                                (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter));

                            ROI objCircleROI2 = new ROI();
                            objCircleROI2.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                            objCircleROI2.LoadROISetting((int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter));
                            objCircleROI2.CopyImage_Bigger(ref objROITemp);
                            //objCircleROI1.SaveImage("D:\\objCircleROI1.bmp");
                            //objCircleROI2.SaveImage("D:\\objCircleROI2.bmp");
                            ROI.LogicOperationAddROI2(objCircleROI1, objCircleROI2);
                            //objCircleROI1.SaveImage("D:\\objCircleROI12.bmp");
                            //objCircleROI2.SaveImage("D:\\objCircleROI22.bmp");
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, objCircleROI2);
                            objROITemp.CopyImage_Bigger(ref objCircleROI2);
                            objROITemp.Dispose();
                            objCircleROI2.Dispose();
                            objCircleROI1.Dispose();
                            objImg_Temp.Dispose();

                        }
                        else if (m_smVisionInfo.g_blnViewSprocketHoleBrokenThreshold)
                        {
                            ImageDrawing objImg_Temp = new ImageDrawing(true, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight);
                            ImageDrawing objImg_Temp2 = new ImageDrawing(true, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                            ROI objROITemp = new ROI();
                            objROITemp.AttachImage(objImg_Temp2);
                            objROITemp.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));

                            float fScale = (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / m_smVisionInfo.g_objSealCircleGauges.ref_fTemplateObjectDiameter;

                            ImageDrawing.ScaleImage(m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage, ref objImg_Temp, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth / 2, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight / 2,
                                                  m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX, m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY,
                                                  fScale, fScale);

                            ROI objCircleROI1 = new ROI();
                            objCircleROI1.AttachImage(objImg_Temp);
                            objCircleROI1.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));

                            ROI objCircleROI2 = new ROI();
                            objCircleROI2.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                            objCircleROI2.LoadROISetting((int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                        (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                        (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));
                            objCircleROI2.CopyImage_Bigger(ref objROITemp);
                            ROI.SubtractROI(objCircleROI2, objCircleROI1);

                            ImageDrawing objImg_Temp3 = new ImageDrawing(true, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight);

                            fScale = (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner) / m_smVisionInfo.g_objSealCircleGauges.ref_fTemplateObjectDiameter;

                            ImageDrawing.ScaleImage(m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage, ref objImg_Temp3, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth / 2, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight / 2,
                                                  m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX, m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY,
                                                  fScale, fScale);

                            objCircleROI2.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner)));
                            objCircleROI1.AttachImage(objImg_Temp3);
                            objCircleROI1.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Inner)));

                            ROI.LogicOperationBitwiseAndROI(objCircleROI2, objCircleROI1);

                            objCircleROI2.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));

                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, objCircleROI2);
                            objROITemp.CopyImage_Bigger(ref objCircleROI2);
                            objROITemp.Dispose();
                            objImg_Temp2.Dispose();
                            objImg_Temp3.Dispose();
                            objCircleROI2.Dispose();
                            objCircleROI1.Dispose();
                            objImg_Temp.Dispose();
                        }
                        else if (m_smVisionInfo.g_blnViewSprocketHoleRoundnessThreshold)
                        {
                            ImageDrawing objImg_Temp = new ImageDrawing(true, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight);
                            ImageDrawing objImg_Temp2 = new ImageDrawing(true, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                            ROI objROITemp = new ROI();
                            objROITemp.AttachImage(objImg_Temp2);
                            objROITemp.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));

                            float fScale = (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / m_smVisionInfo.g_objSealCircleGauges.ref_fTemplateObjectDiameter;

                            ImageDrawing.ScaleImage(m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage, ref objImg_Temp, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageWidth / 2, m_smVisionInfo.g_objSeal.ref_objTemplateCircleImage.ref_intImageHeight / 2,
                                                  m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX, m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY,
                                                  fScale, fScale);

                            ROI objCircleROI1 = new ROI();
                            objCircleROI1.AttachImage(objImg_Temp);
                            objCircleROI1.LoadROISetting((int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY) - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                                (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));

                            ROI objCircleROI2 = new ROI();
                            objCircleROI2.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                            objCircleROI2.LoadROISetting((int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                        (int)Math.Round(m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - ((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer) / 2)),
                                                        (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)),
                                                        (int)Math.Round((m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter + m_smVisionInfo.g_objSeal.ref_intSprocketHoleBrokenOutwardTolerance_Outer)));
                            objCircleROI2.CopyImage_Bigger(ref objROITemp);
                            ROI.SubtractROI(objCircleROI2, objCircleROI1);
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, objCircleROI2);
                            objROITemp.CopyImage_Bigger(ref objCircleROI2);
                            objROITemp.Dispose();
                            objImg_Temp2.Dispose();
                            objCircleROI2.Dispose();
                            objCircleROI1.Dispose();
                            objImg_Temp.Dispose();
                        }
                        else if (m_smVisionInfo.g_intSelectedUnit == 4)
                        {
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, (ROI)m_smVisionInfo.g_arrSealROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedROI]);
                        }
                        else
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, (ROI)m_smVisionInfo.g_arrSealROIs[m_smVisionInfo.g_intSelectedUnit][0]);
                        break;
                    case "MNPackage":
                    case "Package":
                        // 2019 08 21 - CCENG: LearnPackageForm > Display threshold image when user press Threshold button.
                        if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs);
                        else
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs);

                        //if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                        //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrOrientROIs);
                        //else
                        //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrOrientROIs);


                        //if (m_smVisionInfo.g_blnViewPackageChip)
                        //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs, 0);
                        //else
                        //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs, 0);
                        break;
                    case "ColorPackage":
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                        {
                            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue,
                            m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_intSelectedROI);
                        }
                        else
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue,
                            m_smVisionInfo.g_arrPackageROIs, m_smVisionInfo.g_intSelectedROI);
                        break;
                    case "MNPosition":
                        if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPositioningROIs[0]);
                        break;
                    case "UnitPresent":
                    case "CheckPresentOtherSettingForm":
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPositioningROIs[0]);
                        break;
                    case "Lead":
                        {
                            int intSelectedROI = 0;
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    intSelectedROI++;
                                else
                                    break;
                            }

                            for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }
                            
                            if (m_smVisionInfo.g_blnViewRotatedImage)
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);
                            else if (m_smVisionInfo.g_blnViewPackageImage)
                            {
                                m_smVisionInfo.g_objPackageImage.RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);
                            }
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);
                            
                            //if (m_smVisionInfo.g_blnViewRotatedImage)
                            //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                            //else
                            //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                        }
                        break;
                    case "Lead3DOtherSettingForm":
                    case "Li3D":
                    case "Lead3D":
                        {
                            int intSelectedROI = 0;

                            for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }

                            if (m_smVisionInfo.g_blnViewRotatedImage)
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                            //if (m_smVisionInfo.g_blnViewRotatedImage)
                            //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                            //else
                            //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI], 0);
                        }
                        break;
                    case "MarkOtherSettingForm":
                        if (m_smVisionInfo.g_intSelectedSetting == 1)
                        {
                            //Drawing for lead
                            int intSelectedROI = m_smVisionInfo.g_intSelectedROI;
                            //for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            //{
                            //    if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                            //        intSelectedROI++;
                            //    else
                            //        break;
                            //}

                            //for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                            //{
                            //    if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                            //    {
                            //        intSelectedROI = j;
                            //    }
                            //}


                            if (m_smVisionInfo.g_blnViewRotatedImage)
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);
                            else if (m_smVisionInfo.g_blnViewPackageImage)
                            {
                                m_smVisionInfo.g_objPackageImage.RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);
                            }
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImageForLead(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrLeadROIs, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI, m_smVisionInfo.g_arrLead);

                        }
                        else if (m_smVisionInfo.g_intSelectedSetting == 2)   // MarkOtherSettingForm.cs > Package Tab Page
                        {
                            //Drawing for package
                            if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_intSelectedUnit, m_smVisionInfo.g_arrPackageROIs);
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_intSelectedUnit, m_smVisionInfo.g_arrPackageROIs);
                        }
                        else
                        {
                            //Drawing for mark
                            if (m_smVisionInfo.g_blnViewRotatedImage)
                            {
                                //if (m_smVisionInfo.g_arrPackageROIs.Count > 0)
                                //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs, 0);
                                //else
                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrMarkROIs, 0);

                            }
                            else
                            {
                                //if (m_smVisionInfo.g_arrPackageROIs.Count > 0)
                                //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPackageROIs, 0);
                                //else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrMarkROIs, 0);
                            }
                        }
                        break;
                    case "PH":
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPHROIs, 0);
                        break;
                    case "Position":
                        if (m_smVisionInfo.g_blnWantCheckEmpty)
                        {
                            ROI objROI = m_smVisionInfo.g_arrPositioningROIs[0];
                            int intROIindex = 0;
                            if (m_smVisionInfo.g_arrPositioningROIs.Count > 1 && m_smVisionInfo.g_blnWantUseEmptyPattern)
                            {
                                objROI = m_smVisionInfo.g_arrPositioningROIs[1];
                                intROIindex = 1;
                            }
                            else
                            {
                                objROI = m_smVisionInfo.g_arrPositioningROIs[0];
                                intROIindex = 0;
                            }
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrPositioningROIs, intROIindex);

                            int intBlackArea = ROI.GetPixelArea(objROI, m_smVisionInfo.g_intThresholdValue, 0);

                            m_Graphic.DrawString("Black Area=" + intBlackArea.ToString(), new Font("Verdana", 12, FontStyle.Bold), new SolidBrush(Color.Cyan), m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionX, m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionY - 20);
                        }
                        break;
                    case "System":
                        {
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue);
                        }
                        break;
                    default:
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                        {
                            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrMarkROIs, 0);

                        }
                        else
                        {
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intThresholdValue, m_smVisionInfo.g_arrMarkROIs, 0);
                        }

                        break;
                }




            }
            else if (m_smVisionInfo.g_blnViewDoubleThreshold)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "ColorPackage":
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1]);
                        else
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1]);
                        break;
                    case "MNPackage":
                    case "MNMarkOrient":
                    case "Package":
                    case "MarkOtherSettingForm":
                        m_smVisionInfo.g_objPkgProcessImage.RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                              m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPackageROIs, 1f, 0, 255, 0, m_smVisionInfo.g_intSelectedUnit);
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "Pad5S":
                        if (m_smVisionInfo.g_intLearnStepNo == 11)
                        {
                            m_smVisionInfo.g_arrRotatedImages[0].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[0][1]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 12)
                        {
                            m_smVisionInfo.g_arrRotatedImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[0][1]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            m_smVisionInfo.g_arrRotatedImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[0][1]);
                        }
                        break;
                    case "PadPackage":
                        {
                            int intSelectedROI = -1;
                            if (m_smVisionInfo.g_intLearnStepNo == 4)   // Image 1 package double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                                {
                                    if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    if (!m_smVisionInfo.g_arrPad[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {

                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[0].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[0].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[0].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[0].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 5)  // Image 2 package double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                                {
                                    if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    if (!m_smVisionInfo.g_arrPad[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    
                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 8)      // Crack double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                                {
                                    if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    if (!m_smVisionInfo.g_arrPad[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs[intSelectedROI][0]);
                                }
                            }
                        }
                        break;
                    case "Lead3DOtherSettingForm":
                        {
                            int intSelectedROI = 0;
                            for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                            {
                                if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }
                            
                            if (m_intSelectedTabPage == 0)
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    ////objROI.LoadROISetting(0, 0, objImage.ref_intImageWidth, objImage.ref_intImageHeight);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIHeight);

                                    if (m_smVisionInfo.g_blnViewGainImage)
                                    {
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                               m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs, m_smVisionInfo.g_fGainValue,
                                                               m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                               0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                                m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs, 1f,
                                                                m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                                0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }

                                    //if (m_smVisionInfo.g_blnViewGainImage)
                                    //{
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                           m_smVisionInfo.g_intHighThresholdValue, objROI, m_smVisionInfo.g_fGainValue,
                                    //                           m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                    //else
                                    //{
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                            m_smVisionInfo.g_intHighThresholdValue, objROI,
                                    //                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                }
                                else
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    ////objROI.LoadROISetting(0, 0, objImage.ref_intImageWidth, objImage.ref_intImageHeight);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIHeight);

                                    if (m_smVisionInfo.g_blnViewGainImage)
                                    {
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                                m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs, m_smVisionInfo.g_fGainValue,
                                                                m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                                0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs, 1f,
                                                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                            0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }

                                    //if (m_smVisionInfo.g_blnViewGainImage)
                                    //{
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                            m_smVisionInfo.g_intHighThresholdValue, objROI, m_smVisionInfo.g_fGainValue,
                                    //                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                    //else
                                    //{
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                        m_smVisionInfo.g_intHighThresholdValue, objROI,
                                    //                        m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                }
                            }
                            else if (m_intSelectedTabPage == 1)
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIHeight);

                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                        m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, objROI);
                                }
                                else
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0].ref_ROIHeight);

                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                        m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, objROI);
                                }
                            }
                        }
                        break;
                    case "LeadPackage":
                        {
                            int intSelectedROI = -1;
                            if (m_smVisionInfo.g_intLearnStepNo == 4)   // Image 1 package double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                                {
                                    if (j != 0)
                                        break;
                                    if (!m_smVisionInfo.g_arrLead3D[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[0].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[0].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[0].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[0].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 5)  // Image 2 package double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                                {
                                    if (j != 0)
                                        break;
                                    if (!m_smVisionInfo.g_arrLead3D[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 8)      // Crack double threshold view
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLeadROIs.Count; j++)
                                {
                                    if (j != 0)
                                        break;

                                    if (!m_smVisionInfo.g_arrLead3D[j].ref_blnSelected)
                                        continue;

                                    if (intSelectedROI == -1)
                                        intSelectedROI = j;

                                    if (m_smVisionInfo.g_arrLeadROIs[j][0].GetROIHandle())   // 0: search ROI
                                    {
                                        intSelectedROI = j;
                                    }
                                }

                                if (intSelectedROI != -1)
                                {
                                    if (m_smVisionInfo.g_blnViewRotatedImage)
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue,
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, 
                                            m_smVisionInfo.g_arrLeadROIs, 1f, 0, 255, 0, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);

                                    //if (m_smVisionInfo.g_blnViewRotatedImage)
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                    //else
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrLeadROIs[intSelectedROI][0]);
                                }
                            }
                        }
                        break;
                    case "PadOtherSettingForm":
                    case "MNPad":
                    case "MNPad5S":
                        {
                            int intSelectedROI = 0;
                            for (int j = 0; j < m_smVisionInfo.g_arrPadROIs.Count; j++)
                            {
                                if (j > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrPadROIs[j][0].GetROIHandle())   // 0: search ROI
                                {
                                    intSelectedROI = j;
                                }
                            }
                            
                            if (m_intSelectedTabPage == 0)
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    ////objROI.LoadROISetting(0, 0, objImage.ref_intImageWidth, objImage.ref_intImageHeight);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                    if (m_smVisionInfo.g_blnViewGainImage)
                                    {
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                               m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, m_smVisionInfo.g_fGainValue,
                                                               m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                               0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                                m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f,
                                                                m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                                0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }

                                    //if (m_smVisionInfo.g_blnViewGainImage)
                                    //{
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                           m_smVisionInfo.g_intHighThresholdValue, objROI, m_smVisionInfo.g_fGainValue,
                                    //                           m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                    //else
                                    //{
                                    //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                            m_smVisionInfo.g_intHighThresholdValue, objROI,
                                    //                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                }
                                else
                                {
                                    //ImageDrawing objImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                                    //ROI objROI = new ROI();
                                    //objROI.AttachImage(objImage);
                                    ////objROI.LoadROISetting(0, 0, objImage.ref_intImageWidth, objImage.ref_intImageHeight);
                                    //objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                    //                                    m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                    if (m_smVisionInfo.g_blnViewGainImage)
                                    {
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                                m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, m_smVisionInfo.g_fGainValue,
                                                                m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                                0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                                            m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 1f,
                                                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue,
                                                            0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                    }

                                    //if (m_smVisionInfo.g_blnViewGainImage)
                                    //{
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                            m_smVisionInfo.g_intHighThresholdValue, objROI, m_smVisionInfo.g_fGainValue,
                                    //                            m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                    //else
                                    //{
                                    //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue,
                                    //                        m_smVisionInfo.g_intHighThresholdValue, objROI,
                                    //                        m_smVisionInfo.g_intThresholdDrawLowValue, m_smVisionInfo.g_intThresholdDrawMiddleValue, m_smVisionInfo.g_intThresholdDrawHighValue);
                                    //}
                                }
                            }
                            else if (m_intSelectedTabPage == 1)
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage)
                                {
                                    ImageDrawing objImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                                    ROI objROI = new ROI();
                                    objROI.AttachImage(objImage);
                                    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs, 
                                        1f, 0 , 255, 2, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }
                                else
                                {
                                    ImageDrawing objImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                                    ROI objROI = new ROI();
                                    objROI.AttachImage(objImage);
                                    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrPadROIs,
                                        1f, 0, 255, 2, 0, intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                                }

                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    ImageDrawing objImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                                //    ROI objROI = new ROI();
                                //    objROI.AttachImage(objImage);
                                //    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                //    m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, objROI);
                                //}
                                //else
                                //{
                                //    ImageDrawing objImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                                //    ROI objROI = new ROI();
                                //    objROI.AttachImage(objImage);
                                //    objROI.LoadROISetting(m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalX,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROITotalY,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIWidth,
                                //                                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][0].ref_ROIHeight);

                                //    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_intLowThresholdValue, m_smVisionInfo.g_intHighThresholdValue, objROI);
                                //}
                            }
                        }
                        break;
                    case "Seal":
                    case "MNSeal":
                    case "SealOtherSettingForm":
                        {
                            if (m_smVisionInfo.g_intSelectedUnit == 4)
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage_ForSeal(m_Graphic,
                                                                               m_smVisionInfo.g_intLowThresholdValue,
                                                                               m_smVisionInfo.g_intHighThresholdValue, m_smVisionInfo.g_arrSealROIs[m_smVisionInfo.g_intSelectedUnit], 1f, 0, 255, 0, m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_blnDrawThresholdAllSideROI);
                            else
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic,
                                                                                 m_smVisionInfo.g_intLowThresholdValue,
                                                                                 m_smVisionInfo.g_intHighThresholdValue, (ROI)m_smVisionInfo.g_arrSealROIs[m_smVisionInfo.g_intSelectedUnit][0]);
                        }
                        break;
                }
            }
            else if (m_smVisionInfo.g_blnViewColorThreshold)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "ColorPackage":
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                            m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_arrColorPackageROIs[0][m_smVisionInfo.g_intSelectedROI],
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_blnUseRGBFormat);
                        else
                            m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic, m_smVisionInfo.g_arrColorPackageROIs[0][m_smVisionInfo.g_intSelectedROI],
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_blnUseRGBFormat);
                        break;
                    case "Pad":
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                        {
                            m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_arrPadColorROIs,
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_intColorFormat, m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex,
                            m_smVisionInfo.g_blnCheck4Sides, m_smVisionInfo.g_intColorCloseIteration, m_smVisionInfo.g_blnColorInvertBlackWhite);

                        }
                        else
                        {
                            m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_arrPadColorROIs,
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_intColorFormat, m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex,
                            m_smVisionInfo.g_blnCheck4Sides, m_smVisionInfo.g_intColorCloseIteration, m_smVisionInfo.g_blnColorInvertBlackWhite);

                        }
                        break;
                    case "Package":
                        if (m_smVisionInfo.g_blnViewRotatedImage)
                        {
                            m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_arrPackageColorROIs[m_smVisionInfo.g_intSelectedUnit],
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_intColorFormat, m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intColorCloseIteration, m_smVisionInfo.g_blnColorInvertBlackWhite);

                        }
                        else
                        {
                            m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawThresholdImage(m_Graphic, m_smVisionInfo.g_arrPackageColorROIs[m_smVisionInfo.g_intSelectedUnit],
                            m_smVisionInfo.g_intColorThreshold, m_smVisionInfo.g_intColorTolerance, m_smVisionInfo.g_intColorFormat, m_smVisionInfo.g_intSelectedROI, m_smVisionInfo.g_intColorCloseIteration, m_smVisionInfo.g_blnColorInvertBlackWhite);

                        }
                        break;
                }
            }
            else
            {
                if (m_smVisionInfo.g_blnGrabbing)
                {
                    if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawX]";
                    return;
                }

                //Production ON
                if (m_smVisionInfo.g_intMachineStatus == 2)
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {
                        // View rotated image if Mark turn ON
                        if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.VS_AT_ProductionTestDone)
                        {
                            if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorRotatedImages.Count)
                            {
                                if (m_blnMultipleImageView)
                                {
                                    if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawB1]";

                                    int intViewImageCount = CImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                    for (int i = 0; i < intViewImageCount; i++)
                                    {
                                        int intImageIndex = CImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                        switch (i)
                                        {
                                            case 0:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic1);
                                                else
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic1);
                                                break;
                                            case 1:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic2);
                                                else
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic2);
                                                break;
                                            case 2:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic3);
                                                else
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic3);
                                                break;
                                        }
                                    }
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                    {
                                        if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawC1]";
                                        m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawC2]";
                                        m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorImages.Count)
                            {
                                if (m_blnMultipleImageView)
                                {
                                    int intViewImageCount = CImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                    for (int i = 0; i < intViewImageCount; i++)
                                    {
                                        int intImageIndex = CImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                        switch (i)
                                        {
                                            case 0:
                                                m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic1);
                                                break;
                                            case 1:
                                                m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic2);
                                                break;
                                            case 2:
                                                m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic3);
                                                break;
                                        }
                                    }
                                }
                                else
                                    m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);

                                //m_smVisionInfo.g_arrImages[0].RedrawImage(m_Graphic1);
                                //m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic2);
                                //m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic3);

                            }
                        }

                    }
                    else
                    {
                        // View rotated image if Mark turn ON
                        if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.VS_AT_ProductionTestDone)
                        {
                            if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrRotatedImages.Count)
                            {
                                if (m_blnMultipleImageView)
                                {
                                    //for (int i = 0; i < m_smVisionInfo.g_arrRotatedImages.Count; i++)
                                    //{
                                    //    switch (i)
                                    //    {
                                    //        case 0:
                                    //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                    //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic1);
                                    //            else
                                    //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic1);
                                    //            break;
                                    //        case 1:
                                    //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                    //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic2);
                                    //            else
                                    //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic2);
                                    //            break;
                                    //        case 2:
                                    //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                    //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic3);
                                    //            else
                                    //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic3);
                                    //            break;
                                    //    }
                                    //}

                                    int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                    for (int i = 0; i < intViewImageCount; i++)
                                    {
                                        int intImageIndex = ImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                        switch (i)
                                        {
                                            case 0:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic1);
                                                else
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic1);
                                                break;
                                            case 1:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic2);
                                                else
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic2);
                                                break;
                                            case 2:
                                                if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                    m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic3);
                                                else
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic3);
                                                break;
                                        }
                                    }
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                }
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                            {
                                //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                //{
                                //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                //    {
                                //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                //        {
                                //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                //            m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                //        }
                                //        else
                                //        {
                                //            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                //        }
                                //    }
                                //    else
                                //    {
                                //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrImages[1]);
                                //        m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                //    }
                                //}
                                //else
                                if (m_blnMultipleImageView)
                                {
                                    int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                    for (int i = 0; i < intViewImageCount; i++)
                                    {
                                        int intImageIndex = ImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                        switch (i)
                                        {
                                            case 0:
                                                m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic1);
                                                break;
                                            case 1:
                                                m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic2);
                                                break;
                                            case 2:
                                                m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic3);
                                                break;
                                        }
                                    }
                                }
                                else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);

                                //m_smVisionInfo.g_arrImages[0].RedrawImage(m_Graphic1);
                                //m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic2);
                                //m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic3);

                            }
                        }

                    }
                }
                else if (m_smVisionInfo.g_blnViewPkgProcessImage)
                {
                    m_smVisionInfo.g_objPkgProcessImage.RedrawImage(m_Graphic);
                }
                else if (m_smVisionInfo.g_blnViewPackageImage && m_smVisionInfo.g_objPackageImage != null)
                {
                    //m_smVisionInfo.g_objPackageImage.SaveImage("D:\\TS\\pkgImage3.bmp");
                    if (m_smVisionInfo.g_strSelectedPage == "Calibrate5S")
                    {
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].CopyTo(m_smVisionInfo.g_objPackageImage);
                        if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].AddGain(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_objCalibration.ref_fImageGain);

                    }
                    else if (m_smVisionInfo.g_strSelectedPage == "CalibrateLead3D")
                    {
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].CopyTo(m_smVisionInfo.g_objPackageImage);
                        if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                        {
                            if (m_smVisionInfo.g_objCalibrationLead3D.ref_fImageGain != 1)
                            {
                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].AddGain(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_objCalibrationLead3D.ref_fImageGain);
                            }
                        }

                    }
                    m_smVisionInfo.g_objPackageImage.RedrawImage(m_Graphic);
                }
                else if (m_smVisionInfo.g_blnViewGainImage)
                {
                    if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].AddGain(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_fGainValue);
                    else
                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].AddGain(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_fGainValue);

                    m_smVisionInfo.g_objPackageImage.RedrawImage(m_Graphic);
                }
                else if (m_smVisionInfo.g_blnViewSealImage)
                {
                    m_smVisionInfo.g_objSealImage.RedrawImage(m_Graphic);
                }
                else
                {
                    if (m_smVisionInfo.g_blnViewColorImage)
                    {

                        //View rotated image if true
                        if ((!m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.VM_AT_OfflinePageView) || m_smVisionInfo.AT_VM_ManualTestMode)
                        {
                            if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorRotatedImages.Count)
                                {
                                    if (m_blnMultipleImageView)
                                    {

                                        int intViewImageCount = CImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                        for (int i = 0; i < intViewImageCount; i++)
                                        {
                                            int intImageIndex = CImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                            switch (i)
                                            {
                                                case 0:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    else
                                                        m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    break;
                                                case 1:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    else
                                                        m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    break;
                                                case 2:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrColorRotatedImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    else
                                                        m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        {
                                            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawC]";

                                            m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawD]";

                                            m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorImages.Count)
                                {
                                    if (m_blnMultipleImageView)
                                    {
                                        int intViewImageCount = CImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                        for (int i = 0; i < intViewImageCount; i++)
                                        {
                                            int intImageIndex = CImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                            switch (i)
                                            {
                                                case 0:
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    break;
                                                case 1:
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    break;
                                                case 2:
                                                    m_smVisionInfo.g_arrColorImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                        m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);

                                }
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_blnViewRotatedImage)
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorRotatedImages.Count)
                                {
                                    //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                    //{
                                    //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                    //    {
                                    //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                    //        {
                                    //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                                    //            m_smVisionInfo.g_arrRotatedImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //        }
                                    //        else
                                    //        {
                                    //            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                                    //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrRotatedImages[1]);
                                    //        m_smVisionInfo.g_arrRotatedImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //    }
                                    //}
                                    //else
                                    //23-04-2019 ZJYEOH: Solve Blank Rotated Image being displayed
                                    if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);

                                    else
                                        m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                }
                            }

                            else
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorImages.Count)
                                {
                                    //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                    //{
                                    //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                    //    {
                                    //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                    //        {
                                    //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //            m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //        }
                                    //        else
                                    //        {
                                    //            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrImages[1]);
                                    //        m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //    }
                                    //}
                                    //else
                                    m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                }
                            }
                        }
                    }
                    else
                    {

                        //View rotated image if true
                        if ((!m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.VM_AT_OfflinePageView) || m_smVisionInfo.AT_VM_ManualTestMode)
                        {
                            if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrRotatedImages.Count)
                                {
                                    if (m_blnMultipleImageView)
                                    {
                                        //for (int i = 0; i < m_smVisionInfo.g_arrRotatedImages.Count; i++)
                                        //{
                                        //    switch (i)
                                        //    {
                                        //        case 0:
                                        //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                        //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic1);
                                        //            else
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic1);
                                        //            break;
                                        //        case 1:
                                        //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                        //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic2);
                                        //            else
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic2);
                                        //            break;
                                        //        case 2:
                                        //            if (m_smVisionInfo.g_arrblnImageRotated[i])
                                        //                m_smVisionInfo.g_arrRotatedImages[i].RedrawImage(m_Graphic3);
                                        //            else
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic3);
                                        //            break;
                                        //    }
                                        //}

                                        int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                        for (int i = 0; i < intViewImageCount; i++)
                                        {
                                            int intImageIndex = ImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                            switch (i)
                                            {
                                                case 0:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    else
                                                        m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    break;
                                                case 1:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    else
                                                        m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    break;
                                                case 2:
                                                    if (m_smVisionInfo.g_arrblnImageRotated[intImageIndex])
                                                        m_smVisionInfo.g_arrRotatedImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    else
                                                        m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        {
                                            if (((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0) &&
                                                m_smVisionInfo.g_blnCheckPad && !m_smProductionInfo.g_blnViewPadResult)
                                                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                            else
                                                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                        }
                                        else
                                            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    }
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                                {
                                    //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                    //{
                                    //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                    //    {
                                    //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                    //        {
                                    //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //            m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //        }
                                    //        else
                                    //        {
                                    //            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrImages[1]);
                                    //        m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //    }
                                    //}
                                    //else
                                    if (m_blnMultipleImageView)
                                    {
                                        //for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
                                        //{
                                        //    switch (i)
                                        //    {
                                        //        case 0:
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic1);
                                        //            break;
                                        //        case 1:
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic2);
                                        //            break;
                                        //        case 2:
                                        //                m_smVisionInfo.g_arrImages[i].RedrawImage(m_Graphic3);
                                        //            break;
                                        //    }
                                        //}

                                        int intViewImageCount = ImageDrawing.GetImageViewCount(m_smVisionInfo.g_intVisionIndex);

                                        for (int i = 0; i < intViewImageCount; i++)
                                        {
                                            int intImageIndex = ImageDrawing.GetArrayImageIndex(i, m_smVisionInfo.g_intVisionIndex);
                                            switch (i)
                                            {
                                                case 0:
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic1);
                                                    break;
                                                case 1:
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic2);
                                                    break;
                                                case 2:
                                                    m_smVisionInfo.g_arrImages[intImageIndex].RedrawImage(m_Graphic3);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //m_smVisionInfo.g_arrImages[0].RedrawImage(m_Graphic1);
                                    //m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic2);
                                    //m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic3);
                                    //pnl_PictureBox1.BringToFront();
                                    //pnl_PictureBox2.BringToFront();
                                }
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_blnViewRotatedImage)
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrRotatedImages.Count)
                                {
                                    //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                    //{
                                    //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                    //    {
                                    //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                    //        {
                                    //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                                    //            m_smVisionInfo.g_arrRotatedImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //        }
                                    //        else
                                    //        {
                                    //            m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                                    //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrRotatedImages[1]);
                                    //        m_smVisionInfo.g_arrRotatedImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //    }
                                    //}
                                    //else
                                    //23-04-2019 ZJYEOH: Solve Blank Rotated Image being displayed
                                    if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    else
                                        m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                                {
                                    //if (m_smVisionInfo.g_intImageMergeType != 0 && !m_smVisionInfo.g_blnViewNormalImage)
                                    //{
                                    //    if (m_smVisionInfo.g_intImageMergeType == 1)
                                    //    {
                                    //        if (m_smVisionInfo.g_intSelectedImage < 2)
                                    //        {
                                    //            m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //            m_smVisionInfo.g_arrImages[1].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //        }
                                    //        else
                                    //        {
                                    //            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        m_smVisionInfo.g_arrSystemROI[0].AttachImage(m_smVisionInfo.g_arrImages[0]);
                                    //        m_smVisionInfo.g_arrSystemROI[1].AttachImage(m_smVisionInfo.g_arrImages[1]);
                                    //        m_smVisionInfo.g_arrImages[2].RedrawImage(m_Graphic, m_smVisionInfo.g_arrSystemROI, m_smVisionInfo.g_intImageMergeType);
                                    //    }
                                    //}
                                    //else
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                                }
                            }
                        }
                    }
                }
            }

            if (m_smVisionInfo.g_blnLoadFile && m_smVisionInfo.g_intFileIndex > -1)
            {
                string strFileName = Path.GetFileName(m_smVisionInfo.g_arrImageFiles[m_smVisionInfo.g_intFileIndex].ToString());
                strFileName = strFileName.Substring(0, strFileName.Length - 4);
                m_Graphic.DrawString(strFileName, new Font("Verdana", 12, FontStyle.Bold), new SolidBrush(Color.Red), m_fStrFileNamePointX, m_fStrFileNamePointY);
            }

            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawE]";
        }
        private void DrawZoomInOutImage()
        {
            if (m_blnUpdatedMultiOffStatus) // 2020-12-30 ZJYEOH : need use local boolean instead of m_smVisionInfo.g_blnSetMultipleImageViewOnOff
            {
                m_blnUpdatedMultiOffStatus = false; // m_smVisionInfo.g_blnSetMultipleImageViewOnOff = false;
                if (m_fZoomCount >= 1 && m_blnMultipleImageView)  // 0: view single image
                {
                    m_fTempZoomCount = m_fZoomCount;
                    m_fZoomCountPrev = m_fZoomCount = 1;
                }
                else
                {
                    m_fZoomCountPrev = 0;
                    m_fZoomCount = m_fTempZoomCount;
                }

                //m_fMultiOffStatus = 1; //1 : view multi images
            }
            //else
            //    m_fMultiOffStatus = 0;

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Seal":
                    if (m_smVisionInfo.g_blnUpdateZoom)
                    {
                        m_smVisionInfo.g_blnUpdateZoom = false;
                        if (m_smVisionInfo.g_intLearnStepNo == 13 || m_smVisionInfo.g_intLearnStepNo == 14)
                        {
                            if (m_smVisionInfo.g_objSeal != null)
                            {
                                if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)  // for 0603 or 1006 unit
                                    m_fZoomCount = 3; //x3 times zoom
                                else if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 4)
                                    m_fZoomCount = 2; //x2 times zoom
                                m_fZoomCount = 1;

                                m_intZoomImageFocusPointX = (int)Math.Ceiling(m_smVisionInfo.g_arrSealROIs[5][0].ref_ROICenterX * m_smVisionInfo.g_fScaleX);
                                m_intZoomImageFocusPointY = (int)Math.Ceiling(m_smVisionInfo.g_arrSealROIs[5][0].ref_ROICenterY * m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            m_fZoomCount = 1; //back to normal
                        }
                    }
                    break;
            }

            if (m_fZoomCountPrev != m_fZoomCount)
            {
                //if (m_fMultiOffStatus == 1)
                //{
                //    //m_fMultiOffStatus = 0;
                //    m_fZoomCountPrev = m_fZoomCount;
                //}
                //else
                    m_fZoomCountPrev = m_fZoomCount;

                m_smVisionInfo.g_fScaleX = m_fOriScaleX * m_fZoomCount;
                m_smVisionInfo.g_fScaleY = m_fOriScaleY * m_fZoomCount;

                SetScaleToComponents(false, false, false);

                if (m_fZoomCount == 1)
                {
                    pic_Image.Size = pnl_PictureBox.Size;

                    pnl_PictureBox.AutoScroll = false;

                    m_intScollValueXPrev = 0;
                    m_intScollValueYPrev = 0;
                    m_fStrFileNamePointX = 0;
                    m_fStrFileNamePointY = 0;

                    if ((float)m_smVisionInfo.g_intCameraResolutionHeight / (float)m_smVisionInfo.g_intCameraResolutionWidth != 0.75)
                    {
                        if ((float)pic_Image.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth >= (float)pic_Image.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight)
                        {
                            pnl_PicSideBlock.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                            pnl_PicSideBlock.Width = (int)(pic_Image.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                            pnl_PicSideBlock.Height = pic_Image.Size.Height;
                            pnl_PicSideBlock.BringToFront();
                        }
                        else
                        {
                            pnl_PicSideBlock.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                            pnl_PicSideBlock.Width = pic_Image.Size.Width;
                            pnl_PicSideBlock.Height = (int)(pic_Image.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                            pnl_PicSideBlock.BringToFront();
                        }
                    }
                }
                else
                {
                    int intFocusPointX = 0;
                    int intFocusPointY = 0;
                    float fFocusRatioX = 0;
                    float fFocusRatioY = 0;
                    int intPicImageWidthPrev = 0;
                    int intPicImageHeightPrev = 0;

                    intPicImageWidthPrev = pic_Image.Size.Width;
                    intPicImageHeightPrev = pic_Image.Size.Height;
                    pic_Image.Size = new Size((int)Math.Ceiling((float)pnl_PictureBox.Size.Width * m_fZoomCount), (int)Math.Ceiling((float)pnl_PictureBox.Size.Height * m_fZoomCount));
                    if ((float)m_smVisionInfo.g_intCameraResolutionHeight / (float)m_smVisionInfo.g_intCameraResolutionWidth != 0.75)
                    {
                        if ((float)pic_Image.Size.Width / (float)m_smVisionInfo.g_intCameraResolutionWidth >= (float)pic_Image.Size.Height / (float)m_smVisionInfo.g_intCameraResolutionHeight)
                        {
                            pnl_PicSideBlock.Location = new Point((int)(m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX), 0);
                            pnl_PicSideBlock.Width = (int)(pic_Image.Size.Width - m_smVisionInfo.g_intCameraResolutionWidth * m_smVisionInfo.g_fScaleX);
                            pnl_PicSideBlock.Height = pic_Image.Size.Height;
                            pnl_PicSideBlock.BringToFront();
                        }
                        else
                        {
                            pnl_PicSideBlock.Location = new Point(0, (int)(m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY));
                            pnl_PicSideBlock.Width = pic_Image.Size.Width;
                            pnl_PicSideBlock.Height = (int)(pic_Image.Size.Height - m_smVisionInfo.g_intCameraResolutionHeight * m_smVisionInfo.g_fScaleY);
                            pnl_PicSideBlock.BringToFront();
                        }
                    }

                    fFocusRatioX = (float)m_intZoomImageFocusPointX / intPicImageWidthPrev;
                    fFocusRatioY = (float)m_intZoomImageFocusPointY / intPicImageHeightPrev;
                    intFocusPointX = (int)Math.Ceiling(fFocusRatioX * pic_Image.Size.Width - 320);
                    intFocusPointY = (int)Math.Ceiling(fFocusRatioY * pic_Image.Size.Height - 240);

                    pnl_PictureBox.AutoScroll = true;

                    if ((pic_Image.Size.Width - 623) >= intFocusPointX && intFocusPointX >= 0)
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.HorizontalScroll.Value != intFocusPointX)
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1006");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            if (intFocusPointX > 0) // 2019-12-26 ZJYEOH : Negative value will cause error
                            {
                                pnl_PictureBox.HorizontalScroll.Value = intFocusPointX;
                                pnl_PictureBox.PerformLayout();
                                m_fStrFileNamePointX = intFocusPointX;
                                break;
                            }
                            else
                                break;
                            Thread.Sleep(1);
                        }

                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }
                    else if (intFocusPointX < 0)
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.HorizontalScroll.Value != 0)
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1005");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            pnl_PictureBox.HorizontalScroll.Value = 0;
                            m_fStrFileNamePointX = 0;
                            pnl_PictureBox.PerformLayout();
                            Thread.Sleep(1);
                        }
                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }
                    else
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.HorizontalScroll.Value != (pic_Image.Size.Width - 623)) // Picture size width - panel width + 17 is the maximum value for horizontal
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1004");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            if ((pic_Image.Size.Width - 623) > 0)// 2019-12-26 ZJYEOH : Negative value will cause error
                            {
                                pnl_PictureBox.HorizontalScroll.Value = (pic_Image.Size.Width - 623);
                                m_fStrFileNamePointX = intFocusPointX - 623;
                                pnl_PictureBox.PerformLayout();
                                break;
                            }
                            else
                            {
                                break;
                            }
                            Thread.Sleep(1);
                        }
                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }

                    if ((pic_Image.Size.Height - 463) >= intFocusPointY && intFocusPointY >= 0)
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.VerticalScroll.Value != intFocusPointY)
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1003");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            if (intFocusPointY > 0)// 2019-12-26 ZJYEOH : Negative value will cause error
                            {
                                pnl_PictureBox.VerticalScroll.Value = intFocusPointY;
                                m_fStrFileNamePointY = intFocusPointY;
                                pnl_PictureBox.PerformLayout();
                                break;
                            }
                            else
                                break;
                            Thread.Sleep(1);
                        }
                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }
                    else if (intFocusPointY < 0)
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.VerticalScroll.Value != 0)
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1001");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            pnl_PictureBox.VerticalScroll.Value = 0;
                            m_fStrFileNamePointY = 0;
                            pnl_PictureBox.PerformLayout();
                            Thread.Sleep(1);
                        }
                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }
                    else
                    {
                        // ------------------- checking loop timeout ---------------------------------------------------
                        HiPerfTimer timeout = new HiPerfTimer();
                        timeout.Start();

                        while (pnl_PictureBox.VerticalScroll.Value != (pic_Image.Size.Height - 463)) // Picture size Height - panel height + 17 is the maximum value for vertical
                        {
                            // ------------------- checking loop timeout ---------------------------------------------------
                            if (timeout.Timing > 10000)
                            {
                                STTrackLog.WriteLine(">>>>>>>>>>>>> time out 1002");
                                break;
                            }
                            // ---------------------------------------------------------------------------------------------

                            if ((pic_Image.Size.Height - 463) > 0)// 2019-12-26 ZJYEOH : Negative value will cause error
                            {
                                pnl_PictureBox.VerticalScroll.Value = (pic_Image.Size.Height - 463);
                                m_fStrFileNamePointY = (pic_Image.Size.Height - 463);
                                pnl_PictureBox.PerformLayout();
                                break;
                            }
                            else
                                break;
                            Thread.Sleep(1);
                        }
                        timeout.Stop(); // ------------------- checking loop timeout ---------------------------------------------------
                    }
                }
                m_Graphic = Graphics.FromHwnd(pic_Image.Handle);
                pnl_PictureBox.Refresh();
            }
        }

        /// <summary>
        /// Draw bottom position result
        /// </summary>
        private void DrawPositionObject()
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_smVisionInfo.g_objPositioning == null)
                        return;

                    if (m_smVisionInfo.g_blnViewPadInspection && m_smProductionInfo.g_blnViewInspection)
                    {
                        if ((m_smCustomizeInfo.g_intWantPositioning & (0x01 << m_smVisionInfo.g_intVisionPos)) > 0)
                            m_smVisionInfo.g_objPositioning.DrawSmallCrossLinePosition(m_Graphic);
                    }
                    break;
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    //if (m_smVisionInfo.g_intSelectedImage == 1)
                    //{
                    //    for (int i = 0; i < m_smVisionInfo.g_arrPackage.Count; i++)
                    //    {
                    //        if (m_smVisionInfo.g_arrPackage[i].ref_blnViewUnitPosition)
                    //        {
                    //            Position.DrawPosition(m_Graphic,
                    //                                  m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX,
                    //                                  m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY,
                    //                                  m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectAngle,
                    //                                  m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth,
                    //                                  m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight);
                    //        }
                    //    }
                    //}
                    break;
                default:
                    if (m_smVisionInfo.g_objPositioning == null)
                        return;

                    m_smVisionInfo.g_objPositioning.DrawObjectCrossLinePosition(m_Graphic);
                    m_smVisionInfo.g_objPositioning.DrawPRSObject(m_Graphic);
                    break;
            }

        }
        private void DrawPocketPositionObject()
        {
            if (m_smProductionInfo.g_blnViewPocketPositionResult && m_smVisionInfo.g_blnWantCheckPocketPosition && m_smVisionInfo.g_blnDrawPocketPositionResult && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                m_smVisionInfo.g_objPocketPosition.DrawPocketPositionResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_blnWantUsePocketPattern, m_smVisionInfo.g_blnWantUsePocketGauge
                    , m_smVisionInfo.g_arrPocketPositionROIs, m_smVisionInfo.g_arrPocketPositionGauges, m_smVisionInfo.g_arrPocketPositionROIColor);
            }

        }
        private void DrawBarcodeObject()
        {
            if (m_smVisionInfo.g_objBarcode == null)
                return;

            if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_blnDrawBarcodeResult && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                if (m_smVisionInfo.g_arrBarcodeROIs.Count > 0)
                {
                    float fWidth = m_smVisionInfo.g_objBarcode.GetMatchingTemplateWidth();
                    float fHeight = m_smVisionInfo.g_objBarcode.GetMatchingTemplateHeight();
                    float fPositionX = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objBarcode.GetMatchingCenterX() - (fWidth / 2);
                    float fPositionY = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objBarcode.GetMatchingCenterY() - (fWidth / 2);

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4

                    float fCenterX = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objBarcode.GetMatchingCenterX();
                    float fCenterY = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objBarcode.GetMatchingCenterY();

                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objBarcode.GetMatchingAngle(), ref newX1, ref newY1);
                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objBarcode.GetMatchingAngle(), ref newX2, ref newY2);
                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objBarcode.GetMatchingAngle(), ref newX3, ref newY3);
                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objBarcode.GetMatchingAngle(), ref newX4, ref newY4);

                    if (m_smVisionInfo.g_objBarcode.GetMatchingScore() > m_smVisionInfo.g_objBarcode.ref_intMinMatchingScore)
                    {
                        m_Graphic.DrawLine(new Pen(Color.Yellow, 3), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Yellow, 3), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Yellow, 3), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Yellow, 3), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                    }
                    else
                    {
                        m_Graphic.DrawLine(new Pen(Color.Red, 3), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Red, 3), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Red, 3), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(new Pen(Color.Red, 3), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                    }
                }
            }

            if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_blnDrawBarcodeResult && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                if (m_smVisionInfo.g_arrBarcodeROIs.Count > 1 && m_smVisionInfo.g_objBarcode.ref_blnTestDone)
                    m_smVisionInfo.g_objBarcode.DrawBarcodeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrBarcodeROIs[2], false);
                m_smVisionInfo.g_blnDrawBarcodeResultDone = true;
            }
            else if (m_smVisionInfo.g_intLearnStepNo == 1 && m_smVisionInfo.VM_AT_SettingInDialog)
            {
                int intStartX = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left;
                int intStartY = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top;
                int intWidth = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIWidth - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Right;
                int intHeight = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIHeight - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Bottom;

                m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX * m_smVisionInfo.g_fScaleX, intStartY * m_smVisionInfo.g_fScaleY, intWidth * m_smVisionInfo.g_fScaleX, intHeight * m_smVisionInfo.g_fScaleY);
            }
            else if (m_smVisionInfo.g_intLearnStepNo == 2 && m_smVisionInfo.g_blnDrawBarcodeResult && m_smVisionInfo.VM_AT_SettingInDialog && m_smVisionInfo.g_objBarcode.ref_blnTestDone)
            {
                m_smVisionInfo.g_objBarcode.DrawBarcodeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrBarcodeROIs[2], true);
                m_smVisionInfo.g_blnDrawBarcodeResultDone = true;
            }
            else if (!m_smProductionInfo.g_blnViewInspection)
                m_smVisionInfo.g_blnDrawBarcodeResultDone = true;

            if (m_smVisionInfo.g_blnViewBarcodeInspectionArea && m_smVisionInfo.VM_AT_SettingInDialog)
            {
                int intStartX = m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance;
                int intStartY = m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance;
                int intWidth = m_smVisionInfo.g_intCameraResolutionWidth - m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance * 2;
                int intHeight = m_smVisionInfo.g_intCameraResolutionHeight - m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance * 2;

                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrBarcodeROIColor[3][0]), intStartX * m_smVisionInfo.g_fScaleX, intStartY * m_smVisionInfo.g_fScaleY, intWidth * m_smVisionInfo.g_fScaleX, intHeight * m_smVisionInfo.g_fScaleY);
            }

            if (m_smProductionInfo.g_blnViewInspection && m_smProductionInfo.g_blnViewBarcodeInspectionArea && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                int intStartX = m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance;
                int intStartY = m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance;
                int intWidth = m_smVisionInfo.g_intCameraResolutionWidth - m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance * 2;
                int intHeight = m_smVisionInfo.g_intCameraResolutionHeight - m_smVisionInfo.g_objBarcode.ref_intBarcodeDetectionAreaTolerance * 2;

                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrBarcodeROIColor[3][0]), intStartX * m_smVisionInfo.g_fScaleX, intStartY * m_smVisionInfo.g_fScaleY, intWidth * m_smVisionInfo.g_fScaleX, intHeight * m_smVisionInfo.g_fScaleY);
            }

            if (m_smVisionInfo.g_blnViewBarcodePatternInspectionArea && m_smVisionInfo.VM_AT_SettingInDialog && m_smVisionInfo.g_arrBarcodeROIs.Count > 0)
            {
                int intStartX = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left;
                int intStartY = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top;
                int intWidth = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIWidth - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Right;
                int intHeight = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIHeight - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Bottom;

                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrBarcodeROIColor[4][0]), intStartX * m_smVisionInfo.g_fScaleX, intStartY * m_smVisionInfo.g_fScaleY, intWidth * m_smVisionInfo.g_fScaleX, intHeight * m_smVisionInfo.g_fScaleY);
            }

            if (m_smProductionInfo.g_blnViewInspection && m_smProductionInfo.g_blnViewBarcodePatternInspectionArea && !m_smVisionInfo.VM_AT_SettingInDialog && m_smVisionInfo.g_arrBarcodeROIs.Count > 0)
            {
                int intStartX = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionX + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left;
                int intStartY = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIPositionY + m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top;
                int intWidth = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIWidth - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Left - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Right;
                int intHeight = m_smVisionInfo.g_arrBarcodeROIs[0].ref_ROIHeight - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Top - m_smVisionInfo.g_objBarcode.ref_intPatternDetectionAreaTolerance_Bottom;

                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrBarcodeROIColor[4][0]), intStartX * m_smVisionInfo.g_fScaleX, intStartY * m_smVisionInfo.g_fScaleY, intWidth * m_smVisionInfo.g_fScaleX, intHeight * m_smVisionInfo.g_fScaleY);
            }

        }
        /// <summary>
        /// Draw mark object
        /// </summary>
        private void DrawMarkObject()
        {
            if (m_smVisionInfo.g_arrMarkROIs == null || m_smVisionInfo.g_arrMarkROIs.Count == 0)
                return;

            if (m_smVisionInfo.g_arrMarkROIs.Count <= m_smVisionInfo.g_intSelectedUnit)
                return;

            if (m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit].Count < 2)
                return;

            if (m_smVisionInfo.g_strSelectedPage == "OCR")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 2 && m_smVisionInfo.g_blnViewObjectsBuilded)
                {
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawBlobsLearnObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }

                if (m_smVisionInfo.g_intLearnStepNo == 3)
                {
                    m_smVisionInfo.g_blnHasDetected = true;
                    if (m_smVisionInfo.g_blnHasDetected)
                    {
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCR2(m_Graphic, 0, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCR2(m_Graphic, 1, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                    }

                    if (m_smVisionInfo.g_blnHasRecognise)
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCR2(m_Graphic, 2, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }
            }

            if (m_smVisionInfo.g_strSelectedPage == "Mark" || m_smVisionInfo.g_strSelectedPage == "MarkOrient")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 10 || m_smVisionInfo.g_intLearnStepNo == 11)
                {
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCRBuildedChars(m_Graphic);
                }
                if (m_smVisionInfo.g_intLearnStepNo == 9)
                {
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCVTexts(m_Graphic,
                        m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][0],
                        m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionX,
                        m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionY,
                        m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth,
                        m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight,
                        m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 8)
                {
                    //m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCVChars(m_Graphic,
                    //    m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][0],
                    //    m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionX,
                    //    m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionY,
                    //    m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth,
                    //    m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight,
                    //    m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawBuildOCV(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkOrientROIColor[8]);
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 7 && m_smVisionInfo.g_blnViewObjectsBuilded)
                {
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawBlobsLearnObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }
            }
            
            // 2021-08-25 : Hide this because no more using Lead base point to offset mark ROI
            //if (m_smVisionInfo.g_blnViewMarkROIOffset)
            //{
            //    PointF pLeadRefBasePoint = new PointF();
            //    if (m_smVisionInfo.g_arrLead[1].ref_blnSelected && m_smVisionInfo.g_arrLead[3].ref_blnSelected)
            //    {
            //        pLeadRefBasePoint = m_smVisionInfo.g_arrLead[1].GetSampleLeadBaseCenterPoint(false);

            //        pLeadRefBasePoint = new PointF(m_smVisionInfo.g_arrInspectLeadROI[1].ref_ROIPositionX + pLeadRefBasePoint.X,
            //                                       m_smVisionInfo.g_arrInspectLeadROI[1].ref_ROIPositionY + pLeadRefBasePoint.Y);
            //    }
            //    else if (m_smVisionInfo.g_arrLead[2].ref_blnSelected && m_smVisionInfo.g_arrLead[4].ref_blnSelected)
            //    {
            //        pLeadRefBasePoint = m_smVisionInfo.g_arrLead[4].GetSampleLeadBaseCenterPoint(true);
            //        pLeadRefBasePoint = new PointF(m_smVisionInfo.g_arrInspectLeadROI[4].ref_ROIPositionX + pLeadRefBasePoint.X,
            //                                       m_smVisionInfo.g_arrInspectLeadROI[4].ref_ROIPositionY + pLeadRefBasePoint.Y);
            //    }

            //    float fOffsetX1 = m_smVisionInfo.g_arrMarks[0].ref_intMarkROIOffsetLeft;
            //    float fOffsetY1 = m_smVisionInfo.g_arrMarks[0].ref_intMarkROIOffsetTop;
            //    float fOffsetX2 = m_smVisionInfo.g_arrMarks[0].ref_intMarkROIOffsetRight;
            //    float fOffsetY2 = m_smVisionInfo.g_arrMarks[0].ref_intMarkROIOffsetBottom;
            //    PointF pStart = new PointF(pLeadRefBasePoint.X + fOffsetX1, pLeadRefBasePoint.Y + fOffsetY1);
            //    PointF pEnd = new PointF(pLeadRefBasePoint.X + fOffsetX2, pLeadRefBasePoint.Y + fOffsetY2);
            //    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Left, 3:Bottom Right
            //    arrPoints.Add(new PointF(pStart.X * m_smVisionInfo.g_fScaleX, pStart.Y * m_smVisionInfo.g_fScaleY));
            //    arrPoints.Add(new PointF(pEnd.X * m_smVisionInfo.g_fScaleX, pStart.Y * m_smVisionInfo.g_fScaleY));
            //    arrPoints.Add(new PointF(pStart.X * m_smVisionInfo.g_fScaleX, pEnd.Y * m_smVisionInfo.g_fScaleY));
            //    arrPoints.Add(new PointF(pEnd.X * m_smVisionInfo.g_fScaleX, pEnd.Y * m_smVisionInfo.g_fScaleY));

            //    m_Graphic.DrawLine(new Pen(Color.Cyan), arrPoints[0].X, arrPoints[0].Y, arrPoints[1].X, arrPoints[1].Y);
            //    m_Graphic.DrawLine(new Pen(Color.Cyan), arrPoints[1].X, arrPoints[1].Y, arrPoints[3].X, arrPoints[3].Y);
            //    m_Graphic.DrawLine(new Pen(Color.Cyan), arrPoints[0].X, arrPoints[0].Y, arrPoints[2].X, arrPoints[2].Y);
            //    m_Graphic.DrawLine(new Pen(Color.Cyan), arrPoints[2].X, arrPoints[2].Y, arrPoints[3].X, arrPoints[3].Y);

            //    m_Graphic.DrawLine(new Pen(Color.Cyan), (pLeadRefBasePoint.X - 5) * m_smVisionInfo.g_fScaleX, (pLeadRefBasePoint.Y - 5) * m_smVisionInfo.g_fScaleY,
            //        (pLeadRefBasePoint.X + 5) * m_smVisionInfo.g_fScaleX, (pLeadRefBasePoint.Y + 5) * m_smVisionInfo.g_fScaleY);
            //    m_Graphic.DrawLine(new Pen(Color.Cyan), (pLeadRefBasePoint.X - 5) * m_smVisionInfo.g_fScaleX, (pLeadRefBasePoint.Y + 5) * m_smVisionInfo.g_fScaleY,
            //        (pLeadRefBasePoint.X + 5) * m_smVisionInfo.g_fScaleX, (pLeadRefBasePoint.Y - 5) * m_smVisionInfo.g_fScaleY);
            //}

            if (m_smVisionInfo.g_blnViewLeadDontCareInwardTolerance)
            {
                PointF pLeadBasePoint_Top = new PointF();
                PointF pLeadBasePoint_Bottom = new PointF();
                PointF pLeadBasePoint_Left = new PointF();
                PointF pLeadBasePoint_Right = new PointF();
                if (m_smVisionInfo.g_arrLead[1].ref_blnSelected && m_smVisionInfo.g_arrLead[3].ref_blnSelected)
                {
                    pLeadBasePoint_Top = m_smVisionInfo.g_arrLead[1].GetSampleLeadBaseCenterPoint_MostInside();

                    pLeadBasePoint_Top = new PointF(m_smVisionInfo.g_arrInspectLeadROI[1].ref_ROIPositionX + pLeadBasePoint_Top.X,
                                                   m_smVisionInfo.g_arrInspectLeadROI[1].ref_ROIPositionY + pLeadBasePoint_Top.Y + m_smVisionInfo.g_arrMarks[0].ref_intLeadDontCareInwardTolerance_Top);

                    pLeadBasePoint_Bottom = m_smVisionInfo.g_arrLead[3].GetSampleLeadBaseCenterPoint_MostInside();

                    pLeadBasePoint_Bottom = new PointF(m_smVisionInfo.g_arrInspectLeadROI[3].ref_ROIPositionX + pLeadBasePoint_Bottom.X,
                                                   m_smVisionInfo.g_arrInspectLeadROI[3].ref_ROIPositionY + pLeadBasePoint_Bottom.Y - m_smVisionInfo.g_arrMarks[0].ref_intLeadDontCareInwardTolerance_Bottom);

                    m_Graphic.DrawLine(new Pen(Color.Cyan), m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                            pLeadBasePoint_Top.Y * m_smVisionInfo.g_fScaleY,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                            pLeadBasePoint_Top.Y * m_smVisionInfo.g_fScaleY);

                    m_Graphic.DrawLine(new Pen(Color.Cyan), m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                        pLeadBasePoint_Bottom.Y * m_smVisionInfo.g_fScaleY,
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                        pLeadBasePoint_Bottom.Y * m_smVisionInfo.g_fScaleY);
                }
                else if (m_smVisionInfo.g_arrLead[2].ref_blnSelected && m_smVisionInfo.g_arrLead[4].ref_blnSelected)
                {
                    pLeadBasePoint_Left = m_smVisionInfo.g_arrLead[4].GetSampleLeadBaseCenterPoint_MostInside();

                    pLeadBasePoint_Left = new PointF(m_smVisionInfo.g_arrInspectLeadROI[4].ref_ROIPositionX + pLeadBasePoint_Left.X + m_smVisionInfo.g_arrMarks[0].ref_intLeadDontCareInwardTolerance_Left,
                                                   m_smVisionInfo.g_arrInspectLeadROI[4].ref_ROIPositionY + pLeadBasePoint_Left.Y);

                    pLeadBasePoint_Right = m_smVisionInfo.g_arrLead[2].GetSampleLeadBaseCenterPoint_MostInside();

                    pLeadBasePoint_Right = new PointF(m_smVisionInfo.g_arrInspectLeadROI[2].ref_ROIPositionX + pLeadBasePoint_Right.X - m_smVisionInfo.g_arrMarks[0].ref_intLeadDontCareInwardTolerance_Right,
                                                   m_smVisionInfo.g_arrInspectLeadROI[2].ref_ROIPositionY + pLeadBasePoint_Right.Y);

                    m_Graphic.DrawLine(new Pen(Color.Cyan), pLeadBasePoint_Left.X * m_smVisionInfo.g_fScaleX,
                                                            m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                            pLeadBasePoint_Left.X * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);

                    m_Graphic.DrawLine(new Pen(Color.Cyan), pLeadBasePoint_Right.X * m_smVisionInfo.g_fScaleX,
                                                          m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                          pLeadBasePoint_Right.X * m_smVisionInfo.g_fScaleX,
                                                          (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                }

            }

            //if (m_smVisionInfo.g_blnMarkInspected && (m_smVisionInfo.g_blnViewMarkInspection || (m_smProductionInfo.g_blnViewInspection && !m_smVisionInfo.VM_AT_SettingInDialog)))
            if (m_smVisionInfo.g_blnDrawMarkResult && m_smProductionInfo.g_blnViewInspection)
            {
                if (m_smVisionInfo.g_intSelectedImage == 0)// Mark inspection using Image 1. So draw mark only when selected view image is 1.
                {
                    for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                    {
                        if (m_smVisionInfo.g_blnUnitInspected[u] && m_smVisionInfo.g_arrMarks[u].ref_blnCheckMark && 
                            (((m_smCustomizeInfo.g_intWantOCR2 & (0x01 << m_smVisionInfo.g_intVisionPos)) == 0) || (((m_smCustomizeInfo.g_intWantOCR2 & (0x01 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_blnUseOCRandOCV)))
                        {
                            if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                                m_smVisionInfo.g_arrMarks[u].DrawInspectedChars_Rotate(m_Graphic, m_smVisionInfo.g_blnMarkSelecting, m_smVisionInfo.g_intMarkTextSelectedNo[u], m_smVisionInfo.g_intMarkCharSelectedNo[u],
                                    m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrients[u][m_smVisionInfo.g_intSelectedOcv[u]].ref_fDegAngleResult);//m_smVisionInfo.g_fOrientAngle[0]
                            else
                            {
                                if (m_smVisionInfo.g_blnDrawPkgResult && m_smVisionInfo.g_arrPackage[u].ref_blnPkgSizeInspectionDone & m_smProductionInfo.g_blnViewPackageResult)
                                {
                                    float fPackageAngle;
                                    PointF pPackageCenterPoint;
                                    if (u == 0)
                                    {
                                        pPackageCenterPoint = m_smVisionInfo.g_objGauge_PkgSize.ref_pRectCenterPoint;
                                        fPackageAngle = m_smVisionInfo.g_objGauge_PkgSize.ref_fRectAngle;
                                    }
                                    else
                                    {
                                        pPackageCenterPoint = m_smVisionInfo.g_objGauge_PkgSize2.ref_pRectCenterPoint;
                                        fPackageAngle = m_smVisionInfo.g_objGauge_PkgSize2.ref_fRectAngle;
                                    }
                                    m_smVisionInfo.g_arrMarks[u].DrawInspectedChars_RotateToPackageAngle(m_Graphic, m_smVisionInfo.g_blnMarkSelecting, m_smVisionInfo.g_intMarkTextSelectedNo[u], m_smVisionInfo.g_intMarkCharSelectedNo[u],
                                          m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -(fPackageAngle - m_smVisionInfo.g_arrOrients[u][m_smVisionInfo.g_intSelectedOcv[u]].ref_fDegAngleResult), pPackageCenterPoint);//m_smVisionInfo.g_fOrientAngle[0]
                                }
                                else
                                    m_smVisionInfo.g_arrMarks[u].DrawInspectedChars(m_Graphic, m_smVisionInfo.g_blnMarkSelecting, m_smVisionInfo.g_intMarkTextSelectedNo[u], m_smVisionInfo.g_intMarkCharSelectedNo[u],
                                       m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }

                            if ((m_smCustomizeInfo.g_intWantOCR & (0x01 << m_smVisionInfo.g_intVisionPos)) == 0)
                                m_smVisionInfo.g_arrMarks[u].DrawTemplateNo(m_Graphic,
                                    (int)(m_smVisionInfo.g_arrMarkROIs[u][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX),
                                    (int)(m_smVisionInfo.g_arrMarkROIs[u][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY - 16 / m_smVisionInfo.g_fScaleY), 1, 0, 0);

                            if (m_smVisionInfo.g_blnUseOCRandOCV)
                            {
                                if (m_smVisionInfo.g_blnHasDetected)
                                    m_smVisionInfo.g_arrMarks[u].DrawResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                if (m_smVisionInfo.g_blnHasRecognise)
                                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCR2(m_Graphic, 2, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                m_smVisionInfo.g_arrMarks[u].DrawOCR2(m_Graphic, 3, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else if (((m_smCustomizeInfo.g_intWantOCR2 & (0x01 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_blnUseOCR)
                        {
                            if (m_smVisionInfo.g_blnHasDetected)
                                m_smVisionInfo.g_arrMarks[u].DrawResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            if (m_smVisionInfo.g_blnHasRecognise)
                                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DrawOCR2(m_Graphic, 2, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            m_smVisionInfo.g_arrMarks[u].DrawOCR2(m_Graphic, 3, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                    }

                    //if (m_smVisionInfo.g_arrOrientGaugeM4L.Count > 0 && 
                    //    m_smVisionInfo.g_blnWantGauge && 
                    //    m_smProductionInfo.g_blnViewPackageResult && 
                    //    ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0))
                    //{
                    //    if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                    //    {
                    //        m_smVisionInfo.g_arrOrientGaugeM4L[0].DrawGaugeResult_ResultLine_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                    //    }
                    //    else
                    //    {
                    //        m_smVisionInfo.g_arrOrientGaugeM4L[0].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                    //    }
                    //}
                }
            }

            if (m_smVisionInfo.g_blnDrawMarkResult && m_smProductionInfo.g_blnViewPackageResult)
            {
                if (m_smVisionInfo.g_intSelectedImage == 0)// Mark inspection using Image 1. So draw mark only when selected view image is 1.
                {
                    for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                    {
                        if (m_smVisionInfo.g_blnUnitInspected[u])
                        {
                            if (m_smVisionInfo.g_arrOrientGaugeM4L.Count > 0 &&
                      m_smVisionInfo.g_blnWantGauge
                      && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0))
                            {
                                if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                {
                                    m_smVisionInfo.g_arrOrientGaugeM4L[u].DrawGaugeResult_ResultLine_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrOrientGaugeM4L[u].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                    }


                }
            }

            if (m_smVisionInfo.g_blnDrawMarkResult && m_smProductionInfo.g_blnViewMarkROI)
            {
                Pen objPen = new Pen(Color.Cyan);
                if (m_smVisionInfo.g_intSelectedImage == 0)
                {
                    m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[1].Y * m_smVisionInfo.g_fScaleY);
                    m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[2].Y * m_smVisionInfo.g_fScaleY);
                    m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[3].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[1].Y * m_smVisionInfo.g_fScaleY);
                    m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[2].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing[3].Y * m_smVisionInfo.g_fScaleY);
                    if (m_smVisionInfo.g_intUnitsOnImage == 2)
                    {
                        m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing2[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing2[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[1].Y * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing2[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing2[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[2].Y * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing2[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[3].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing2[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[1].Y * m_smVisionInfo.g_fScaleY);
                        m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing2[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[2].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing2[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing2[3].Y * m_smVisionInfo.g_fScaleY);
                    }
                }
                else
                {
                    if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        if (m_smVisionInfo.g_arrLead != null && m_smVisionInfo.g_arrLead.Length > 0)
                        {
                            if (m_smVisionInfo.g_arrLead[0].ref_intImageViewNo == m_smVisionInfo.g_intSelectedImage)
                            {
                                m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing_Lead[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing_Lead[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[1].Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing_Lead[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing_Lead[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[2].Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing_Lead[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[3].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing_Lead[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[1].Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, m_smVisionInfo.g_pMarkROIDrawing_Lead[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[2].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_pMarkROIDrawing_Lead[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_pMarkROIDrawing_Lead[3].Y * m_smVisionInfo.g_fScaleY);
                            }
                        }
                    }
                }
            }

            if (m_smVisionInfo.g_blnMarkDrawing)
                m_smVisionInfo.g_blnMarkDrawing = false;
        }

        /// <summary>
        /// Draw pad object
        /// </summary>
        private void DrawPadObject()
        {
            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawM]";
            if (m_smVisionInfo.g_arrPadROIs == null || m_smVisionInfo.g_arrPadROIs.Count == 0)
                return;
            if (m_smVisionInfo.g_blnViewPHObjectBuilded)
            {
                m_smVisionInfo.g_objPositioning.DrawPHObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_objPositioning.ref_intLargestBlob);
            }
            // ---------- Learn Pad Form Drawing -----------------------------------------------------------------------
            if (m_smVisionInfo.g_strSelectedPage == "Pad" || m_smVisionInfo.g_strSelectedPage == "Pad5S")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                    {
                        // 2019 4 17 - CCENG: Dont care area ROI start from index 4. (PadROI[0]=Search ROI, [1]=Unit/Gauge ROI, [2]=Pkg ROI, [3]=Pad ROI, [4] or above = Dont care roi
                        for (int j = 4; j < m_smVisionInfo.g_arrPadROIs[i].Count; j++)
                        {
                            m_smVisionInfo.g_arrPadROIs[i][j].AttachImage(m_smVisionInfo.g_arrPadROIs[i][3]);
                            float fX = (float)(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX;
                            float fY = (float)(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY;
                            float fWidth = (float)m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                            float fHeight = (float)m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                            m_Graphic.FillRectangle(new SolidBrush(Color.Gray), fX, fY, fWidth, fHeight);
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 16)
                {
                    if (m_smVisionInfo.g_blnViewColorPackageStartPixelFromEdge)
                    {
                        DrawPadColorROITolerance();
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 5)
                {
                    if (!m_smVisionInfo.g_blnViewThreshold)
                    {
                        if (m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrPad[i].DrawObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrPad[i].DrawSelectedObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                    }
                    if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                    {
                        DrawPadROITolerance();
                    }
                    else
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (m_smVisionInfo.g_arrPadROIs[i].Count > 3)
                            {
                                m_smVisionInfo.g_arrPadROIs[i][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, "", 1, m_smVisionInfo.g_arrPadROIColor[3][0]);
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 6)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                            m_smVisionInfo.g_arrPad[i].DrawTemplateObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[4]);
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 7)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        if (m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                        {
                            if (m_smVisionInfo.g_arrPad[i].ref_blnViewGroupClassificationDrawing)
                            {
                                m_smVisionInfo.g_arrPad[i].DrawGroupClassification(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[4]);
                            }
                            else
                            {
                                m_smVisionInfo.g_arrPad[i].DrawTemplateObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[4]);
                                m_smVisionInfo.g_arrPad[i].DrawPitchGapLink(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[9][0]);
                            }
                        }
                    }

                }
                else if (m_smVisionInfo.g_intLearnStepNo == 8)
                {
                    for (int i = 1; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                    {
                        m_smVisionInfo.g_arrPad[i].DrawTemplateObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[4]);
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 9)
                {
                    for (int i = 1; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        m_smVisionInfo.g_arrPad[i].DrawTemplateObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[4]);
                        m_smVisionInfo.g_arrPad[i].DrawPitchGapLink(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][1].ref_ROITotalY, m_smVisionInfo.g_arrPadROIColor[9][0]);
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 13)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intEndX = 0;
                    int intEndY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4
                    PointF[] CornerPoints = new PointF[4];

                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        /*
                         * 2020 02 23 - CCENG: when is blnMeasureCenterPkgSizeUsingSidePkg, no need purposely get corner points from side pad. 
                         *                   : during gauge measurement at steps 2, the function MeasureEdge_UsingSidePkgCornerPoint have been called and the corner points from side pad have been transfer to center gauge.
                         */
                        //if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                        //{
                        //    fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                        //    fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                        //    fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                        //    fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                        //    PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X - fLengthLeft, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y - fLengthTop);
                        //    PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X + fLengthRight, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y - fLengthTop);
                        //    PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X + fLengthLeft, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y + fLengthBottom);
                        //    PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X - fLengthRight, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y + fLengthBottom);
                        //    m_Graphic.DrawLine(new Pen(Color.Yellow), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);
                        //    m_Graphic.DrawLine(new Pen(Color.Yellow), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);
                        //    m_Graphic.DrawLine(new Pen(Color.Yellow), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                        //    m_Graphic.DrawLine(new Pen(Color.Yellow), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                        //}
                        //else
                        {

                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X - fLengthLeft -
                                                         (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);

                            intEndX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X + fLengthRight +
                                                         (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX);

                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y - fLengthTop -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                            intEndY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y + fLengthBottom +
                                                       (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY);

                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {

                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), intStartX, intStartY, intEndX - intStartX, intEndY - intStartY);

                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //newX1 = CornerPoints[0].X;
                                //newX2 = CornerPoints[1].X;
                                //newX3 = CornerPoints[2].X;
                                //newX4 = CornerPoints[3].X;
                                //newY1 = CornerPoints[0].Y;
                                //newY2 = CornerPoints[1].Y;
                                //newY3 = CornerPoints[2].Y;
                                //newY4 = CornerPoints[3].Y;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //    newX1 = CornerPoints[0].X - fLengthLeft;
                                //    newX2 = CornerPoints[1].X + fLengthRight;
                                //    newX3 = CornerPoints[2].X + fLengthRight;
                                //    newX4 = CornerPoints[3].X - fLengthLeft;
                                //    newY1 = CornerPoints[0].Y - fLengthTop;
                                //    newY2 = CornerPoints[1].Y - fLengthTop;
                                //    newY3 = CornerPoints[2].Y + fLengthBottom;
                                //    newY4 = CornerPoints[3].Y + fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                }
            }
            else if (m_smVisionInfo.g_strSelectedPage == "PadPackage")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 1 || /*m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 5 ||*/ m_smVisionInfo.g_intLearnStepNo == 7 ||
                    m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9 || m_smVisionInfo.g_intLearnStepNo == 10)// || m_smVisionInfo.g_intLearnStepNo == 11)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;
                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4

                    Pen objPen = new Pen(Color.Red);
                    if (m_smVisionInfo.g_intLearnStepNo == 1 || m_smVisionInfo.g_intLearnStepNo == 7)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]);
                    else if (m_smVisionInfo.g_intLearnStepNo == 8)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[1][0]);
                    else if (m_smVisionInfo.g_intLearnStepNo == 9)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]);
                    else if (m_smVisionInfo.g_intLearnStepNo == 10)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]);

                    PointF[] CornerPoints = new PointF[4];
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        if (m_smVisionInfo.g_blnViewPadPkgStartPixelFromEdge || !m_smVisionInfo.g_arrPad[0].ref_blnSeperateBrightDarkROITolerance)
                        {
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge;
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft;
                        }
                        else
                        {
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge_Dark;
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight_Dark;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom_Dark;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft_Dark;
                        }

                        //fLengthTop = m_smVisionInfo.g_arrPad[i].GetPkgStartPixelFromEdge(-1);
                        //fLengthRight = m_smVisionInfo.g_arrPad[i].GetPkgStartPixelFromRight(-1);
                        //fLengthBottom = m_smVisionInfo.g_arrPad[i].GetPkgStartPixelFromBottom(-1);
                        //fLengthLeft = m_smVisionInfo.g_arrPad[i].GetPkgStartPixelFromLeft(-1);

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        intStartX = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2)) * m_smVisionInfo.g_fScaleX);
                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                        intStartY = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2)) * m_smVisionInfo.g_fScaleY);
                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {
                            m_Graphic.DrawRectangle(objPen, intStartX + intExtendX, intStartY + intExtendY, fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                            fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);

                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                            //                          m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            ////newX1 = CornerPoints[0].X + fLengthLeft;
                            ////newX2 = CornerPoints[1].X - fLengthRight;
                            ////newX3 = CornerPoints[2].X - fLengthRight;
                            ////newX4 = CornerPoints[3].X + fLengthLeft;
                            ////newY1 = CornerPoints[0].Y + fLengthTop;
                            ////newY2 = CornerPoints[1].Y + fLengthTop;
                            ////newY3 = CornerPoints[2].Y - fLengthBottom;
                            ////newY4 = CornerPoints[3].Y - fLengthBottom;

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            
                            PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }

                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 11 || m_smVisionInfo.g_intLearnStepNo == 12)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;
                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4

                    PointF[] CornerPoints = new PointF[4];
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromEdge;
                        fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromRight;
                        fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromBottom;
                        fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromLeft;

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        intStartX = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2)) * m_smVisionInfo.g_fScaleX);
                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                        intStartY = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2)) * m_smVisionInfo.g_fScaleY);
                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), intStartX + intExtendX, intStartY + intExtendY, fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                            fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);

                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                            //                          m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //newX1 = CornerPoints[0].X + fLengthLeft;
                            //newX2 = CornerPoints[1].X - fLengthRight;
                            //newX3 = CornerPoints[2].X - fLengthRight;
                            //newX4 = CornerPoints[3].X + fLengthLeft;
                            //newY1 = CornerPoints[0].Y + fLengthTop;
                            //newY2 = CornerPoints[1].Y + fLengthTop;
                            //newY3 = CornerPoints[2].Y - fLengthBottom;
                            //newY4 = CornerPoints[3].Y - fLengthBottom;

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                        }

                    }
                }
                //else if (m_smVisionInfo.g_intLearnStepNo == 5)
                //{
                //    float fLengthTop = 0;
                //    float fLengthRight = 0;
                //    float fLengthBottom = 0;
                //    float fLengthLeft = 0;
                //    int intStartX = 0;
                //    int intStartY = 0;
                //    int intExtendLeft = 0;
                //    int intExtendRight = 0;
                //    int intExtendTop = 0;
                //    int intExtendBottom = 0;

                //    float newX1 = 0, newY1 = 0;  // new point 1
                //    float newX2 = 0, newY2 = 0; // new point 2
                //    float newX3 = 0, newY3 = 0; // new point 3
                //    float newX4 = 0, newY4 = 0; // new point 4
                //    PointF[] CornerPoints = new PointF[4];

                //    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                //    {
                //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                //            break;
                //        fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromEdge; // m_smVisionInfo.g_intSelectedROI
                //        fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromRight;
                //        fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromBottom;
                //        fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromLeft;


                //        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                //        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                //        intStartX = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2)) * m_smVisionInfo.g_fScaleX);
                //        intExtendLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                //        intExtendRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                //        intStartY = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2)) * m_smVisionInfo.g_fScaleY);
                //        intExtendTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                //        intExtendBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                //        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                //        {
                //            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                //            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);
                //            //Top
                //            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intExtendTop);

                //            //Right
                //            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intExtendRight, intStartY,
                //                                    intExtendRight, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                //            //Bottom
                //            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intExtendBottom,
                //                                    fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intExtendBottom);

                //            //Left
                //            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, intExtendLeft, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                //            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                //            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                //        }
                //        else
                //        {
                //            CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                //            m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                //            Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                //            m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                //            m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                //        }
                //    }
                //}
                else if (m_smVisionInfo.g_intLearnStepNo == 2 || m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 5)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    float fLengthExtendTop = 0;
                    float fLengthExtendRight = 0;
                    float fLengthExtendBottom = 0;
                    float fLengthExtendLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intOutwardLeft = 0;
                    int intOutwardRight = 0;
                    int intOutwardTop = 0;
                    int intOutwardBottom = 0;
                    int intInwardLeft = 0;
                    int intInwardRight = 0;
                    int intInwardTop = 0;
                    int intInwardBottom = 0;

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4
                    PointF[] CornerPoints = new PointF[4];

                    Pen objPen = new Pen(Color.Red);
                    if (m_smVisionInfo.g_intLearnStepNo == 2 || m_smVisionInfo.g_intLearnStepNo == 4)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]);
                     else if (m_smVisionInfo.g_intLearnStepNo == 5)
                        objPen = new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]);

                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        if (m_smVisionInfo.g_blnViewPadChipStartPixelFromEdge)
                        {
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromEdge; // m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromLeft;
                        }
                        else
                        {
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromEdge_Dark; // m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromRight_Dark;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromBottom_Dark;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromLeft_Dark;
                        }

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        intStartX = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2)) * m_smVisionInfo.g_fScaleX);
                        intStartY = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2)) * m_smVisionInfo.g_fScaleY);

                        intInwardLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intInwardRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                        intInwardTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intInwardBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_blnViewPadChipStartPixelFromEdge)
                        {
                            fLengthExtendTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromEdge;
                            fLengthExtendRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromRight;
                            fLengthExtendBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromBottom;
                            fLengthExtendLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromLeft;
                        }
                        else
                        {
                            fLengthExtendTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromEdge_Dark;
                            fLengthExtendRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromRight_Dark;
                            fLengthExtendBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromBottom_Dark;
                            fLengthExtendLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromLeft_Dark;
                        }

                        intOutwardLeft = (int)(fLengthExtendLeft * m_smVisionInfo.g_fScaleX);
                        intOutwardRight = (int)(fLengthExtendRight * m_smVisionInfo.g_fScaleX);
                        intOutwardTop = (int)(fLengthExtendTop * m_smVisionInfo.g_fScaleY);
                        intOutwardBottom = (int)(fLengthExtendBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);
                            ////Top
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intInwardTop);

                            ////Right
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY,
                            //                        intInwardRight, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            ////Bottom
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                            //                        m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intInwardBottom);

                            ////Left
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, intInwardLeft, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            
                            //Top
                            m_Graphic.DrawRectangle(objPen, intStartX + intOutwardLeft, intStartY + intOutwardTop, fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardTop - intOutwardTop));

                            //Right
                            m_Graphic.DrawRectangle(objPen, intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY + intOutwardTop,
                                                    Math.Max(1, intInwardRight - intOutwardRight), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                            //Bottom
                            m_Graphic.DrawRectangle(objPen, intStartX + intOutwardLeft, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                                                    fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardBottom - intOutwardBottom));

                            //Left
                            m_Graphic.DrawRectangle(objPen, intStartX + intOutwardLeft, intStartY + intOutwardTop, Math.Max(1, intInwardLeft - intOutwardLeft), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                            //PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                            //    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            //PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                            //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            //PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                            //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            //PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                            //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                            PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                            PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                            PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            
                            pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(objPen, pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 6)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    float fLengthTopInner = 0;
                    float fLengthRightInner = 0;
                    float fLengthBottomInner = 0;
                    float fLengthLeftInner = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;
                    int intExtendXInner = 0;
                    int intExtendX2Inner = 0;
                    int intExtendYInner = 0;
                    int intExtendY2Inner = 0;
                    Pen pen = new Pen(Color.Red);
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                        pen = new Pen(Color.Cyan);

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4
                    PointF[] CornerPoints = new PointF[4];

                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;
                        fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                        fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromRight;
                        fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromBottom;
                        fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromLeft;

                        fLengthTopInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromEdge; //m_smVisionInfo.g_intSelectedROI
                        fLengthRightInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromRight;
                        fLengthBottomInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromBottom;
                        fLengthLeftInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromLeft;

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        intStartX = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2)) * m_smVisionInfo.g_fScaleX);
                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                        intStartY = (int)((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2)) * m_smVisionInfo.g_fScaleY);
                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        intExtendXInner = (int)(fLengthLeftInner * m_smVisionInfo.g_fScaleX);
                        intExtendX2Inner = (int)(fLengthRightInner * m_smVisionInfo.g_fScaleX);
                        intExtendYInner = (int)(fLengthTopInner * m_smVisionInfo.g_fScaleY);
                        intExtendY2Inner = (int)(fLengthBottomInner * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {
                            //m_Graphic.DrawRectangle(pen, intStartX - intExtendX, intStartY - intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX + intExtendX2,
                            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY + intExtendY2);

                            ////Top
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                            ////Right
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intStartY - intExtendY,
                            //                        intExtendX2, intExtendY + intExtendY2 + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            ////Bottom
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY,
                            //                       intExtendX + intExtendX2 + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY2);

                            ////Left
                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);


                            //Top
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX, intStartY - intExtendY, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY - intExtendYInner);

                            //Right
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intStartY,
                                                    intExtendX2 - intExtendX2Inner, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                            //Bottom
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX, intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                                                   (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY2 - intExtendY2Inner);

                            //Left
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX - intExtendX, intStartY, intExtendX - intExtendXInner, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);


                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                            PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeftInner,
                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTopInner);

                            PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRightInner,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTopInner);

                            PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeftInner,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottomInner);

                            PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRightInner,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottomInner);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }

                            pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                            pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                            pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                            pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }

                    }
                }
            }
            else
            {
                //if (m_smVisionInfo.g_blnViewPadSettingDrawing)
                //{
                //switch (m_smVisionInfo.g_intSelectedPackageDefect)
                //{
                //    case 1: // Off Set

                //        m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
                //        break;
                //    case 3:
                //    case 4:
                //        m_Graphic.FillRectangle(new SolidBrush(Color.Yellow),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
                //                                m_smVisionInfo.g_fSettingLength2, m_smVisionInfo.g_fSettingLength2);
                //        m_Graphic.FillRectangle(new SolidBrush(Color.Orange),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
                //        break;
                //    case 12:
                //    case 15:
                //    case 13:
                //    case 16:
                //        m_Graphic.DrawLine(new Pen(Color.Yellow, 2),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
                //                                pic_Image.Height / 2 - 5,
                //                                pic_Image.Width / 2 + m_smVisionInfo.g_fSettingLength2 / 2,
                //                                pic_Image.Height / 2 - 5);
                //        m_Graphic.DrawLine(new Pen(Color.Yellow, 2),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 + 5,
                //                                pic_Image.Width / 2 + m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 + 5);
                //        break;
                //    case 18:// Broken Area
                //        m_Graphic.FillRectangle(new SolidBrush(Color.Yellow),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
                //        break;
                //    default:
                //        m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
                //                                m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
                //        m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                //                                pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
                //                                pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
                //                                m_smVisionInfo.g_fSettingLength2, m_smVisionInfo.g_fSettingLength2);
                //        break;
                //}
                //}
                if (m_smVisionInfo.g_blnViewPadSettingDrawing)
                {
                    if (m_smVisionInfo.g_blnViewPadPackageDefectSetting && m_smVisionInfo.g_intSelectedPackageDefect != -1)
                    {
                        float fLength = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intWidth = 0;
                        int intHeight = 0;
                        float fDimX = 0;
                        int intExtendX = 0;
                        int intExtendY = 0;
                        int intSelectedROI = m_smVisionInfo.g_intSelectedROI;

                        switch (m_smVisionInfo.g_intSelectedPackageDefect)
                        {
                            case 0:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                if (m_smVisionInfo.g_blnViewPackageMinDefect)
                                    intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetUnitWidthMin(0) * m_smVisionInfo.g_fScaleX);
                                else
                                    intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetUnitWidthMax(0) * m_smVisionInfo.g_fScaleX);

                                intHeight = 3;

                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 1:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                if (m_smVisionInfo.g_blnViewPackageMinDefect)
                                    intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetUnitHeightMin(0) * m_smVisionInfo.g_fScaleY);
                                else
                                    intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetUnitHeightMax(0) * m_smVisionInfo.g_fScaleY);

                                intWidth = 3;

                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 2:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[1][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[1][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                if (m_smVisionInfo.g_blnViewPackageMinDefect)
                                    intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetUnitThicknessMin(0) * m_smVisionInfo.g_fScaleX);
                                else
                                    intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetUnitThicknessMax(0) * m_smVisionInfo.g_fScaleX);

                                intWidth = 3;

                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 3:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetScratchLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 4:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetScratchAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 5:
                                //fLength = m_smVisionInfo.g_arrPad[0].GetChipStartPixelFromEdge(-1);

                                //intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                //intExtendX = (int)(fLength * m_smVisionInfo.g_fScaleX);

                                //intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                //intExtendY = (int)(fLength * m_smVisionInfo.g_fScaleY);

                                ////Top
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                                ////Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX, intStartY,
                                //                        intExtendX, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                ////Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY,
                                //                        m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                                ////Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, intExtendX, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                //Now Straight Draw Area Size that user key in in tolerance setting form
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetChipAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 6:
                                //fLength = m_smVisionInfo.g_arrPad[0].GetMoldFlashLengthLimit(-1);

                                //intStartX = (int)((m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX - fLength) * m_smVisionInfo.g_fScaleX);
                                //if (intStartX < 0)
                                //{
                                //    intExtendX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                //    intStartX = 0;
                                //}
                                //else
                                //    intExtendX = (int)(fLength * m_smVisionInfo.g_fScaleX);

                                //intStartY = (int)((m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY - fLength) * m_smVisionInfo.g_fScaleY);
                                //if (intStartY < 0)
                                //{
                                //    intExtendY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                //    intStartY = 0;
                                //}
                                //else
                                //    intExtendY = (int)(fLength * m_smVisionInfo.g_fScaleY);

                                ////Top Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX * 2, intExtendY);

                                ////Right Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX, intStartY,
                                //                        intExtendX, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY * 2);

                                ////Bottom Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY,
                                //                        m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX * 2, intExtendY);

                                ////Left Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, intExtendX, m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY * 2);

                                //Now Straight Draw Area Size that user key in in tolerance setting form
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetMoldFlashAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 7:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;

                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetScratchLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 8:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;

                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetScratchAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 9:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;

                                //fLength = m_smVisionInfo.g_arrPad[intSelectedROI].GetChipStartPixelFromEdge(-1);

                                //intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                //intExtendX = (int)(fLength * m_smVisionInfo.g_fScaleX);

                                //intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                //intExtendY = (int)(fLength * m_smVisionInfo.g_fScaleY);

                                ////Top
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                                ////Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX, intStartY,
                                //                        intExtendX, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                ////Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY,
                                //                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                                ////Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, intExtendX, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                //Now Straight Draw Area Size that user key in in tolerance setting form
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetChipAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 10:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;

                                //fLength = m_smVisionInfo.g_arrPad[intSelectedROI].GetMoldFlashLengthLimit(-1);

                                //intStartX = (int)((m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX - fLength) * m_smVisionInfo.g_fScaleX);
                                //if (intStartX < 0)
                                //{
                                //    intExtendX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                //    intStartX = 0;
                                //}
                                //else
                                //    intExtendX = (int)(fLength * m_smVisionInfo.g_fScaleX);

                                //intStartY = (int)((m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY - fLength) * m_smVisionInfo.g_fScaleY);
                                //if (intStartY < 0)
                                //{
                                //    intExtendY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                //    intStartY = 0;
                                //}
                                //else
                                //    intExtendY = (int)(fLength * m_smVisionInfo.g_fScaleY);

                                ////Top Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX * 2, intExtendY);

                                ////Right Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX, intStartY,
                                //                        intExtendX, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY * 2);

                                ////Bottom Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY,
                                //                        m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX * 2, intExtendY);

                                ////Left Mold Flash
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, intExtendX, m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY * 2);

                                //Now Straight Draw Area Size that user key in in tolerance setting form
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetMoldFlashAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 11:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetVoidLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 12:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetVoidAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 13:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetCrackLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 14:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetCrackAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 15:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[0].GetExtraPadLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 16:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetExtraPadMinArea(0) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 17:
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[0][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[0][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[0].GetTotalExtraPadMinArea(0) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 18:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;

                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetExtraPadLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 19:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetExtraPadMinArea(0) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 20:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetTotalExtraPadMinArea(0) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 21:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetVoidLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 22:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetVoidAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                            case 23:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intHeight = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetCrackLengthLimit(-1) * m_smVisionInfo.g_fScaleX);
                                intWidth = 3;
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                                break;
                            case 24:
                                if (intSelectedROI == 0)
                                    intSelectedROI = 1;
                                intStartX = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX + (m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROIWidth / 2 * m_smVisionInfo.g_fScaleX));
                                intStartY = (int)(m_smVisionInfo.g_arrPadROIs[intSelectedROI][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                                intWidth = (int)(m_smVisionInfo.g_arrPad[intSelectedROI].GetCrackAreaLimit(-1) * (m_smVisionInfo.g_fScaleX * m_smVisionInfo.g_fScaleY));
                                fDimX = Convert.ToSingle(Math.Sqrt(intWidth));
                                m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, fDimX, fDimX);
                                break;
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadForeignMaterialStartPixelFromEdge)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intExtendX = 0;
                        int intExtendX2 = 0;
                        int intExtendY = 0;
                        int intExtendY2 = 0;
                        float fCenterX = 0, fCenterY = 0, fWidth = 0, fHeight = 0;
                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromLeft;
                          
                            if (m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false) || ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                            {
                                fCenterX = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X;
                                fWidth = m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0);
                                fCenterY = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y;
                                fHeight = m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0);
                            }
                            else
                            {
                                fCenterX = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().X;
                                fWidth = m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Width;
                                fCenterY = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().Y;
                                fHeight = m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Height;
                            }

                            intStartX = (int)Math.Round((fCenterX -
                                                       (fWidth / 2)) * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                            
                            intStartY = (int)Math.Round((fCenterY -
                                                     (fHeight / 2)) * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                            if (!m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize || (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize && m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0))
                            {
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), intStartX + intExtendX, intStartY + intExtendY,
                                                       (int)Math.Ceiling(fWidth * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                                       (int)Math.Ceiling(fHeight * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    newX1 = CornerPoints[0].X + fLengthLeft;
                                //    newX2 = CornerPoints[1].X - fLengthRight;
                                //    newX3 = CornerPoints[2].X - fLengthRight;
                                //    newX4 = CornerPoints[3].X + fLengthLeft;
                                //    newY1 = CornerPoints[0].Y + fLengthTop;
                                //    newY2 = CornerPoints[1].Y + fLengthTop;
                                //    newY3 = CornerPoints[2].Y - fLengthBottom;
                                //    newY4 = CornerPoints[3].Y - fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = fWidth;
                                float fPkgSizeHeight = fHeight;

                                PointF pTL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                    fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pTR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                   fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pBL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                   fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                PointF pBR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                   fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadForeignMaterialStartPixelFromEdge_Pad)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intExtendX = 0;
                        int intExtendX2 = 0;
                        int intExtendY = 0;
                        int intExtendY2 = 0;
                        float fCenterX = 0, fCenterY = 0, fWidth = 0, fHeight = 0;
                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromEdge_Pad; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromRight_Pad;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromBottom_Pad;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fForeignMaterialStartPixelFromLeft_Pad;

                            if (m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false))
                            {
                                fCenterX = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X;
                                fWidth = m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth;    //m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0);
                                fCenterY = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y;
                                fHeight = m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight;  // m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0);
                            }
                            else
                            {
                                fCenterX = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().X;
                                fWidth = m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth;    //m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Width;
                                fCenterY = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().Y;
                                fHeight = m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight;  //m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Height;
                            }

                            intStartX = (int)Math.Round((fCenterX -
                                                       (fWidth / 2)) * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                            intStartY = (int)Math.Round((fCenterY -
                                                     (fHeight / 2)) * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                            if (!m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize || (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize && m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0))
                            {
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), intStartX + intExtendX, intStartY + intExtendY,
                                                       (int)Math.Ceiling(fWidth * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                                       (int)Math.Ceiling(fHeight * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    newX1 = CornerPoints[0].X + fLengthLeft;
                                //    newX2 = CornerPoints[1].X - fLengthRight;
                                //    newX3 = CornerPoints[2].X - fLengthRight;
                                //    newX4 = CornerPoints[3].X + fLengthLeft;
                                //    newY1 = CornerPoints[0].Y + fLengthTop;
                                //    newY2 = CornerPoints[1].Y + fLengthTop;
                                //    newY3 = CornerPoints[2].Y - fLengthBottom;
                                //    newY4 = CornerPoints[3].Y - fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = fWidth;
                                float fPkgSizeHeight = fHeight;

                                PointF pTL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                    fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pTR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                   fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pBL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                   fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                PointF pBR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                   fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[5][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadPkgStartPixelFromEdge)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intExtendX = 0;
                        int intExtendX2 = 0;
                        int intExtendY = 0;
                        int intExtendY2 = 0;

                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft;
                            //fLengthTop = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromEdge(-1);
                            //fLengthRight = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromRight(-1);
                            //fLengthBottom = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromBottom(-1);
                            //fLengthLeft = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromLeft(-1);

                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), intStartX + intExtendX, intStartY + intExtendY,
                                                       (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                                       (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    newX1 = CornerPoints[0].X + fLengthLeft;
                                //    newX2 = CornerPoints[1].X - fLengthRight;
                                //    newX3 = CornerPoints[2].X - fLengthRight;
                                //    newX4 = CornerPoints[3].X + fLengthLeft;
                                //    newY1 = CornerPoints[0].Y + fLengthTop;
                                //    newY2 = CornerPoints[1].Y + fLengthTop;
                                //    newY3 = CornerPoints[2].Y - fLengthBottom;
                                //    newY4 = CornerPoints[3].Y - fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadPkgStartPixelFromEdge_Dark)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intExtendX = 0;
                        int intExtendX2 = 0;
                        int intExtendY = 0;
                        int intExtendY2 = 0;

                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;
                            if (m_smVisionInfo.g_arrPad[0].ref_blnSeperateBrightDarkROITolerance)
                            {
                                fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge_Dark; //m_smVisionInfo.g_intSelectedROI
                                fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight_Dark;
                                fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom_Dark;
                                fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft_Dark;
                            }
                            else
                            {
                                fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                                fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight;
                                fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom;
                                fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft;
                            }
                            //fLengthTop = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromEdge(-1);
                            //fLengthRight = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromRight(-1);
                            //fLengthBottom = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromBottom(-1);
                            //fLengthLeft = m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].GetPkgStartPixelFromLeft(-1);

                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), intStartX + intExtendX, intStartY + intExtendY,
                                                       (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                                       (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    newX1 = CornerPoints[0].X + fLengthLeft;
                                //    newX2 = CornerPoints[1].X - fLengthRight;
                                //    newX3 = CornerPoints[2].X - fLengthRight;
                                //    newX4 = CornerPoints[3].X + fLengthLeft;
                                //    newY1 = CornerPoints[0].Y + fLengthTop;
                                //    newY2 = CornerPoints[1].Y + fLengthTop;
                                //    newY3 = CornerPoints[2].Y - fLengthBottom;
                                //    newY4 = CornerPoints[3].Y - fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadChipStartPixelFromEdge)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        float fLengthExtendTop = 0;
                        float fLengthExtendRight = 0;
                        float fLengthExtendBottom = 0;
                        float fLengthExtendLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intOutwardLeft = 0;
                        int intOutwardRight = 0;
                        int intOutwardTop = 0;
                        int intOutwardBottom = 0;
                        int intInwardLeft = 0;
                        int intInwardRight = 0;
                        int intInwardTop = 0;
                        int intInwardBottom = 0;

                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromLeft;


                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                      (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                            intInwardLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intInwardRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                            intInwardTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intInwardBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                            fLengthExtendTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromEdge;
                            fLengthExtendRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromRight;
                            fLengthExtendBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromBottom;
                            fLengthExtendLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromLeft;

                            intOutwardLeft = (int)(fLengthExtendLeft * m_smVisionInfo.g_fScaleX);
                            intOutwardRight = (int)(fLengthExtendRight * m_smVisionInfo.g_fScaleX);
                            intOutwardTop = (int)(fLengthExtendTop * m_smVisionInfo.g_fScaleY);
                            intOutwardBottom = (int)(fLengthExtendBottom * m_smVisionInfo.g_fScaleY);

                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);
                                ////Top
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intInwardTop);

                                ////Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY,
                                //                        intInwardRight, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                ////Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY + m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                                //                        m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intInwardBottom);

                                ////Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, intInwardLeft, m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), intStartX + intOutwardLeft, intStartY + intOutwardTop, fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardTop - intOutwardTop));

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY + intOutwardTop,
                                                        Math.Max(1, intInwardRight - intOutwardRight), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), intStartX + intOutwardLeft, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                                                        fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardBottom - intOutwardBottom));

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), intStartX + intOutwardLeft, intStartY + intOutwardTop, Math.Max(1, intInwardLeft - intOutwardLeft), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                //PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                //    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                                //PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                                //PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                                //PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }

                                pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadChipStartPixelFromEdge_Dark)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        float fLengthExtendTop = 0;
                        float fLengthExtendRight = 0;
                        float fLengthExtendBottom = 0;
                        float fLengthExtendLeft = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intOutwardLeft = 0;
                        int intOutwardRight = 0;
                        int intOutwardTop = 0;
                        int intOutwardBottom = 0;
                        int intInwardLeft = 0;
                        int intInwardRight = 0;
                        int intInwardTop = 0;
                        int intInwardBottom = 0;

                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;
                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromEdge_Dark; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromRight_Dark;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromBottom_Dark;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelFromLeft_Dark;


                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                      (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                            intInwardLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intInwardRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                            intInwardTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intInwardBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                            fLengthExtendTop = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromEdge_Dark;
                            fLengthExtendRight = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromRight_Dark;
                            fLengthExtendBottom = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromBottom_Dark;
                            fLengthExtendLeft = m_smVisionInfo.g_arrPad[i].ref_fChipStartPixelExtendFromLeft_Dark;

                            intOutwardLeft = (int)(fLengthExtendLeft * m_smVisionInfo.g_fScaleX);
                            intOutwardRight = (int)(fLengthExtendRight * m_smVisionInfo.g_fScaleX);
                            intOutwardTop = (int)(fLengthExtendTop * m_smVisionInfo.g_fScaleY);
                            intOutwardBottom = (int)(fLengthExtendBottom * m_smVisionInfo.g_fScaleY);

                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);
                                //Top
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX, intStartY, fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intInwardTop);

                                ////////Right
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY,
                                //////                        intInwardRight, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                                ////////Bottom
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                                //////                        fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intInwardBottom);

                                ////////Left
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX, intStartY, intInwardLeft, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                                ////////Outward
                                ////////Top
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX, intStartY - intOutwardTop, fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intOutwardTop);

                                ////////Right
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intStartY,
                                //////                        intOutwardRight, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                                ////////Bottom
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY,
                                //////                        fPkgSizeWidth * m_smVisionInfo.g_fScaleX, intOutwardBottom);

                                ////////Left
                                //////m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX - intOutwardLeft, intStartY, intOutwardLeft, fPkgSizeHeight * m_smVisionInfo.g_fScaleY);

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + intOutwardLeft, intStartY + intOutwardTop, fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardTop - intOutwardTop));

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intInwardRight, intStartY + intOutwardTop,
                                                        Math.Max(1, intInwardRight - intOutwardRight), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + intOutwardLeft, intStartY + fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intInwardBottom,
                                                        fPkgSizeWidth * m_smVisionInfo.g_fScaleX - intOutwardLeft - intOutwardRight, Math.Max(1, intInwardBottom - intOutwardBottom));

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), intStartX + intOutwardLeft, intStartY + intOutwardTop, Math.Max(1, intInwardLeft - intOutwardLeft), fPkgSizeHeight * m_smVisionInfo.g_fScaleY - intOutwardTop - intOutwardBottom);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                //PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                //    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                                //PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                                //PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                                //PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                                //   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthExtendTop);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthExtendLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthExtendRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthExtendBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }

                                pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[2][1]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadMoldStartPixelFromEdge)
                    {
                        float fLengthTop = 0;
                        float fLengthRight = 0;
                        float fLengthBottom = 0;
                        float fLengthLeft = 0;
                        float fLengthTopInner = 0;
                        float fLengthRightInner = 0;
                        float fLengthBottomInner = 0;
                        float fLengthLeftInner = 0;
                        int intStartX = 0;
                        int intStartY = 0;
                        int intExtendX = 0;
                        int intExtendX2 = 0;
                        int intExtendY = 0;
                        int intExtendY2 = 0;

                        int intExtendXInner = 0;
                        int intExtendX2Inner = 0;
                        int intExtendYInner = 0;
                        int intExtendY2Inner = 0;

                        float newX1 = 0, newY1 = 0;  // new point 1
                        float newX2 = 0, newY2 = 0; // new point 2
                        float newX3 = 0, newY3 = 0; // new point 3
                        float newX4 = 0, newY4 = 0; // new point 4
                        PointF[] CornerPoints = new PointF[4];

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                            fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromRight;
                            fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromBottom;
                            fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelFromLeft;

                            fLengthTopInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromEdge; //m_smVisionInfo.g_intSelectedROI
                            fLengthRightInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromRight;
                            fLengthBottomInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromBottom;
                            fLengthLeftInner = m_smVisionInfo.g_arrPad[i].ref_fMoldStartPixelInnerFromLeft;

                            intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                         (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                            intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                            intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                        (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                            intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                            intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                            intExtendXInner = (int)(fLengthLeftInner * m_smVisionInfo.g_fScaleX);
                            intExtendX2Inner = (int)(fLengthRightInner * m_smVisionInfo.g_fScaleX);
                            intExtendYInner = (int)(fLengthTopInner * m_smVisionInfo.g_fScaleY);
                            intExtendY2Inner = (int)(fLengthBottomInner * m_smVisionInfo.g_fScaleY);

                            if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                            {
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX - intExtendX, intStartY - intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX + intExtendX2,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY + intExtendY2);

                                ////Top
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY);

                                ////Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intStartY - intExtendY,
                                //                        intExtendX2, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                ////Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                                //                       intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY2);

                                ////Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX, intStartY - intExtendY, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY - intExtendYInner);

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX + intExtendX2Inner + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intStartY,
                                                        intExtendX2 - intExtendX2Inner, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX, intStartY + intExtendY2Inner + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                                                       (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY2 - intExtendY2Inner);

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), intStartX - intExtendX, intStartY, intExtendX - intExtendXInner, (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //newX1 = CornerPoints[0].X;
                                //newX2 = CornerPoints[1].X;
                                //newX3 = CornerPoints[2].X;
                                //newX4 = CornerPoints[3].X;
                                //newY1 = CornerPoints[0].Y;
                                //newY2 = CornerPoints[1].Y;
                                //newY3 = CornerPoints[2].Y;
                                //newY4 = CornerPoints[3].Y;
                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //{
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //}
                                //else
                                //{
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //    m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //    newX1 = CornerPoints[0].X - fLengthLeft;
                                //    newX2 = CornerPoints[1].X + fLengthRight;
                                //    newX3 = CornerPoints[2].X + fLengthRight;
                                //    newX4 = CornerPoints[3].X - fLengthLeft;
                                //    newY1 = CornerPoints[0].Y - fLengthTop;
                                //    newY2 = CornerPoints[1].Y - fLengthTop;
                                //    newY3 = CornerPoints[2].Y + fLengthBottom;
                                //    newY4 = CornerPoints[3].Y + fLengthBottom;
                                //}
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeftInner,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTopInner);

                                PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRightInner,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTopInner);

                                PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeftInner,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottomInner);

                                PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRightInner,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottomInner);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }

                                pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                    m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                   m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                if (i == 1)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pBL = new PointF(newX1, pBL.Y);
                                    pBR = new PointF(newX2, pBR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 2)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(pTL.X, newY1);
                                    pBL = new PointF(pBL.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 3)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTL = new PointF(newX1, pTL.Y);
                                    pTR = new PointF(newX2, pTR.Y);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                                else if (i == 4)
                                {
                                    Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                    pTR = new PointF(pTR.X, newY1);
                                    pBR = new PointF(pBR.X, newY2);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                }
                            }

                        }
                    }
                    else if (m_smVisionInfo.g_blnViewCenterPadPositionSetting)
                    {
                        //int intCenterX = (int)(m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX);
                        //int intCenterY = (int)(m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY);
                        float fCenterX = m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionX + (m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIWidth / 2);
                        float fCenterY = m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIPositionY + (m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIHeight / 2);
                        float fWidth, fHeight;

                        fWidth = m_smVisionInfo.g_arrPad[0].ref_fXTolerance_Pixel;
                    
                        fHeight = m_smVisionInfo.g_arrPad[0].ref_fYTolerance_Pixel;

                        m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrPadROIColor[15][0]), (fCenterX - fWidth) * m_smVisionInfo.g_fScaleX, (fCenterY - 1) * m_smVisionInfo.g_fScaleY, fWidth * 2 * m_smVisionInfo.g_fScaleX, 2 * m_smVisionInfo.g_fScaleY); //X 
                        m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrPadROIColor[15][0]), (fCenterX - 1) * m_smVisionInfo.g_fScaleX, (fCenterY - fHeight) * m_smVisionInfo.g_fScaleY, 2 * m_smVisionInfo.g_fScaleX, fHeight * 2 * m_smVisionInfo.g_fScaleY); //Y
                    }
                    else if (m_smVisionInfo.g_blnViewPadEdgeLimitSetting)
                    {

                        float fStartX = 0;
                        float fStartY = 0;
                        float fWidth = 0;
                        float fHeight = 0;

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {

                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (i == m_smVisionInfo.g_intSelectedPadROIIndex)
                            {
                                fStartX = (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                              (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX;


                                fStartY = (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                            (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY;

                                fWidth = m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX;


                                fHeight = m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY;

                                if (m_smVisionInfo.g_blnViewPadGroupSetting)
                                    m_smVisionInfo.g_arrPad[i].DrawPadEdgeLimitTolerance_Group(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, fStartX, fStartY, fWidth, fHeight, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_arrPadROIColor[13][0]);
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawPadEdgeLimitTolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, fStartX, fStartY, fWidth, fHeight, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_arrPadROIColor[13][0]);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadStandOffSetting)
                    {

                        float fStartX = 0;
                        float fStartY = 0;
                        float fWidth = 0;
                        float fHeight = 0;

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {

                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (i == m_smVisionInfo.g_intSelectedPadROIIndex)
                            {
                                fStartX = (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                              (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX;


                                fStartY = (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                            (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY;

                                fWidth = m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX;


                                fHeight = m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY;

                                if(m_smVisionInfo.g_blnViewPadGroupSetting)
                                    m_smVisionInfo.g_arrPad[i].DrawPadStandOffTolerance_Group(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, fStartX, fStartY, fWidth, fHeight, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_arrPadROIs[i][3], m_smVisionInfo.g_arrPadROIColor[14][0]);
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawPadStandOffTolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, fStartX, fStartY, fWidth, fHeight, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_arrPadROIs[i][3], m_smVisionInfo.g_arrPadROIColor[14][0]);

                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadInspectionAreaSetting)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;
                            m_smVisionInfo.g_arrPad[i].DrawPadInspectionAreaSetting(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrInspectROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrInspectROI[i].ref_ROIPositionY, true, m_smVisionInfo.g_arrPadROIColor[15][0]);
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPadExtendROI)
                    {

                    //////    float fLengthTop = 0;
                    //////    float fLengthRight = 0;
                    //////    float fLengthBottom = 0;
                    //////    float fLengthLeft = 0;
                    //////    int intStartX = 0;
                    //////    int intStartY = 0;
                    //////    int intExtendX = 0;
                    //////    int intExtendX2 = 0;
                    //////    int intExtendY = 0;
                    //////    int intExtendY2 = 0;

                    //////    float newX1 = 0, newY1 = 0;  // new point 1
                    //////    float newX2 = 0, newY2 = 0; // new point 2
                    //////    float newX3 = 0, newY3 = 0; // new point 3
                    //////    float newX4 = 0, newY4 = 0; // new point 4
                    //////    PointF[] CornerPoints = new PointF[4];

                    //////    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    //////    {
                    //////        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    //////            break;

                    //////        fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                    //////        fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                    //////        fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                    //////        fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                    //////        intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                    //////                                     (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    //////        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                    //////        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    //////        intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                    //////                                    (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    //////        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    //////        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    //////        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    //////        {
                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX - intExtendX, intStartY - intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX + intExtendX2,
                    //////            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY + intExtendY2);

                    //////            //Top
                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY);

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////              intStartX,
                    //////              intStartY,
                    //////              intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////              intStartY);

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////                intStartX + intExtendX,
                    //////                intStartY + intExtendY,
                    //////                intStartX - intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////                intStartY + intExtendY);

                    //////            //Right
                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intStartY - intExtendY,
                    //////            //                        intExtendX2, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////                intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////                intStartY,
                    //////                intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////                intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////                intStartX - intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////                intStartY + intExtendY,
                    //////                intStartX - intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////                intStartY - intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            //Bottom
                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                    //////            //                       intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY2);

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////               intStartX,
                    //////               intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                    //////               intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////               intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////               intStartX + intExtendX,
                    //////               intStartY - intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                    //////               intStartX - intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                    //////               intStartY - intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            //Left
                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////              intStartX,
                    //////              intStartY,
                    //////              intStartX,
                    //////              intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow),
                    //////              intStartX + intExtendX,
                    //////              intStartY + intExtendY,
                    //////              intStartX + intExtendX,
                    //////              intStartY - intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                    //////            //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                    //////            //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                    //////        }
                    //////        else
                    //////        {
                    //////            CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                    //////            newX1 = CornerPoints[0].X;
                    //////            newX2 = CornerPoints[1].X;
                    //////            newX3 = CornerPoints[2].X;
                    //////            newX4 = CornerPoints[3].X;
                    //////            newY1 = CornerPoints[0].Y;
                    //////            newY2 = CornerPoints[1].Y;
                    //////            newY3 = CornerPoints[2].Y;
                    //////            newY4 = CornerPoints[3].Y;
                    //////            if (m_smVisionInfo.g_blnViewRotatedImage)
                    //////            {
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                    //////                Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                    //////            }
                    //////            else
                    //////            {
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                    //////                m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                    //////                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                    //////                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                    //////                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                    //////                //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                    //////                newX1 = CornerPoints[0].X - fLengthLeft;
                    //////                newX2 = CornerPoints[1].X + fLengthRight;
                    //////                newX3 = CornerPoints[2].X + fLengthRight;
                    //////                newX4 = CornerPoints[3].X - fLengthLeft;
                    //////                newY1 = CornerPoints[0].Y - fLengthTop;
                    //////                newY2 = CornerPoints[1].Y - fLengthTop;
                    //////                newY3 = CornerPoints[2].Y + fLengthBottom;
                    //////                newY4 = CornerPoints[3].Y + fLengthBottom;
                    //////            }
                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                    //////            m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                    //////        }

                    //////    }
                    }
                    //else if (m_smVisionInfo.g_blnViewSidePadPositionSetting)
                    //{
                    //    int intCenterX = (int)(m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX);
                    //    int intCenterY = (int)(m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY);
                    //    int intWidth, intHeight;

                    //    intWidth = (int)(m_smVisionInfo.g_arrPad[1].ref_fXTolerance * m_smVisionInfo.g_fScaleX);

                    //    intHeight = (int)(m_smVisionInfo.g_arrPad[1].ref_fYTolerance * m_smVisionInfo.g_fScaleY);

                    //    m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), (int)(intCenterX - intWidth), (int)(intCenterY - 1), intWidth * 2, 2); //X 
                    //    m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), (int)(intCenterX - 1), (int)(intCenterY - intHeight), 2, intHeight * 2); //Y
                    //}
                }
                // -------------- Pad Inspection Drawing --------------------------------------
                //else if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_blnViewPadInspection)
                else if (m_smVisionInfo.g_blnViewPadInspection)
                {
                    if (m_smVisionInfo.g_blnCheckPad && (m_smVisionInfo.g_blnViewPadInspection || (m_smProductionInfo.g_blnViewInspection && !m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.VM_AT_OfflinePageView)))
                    {
                        if (!m_smProductionInfo.g_blnViewPadResult && ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                            return;

                        HiPerfTimer T1 = new HiPerfTimer();
                        T1.Start();
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            m_smVisionInfo.g_arrPad[i].ref_blnDrawingLock = true;
                            //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "SetDrawingTrue,";

                            if (m_smVisionInfo.g_arrPad[i].ref_blnInspectLock)
                                break;

                            if (m_smProductionInfo.g_blnViewPackageResult && m_smVisionInfo.g_arrPad[i].ref_blnViewPkgSizeDrawing && m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(true))
                            {
                                if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                                    m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox = false;
                                if (m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint)
                                    m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint = false;

                                if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                {
                                    m_smVisionInfo.g_arrPad[i].DrawGaugeResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                                else
                                {
                                    if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    {
                                        PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y);
                                        PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y);
                                        PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y);
                                        PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y);

                                        if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                      !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                            m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);

                                        if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                               !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                            m_Graphic.DrawLine(new Pen(Color.Lime), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);

                                        if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                           !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                            m_Graphic.DrawLine(new Pen(Color.Lime), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                        if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                            !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                            m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                        m_smVisionInfo.g_arrPad[i].DrawGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }

                                if (m_smProductionInfo.g_blnViewPackageTolerance)
                                {
                                    float fLengthTop = 0;
                                    float fLengthRight = 0;
                                    float fLengthBottom = 0;
                                    float fLengthLeft = 0;
                                    int intStartX = 0;
                                    int intStartY = 0;
                                    int intExtendX = 0;
                                    int intExtendX2 = 0;
                                    int intExtendY = 0;
                                    int intExtendY2 = 0;
                                    float fCenterX = 0, fCenterY = 0, fWidth = 0, fHeight = 0;
                                    float newX1 = 0, newY1 = 0;  // new point 1
                                    float newX2 = 0, newY2 = 0; // new point 2
                                    float newX3 = 0, newY3 = 0; // new point 3
                                    float newX4 = 0, newY4 = 0; // new point 4
                                    PointF[] CornerPoints = new PointF[4];

                                    fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge;
                                    fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight;
                                    fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom;
                                    fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft;

                                    if (m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(true))
                                    {
                                        fCenterX = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X;
                                        fWidth = m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0);
                                        fCenterY = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y;
                                        fHeight = m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0);
                                    }
                                    else
                                    {
                                        fCenterX = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().X;
                                        fWidth = m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Width;
                                        fCenterY = m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().Y;
                                        fHeight = m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Height;
                                    }

                                    intStartX = (int)Math.Round((fCenterX -
                                                               (fWidth / 2)) * m_smVisionInfo.g_fScaleX);
                                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                    intStartY = (int)Math.Round((fCenterY -
                                                             (fHeight / 2)) * m_smVisionInfo.g_fScaleY);
                                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                                    if (!m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize || (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize && m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0))
                                    {
                                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), intStartX + intExtendX, intStartY + intExtendY,
                                                               (int)Math.Ceiling(fWidth * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                                               (int)Math.Ceiling(fHeight * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                        //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                        //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrPad[0].ref_blnWantRotateSidePadImage)
                                        {
                                            float fPkgSizeWidth = fWidth;
                                            float fPkgSizeHeight = fHeight;

                                            PointF pTL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                                fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                            PointF pTR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                               fCenterY - (fPkgSizeHeight / 2) + fLengthTop);

                                            PointF pBL = new PointF(fCenterX - (fPkgSizeWidth / 2) + fLengthLeft,
                                               fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                            PointF pBR = new PointF(fCenterX + (fPkgSizeWidth / 2) - fLengthRight,
                                               fCenterY + (fPkgSizeHeight / 2) - fLengthBottom);

                                            if (i == 1)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pBL = new PointF(newX1, pBL.Y);
                                                pBR = new PointF(newX2, pBR.Y);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 2)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTL = new PointF(pTL.X, newY1);
                                                pBL = new PointF(pBL.X, newY2);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 3)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTL = new PointF(newX1, pTL.Y);
                                                pTR = new PointF(newX2, pTR.Y);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 4)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTR = new PointF(pTR.X, newY1);
                                                pBR = new PointF(pBR.X, newY2);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                        }
                                        else
                                        {
                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadPackageROIColor[0][0]), m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y * m_smVisionInfo.g_fScaleY);

                                        }
                                    }
                                }

                                //if (m_smProductionInfo.g_blnViewPackageTolerance)
                                //{
                                //    //Draw Pad Inspection Area
                                //    float fLengthTop = 0;
                                //    float fLengthRight = 0;
                                //    float fLengthBottom = 0;
                                //    float fLengthLeft = 0;
                                //    int intStartX = 0;
                                //    int intStartY = 0;
                                //    int intExtendX = 0;
                                //    int intExtendX2 = 0;
                                //    int intExtendY = 0;
                                //    int intExtendY2 = 0;

                                //    float newX1 = 0, newY1 = 0;  // new point 1
                                //    float newX2 = 0, newY2 = 0; // new point 2
                                //    float newX3 = 0, newY3 = 0; // new point 3
                                //    float newX4 = 0, newY4 = 0; // new point 4
                                //    PointF[] CornerPoints = new PointF[4];

                                //    fLengthTop = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                                //    fLengthRight = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromRight;
                                //    fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromBottom;
                                //    fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_fPkgStartPixelFromLeft;

                                //    intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                //                                (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                //    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                //    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                //    intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                //                                (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                //    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                //    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);
                                //    if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                                //    {
                                //        m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + intExtendX, intStartY + intExtendY,
                                //                               (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX) - intExtendX - intExtendX2,
                                //                               (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY) - intExtendY - intExtendY2);

                                //        //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //        //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                //    }
                                //    else
                                //    {
                                //        //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                //        //if (m_smVisionInfo.g_blnViewRotatedImage)
                                //        //{
                                //        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                //        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                //        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                //        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                //        //}
                                //        //else
                                //        //{
                                //        //    newX1 = CornerPoints[0].X + fLengthLeft;
                                //        //    newX2 = CornerPoints[1].X - fLengthRight;
                                //        //    newX3 = CornerPoints[2].X - fLengthRight;
                                //        //    newX4 = CornerPoints[3].X + fLengthLeft;
                                //        //    newY1 = CornerPoints[0].Y + fLengthTop;
                                //        //    newY2 = CornerPoints[1].Y + fLengthTop;
                                //        //    newY3 = CornerPoints[2].Y - fLengthBottom;
                                //        //    newY4 = CornerPoints[3].Y - fLengthBottom;
                                //        //}
                                //        //m_Graphic.DrawLine(new Pen(Color.Cyan), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                //        //m_Graphic.DrawLine(new Pen(Color.Cyan), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                //        //m_Graphic.DrawLine(new Pen(Color.Cyan), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                //        //m_Graphic.DrawLine(new Pen(Color.Cyan), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                                //        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                //        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                //        PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                //            m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                //        PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                //           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                                //        PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                //           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                //        PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                                //           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                                //        if (i == 1)
                                //        {
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                //            pBL = new PointF(newX1, pBL.Y);
                                //            pBR = new PointF(newX2, pBR.Y);

                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                //        }
                                //        else if (i == 2)
                                //        {
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                //            pTL = new PointF(pTL.X, newY1);
                                //            pBL = new PointF(pBL.X, newY2);

                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                //        }
                                //        else if (i == 3)
                                //        {
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                //            pTL = new PointF(newX1, pTL.Y);
                                //            pTR = new PointF(newX2, pTR.Y);

                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                //        }
                                //        else if (i == 4)
                                //        {
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                //            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                //            pTR = new PointF(pTR.X, newY1);
                                //            pBR = new PointF(pBR.X, newY2);

                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                //            m_Graphic.DrawLine(new Pen(Color.Cyan), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                //        }
                                //    }
                                //}
                            }

                            if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing)
                            {
                                if ((!m_smVisionInfo.g_blnPadSelecting) || (!m_smVisionInfo.g_arrPad[i].ref_blnSelected) && (!m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected))
                                    m_smVisionInfo.g_arrPad[i].DrawPadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1, -1, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalY);
                                else
                                    m_smVisionInfo.g_arrPad[i].DrawPadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intPadSelectedNumber, m_smVisionInfo.g_intPadDefectSelectedNumber, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalY);

                                for (int j = 4; j < m_smVisionInfo.g_arrPadROIs[i].Count; j++)
                                {
                                    m_smVisionInfo.g_arrPadROIs[i][j].AttachImage(m_smVisionInfo.g_arrPadROIs[i][3]);
                                    //m_smVisionInfo.g_arrPadROIs[i][j].DrawDontCareAreaROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIs[i][j].ref_strROIName, m_smVisionInfo.g_arrPadROIs[i][j].ref_intType, j);

                                    m_Graphic.DrawRectangle(new Pen(Color.Lime),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));

                                    m_Graphic.DrawLine(new Pen(Color.Lime),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round((m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIWidth + m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round((m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIHeight + m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                                    m_Graphic.DrawLine(new Pen(Color.Lime),
                                        (int)Math.Round((m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIWidth + m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                        (int)Math.Round(m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero),
                                       (int)Math.Round((m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                       (int)Math.Round((m_smVisionInfo.g_arrPadROIs[i][j].ref_ROIHeight + m_smVisionInfo.g_arrPadROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                                }

                                // From Natlinear
                                //for (int c = 0; c < m_smVisionInfo.g_arrPad.Length; c++)
                                //{
                                //    if (c > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                //        break;

                                //    if (m_smVisionInfo.g_arrPolygon_Pad.Count > c)
                                //    {
                                //        m_smVisionInfo.g_arrPolygon_Pad[c][m_smVisionInfo.g_intSelectedType].DrawPoint(m_Graphic);
                                //        m_smVisionInfo.g_arrPolygon_Pad[c][m_smVisionInfo.g_intSelectedType].DrawPolygon(m_Graphic, m_smVisionInfo.g_intSelectedType);
                                //    }

                                //    if (m_smVisionInfo.g_arrPolygon_Package.Count > c)
                                //    {
                                //        m_smVisionInfo.g_arrPolygon_Package[c][m_smVisionInfo.g_intSelectedType].DrawPoint(m_Graphic);
                                //        m_smVisionInfo.g_arrPolygon_Package[c][m_smVisionInfo.g_intSelectedType].DrawPolygon(m_Graphic, m_smVisionInfo.g_intSelectedType);
                                //    }
                                //}

                                if (m_smProductionInfo.g_blnViewPadROIToleranceROI)
                                {
                                    if (m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false))
                                    {


                                        float fLengthTop = 0;
                                        float fLengthRight = 0;
                                        float fLengthBottom = 0;
                                        float fLengthLeft = 0;
                                        int intStartX = 0;
                                        int intStartY = 0;
                                        int intExtendX = 0;
                                        int intExtendX2 = 0;
                                        int intExtendY = 0;
                                        int intExtendY2 = 0;

                                        float newX1 = 0, newY1 = 0;  // new point 1
                                        float newX2 = 0, newY2 = 0; // new point 2
                                        float newX3 = 0, newY3 = 0; // new point 3
                                        float newX4 = 0, newY4 = 0; // new point 4
                                        PointF[] CornerPoints = new PointF[4];


                                        fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                                        fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                                        fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                                        fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                                        intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X -
                                                                     (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                        intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y -
                                                                    (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                                        if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                                        {
                                            //Top
                                            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY);

                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]),
                                                intStartX - intExtendX,
                                                intStartY - intExtendY,
                                                intStartX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                                                intStartY - intExtendY);

                                            //Right
                                            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intStartY - intExtendY,
                                            //                        intExtendX2, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]),
                                                intStartX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                                                intStartY - intExtendY,
                                                intStartX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                                                intStartY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                            //Bottom
                                            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                                            //                       intExtendX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX), intExtendY2);

                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]),
                                               intStartX - intExtendX,
                                               intStartY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY),
                                               intStartX + intExtendX2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) * m_smVisionInfo.g_fScaleX),
                                               intStartY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                            //Left
                                            //m_Graphic.DrawRectangle(new Pen(Color.Yellow), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]),
                                              intStartX - intExtendX,
                                              intStartY - intExtendY,
                                              intStartX - intExtendX,
                                              intStartY + intExtendY2 + (int)Math.Ceiling(m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) * m_smVisionInfo.g_fScaleY));

                                        }
                                        else
                                        {
                                            //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                                            //newX1 = CornerPoints[0].X;
                                            //newX2 = CornerPoints[1].X;
                                            //newX3 = CornerPoints[2].X;
                                            //newX4 = CornerPoints[3].X;
                                            //newY1 = CornerPoints[0].Y;
                                            //newY2 = CornerPoints[1].Y;
                                            //newY3 = CornerPoints[2].Y;
                                            //newY4 = CornerPoints[3].Y;
                                            //if (m_smVisionInfo.g_blnViewRotatedImage)
                                            //{
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                            //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                            //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                            //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                            //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                            //}
                                            //else
                                            //{
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                            //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                                            //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                                            //    newX1 = CornerPoints[0].X - fLengthLeft;
                                            //    newX2 = CornerPoints[1].X + fLengthRight;
                                            //    newX3 = CornerPoints[2].X + fLengthRight;
                                            //    newX4 = CornerPoints[3].X - fLengthLeft;
                                            //    newY1 = CornerPoints[0].Y - fLengthTop;
                                            //    newY2 = CornerPoints[1].Y - fLengthTop;
                                            //    newY3 = CornerPoints[2].Y + fLengthBottom;
                                            //    newY4 = CornerPoints[3].Y + fLengthBottom;
                                            //}
                                            //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                                            //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                            //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                            //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                                            PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                                m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                            PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                                            PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                            PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                                               m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                                            if (i == 1)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pBL = new PointF(newX1, pBL.Y);
                                                pBR = new PointF(newX2, pBR.Y);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 2)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTL = new PointF(pTL.X, newY1);
                                                pBL = new PointF(pBL.X, newY2);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 3)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTL = new PointF(newX1, pTL.Y);
                                                pTR = new PointF(newX2, pTR.Y);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                            else if (i == 4)
                                            {
                                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                                pTR = new PointF(pTR.X, newY1);
                                                pBR = new PointF(pBR.X, newY2);

                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                                            }
                                        }
                                    }
                                    else
                                    {
                                        //for (int a = 0; a < m_smVisionInfo.g_arrPadROIs.Count; a++)
                                        //{
                                        //    if (m_smVisionInfo.g_arrPadROIs[a].Count > 3)
                                        //    {
                                        //        m_smVisionInfo.g_arrPadROIs[a][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, "", 1, Color.Yellow);
                                        //    }
                                        //}
                                        if (m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing)
                                        {
                                            if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                            {
                                                m_smVisionInfo.g_arrPad[i].DrawUnitPRResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                            }
                                            else
                                            {
                                                m_smVisionInfo.g_arrPad[i].DrawUnitPRResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                            }
                                        }
                                    }

                                }

                            }

                            if (m_smVisionInfo.g_arrPad[i].ref_blnViewUnitPositionDrawing && m_smProductionInfo.g_blnViewInspection)
                            {
                                if (m_smVisionInfo.g_arrPad[i].GetOverallWantGaugeMeasurePkgSize(false))
                                {
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                                        m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox = false;
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint)
                                        m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint = false;

                                    if (m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing)
                                    {
                                        m_smVisionInfo.g_arrPad[i].DrawGaugeResult_EdgeNotFound(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                        {
                                            m_smVisionInfo.g_arrPad[i].DrawGaugeResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else
                                        {
                                            if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                            {
                                                PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y);
                                                PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y);
                                                PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y);
                                                PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y);

                                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                      !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);

                                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                                       !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                                    m_Graphic.DrawLine(new Pen(Color.Lime), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);

                                                if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                                   !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                                    m_Graphic.DrawLine(new Pen(Color.Lime), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                                if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                                    !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                                    m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                                m_smVisionInfo.g_arrPad[i].DrawGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }
                                else
                                {
                                    // View Pad Unit PR Position Result. Will use this code to draw Pad ROI when no using gauge to get unit position. 
                                    //if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                    //{
                                    //    m_smVisionInfo.g_arrPad[i].DrawUnitPRResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    //}
                                    //else
                                    //{
                                    //    m_smVisionInfo.g_arrPad[i].DrawUnitPRResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    //}

                                    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (((m_smVisionInfo.g_arrPad[i].ref_intFailPkgOptionMask & 0x01) > 0) || m_smVisionInfo.g_arrPad[i].GetWantInspectPackage()))
                                    {
                                        if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                                            m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox = false;
                                        if (m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint)
                                            m_smVisionInfo.g_arrPad[i].ref_blnDrawSamplingPoint = false;

                                        if (m_smVisionInfo.g_arrPad[i].ref_blnViewEdgeNotFoundDrawing)
                                        {
                                            m_smVisionInfo.g_arrPad[i].DrawGaugeResult_EdgeNotFound(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                            {
                                                m_smVisionInfo.g_arrPad[i].DrawGaugeResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                            {
                                                if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                                {
                                                    PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y);
                                                    PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y);
                                                    PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y);
                                                    PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y);

                                                    if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                          !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                                        m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);

                                                    if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                                           !float.IsNaN((float)p2.X) && !float.IsInfinity((float)p2.X) && !float.IsNaN((float)p2.Y) && !float.IsInfinity((float)p2.Y))
                                                        m_Graphic.DrawLine(new Pen(Color.Lime), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);

                                                    if (!float.IsNaN((float)p3.X) && !float.IsInfinity((float)p3.X) && !float.IsNaN((float)p3.Y) && !float.IsInfinity((float)p3.Y) &&
                                                       !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                                        m_Graphic.DrawLine(new Pen(Color.Lime), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);

                                                    if (!float.IsNaN((float)p1.X) && !float.IsInfinity((float)p1.X) && !float.IsNaN((float)p1.Y) && !float.IsInfinity((float)p1.Y) &&
                                                        !float.IsNaN((float)p4.X) && !float.IsInfinity((float)p4.X) && !float.IsNaN((float)p4.Y) && !float.IsInfinity((float)p4.Y))
                                                        m_Graphic.DrawLine(new Pen(Color.Lime), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                                                }
                                                else
                                                    m_smVisionInfo.g_arrPad[i].DrawGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                        }
                                    }
                                }
                            }

                            if (m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing && m_smProductionInfo.g_blnViewPadInspectionArea)
                            {
                                //2020-05-19 ZJYEOH : Draw pad inspection area tolerance if got check broken
                                if ((m_smVisionInfo.g_arrPad[i].ref_intFailOptionMask & 0x08) > 0)
                                    m_smVisionInfo.g_arrPad[i].DrawPadInspectionAreaSetting(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalY, false, m_smVisionInfo.g_arrPadROIColor[15][0]);
                            }

                            if (m_smProductionInfo.g_blnViewInspection)
                            {
                                if (m_smVisionInfo.g_arrPad[i].ref_blnViewPadResultDrawing)
                                {
                                    if ((!m_smVisionInfo.g_blnPadSelecting) || (!m_smVisionInfo.g_arrPad[i].ref_blnSelected) && (!m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected))
                                        m_smVisionInfo.g_arrPad[i].DrawPadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1, -1, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalY);
                                    else
                                        m_smVisionInfo.g_arrPad[i].DrawPadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intPadSelectedNumber, m_smVisionInfo.g_intPadDefectSelectedNumber, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectROI[i].ref_ROITotalY);

                                    if ((!m_smVisionInfo.g_blnPadSelecting) && (!m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected))
                                        m_smVisionInfo.g_arrPad[i].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1);
                                    else
                                        m_smVisionInfo.g_arrPad[i].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intPadDefectSelectedNumber - m_smVisionInfo.g_arrPad[i].GetDefectList().Count);
                                }

                                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                {
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnViewPkgResultDrwaing)
                                    {
                                        if ((!m_smVisionInfo.g_blnPadSelecting) || (!m_smVisionInfo.g_arrPad[i].ref_blnPkgDefectSelected))
                                            m_smVisionInfo.g_arrPad[i].DrawPkgDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1);
                                        else
                                            m_smVisionInfo.g_arrPad[i].DrawPkgDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intPadPkgDefectSelectedNumber);
                                    }
                                }
                            }
                        }

                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            m_smVisionInfo.g_arrPad[i].ref_blnDrawingLock = false;
                            //m_smVisionInfo.g_arrPad[i].m_strTrack2 += "SetDrawingFalse,";
                        }

                        T1.Stop();
                        if (m_smVisionInfo.g_blnTrackBasic)
                            m_smVisionInfo.g_strTrackPad += "- [[[" + T1.Duration.ToString() + "]]] - ";

                    }

                }
                else if (m_smVisionInfo.g_blnWantCheckPH && m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
                {
                    //Draw PH Object
                    //m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
                    m_smVisionInfo.g_objPositioning.DrawPHDefectObjects(m_Graphic, 0, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }

            }

            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[DrawP]";
        }

        /// <summary>
        /// Draw Lead object
        /// </summary>
        private void DrawLeadObject()
        {
            if (m_smVisionInfo.g_arrLeadROIs == null || m_smVisionInfo.g_arrLeadROIs.Count == 0 || m_smVisionInfo.g_arrLead == null || m_smVisionInfo.g_arrLead.Length == 0)
                return;

            // ---------- Learn Lead Form Drawing -----------------------------------------------------------------------
            if (m_smVisionInfo.g_strSelectedPage == "Lead")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    {
                        if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                            continue;

                        for (int j = 1; j < m_smVisionInfo.g_arrLeadROIs[i].Count; j++)
                        {
                            float fX = (float)(m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX;
                            float fY = (float)(m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY;
                            float fWidth = (float)m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                            float fHeight = (float)m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                            m_Graphic.FillRectangle(new SolidBrush(Color.Gray), fX, fY, fWidth, fHeight);
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 4)
                {
                    if (!m_smVisionInfo.g_blnViewThreshold)
                    {
                        if (m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead[i].DrawObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead[i].DrawSelectedObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }

                        if (m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead)
                        {
                            for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) == 0))
                                    continue;
                                if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) == 0))
                                    continue;
                                if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) == 0))
                                    continue;
                                if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) == 0))
                                    continue;

                                PointF pCenter = new PointF();
                                if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) || m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2)//&& m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                {
                                    if (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle != 0)
                                    {
                                        pCenter = new PointF(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y);
                                    }
                                    else
                                    {
                                        pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                    }
                                }
                                else
                                {
                                    pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                }

                                m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.DrawPGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead[i].ref_intLineOffset, m_smVisionInfo.g_arrLead[i].ref_intMaskThickness, m_objTextureBrush, m_smVisionInfo.g_blnWantShowPocketDontCareArea, m_smVisionInfo.g_fPreciseAngle, pCenter);
                            }
                        }
                        else if (m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead)
                        {
                            for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {

                                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) == 0))
                                    continue;
                                else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) == 0))
                                    continue;
                                else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) == 0))
                                    continue;
                                else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) == 0))
                                    continue;

                                if (m_smVisionInfo.g_blnWantShowPocketDontCareArea)
                                {
                                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                                    PointF pCenter = new PointF();
                                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) || m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2)//&& m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle != 0)
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y);
                                        }
                                        else
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                        }
                                    }
                                    else
                                    {
                                        pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                    }

                                    PointF pTemp = new PointF();
                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[0],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[0] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[1],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[1] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[2],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[2] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[3],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[3] = pTemp;

                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[0], arrPoints[1]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[1], arrPoints[2]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[2], arrPoints[3]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[3], arrPoints[0]);
                                    m_Graphic.FillPolygon(m_objTextureBrush, arrPoints.ToArray());
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead)
                        {
                            for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {

                                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) == 0))
                                    continue;
                                else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) == 0))
                                    continue;
                                else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) == 0))
                                    continue;
                                else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) == 0))
                                    continue;

                                if (m_smVisionInfo.g_blnWantShowPocketDontCareArea)
                                {
                                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);

                                    int intOffset = 0;

                                    switch (i)
                                    {
                                        case 1:
                                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] == -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] != -1)
                                            {
                                                intOffset = (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward;

                                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[3][0].ref_ROITotalY - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 ((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[3][0].ref_ROITotalY - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                                            {
                                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                                continue;
                                            break;
                                        case 2:
                                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] == -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] != -1)
                                            {
                                                intOffset = m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROIWidth - (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4];

                                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX + intOffset) * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF(((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX + intOffset) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                                            {
                                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                                continue;
                                            break;
                                        case 3:
                                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] != -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] == -1)
                                            {
                                                intOffset = m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROIHeight - (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1];

                                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY + intOffset) * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 ((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY + intOffset) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                                            {
                                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                                continue;
                                            break;
                                        case 4:
                                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] != -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] == -1)
                                            {
                                                intOffset = (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward;

                                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[2][0].ref_ROITotalX - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF(((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[2][0].ref_ROITotalX - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                                            {
                                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                                continue;
                                            break;
                                    }

                                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                                    PointF pCenter = new PointF();
                                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) || m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2)//&& m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle != 0)
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y);
                                        }
                                        else
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                        }
                                    }
                                    else
                                    {
                                        pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                    }

                                    PointF pTemp = new PointF();
                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[0],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[0] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[1],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[1] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[2],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[2] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[3],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[3] = pTemp;

                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[0], arrPoints[1]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[1], arrPoints[2]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[2], arrPoints[3]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[3], arrPoints[0]);
                                    m_Graphic.FillPolygon(m_objTextureBrush, arrPoints.ToArray());
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead)
                        {
                            for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {

                                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) == 0))
                                    continue;
                                else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) == 0))
                                    continue;
                                else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) == 0))
                                    continue;
                                else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) == 0))
                                    continue;

                                if (m_smVisionInfo.g_blnWantShowPocketDontCareArea)
                                {
                                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                                    PointF pCenter = new PointF();
                                    if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) || m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2)//&& m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle != 0)
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y);
                                        }
                                        else
                                        {
                                            pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                        }
                                    }
                                    else
                                    {
                                        pCenter = new PointF(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROICenterY);
                                    }

                                    PointF pTemp = new PointF();
                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[0],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[0] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[1],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[1] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[2],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[2] = pTemp;

                                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                                     arrPoints[3],
                                                                     m_smVisionInfo.g_fPreciseAngle,
                                                                     ref pTemp);
                                    arrPoints[3] = pTemp;

                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[0], arrPoints[1]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[1], arrPoints[2]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[2], arrPoints[3]);
                                    m_Graphic.DrawLine(new Pen(Color.Red), arrPoints[3], arrPoints[0]);
                                    m_Graphic.FillPolygon(m_objTextureBrush, arrPoints.ToArray());
                                }
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 7)
                {
                    if (!m_smVisionInfo.g_blnViewThreshold)
                    {
                        if (m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead[i].DrawObjects_BaseLead(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead[i].DrawSelectedObjects_BaseLead(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 5)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                        {
                            if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                m_smVisionInfo.g_arrLead[i].DrawTemplateObjects_Lead_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i, m_smVisionInfo.g_arrLeadROIColor);
                            else
                                m_smVisionInfo.g_arrLead[i].DrawTemplateObjects_Lead(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i);
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 6)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                    {
                        if (m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                        {
                            if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                m_smVisionInfo.g_arrLead[i].DrawTemplateObjects_Lead_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i, m_smVisionInfo.g_arrLeadROIColor);
                            else
                                m_smVisionInfo.g_arrLead[i].DrawTemplateObjects_Lead(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i);
                            m_smVisionInfo.g_arrLead[i].DrawPitchGapLink(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIColor[2][0]);
                        }
                    }

                }
            }
            if (m_smVisionInfo.g_blnViewLeadAGVROIDrawing && m_smVisionInfo.PR_MN_TestDone)
            {
                if (m_smVisionInfo.g_arrLead.Length > m_smVisionInfo.g_intSelectedROI)
                {
                    if (m_smVisionInfo.g_blnViewAllLeadNumber)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                continue;

                            for (int j = 0; j < m_smVisionInfo.g_arrLead[i].ref_intNumberOfLead; j++)
                            {

                                m_smVisionInfo.g_arrLead[i].DrawAGVROITolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, j, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROIPositionX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROIPositionY, m_smVisionInfo.g_arrLeadROIColor[3][0]);
                            }
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_arrLead[m_smVisionInfo.g_intSelectedROI].DrawAGVROITolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_arrInspectLeadROI[m_smVisionInfo.g_intSelectedROI].ref_ROIPositionX, m_smVisionInfo.g_arrInspectLeadROI[m_smVisionInfo.g_intSelectedROI].ref_ROIPositionY, m_smVisionInfo.g_arrLeadROIColor[3][0]);
                    }
                }
            }
            if (m_smVisionInfo.g_blnViewLeadPkgToBaseDrawing)
            {
                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLeadROIColor[5][0]),
                                                (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                                (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                                (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight) * m_smVisionInfo.g_fScaleY);

                //if (m_smVisionInfo.g_arrLead[0].ref_intLeadDirection == 0)
                //    m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                //                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) - m_smVisionInfo.g_arrLead[4].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                //                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2)) * m_smVisionInfo.g_fScaleY,
                //                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth + m_smVisionInfo.g_arrLead[2].ref_intPkgToBaseTolerance_Right + m_smVisionInfo.g_arrLead[4].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                //                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight) * m_smVisionInfo.g_fScaleY);
                //else
                //    m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                //                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2)) * m_smVisionInfo.g_fScaleX,
                //                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) - m_smVisionInfo.g_arrLead[1].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY,
                //                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth) * m_smVisionInfo.g_fScaleX,
                //                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight + m_smVisionInfo.g_arrLead[3].ref_intPkgToBaseTolerance_Bottom + m_smVisionInfo.g_arrLead[1].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY);

                if (m_smVisionInfo.g_arrLead[1].ref_blnSelected)
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLeadROIColor[5][0]),
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) - m_smVisionInfo.g_arrLead[1].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY,
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth) * m_smVisionInfo.g_fScaleX,
                                                  (m_smVisionInfo.g_arrLead[1].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY);
                if (m_smVisionInfo.g_arrLead[2].ref_blnSelected)
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLeadROIColor[5][0]),
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X + (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                           (m_smVisionInfo.g_arrLead[2].ref_intPkgToBaseTolerance_Right) * m_smVisionInfo.g_fScaleX,
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight) * m_smVisionInfo.g_fScaleY);
                if (m_smVisionInfo.g_arrLead[3].ref_blnSelected)
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLeadROIColor[5][0]),
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y + (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                           (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth) * m_smVisionInfo.g_fScaleX,
                                           (m_smVisionInfo.g_arrLead[3].ref_intPkgToBaseTolerance_Bottom) * m_smVisionInfo.g_fScaleY);
                if (m_smVisionInfo.g_arrLead[4].ref_blnSelected)
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLeadROIColor[5][0]),
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) - m_smVisionInfo.g_arrLead[4].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                                  (m_smVisionInfo.g_arrLead[4].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                                                  (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight) * m_smVisionInfo.g_fScaleY);
            }
            //else
            //{
            // -------------- Lead Inspection Drawing --------------------------------------
            if (m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_blnViewLeadInspection)
            {
                //2020-08-07 ZJYEOH: Hide masking drawing because draw masking on rotated image will be weird
                //if (m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead)
                //{
                //    for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count; i++)
                //    {
                //        if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) == 0))
                //            continue;
                //        else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) == 0))
                //            continue;
                //        else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) == 0))
                //            continue;
                //        else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) == 0))
                //            continue;

                //        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                //            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                //                m_smVisionInfo.g_arrLead[i].DrawAutoMaskingPocketObject(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                //                    m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].ref_ROIPositionY, 
                //                    m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto);
                //    }
                //}
                //else if (m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead)
                //{
                //    for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count; i++)
                //    {
                //        if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) == 0))
                //            continue;
                //        else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) == 0))
                //            continue;
                //        else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) == 0))
                //            continue;
                //        else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) == 0))
                //            continue;

                //        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                //            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                //                m_smVisionInfo.g_arrLead[i].DrawManualMaskingPocketObject(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                //                    m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].ref_ROIPositionX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].ref_ROIPositionY, 
                //                    m_smVisionInfo.g_arrLeadPocketDontCareROIsManual);
                //    }
                //}

                if (m_smVisionInfo.g_arrLead[0].GetWantInspectLead() && (m_smVisionInfo.g_blnViewLeadInspection || (m_smProductionInfo.g_blnViewInspection && !m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.VM_AT_OfflinePageView))) // m_smVisionInfo.g_blnCheckLead
                {
                    if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intImageViewNo)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLead[i].ref_blnLock)
                                break;

                            if (m_smVisionInfo.g_arrLead[i].ref_blnViewLeadResultDrawing)
                            {
                                if (!m_smVisionInfo.g_blnLeadSelecting)
                                {
                                    if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1,
                                                                                                    m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY,
                                                                                                    i, m_smVisionInfo.g_intSelectedLeadExtraBlobID, m_smVisionInfo.g_arrLeadROIColor,
                                                                                                    m_smVisionInfo.g_arrLeadROIs[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1, 
                                                                                          m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY, 
                                                                                          i, m_smVisionInfo.g_intSelectedLeadExtraBlobID,
                                                                                          false, 0, 0, 0, m_smVisionInfo.g_arrLeadROIs[0][0]);
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber,
                                                                                                    m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY,
                                                                                                    i, m_smVisionInfo.g_intSelectedLeadExtraBlobID, m_smVisionInfo.g_arrLeadROIColor,
                                                                                                    m_smVisionInfo.g_arrLeadROIs[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber, 
                                                                                          m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY, 
                                                                                          i, m_smVisionInfo.g_intSelectedLeadExtraBlobID,
                                                                                          false, 0, 0, 0, m_smVisionInfo.g_arrLeadROIs[0][0]);
                                }
                                m_smVisionInfo.g_arrInspectLeadROI[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLeadROIColor[1][0]);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intSelectedImage == 0)    // 1st image selected to display mark. Should draw lead result also but according to mark angle.
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLead[i].ref_blnLock)
                                break;

                            if (m_smVisionInfo.g_arrLead[i].ref_blnViewLeadResultDrawing)
                            {
                                if (!m_smVisionInfo.g_blnLeadSelecting)
                                {
                                    if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1,
                                                                                                    m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY,
                                                                                                    i, m_smVisionInfo.g_intSelectedLeadExtraBlobID, m_smVisionInfo.g_arrLeadROIColor,
                                                                                                    m_smVisionInfo.g_arrLeadROIs[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1, 
                                                                                          m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY, 
                                                                                          i, m_smVisionInfo.g_intSelectedLeadExtraBlobID, 
                                                                                          true, 
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fRotateCenterX_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fRotateCenterY_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLeadROIs[0][0]);
                                }
                                else
                                {
                                    if (m_smVisionInfo.g_arrLead[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber,
                                                                                                    m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY,
                                                                                                    i, m_smVisionInfo.g_intSelectedLeadExtraBlobID, m_smVisionInfo.g_arrLeadROIColor,
                                                                                                    m_smVisionInfo.g_arrLeadROIs[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLead[i].DrawLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber, 
                                                                                          m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalX, m_smVisionInfo.g_arrInspectLeadROI[i].ref_ROITotalY, 
                                                                                          i, m_smVisionInfo.g_intSelectedLeadExtraBlobID,
                                                                                          true, 
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fRotateCenterX_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fRotateCenterY_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing,
                                                                                          m_smVisionInfo.g_arrLeadROIs[0][0]);
                                }
                                //m_smVisionInfo.g_arrInspectLeadROI[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                            }
                        }
                    }

                    if (m_smVisionInfo.g_arrLead[0].ref_blnWantInspectBaseLead)
                    {
                        if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intBaseLeadImageViewNo)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrLead[i].ref_blnLock)
                                    break;

                                if (m_smVisionInfo.g_arrLead[i].ref_blnViewLeadResultDrawing)
                                {
                                    if (!m_smVisionInfo.g_blnLeadSelecting)
                                    {
                                        m_smVisionInfo.g_arrLead[i].DrawBaseLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1, m_smVisionInfo.g_arrInspectLeadROI_BaseLead[i].ref_ROIPositionX, m_smVisionInfo.g_arrInspectLeadROI_BaseLead[i].ref_ROIPositionY, i, m_smVisionInfo.g_intSelectedLeadExtraBlobID);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrLead[i].DrawBaseLeadDisplayResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLeadSelectedNumber, m_smVisionInfo.g_arrInspectLeadROI_BaseLead[i].ref_ROIPositionX, m_smVisionInfo.g_arrInspectLeadROI_BaseLead[i].ref_ROIPositionY, i, m_smVisionInfo.g_intSelectedLeadExtraBlobID);
                                    }
                                    m_smVisionInfo.g_arrInspectLeadROI_BaseLead[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLeadROIColor[1][0]);
                                }
                            }
                        }
                    }
                }
            }
            if (m_smProductionInfo.g_blnViewLeadDontCareROI && m_smVisionInfo.g_blnViewLeadInspection)
            {
                DrawLeadDontCareROI();
            }
            //if (m_smVisionInfo.g_blnViewPadSettingDrawing)
            //{
            //    switch (m_smVisionInfo.g_intSelectedPackageDefect)
            //    {
            //        case 1: // Off Set

            //            m_Graphic.DrawRectangle(new Pen(Color.Yellow),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
            //            break;
            //        case 3:
            //        case 4:
            //            m_Graphic.FillRectangle(new SolidBrush(Color.Yellow),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    m_smVisionInfo.g_fSettingLength2, m_smVisionInfo.g_fSettingLength2);
            //            m_Graphic.FillRectangle(new SolidBrush(Color.Orange),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
            //            break;
            //        case 12:
            //        case 15:
            //        case 13:
            //        case 16:
            //            m_Graphic.DrawLine(new Pen(Color.Yellow, 2),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    pic_Image.Height / 2 - 5,
            //                                    pic_Image.Width / 2 + m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    pic_Image.Height / 2 - 5);
            //            m_Graphic.DrawLine(new Pen(Color.Yellow, 2),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 + 5,
            //                                    pic_Image.Width / 2 + m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 + 5);
            //            break;
            //        case 18:// Broken Area
            //            m_Graphic.FillRectangle(new SolidBrush(Color.Yellow),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
            //            break;
            //        default:
            //            m_Graphic.DrawRectangle(new Pen(Color.Yellow),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength / 2,
            //                                    m_smVisionInfo.g_fSettingLength, m_smVisionInfo.g_fSettingLength);
            //            m_Graphic.DrawRectangle(new Pen(Color.Yellow),
            //                                    pic_Image.Width / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    pic_Image.Height / 2 - m_smVisionInfo.g_fSettingLength2 / 2,
            //                                    m_smVisionInfo.g_fSettingLength2, m_smVisionInfo.g_fSettingLength2);
            //            break;
            //    }


            //}
            //}

        }

        private void DrawLead3DObject()
        {
            if (m_smVisionInfo.g_arrLeadROIs == null || m_smVisionInfo.g_arrLeadROIs.Count == 0 || m_smVisionInfo.g_arrLead3D == null)
                return;

            // ---------- Learn Lead Form Drawing -----------------------------------------------------------------------
            if (m_smVisionInfo.g_strSelectedPage == "Lead3D")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 4)
                {
                    if (!m_smVisionInfo.g_blnViewThreshold)
                    {
                        if (m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead3D[i].DrawObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if (m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    m_smVisionInfo.g_arrLead3D[i].DrawSelectedObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            }
                        }
                    }

                    if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance)
                    {
                        if (m_smVisionInfo.g_arrLead3D[0].ref_intLeadDirection == 0)
                        {
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                            (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Left - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX - 1) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);

                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) - 1) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Top - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY - 1) * m_smVisionInfo.g_fScaleY);

                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                         (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) * m_smVisionInfo.g_fScaleY,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) - 1) * m_smVisionInfo.g_fScaleY);
                        }
                    }
                    //for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    //{
                    //    for (int j = 2; j < m_smVisionInfo.g_arrLeadROIs[i].Count; j++)
                    //    {
                    //        float fX = (float)(m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX;
                    //        float fY = (float)(m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY;
                    //        float fWidth = (float)m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                    //        float fHeight = (float)m_smVisionInfo.g_arrLeadROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                    //        m_Graphic.FillRectangle(new SolidBrush(Color.Gray), fX, fY, fWidth, fHeight);
                    //    }
                    //}
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 5)
                {

                    for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                        {
                            if (i == 0)
                            {
                                if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance)
                                    m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Center_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIHeight, i, m_smVisionInfo.g_arrLead3DROIColor);
                                else
                                    m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Center(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIHeight, i, m_smVisionInfo.g_arrLead3DROIColor);
                            }
                            else
                                m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Side(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i);
                        }
                    }

                    //if (m_smVisionInfo.g_blnViewLead3DPkgToBaseDrawing)
                    //{
                    //    m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                    //                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2)) * m_smVisionInfo.g_fScaleX,
                    //                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2)) * m_smVisionInfo.g_fScaleY,
                    //                                    (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight) * m_smVisionInfo.g_fScaleY);
                    //    m_Graphic.DrawRectangle(new Pen(Color.Yellow),
                    //                                  (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                    //                                  (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY,
                    //                                  (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Right + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                    //                                  (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Bottom + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY);
                    //}
                    if (m_smVisionInfo.g_blnViewLeadTipBuildAreaDrawing)
                    {
                        if (m_smVisionInfo.g_arrLead3D[0].ref_intLeadDirection == 0)
                        {
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                            (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Left - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX - 1) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);

                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) - 1) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);
                        }
                        else
                        {
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                            (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                            (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Top - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY - 1) * m_smVisionInfo.g_fScaleY);

                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                         (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) * m_smVisionInfo.g_fScaleY,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) - 1) * m_smVisionInfo.g_fScaleY);
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 6)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                        {
                            if (i == 0)
                            {
                                if (i == 0)
                                {
                                    if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Center_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIHeight, i, m_smVisionInfo.g_arrLead3DROIColor);
                                    else
                                        m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Center(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIHeight, i, m_smVisionInfo.g_arrLead3DROIColor);
                                }
                                m_smVisionInfo.g_arrLead3D[i].DrawPitchGapLink(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLead3DROIColor[2][0]);
                            }
                            else
                                m_smVisionInfo.g_arrLead3D[i].DrawTemplateObjects_Lead3D_Side(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, i);
                        }
                    }
                }
            }
            else if (m_smVisionInfo.g_strSelectedPage == "LeadPackage")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 0)
                {
                    if (m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                    {
                        m_smVisionInfo.g_blnViewLeadInspection = false;
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                        {
                            if (i != 0)
                                break;
                            m_smVisionInfo.g_arrLead3D[0].DrawTemplateObjects_Lead3D_CenterPkg(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROITotalY, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIWidth, m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIHeight, i);
                        }
                    }
                }
                if (m_smVisionInfo.g_intLearnStepNo == 1 || m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 5 ||
                    m_smVisionInfo.g_intLearnStepNo == 7 || m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9 || m_smVisionInfo.g_intLearnStepNo == 10)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;
                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4



                    PointF[] CornerPoints = new PointF[4];
                    for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                    {
                        if (i != 0)
                            break;
                        fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromEdge;
                        fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromRight;
                        fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromBottom;
                        fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromLeft;

                        intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                        intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                            m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);

                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);


                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                            PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }

                    }
                }

                else if (m_smVisionInfo.g_intLearnStepNo == 2)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendLeft = 0;
                    int intExtendRight = 0;
                    int intExtendTop = 0;
                    int intExtendBottom = 0;

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4
                    PointF[] CornerPoints = new PointF[4];

                    for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                    {
                        if (i != 0)
                            break;
                        fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromEdge; // m_smVisionInfo.g_intSelectedROI
                        fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromRight;
                        fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromBottom;
                        fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromLeft;


                        intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                        intExtendLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                        intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                        intExtendTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {

                            //Top
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendTop);

                            //Right
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendRight, intStartY,
                                                    intExtendRight, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            //Bottom
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendBottom,
                                                    m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendBottom);

                            //Left
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, intExtendLeft, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);


                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);


                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                            PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            
                            pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                                m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                            pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 6)
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intExtendX = 0;
                    int intExtendX2 = 0;
                    int intExtendY = 0;
                    int intExtendY2 = 0;
                    Pen pen = new Pen(Color.Red);
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                        pen = new Pen(Color.Cyan);

                    float newX1 = 0, newY1 = 0;  // new point 1
                    float newX2 = 0, newY2 = 0; // new point 2
                    float newX3 = 0, newY3 = 0; // new point 3
                    float newX4 = 0, newY4 = 0; // new point 4
                    PointF[] CornerPoints = new PointF[4];

                    for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                    {
                        if (i != 0)
                            break;
                        fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                        fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromRight;
                        fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromBottom;
                        fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromLeft;

                        intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                        intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                        intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                        intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                        intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                        intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                        if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                        {

                            //Top
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                            //Right
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intStartY - intExtendY,
                                                    intExtendX2, intExtendY + intExtendY2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            //Bottom
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY,
                                                   intExtendX + intExtendX2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY2);

                            //Left
                            m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);


                        }
                        else
                        {
                            //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                            //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);


                            //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                            //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                            float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                            float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                            PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                                m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                            PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            
                            pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                                m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                            pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                            pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                            pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                               m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                            if (i == 1)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pBL = new PointF(newX1, pBL.Y);
                                pBR = new PointF(newX2, pBR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 2)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(pTL.X, newY1);
                                pBL = new PointF(pBL.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 3)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTL = new PointF(newX1, pTL.Y);
                                pTR = new PointF(newX2, pTR.Y);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                            else if (i == 4)
                            {
                                Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                                pTR = new PointF(pTR.X, newY1);
                                pBR = new PointF(pBR.X, newY2);

                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                            }
                        }

                    }
                }
            }
            if (m_smVisionInfo.g_blnViewLead3DAGVROIDrawing)
            {
                if (m_smVisionInfo.g_arrLead3D.Length > 0)
                {
                    if (m_smVisionInfo.g_blnViewAllLead3DNumber)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D[0].ref_intNumberOfLead; i++)
                        {
                            m_smVisionInfo.g_arrLead3D[0].DrawAGVROITolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, i, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY, m_smVisionInfo.g_arrLead3DROIColor[4][0]);
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_arrLead3D[0].DrawAGVROITolerance(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLead3DSelectedNumber, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX, m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY, m_smVisionInfo.g_arrLead3DROIColor[4][0]);
                    }
                }
            }
            if (m_smVisionInfo.g_blnViewLead3DSettingDrawing)
            {
                if (m_smVisionInfo.g_blnViewLead3DPackageDefectSetting && m_smVisionInfo.g_intSelectedPackageDefect != -1)
                {
                    float fLength = 0;
                    int intStartX = 0;
                    int intStartY = 0;
                    int intWidth = 0;
                    int intHeight = 0;
                    float fDimX = 0;
                    int intExtendX = 0;
                    int intExtendY = 0;
                    int intSelectedROI = m_smVisionInfo.g_intSelectedROI;

                    switch (m_smVisionInfo.g_intSelectedPackageDefect)
                    {
                        case 0:
                            intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[0][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[0][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                            if (m_smVisionInfo.g_blnViewPackageMinDefect)
                                intWidth = (int)(m_smVisionInfo.g_arrLead3D[0].GetUnitWidthMin(0) * m_smVisionInfo.g_fScaleX);
                            else
                                intWidth = (int)(m_smVisionInfo.g_arrLead3D[0].GetUnitWidthMax(0) * m_smVisionInfo.g_fScaleX);

                            intHeight = 3;

                            m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                            break;
                        case 1:
                            intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[0][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                            intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[0][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);

                            if (m_smVisionInfo.g_blnViewPackageMinDefect)
                                intHeight = (int)(m_smVisionInfo.g_arrLead3D[0].GetUnitHeightMin(0) * m_smVisionInfo.g_fScaleY);
                            else
                                intHeight = (int)(m_smVisionInfo.g_arrLead3D[0].GetUnitHeightMax(0) * m_smVisionInfo.g_fScaleY);

                            intWidth = 3;

                            m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), intStartX, intStartY, intWidth, intHeight);
                            break;
                    }
                }
                else if (m_smVisionInfo.g_blnViewLead3DPositionSetting)
                {
                    int intCenterX = (int)(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX);
                    int intCenterY = (int)(m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY);
                    int intWidth, intHeight;

                    intWidth = (int)(m_smVisionInfo.g_arrLead3D[0].ref_fXTolerance_Pixel * m_smVisionInfo.g_fScaleX);

                    intHeight = (int)(m_smVisionInfo.g_arrLead3D[0].ref_fYTolerance_Pixel * m_smVisionInfo.g_fScaleY);

                    m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrLead3DROIColor[8][0]), (int)(intCenterX - intWidth), (int)(intCenterY - 1), intWidth * 2, 2); //X 
                    m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrLead3DROIColor[8][0]), (int)(intCenterX - 1), (int)(intCenterY - intHeight), 2, intHeight * 2); //Y
                }

            }
            else if (m_smVisionInfo.g_blnViewLeadPkgStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                float newX1 = 0, newY1 = 0;  // new point 1
                float newX2 = 0, newY2 = 0; // new point 2
                float newX3 = 0, newY3 = 0; // new point 3
                float newX4 = 0, newY4 = 0; // new point 4



                PointF[] CornerPoints = new PointF[4];
                for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                {
                    if (i != 0)
                        break;
                    fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromEdge;
                    fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fPkgStartPixelFromLeft;

                    intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                    intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    {
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + intExtendX, intStartY + intExtendY, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendX - intExtendX2,
                        m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendY - intExtendY2);

                    }
                    else
                    {
                        //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);


                        //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                        PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                            m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                        PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                        PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                        PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                    }

                }
            }

            else if (m_smVisionInfo.g_blnViewLeadChipStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendLeft = 0;
                int intExtendRight = 0;
                int intExtendTop = 0;
                int intExtendBottom = 0;

                float newX1 = 0, newY1 = 0;  // new point 1
                float newX2 = 0, newY2 = 0; // new point 2
                float newX3 = 0, newY3 = 0; // new point 3
                float newX4 = 0, newY4 = 0; // new point 4
                PointF[] CornerPoints = new PointF[4];

                for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                {
                    if (i != 0)
                        break;
                    fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromEdge; // m_smVisionInfo.g_intSelectedROI
                    fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fChipStartPixelFromLeft;


                    intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendLeft = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                    intExtendRight = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendTop = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendBottom = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    {

                        //Top
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendTop);

                        //Right
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX - intExtendRight, intStartY,
                                                intExtendRight, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                        //Bottom
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY - intExtendBottom,
                                                m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendBottom);

                        //Left
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, intExtendLeft, m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);


                    }
                    else
                    {
                        //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                        //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                        //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                        PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                            m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                        PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                        PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                        PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        
                        pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                            m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                        pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop);

                        pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                        pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom);

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                    }
                }
            }
            else if (m_smVisionInfo.g_blnViewLeadMoldStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);

                float newX1 = 0, newY1 = 0;  // new point 1
                float newX2 = 0, newY2 = 0; // new point 2
                float newX3 = 0, newY3 = 0; // new point 3
                float newX4 = 0, newY4 = 0; // new point 4
                PointF[] CornerPoints = new PointF[4];

                for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                {
                    if (i != 0)
                        break;
                    fLengthTop = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromEdge; //m_smVisionInfo.g_intSelectedROI
                    fLengthRight = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrLead3D[i].ref_fMoldStartPixelFromLeft;

                    intStartX = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    intStartY = (int)(m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    {

                        //Top
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX + intExtendX2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY);

                        //Right
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intStartY - intExtendY,
                                                intExtendX2, intExtendY + intExtendY2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                        //Bottom
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY,
                                               intExtendX + intExtendX2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, intExtendY2);

                        //Left
                        m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX - intExtendX, intStartY - intExtendY, intExtendX, intExtendY + intExtendY2 + m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);


                    }
                    else
                    {
                        //CornerPoints = m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_arrRectCornerPoints;

                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                        //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);


                        //m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrLead3D[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrLead3D[i].GetResultRightHeight_RectGauge4L(0));

                        PointF pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                            m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                        PointF pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2));

                        PointF pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                        PointF pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2),
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2));

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        
                        pTL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                            m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                        pTR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                        pBL = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                        pBR = new PointF(m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                           m_smVisionInfo.g_arrLead3D[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(Color.Red), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                    }

                }
            }
            else if (m_smVisionInfo.g_blnViewLeadTipBasePoint)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                {
                    if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                        continue;

                    if (m_smVisionInfo.g_arrLead3D[i].ref_blnLock)
                        break;

                    if (i == 0)
                    {
                        if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance)
                            m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Center_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i, m_smVisionInfo.g_arrLead3DROIColor);
                        else
                            m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Center(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i, m_smVisionInfo.g_arrLead3DROIColor);
                    }
                    else
                        m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Side(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i);

                }
            }
            else
            {
                // -------------- Lead Inspection Drawing --------------------------------------
                if (m_smVisionInfo.g_blnViewLeadInspection) //m_smProductionInfo.g_blnViewInspection &&
                {
                    if ((m_smVisionInfo.g_blnViewLeadInspection || (m_smProductionInfo.g_blnViewInspection && !m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.VM_AT_OfflinePageView)))
                    {
                        if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance && !m_smVisionInfo.AT_VM_OfflineTestAllLead3D)
                        {
                            if (m_smVisionInfo.g_arrLead3D[0].ref_blnViewLeadResultDrawing && m_smProductionInfo.g_blnViewInspection)
                            {
                                if (m_smVisionInfo.g_arrLead3D[0].ref_intLeadDirection == 0)
                                {
                                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Left - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX - 1) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);

                                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) * m_smVisionInfo.g_fScaleX,
                                                                                (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                                (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) - 1) * m_smVisionInfo.g_fScaleX,
                                                                                (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);
                                }

                                else
                                {
                                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Top - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY - 1) * m_smVisionInfo.g_fScaleY);

                                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                                 (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) * m_smVisionInfo.g_fScaleY,
                                                                                (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                                                (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) - 1) * m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }

                        for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLead3D[i].ref_blnLock)
                                break;

                            if (m_smVisionInfo.g_arrLead3D[i].ref_blnViewLeadResultDrawing && m_smProductionInfo.g_blnViewInspection)
                            {
                                if (i == 0)
                                {
                                    if (m_smVisionInfo.g_arrLead3D[0].ref_blnWantUsePkgToBaseTolerance)
                                        m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Center_PkgToBase(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i, m_smVisionInfo.g_arrLead3DROIColor);
                                    else
                                        m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Center(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i, m_smVisionInfo.g_arrLead3DROIColor);
                                }
                                else
                                    m_smVisionInfo.g_arrLead3D[i].DrawInspectionObjects_Lead3D_Side(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIs[i][0], i);


                                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                {
                                    if (i == 0)
                                    {
                                        if (!m_smVisionInfo.g_arrLead3D[i].ref_blnMeasureCenterPkgSizeUsingCorner)
                                        {
                                            if (m_smProductionInfo.g_blnViewPackageResult && m_smVisionInfo.g_arrLead3D[i].ref_blnViewPkgSizeDrawing)
                                            {
                                                if (m_smVisionInfo.g_arrLead3D[i].ref_blnDrawDraggingBox)
                                                    m_smVisionInfo.g_arrLead3D[i].ref_blnDrawDraggingBox = false;
                                                if (m_smVisionInfo.g_arrLead3D[i].ref_blnDrawSamplingPoint)
                                                    m_smVisionInfo.g_arrLead3D[i].ref_blnDrawSamplingPoint = false;

                                                if (m_smVisionInfo.g_blnViewRotatedImage && m_smProductionInfo.g_blnViewInspection)
                                                {
                                                    m_smVisionInfo.g_arrLead3D[i].DrawGaugeResult_Rotated(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                                }
                                                else
                                                {
                                                    m_smVisionInfo.g_arrLead3D[i].DrawGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                                }
                                            }
                                            else
                                            {
                                                if (m_smVisionInfo.g_arrLead3D[i].ref_blnViewPkgSizeDrawing)
                                                    m_smVisionInfo.g_arrLead3D[i].DrawGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                        }
                                    }
                                    if (m_smVisionInfo.g_arrLead3D[i].ref_blnViewPkgResultDrawing)
                                    {
                                        if ((!m_smVisionInfo.g_blnLead3DSelecting) || (!m_smVisionInfo.g_arrLead3D[i].ref_blnPkgDefectSelected))
                                            m_smVisionInfo.g_arrLead3D[i].DrawPkgDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, -1);
                                        else
                                            m_smVisionInfo.g_arrLead3D[i].DrawPkgDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLead3DPkgDefectSelectedNumber);
                                    }
                                }
                            }
                        }

                    }
                }

                if (m_smVisionInfo.g_blnViewLead3DPkgToBaseDrawing)
                {
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[1][0]),
                                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                                    (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                                    (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight) * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrLead3D[0].ref_intLeadDirection == 0)
                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[1][0]),
                                                      (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                                                      (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2)) * m_smVisionInfo.g_fScaleY,
                                                      (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Right + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Left) * m_smVisionInfo.g_fScaleX,
                                                      (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight) * m_smVisionInfo.g_fScaleY);
                    else
                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[1][0]),
                                               (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2)) * m_smVisionInfo.g_fScaleX,
                                               (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY,
                                               (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth) * m_smVisionInfo.g_fScaleX,
                                               (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Bottom + m_smVisionInfo.g_arrLead3D[0].ref_intPkgToBaseTolerance_Top) * m_smVisionInfo.g_fScaleY);
                }
                if (m_smVisionInfo.g_blnViewLeadTipBuildAreaDrawing)
                {
                    if (m_smVisionInfo.g_arrLead3D[0].ref_intLeadDirection == 0)
                    {
                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                        (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Left - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX - 1) * m_smVisionInfo.g_fScaleX,
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);

                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.X + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitWidth / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Right) - 1) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - 1) * m_smVisionInfo.g_fScaleY);
                    }
                    else
                    {
                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]),
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY) * m_smVisionInfo.g_fScaleY,
                                                        (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                        (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y - (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) - m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Top - m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY - 1) * m_smVisionInfo.g_fScaleY);

                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrLead3DROIColor[9][0]), (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalX) * m_smVisionInfo.g_fScaleX,
                                                                     (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) * m_smVisionInfo.g_fScaleY,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIWidth - 1) * m_smVisionInfo.g_fScaleX,
                                                                    (m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROITotalY + m_smVisionInfo.g_arrLeadROIs[0][0].ref_ROIHeight - (m_smVisionInfo.g_arrLead3D[0].ref_pCornerPoint_Center.Y + (m_smVisionInfo.g_arrLead3D[0].ref_fCenterUnitHeight / 2) + m_smVisionInfo.g_arrLead3D[0].ref_intTipBuildAreaTolerance_Bottom) - 1) * m_smVisionInfo.g_fScaleY);
                    }
                }

            }

        }

        private void DrawUnitPresent()
        {
            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "UnitPresent":

                    if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 0)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            m_smVisionInfo.g_objUnitPresent.DrawTemporaryUnitROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPositioningROIs[0]);
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            m_smVisionInfo.g_objUnitPresent.DrawTemporaryBlobsObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }

                        if (m_smVisionInfo.g_intLearnStepNo == 2)
                        {
                            m_smVisionInfo.g_objUnitPresent.DrawTemplateBlobsObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionX, m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionY);
                        }
                    }
                    break;
                default:

                    if (m_smProductionInfo.g_blnViewInspection && !m_smVisionInfo.VM_AT_SettingInDialog && m_smVisionInfo.g_blnViewUnitPresentObjectsBuilded)
                    {
                        if (m_smVisionInfo.g_objUnitPresent != null)
                        {
                            if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 0)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                                {
                                    m_smVisionInfo.g_objUnitPresent.DrawInspectionResultUnitROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                                {
                                    m_smVisionInfo.g_objUnitPresent.DrawInspectionResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                        m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionX, m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionY);

                                    m_smVisionInfo.g_objUnitPresent.DrawExtraObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                    m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionX, m_smVisionInfo.g_arrPositioningROIs[0].ref_ROIPositionY);
                                }
                            }
                        }
                    }
                    if (m_smProductionInfo.g_blnViewSearchROI)
                    {
                        if (m_smVisionInfo.g_objUnitPresent != null)
                        {
                            if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                            {
                                m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[0]).GetROIHandle());
                            }
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// Draw seal object
        /// </summary>
        private void DrawSealObject()
        {
            if (m_smVisionInfo.g_blnViewDimension)
            {
                switch (m_smVisionInfo.g_objSeal.ref_intSelectedSealObject)
                {
                    case 0:
                        m_smVisionInfo.g_objSeal.DrawLineWidthTolerance2(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0);
                        break;
                    case 1:
                        m_smVisionInfo.g_objSeal.DrawDistanceWidthTolerance(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 2:
                        m_smVisionInfo.g_objSeal.DrawMinSealObjectSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0);
                        break;
                    case 3:
                        m_smVisionInfo.g_objSeal.DrawMinSealObjectSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1);
                        break;
                    case 4:
                        m_smVisionInfo.g_objSeal.DrawMinOverHeatSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intSelectedROI);
                        break;
                    case 5:
                        m_smVisionInfo.g_objSeal.DrawMinSealBubbleSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0);
                        break;
                    case 6:
                        m_smVisionInfo.g_objSeal.DrawLineWidthTolerance2(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1);
                        break;
                    case 7:
                        m_smVisionInfo.g_objSeal.DrawMinSealBubbleSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1);
                        break;
                    case 8:
                        m_smVisionInfo.g_objSeal.DrawSprocketHoleDistanceWidthTolerance(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 9:
                        m_smVisionInfo.g_objSeal.DrawMinTapeScratchesSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intSelectedROI);
                        break;
                    case 10:
                        m_smVisionInfo.g_objSeal.DrawSprocketHoleDiameterTolerance(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 11:
                        m_smVisionInfo.g_objSeal.DrawMaxSprocketHoleDefectSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 12:
                        m_smVisionInfo.g_objSeal.DrawMaxSprocketHoleBrokenSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 13:
                        m_smVisionInfo.g_objSeal.DrawSprocketHoleRoundnessTolerance(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case 14:
                        m_smVisionInfo.g_objSeal.DrawMaxSealEdgeStraightnessSize(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                }
            }
            else if (m_smVisionInfo.g_blnViewSealSprocketHoleInspectionAreaInwardTolerance)
            {
                m_smVisionInfo.g_objSeal.DrawSprocketHoleInspectionAreaInwardTolerance(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIColor[3]);
            }
            else if (m_smVisionInfo.g_blnViewSealSprocketHoleBrokenOutwardTolerance)
            {
                m_smVisionInfo.g_objSeal.DrawSprocketHoleBrokenOutwardTolerance(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intLearnStepNo != 9, m_smVisionInfo.g_arrSealROIColor[3]);
            }
            else if (m_smProductionInfo.g_blnViewInspection)
            {
                //if (m_smVisionInfo.g_blnViewSealObjectsBuilded && !m_smVisionInfo.VM_AT_SettingInDialog)
                if (m_smVisionInfo.g_blnViewSealObjectsBuilded) // 2020 08 13 - CCENG: Allow keep drawing inspection result when enter tolerance form. If dont want to draw, then should reset the g_blnViewSealObjectsBuilded event.
                {
                    switch (m_smVisionInfo.g_strSelectedPage)
                    {
                        case "Seal":
                            //m_smVisionInfo.g_objSeal.DrawObjects(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX);
                            m_smVisionInfo.g_objSeal.DrawGauge(m_Graphic, m_smVisionInfo.g_arrSealGauges, m_smVisionInfo.g_arrSealROIs, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                            break;
                        default:
                            if ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x01) > 0)
                                m_smVisionInfo.g_objSeal.DrawGauge(m_Graphic, m_smVisionInfo.g_arrSealGauges, m_smVisionInfo.g_arrSealROIs, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            if (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x100) > 0) && !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHole)
                            {
                                if ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x04) > 0)
                                {
                                    if (m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.X != 0 && m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.Y != 0)
                                    {
                                        if ((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                            (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                            (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                            (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))))
                                        {
                                            m_smVisionInfo.g_objSealCircleGauges.DrawCircleGaugeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIColor[3][1]);
                                        }
                                        if (m_smVisionInfo.g_objSealCircleGauges.ref_GaugeScore > m_smVisionInfo.g_objSealCircleGauges.ref_intMinScore)
                                        {
                                            if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x200) > 0)
                                            {
                                                m_smVisionInfo.g_objSeal.DrawSProcketDistanceResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if ((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                        (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                        (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                        (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))))
                                    {
                                        m_smVisionInfo.g_objSealCircleGauges.DrawCircleGaugeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIColor[3][1]);
                                    }
                                    if (m_smVisionInfo.g_objSealCircleGauges.ref_GaugeScore > m_smVisionInfo.g_objSealCircleGauges.ref_intMinScore)
                                    {
                                        if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x200) > 0)
                                        {
                                            m_smVisionInfo.g_objSeal.DrawSProcketDistanceResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }
                            }

                            if ((((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x200) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x400) > 0)) && !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect)
                            {
                                if ((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))))
                                {
                                    m_smVisionInfo.g_objSealCircleGauges.DrawCircleGaugeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIColor[3][1]);
                                }
                                if (m_smVisionInfo.g_objSealCircleGauges.ref_GaugeScore > m_smVisionInfo.g_objSealCircleGauges.ref_intMinScore)
                                {
                                    if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x2000) > 0)
                                    {
                                        m_smVisionInfo.g_objSeal.DrawSProcketDiameterResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }

                                    if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x4000) > 0)
                                    {
                                        //if (m_smVisionInfo.g_arrSealROIs.Count > 6 && m_smVisionInfo.g_arrSealROIs[6].Count > 0)
                                        m_smVisionInfo.g_objSeal.DrawSProcketDefectResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, (m_smVisionInfo.g_objWhiteImage.ref_intImageWidth / 2) - (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX), (m_smVisionInfo.g_objWhiteImage.ref_intImageHeight / 2) - (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY));
                                    }
                                }
                            }

                            if ((((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x800) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x1000) > 0)) && !m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness)
                            {
                                if ((m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterX + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY < (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY - (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))) ||
                                    (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY > (m_smVisionInfo.g_objSealCircleGauges.ref_ObjectCenterY + (m_smVisionInfo.g_objSealCircleGauges.ref_fDiameter / 2))))
                                {
                                    m_smVisionInfo.g_objSealCircleGauges.DrawCircleGaugeResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIColor[3][1]);
                                }
                                if (m_smVisionInfo.g_objSealCircleGauges.ref_GaugeScore > m_smVisionInfo.g_objSealCircleGauges.ref_intMinScore)
                                {
                                    if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x8000) > 0)
                                    {
                                        m_smVisionInfo.g_objSeal.DrawSProcketBrokenResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0, 0);
                                    }

                                    if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x10000) > 0)
                                    {
                                        m_smVisionInfo.g_objSeal.DrawSProcketRoundnessResult(m_Graphic, m_smVisionInfo.g_objSealCircleGauges, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 0, 0);
                                    }
                                }
                            }

                            m_smVisionInfo.g_objSeal.DrawProductionObjects(m_Graphic, m_smVisionInfo.g_arrSealROIs, 1 / m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            float fPositionX, fPositionY;
                            float fWidth, fHeight;

                            if (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x80) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x40) > 0))
                            {
                                if (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X != 0 && m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y != 0)
                                {
                                    if ((((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x80) > 0) && m_smVisionInfo.g_intOrientResult[0] != 0) ||  // 2020 02 12 - CCENG: Draw red when Want Orientation and Orient Result not 0
                                        (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x80) == 0) && m_smVisionInfo.g_intOrientResult[0] == 4))   // 2020 02 12 - CCENG: Drwa red when No Want Orientation and Orient Reuslt not 4
                                    {
                                        ////2020-10-22 ZJYEOH : Draw Pattern Size based on template used
                                        //fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width * m_smVisionInfo.g_fScaleX; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                        //fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height * m_smVisionInfo.g_fScaleY; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                        //fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2) * m_smVisionInfo.g_fScaleX;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                        //fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2) * m_smVisionInfo.g_fScaleY;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                        //m_Graphic.DrawRectangle(new Pen(Color.Red), fPositionX, fPositionY, fWidth, fHeight);

                                        fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                        fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                        fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                        fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                        float newX1 = 0, newY1 = 0;  // new point 1
                                        float newX2 = 0, newY2 = 0; // new point 2
                                        float newX3 = 0, newY3 = 0; // new point 3
                                        float newX4 = 0, newY4 = 0; // new point 4

                                        float fCenterX = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X;
                                        float fCenterY = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y;

                                        Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX1, ref newY1);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX2, ref newY2);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX3, ref newY3);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX4, ref newY4);

                                        m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                    }
                                    else if (m_smVisionInfo.g_intOrientResult[0] == 0)
                                    {
                                        if (m_smVisionInfo.g_objSeal.GetMarkMinScore(m_smVisionInfo.g_objSeal.ref_intMarkTemplateIndex) < m_smVisionInfo.g_objSeal.ref_fMarkMinScore)
                                        {
                                            ////2020-10-22 ZJYEOH : Draw Pattern Size based on template used
                                            //fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width * m_smVisionInfo.g_fScaleX; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                            //fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height * m_smVisionInfo.g_fScaleY; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                            //fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2) * m_smVisionInfo.g_fScaleX;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                            //fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2) * m_smVisionInfo.g_fScaleY;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                            //m_Graphic.DrawRectangle(new Pen(Color.Red), fPositionX, fPositionY, fWidth, fHeight);

                                            fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                            fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                            fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                            fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                            float newX1 = 0, newY1 = 0;  // new point 1
                                            float newX2 = 0, newY2 = 0; // new point 2
                                            float newX3 = 0, newY3 = 0; // new point 3
                                            float newX4 = 0, newY4 = 0; // new point 4

                                            float fCenterX = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X;
                                            float fCenterY = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y;

                                            Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX1, ref newY1);
                                            Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX2, ref newY2);
                                            Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX3, ref newY3);
                                            Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX4, ref newY4);

                                            m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_objSeal.ref_blnWantUsePixelCheckUnitPresent)
                                            {
                                                float fMarkMinWhiteArea = (float)Math.Round((m_smVisionInfo.g_objSeal.ref_fMarkMinWhiteArea), 5, MidpointRounding.AwayFromZero);
                                                float fMarkMaxWhiteArea = (float)Math.Round((m_smVisionInfo.g_objSeal.ref_fMarkMaxWhiteArea), 5, MidpointRounding.AwayFromZero);
                                                float fUnitPresentWhiteArea = (float)Math.Round((m_smVisionInfo.g_objSeal.ref_FailUnitPresentWhiteArea), 5, MidpointRounding.AwayFromZero);

                                                if (fUnitPresentWhiteArea < fMarkMinWhiteArea || fUnitPresentWhiteArea > fMarkMaxWhiteArea)
                                                {
                                                    ////2020-10-22 ZJYEOH : Draw Pattern Size based on template used
                                                    //fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width * m_smVisionInfo.g_fScaleX; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    //fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height * m_smVisionInfo.g_fScaleY; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    //fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2) * m_smVisionInfo.g_fScaleX;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    //fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2) * m_smVisionInfo.g_fScaleY;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    //m_Graphic.DrawRectangle(new Pen(Color.Red), fPositionX, fPositionY, fWidth, fHeight);

                                                    fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                                    float newX1 = 0, newY1 = 0;  // new point 1
                                                    float newX2 = 0, newY2 = 0; // new point 2
                                                    float newX3 = 0, newY3 = 0; // new point 3
                                                    float newX4 = 0, newY4 = 0; // new point 4

                                                    float fCenterX = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X;
                                                    float fCenterY = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y;

                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX1, ref newY1);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX2, ref newY2);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX3, ref newY3);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX4, ref newY4);

                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                                }
                                                else
                                                {
                                                    ////2020-10-22 ZJYEOH : Draw Pattern Size based on template used
                                                    //fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width * m_smVisionInfo.g_fScaleX; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    //fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height * m_smVisionInfo.g_fScaleY; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    //fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2) * m_smVisionInfo.g_fScaleX;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    //fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2) * m_smVisionInfo.g_fScaleY;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    //m_Graphic.DrawRectangle(new Pen(Color.Lime), fPositionX, fPositionY, fWidth, fHeight);

                                                    fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                    fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                    fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                                    float newX1 = 0, newY1 = 0;  // new point 1
                                                    float newX2 = 0, newY2 = 0; // new point 2
                                                    float newX3 = 0, newY3 = 0; // new point 3
                                                    float newX4 = 0, newY4 = 0; // new point 4

                                                    float fCenterX = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X;
                                                    float fCenterY = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y;

                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX1, ref newY1);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX2, ref newY2);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX3, ref newY3);
                                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX4, ref newY4);

                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                                    m_Graphic.DrawLine(new Pen(Color.Red), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                                }
                                            }
                                            else
                                            {
                                                ////2020-10-22 ZJYEOH : Draw Pattern Size based on template used
                                                //fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width * m_smVisionInfo.g_fScaleX; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                //fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height * m_smVisionInfo.g_fScaleY; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                //fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2) * m_smVisionInfo.g_fScaleX;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                //fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2) * m_smVisionInfo.g_fScaleY;//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                                //m_Graphic.DrawRectangle(new Pen(Color.Lime), fPositionX, fPositionY, fWidth, fHeight);

                                                fWidth = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                fHeight = m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height; //((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight
                                                fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Width / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIWidth
                                                fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y - m_smVisionInfo.g_objSeal.ref_SResultMarkSize.Height / 2);//((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).ref_ROIHeight

                                                float newX1 = 0, newY1 = 0;  // new point 1
                                                float newX2 = 0, newY2 = 0; // new point 2
                                                float newX3 = 0, newY3 = 0; // new point 3
                                                float newX4 = 0, newY4 = 0; // new point 4

                                                float fCenterX = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.X;
                                                float fCenterY = m_smVisionInfo.g_objSeal.ref_pResultMarkCenterPoint.Y;

                                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX1, ref newY1);
                                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX2, ref newY2);
                                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX3, ref newY3);
                                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_objSeal.ref_fResultMarkAngle, ref newX4, ref newY4);

                                                m_Graphic.DrawLine(new Pen(Color.Lime), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                                m_Graphic.DrawLine(new Pen(Color.Lime), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                            }
                                        }
                                    }
                                }
                            }

                            if ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x04) > 0)
                            {
                                if (m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.X != 0 && m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.Y != 0)
                                {
                                    fWidth = ((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                                    fHeight = ((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                                    fPositionX = (m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.X - ((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).ref_ROIWidth / 2) * m_smVisionInfo.g_fScaleX;
                                    fPositionY = (m_smVisionInfo.g_objSeal.ref_pResultPositionCenterPoint.Y - ((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).ref_ROIHeight / 2) * m_smVisionInfo.g_fScaleY;
                                    
                                    if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 0x01)
                                        m_Graphic.DrawRectangle(new Pen(Color.Red), fPositionX, fPositionY, fWidth, fHeight);
                                    else
                                        m_Graphic.DrawRectangle(new Pen(Color.Lime), fPositionX, fPositionY, fWidth, fHeight);
                                }
                            }


                            if (m_smVisionInfo.g_objSeal.ref_pResultPocketCenterPoint.X != 0 && m_smVisionInfo.g_objSeal.ref_pResultPocketCenterPoint.Y != 0)
                            {
                                // 2020 04 02 - CCENG: Cannot use Pocket ROI size. Have to use pocket template size. 
                                //fWidth = ((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                                //fHeight = ((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                                fWidth = m_smVisionInfo.g_objSeal.GetPocketMatcherWidth(m_smVisionInfo.g_objSeal.ref_intPocketTemplateIndex) * m_smVisionInfo.g_fScaleX;
                                fHeight = m_smVisionInfo.g_objSeal.GetPocketMatcherHeight(m_smVisionInfo.g_objSeal.ref_intPocketTemplateIndex) * m_smVisionInfo.g_fScaleY;
                                fPositionX = m_smVisionInfo.g_objSeal.ref_pResultPocketCenterPoint.X - fWidth / 2;     // ((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).ref_ROIWidth / 2) * m_smVisionInfo.g_fScaleX;
                                fPositionY = m_smVisionInfo.g_objSeal.ref_pResultPocketCenterPoint.Y - fHeight / 2;    //((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).ref_ROIHeight / 2) * m_smVisionInfo.g_fScaleY;
                                m_Graphic.DrawRectangle(new Pen(Color.Lime), fPositionX, fPositionY, fWidth, fHeight);
                            }

                            break;
                    }
                }
            }
        }

        /// <summary>
        /// Draw orient object
        /// </summary>
        private void DrawOrientObject()
        {
            if (!m_smVisionInfo.g_blnViewOrientObject && !m_smVisionInfo.g_blnViewOrientSetting)
                return;

            if (m_smVisionInfo.g_blnViewOrientObject && m_smProductionInfo.g_blnViewInspection)
            {
                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {

                    float fPositionX, fPositionY;
                    float fWidth, fHeight;
                    for (int i = 0; i < m_smVisionInfo.g_intUnitsOnImage; i++)
                    {
                        if (m_smVisionInfo.g_intOrientResult[i] != 4)
                        {
                            if (((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0) || 
                                ((m_smCustomizeInfo.g_intWantOCR & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                                ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                                ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (!m_smVisionInfo.g_strVisionName.Contains("BottomPosition") && !m_smVisionInfo.g_strVisionName.Contains("BottomOrient"))))
                            {
                                fWidth = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIWidth;
                                fHeight = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIHeight;
                                fPositionX = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionX + (m_smVisionInfo.g_fOrientCenterX[i] - fWidth / 2);
                                fPositionY = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionY + (m_smVisionInfo.g_fOrientCenterY[i] - fHeight / 2);
                                m_Graphic.DrawRectangle(new Pen(Color.Yellow), fPositionX * m_smVisionInfo.g_fScaleX, fPositionY * m_smVisionInfo.g_fScaleY, fWidth * m_smVisionInfo.g_fScaleX, fHeight * m_smVisionInfo.g_fScaleY);
                            }
                            else
                            {
                                //For Bottom
                                //Orient ROI
                                if (m_smVisionInfo.g_intOrientResult[i] == 0 || m_smVisionInfo.g_intOrientResult[i] == 2)
                                {
                                    // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the unit ROI position might change 
                                    fWidth = m_smVisionInfo.g_arrOrients[0][0].ref_intUnitPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIWidth;
                                    fHeight = m_smVisionInfo.g_arrOrients[0][0].ref_intUnitPatternHeight; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIHeight;

                                    if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                                    {
                                        fPositionX = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionX + ((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIPositionX;// + (m_smVisionInfo.g_fOrientCenterX[i] - fWidth / 2);
                                        fPositionY = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionY + ((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIPositionY;// + (m_smVisionInfo.g_fOrientCenterY[i] - fHeight / 2);
                                    }
                                    else
                                    {
                                        fPositionX = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionX + (m_smVisionInfo.g_fOrientCenterX[i] - fWidth / 2);
                                        fPositionY = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionY + (m_smVisionInfo.g_fOrientCenterY[i] - fHeight / 2);
                                    }
                                    //m_Graphic.DrawRectangle(new Pen(Color.Yellow), fPositionX * m_smVisionInfo.g_fScaleX, fPositionY * m_smVisionInfo.g_fScaleY, fWidth * m_smVisionInfo.g_fScaleX, fHeight * m_smVisionInfo.g_fScaleY);

                                    float newX1 = 0, newY1 = 0;  // new point 1
                                    float newX2 = 0, newY2 = 0; // new point 2
                                    float newX3 = 0, newY3 = 0; // new point 3
                                    float newX4 = 0, newY4 = 0; // new point 4


                                    float fCenterX = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionX + m_smVisionInfo.g_fOrientCenterX[i];
                                    float fCenterY = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionY + m_smVisionInfo.g_fOrientCenterY[i];

                                    if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                                    {
                                        fCenterX = fPositionX + fWidth / 2;
                                        fCenterY = fPositionY + fHeight / 2;
                                    }

                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX2, ref newY2);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX3, ref newY3);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX4, ref newY4);

                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                    //Sub ROI
                                    float fSubROIPositionX, fSubROIPositionY;
                                    float fSubROIWidth, fSubROIHeight;

                                    // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the sub Orient ROI position might change 
                                    fSubROIWidth = m_smVisionInfo.g_arrOrients[0][0].ref_intSubPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIWidth;
                                    fSubROIHeight = m_smVisionInfo.g_arrOrients[0][0].ref_intSubPatternHeight;// ((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIHeight;
                                    if (m_smVisionInfo.g_fSubOrientCenterX[i] != -1 && m_smVisionInfo.g_fSubOrientCenterY[i] != -1)
                                    {
                                        fSubROIPositionX = (fPositionX + (m_smVisionInfo.g_fSubOrientCenterX[i] - fSubROIWidth / 2));
                                        fSubROIPositionY = (fPositionY + (m_smVisionInfo.g_fSubOrientCenterY[i] - fSubROIHeight / 2));
                                        //m_Graphic.DrawRectangle(new Pen(Color.Lime), fSubROIPositionX * m_smVisionInfo.g_fScaleX, fSubROIPositionY * m_smVisionInfo.g_fScaleY, fSubROIWidth * m_smVisionInfo.g_fScaleX, fSubROIHeight * m_smVisionInfo.g_fScaleY);

                                        float fSubCenterX = fPositionX + m_smVisionInfo.g_fSubOrientCenterX[i];
                                        float fSubCenterY = fPositionY + m_smVisionInfo.g_fSubOrientCenterY[i];

                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX1, ref newY1);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX2, ref newY2);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX3, ref newY3);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX4, ref newY4);

                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                    }
                                }
                                else
                                {
                                    // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the unit ROI position might change 
                                    fHeight = m_smVisionInfo.g_arrOrients[0][0].ref_intUnitPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIWidth;
                                    fWidth = m_smVisionInfo.g_arrOrients[0][0].ref_intUnitPatternHeight; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIHeight;
                                    fPositionX = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionX + (m_smVisionInfo.g_fOrientCenterX[i] - fWidth / 2);
                                    fPositionY = ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).ref_ROIPositionY + (m_smVisionInfo.g_fOrientCenterY[i] - fHeight / 2);
                                    //m_Graphic.DrawRectangle(new Pen(Color.Yellow), fPositionX * m_smVisionInfo.g_fScaleX, fPositionY * m_smVisionInfo.g_fScaleY, fWidth * m_smVisionInfo.g_fScaleX, fHeight * m_smVisionInfo.g_fScaleY);

                                    float newX1 = 0, newY1 = 0;  // new point 1
                                    float newX2 = 0, newY2 = 0; // new point 2
                                    float newX3 = 0, newY3 = 0; // new point 3
                                    float newX4 = 0, newY4 = 0; // new point 4

                                    float fCenterX = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionX + m_smVisionInfo.g_fOrientCenterX[i];
                                    float fCenterY = m_smVisionInfo.g_arrOrientROIs[i][0].ref_ROIPositionY + m_smVisionInfo.g_fOrientCenterY[i];

                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX2, ref newY2);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX3, ref newY3);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX4, ref newY4);

                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Lime), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                    //Sub ROI
                                    float fSubROIPositionX, fSubROIPositionY;
                                    float fSubROIWidth, fSubROIHeight;

                                    // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the sub Orient ROI position might change 
                                    fSubROIHeight = m_smVisionInfo.g_arrOrients[0][0].ref_intSubPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIWidth;
                                    fSubROIWidth = m_smVisionInfo.g_arrOrients[0][0].ref_intSubPatternHeight; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIHeight;
                                    if (m_smVisionInfo.g_fSubOrientCenterX[i] != -1 && m_smVisionInfo.g_fSubOrientCenterY[i] != -1)
                                    {
                                        fSubROIPositionX = (fPositionX + (m_smVisionInfo.g_fSubOrientCenterX[i] - fSubROIWidth / 2));
                                        fSubROIPositionY = (fPositionY + (m_smVisionInfo.g_fSubOrientCenterY[i] - fSubROIHeight / 2));
                                        //m_Graphic.DrawRectangle(new Pen(Color.Lime), fSubROIPositionX * m_smVisionInfo.g_fScaleX, fSubROIPositionY * m_smVisionInfo.g_fScaleY, fSubROIWidth * m_smVisionInfo.g_fScaleX, fSubROIHeight * m_smVisionInfo.g_fScaleY);

                                        float fSubCenterX = fPositionX + m_smVisionInfo.g_fSubOrientCenterX[i];
                                        float fSubCenterY = fPositionY + m_smVisionInfo.g_fSubOrientCenterY[i];

                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX1, ref newY1);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX2, ref newY2);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX3, ref newY3);
                                        Math2.RotateWithAngleAccordingToReferencePoint(fSubCenterX, fSubCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, m_smVisionInfo.g_fOrientAngle[i], ref newX4, ref newY4);

                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                        m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                    }
                                }
                            }
                        }
                    }
                }

                if (m_smVisionInfo.g_blnViewGaugeNotFound)
                {
                    //Draw Edge Not Found
                    if (m_smVisionInfo.g_intSelectedImage == 0)
                    {
                        for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                        {
                            if (m_smVisionInfo.g_blnUnitInspected[u])
                            {
                                if (m_smVisionInfo.g_arrOrientGaugeM4L.Count > 0 && m_smVisionInfo.g_blnWantGauge)
                                {
                                    m_smVisionInfo.g_arrOrientGaugeM4L[u].DrawGaugeResult_GaugeNotFound(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                    }
                }

                //2020-08-18 ZJYEOH : Draw Pad Orient pattern location when fail
                if (((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smProductionInfo.g_blnViewInspection)
                {
                    if (m_smVisionInfo.g_objPadOrient != null && m_smVisionInfo.g_arrPadOrientROIs != null && m_smVisionInfo.g_arrPadOrientROIs.Count > 1)
                    {
                        //if (m_smVisionInfo.g_intOrientResult[0] == 4 || (Convert.ToDouble(m_smVisionInfo.g_objPadOrient.ref_fMinScore * 100) > Convert.ToDouble(m_smVisionInfo.g_objPadOrient.GetMinScore() * 100)))
                        //{
                        //    float fStartX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_fOrientCenterX[0] - (m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIWidth / 2);
                        //    float fStartY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_fOrientCenterY[0] - (m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIHeight / 2);

                        //    m_Graphic.DrawRectangle(new Pen(Color.Red), fStartX * m_smVisionInfo.g_fScaleX, fStartY * m_smVisionInfo.g_fScaleY,
                        //        m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        //}
                        //else
                        //{
                        //    float fStartX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIPositionX + m_smVisionInfo.g_fSubOrientCenterX[0] - (m_smVisionInfo.g_arrPadOrientROIs[2].ref_ROIWidth / 2);
                        //    float fStartY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_arrPadOrientROIs[1].ref_ROIPositionY + m_smVisionInfo.g_fSubOrientCenterY[0] - (m_smVisionInfo.g_arrPadOrientROIs[2].ref_ROIHeight / 2);

                        //    m_Graphic.DrawRectangle(new Pen(Color.Lime), fStartX * m_smVisionInfo.g_fScaleX, fStartY * m_smVisionInfo.g_fScaleY,
                        //        m_smVisionInfo.g_arrPadOrientROIs[2].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadOrientROIs[2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                        //}
                        if (!m_smVisionInfo.g_blnCheckPad || !m_smProductionInfo.g_blnViewPadResult)
                        {
                            float fPositionX, fPositionY;
                            float fWidth, fHeight;
                            int intMatcherIndex = 0;
                            if (m_smVisionInfo.g_intOrientResult[1] != 4)
                                intMatcherIndex = m_smVisionInfo.g_intOrientResult[1];
                            if (m_smVisionInfo.g_intOrientResult[1] == 0 || m_smVisionInfo.g_intOrientResult[1] == 2)
                            {
                                // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the unit ROI position might change 
                                fWidth = m_smVisionInfo.g_objPadOrient.GetMatcherWidth(intMatcherIndex); //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIWidth;
                                fHeight = m_smVisionInfo.g_objPadOrient.GetMatcherHeight(intMatcherIndex); //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIHeight;
                                fPositionX = ((ROI)m_smVisionInfo.g_arrPadOrientROIs[0]).ref_ROIPositionX + (m_smVisionInfo.g_fOrientCenterX[0] - fWidth / 2);
                                fPositionY = ((ROI)m_smVisionInfo.g_arrPadOrientROIs[0]).ref_ROIPositionY + (m_smVisionInfo.g_fOrientCenterY[0] - fHeight / 2);
                                //m_Graphic.DrawRectangle(new Pen(Color.Yellow), fPositionX * m_smVisionInfo.g_fScaleX, fPositionY * m_smVisionInfo.g_fScaleY, fWidth * m_smVisionInfo.g_fScaleX, fHeight * m_smVisionInfo.g_fScaleY);

                                float newX1 = 0, newY1 = 0;  // new point 1
                                float newX2 = 0, newY2 = 0; // new point 2
                                float newX3 = 0, newY3 = 0; // new point 3
                                float newX4 = 0, newY4 = 0; // new point 4

                                float fCenterX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_fOrientCenterX[0];
                                float fCenterY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_fOrientCenterY[0];

                                float fAngle = m_smVisionInfo.g_fOrientAngle[0];
                                //if (m_smVisionInfo.g_blnCheckPad && !m_smProductionInfo.g_blnViewPadResult)
                                //{
                                //    switch (intMatcherIndex)
                                //    {
                                //        case 1:
                                //            fAngle = -90;
                                //            break;
                                //        case 2:
                                //            fAngle = 180;
                                //            break;
                                //        case 3:
                                //            fAngle = 90;
                                //            break;
                                //    }
                                //}

                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, fAngle, ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, fAngle, ref newX2, ref newY2);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, fAngle, ref newX3, ref newY3);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, fAngle, ref newX4, ref newY4);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                //Sub ROI
                                float fSubROIPositionX, fSubROIPositionY;
                                float fSubROIWidth, fSubROIHeight;

                                // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the sub Orient ROI position might change 
                                fSubROIWidth = m_smVisionInfo.g_objPadOrient.ref_intSubPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIWidth;
                                fSubROIHeight = m_smVisionInfo.g_objPadOrient.ref_intSubPatternHeight;// ((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIHeight;
                                if (m_smVisionInfo.g_fSubOrientCenterX[0] != -1 && m_smVisionInfo.g_fSubOrientCenterY[0] != -1)
                                {
                                    fSubROIPositionX = (fPositionX + (m_smVisionInfo.g_fSubOrientCenterX[0] - fSubROIWidth / 2));
                                    fSubROIPositionY = (fPositionY + (m_smVisionInfo.g_fSubOrientCenterY[0] - fSubROIHeight / 2));
                                    //m_Graphic.DrawRectangle(new Pen(Color.Lime), fSubROIPositionX * m_smVisionInfo.g_fScaleX, fSubROIPositionY * m_smVisionInfo.g_fScaleY, fSubROIWidth * m_smVisionInfo.g_fScaleX, fSubROIHeight * m_smVisionInfo.g_fScaleY);

                                    float fSubCenterX = fPositionX + m_smVisionInfo.g_fSubOrientCenterX[0];
                                    float fSubCenterY = fPositionY + m_smVisionInfo.g_fSubOrientCenterY[0];

                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, fAngle, ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, fAngle, ref newX2, ref newY2);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, fAngle, ref newX3, ref newY3);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, fAngle, ref newX4, ref newY4);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                }
                            }
                            else
                            {
                                // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the unit ROI position might change 
                                fWidth = m_smVisionInfo.g_objPadOrient.GetMatcherWidth(intMatcherIndex); //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIWidth;
                                fHeight = m_smVisionInfo.g_objPadOrient.GetMatcherHeight(intMatcherIndex); //((ROI)m_smVisionInfo.g_arrOrientROIs[i][1]).ref_ROIHeight;
                                fPositionX = ((ROI)m_smVisionInfo.g_arrPadOrientROIs[0]).ref_ROIPositionX + (m_smVisionInfo.g_fOrientCenterX[0] - fWidth / 2);
                                fPositionY = ((ROI)m_smVisionInfo.g_arrPadOrientROIs[0]).ref_ROIPositionY + (m_smVisionInfo.g_fOrientCenterY[0] - fHeight / 2);
                                //m_Graphic.DrawRectangle(new Pen(Color.Yellow), fPositionX * m_smVisionInfo.g_fScaleX, fPositionY * m_smVisionInfo.g_fScaleY, fWidth * m_smVisionInfo.g_fScaleX, fHeight * m_smVisionInfo.g_fScaleY);

                                float newX1 = 0, newY1 = 0;  // new point 1
                                float newX2 = 0, newY2 = 0; // new point 2
                                float newX3 = 0, newY3 = 0; // new point 3
                                float newX4 = 0, newY4 = 0; // new point 4

                                float fCenterX = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionX + m_smVisionInfo.g_fOrientCenterX[0];
                                float fCenterY = m_smVisionInfo.g_arrPadOrientROIs[0].ref_ROIPositionY + m_smVisionInfo.g_fOrientCenterY[0];

                                float fAngle = m_smVisionInfo.g_fOrientAngle[0];
                                //if (m_smVisionInfo.g_blnCheckPad && !m_smProductionInfo.g_blnViewPadResult)
                                //{
                                //    //float fUnitAngle = 0;
                                //    //if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                                //    //{
                                //    //    fUnitAngle = m_smVisionInfo.g_arrPad[0].GetResultAngle_RectGauge4L();
                                //    //}
                                //    //else
                                //    //{
                                //    //    fUnitAngle = m_smVisionInfo.g_arrPad[0].GetResultAngle_UnitMatcher();
                                //    //}
                                //    switch (intMatcherIndex)
                                //    {
                                //        case 1:
                                //            fAngle = -90;
                                //            break;
                                //        case 2:
                                //            fAngle = 180;
                                //            break;
                                //        case 3:
                                //            fAngle = 90;
                                //            break;
                                //    }
                                //}

                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY - fHeight / 2, fAngle, ref newX1, ref newY1);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX - fWidth / 2, fCenterY + fHeight / 2, fAngle, ref newX2, ref newY2);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY - fHeight / 2, fAngle, ref newX3, ref newY3);
                                Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fCenterX + fWidth / 2, fCenterY + fHeight / 2, fAngle, ref newX4, ref newY4);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[11][0]), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                //Sub ROI
                                float fSubROIPositionX, fSubROIPositionY;
                                float fSubROIWidth, fSubROIHeight;

                                // 2020-04-08 ZJYEOH : Use pattern parameter to draw because the sub Orient ROI position might change 
                                fSubROIHeight = m_smVisionInfo.g_objPadOrient.ref_intSubPatternWidth; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIWidth;
                                fSubROIWidth = m_smVisionInfo.g_objPadOrient.ref_intSubPatternHeight; //((ROI)m_smVisionInfo.g_arrOrientROIs[i][2]).ref_ROIHeight;
                                if (m_smVisionInfo.g_fSubOrientCenterX[0] != -1 && m_smVisionInfo.g_fSubOrientCenterY[0] != -1)
                                {
                                    fSubROIPositionX = (fPositionX + (m_smVisionInfo.g_fSubOrientCenterX[0] - fSubROIWidth / 2));
                                    fSubROIPositionY = (fPositionY + (m_smVisionInfo.g_fSubOrientCenterY[0] - fSubROIHeight / 2));
                                    //m_Graphic.DrawRectangle(new Pen(Color.Lime), fSubROIPositionX * m_smVisionInfo.g_fScaleX, fSubROIPositionY * m_smVisionInfo.g_fScaleY, fSubROIWidth * m_smVisionInfo.g_fScaleX, fSubROIHeight * m_smVisionInfo.g_fScaleY);

                                    float fSubCenterX = fPositionX + m_smVisionInfo.g_fSubOrientCenterX[0];
                                    float fSubCenterY = fPositionY + m_smVisionInfo.g_fSubOrientCenterY[0];

                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, fAngle, ref newX1, ref newY1);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX - fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, fAngle, ref newX2, ref newY2);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY - fSubROIHeight / 2, fAngle, ref newX3, ref newY3);
                                    Math2.RotateWithAngleAccordingToReferencePoint(fCenterX, fCenterY, fSubCenterX + fSubROIWidth / 2, fSubCenterY + fSubROIHeight / 2, fAngle, ref newX4, ref newY4);

                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[12][0]), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);

                                }
                            }
                        }
                    }
                }
            }

            if (m_smVisionInfo.g_blnViewOrientSetting)
            {
                // 2020-04-08 ZJYEOH : Use search ROI center to draw because the sub Orient ROI position might change 
                int intCenterX = (int)(m_smVisionInfo.g_arrOrientROIs[0][0].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX); //(int)(m_smVisionInfo.g_arrOrientROIs[0][1].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX);
                int intCenterY = (int)(m_smVisionInfo.g_arrOrientROIs[0][0].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrOrientROIs[0][1].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY);
                int intWidth, intHeight;

                intWidth = (int)(m_smVisionInfo.g_arrOrients[0][0].ref_fXTolerance_Pixel * m_smVisionInfo.g_fScaleX);

                intHeight = (int)(m_smVisionInfo.g_arrOrients[0][0].ref_fYTolerance_Pixel * m_smVisionInfo.g_fScaleY);

                m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrPadROIColor[15][0]), (int)(intCenterX - intWidth), (int)(intCenterY - 1), intWidth * 2, 2); //X 
                m_Graphic.FillRectangle(new SolidBrush(m_smVisionInfo.g_arrPadROIColor[15][0]), (int)(intCenterX - 1), (int)(intCenterY - intHeight), 2, intHeight * 2); //Y
            }
        }

        private void DrawPin1Object()
        {
            if (!m_smVisionInfo.g_blnWantPin1)
                return;

            if (!m_smVisionInfo.g_blnDrawPin1Result)
                return;

            if (m_smVisionInfo.g_arrPin1 == null)
                return;

            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (m_smVisionInfo.g_intSelectedImage != m_smVisionInfo.g_arrMarks[0].ref_intPin1ImageNo)
                    return;
            }
            else
            {
                if (m_smVisionInfo.g_intSelectedImage != 0)
                    return;
            }

            if (m_smProductionInfo.g_blnViewInspection)
            {

                for (int u = 0; u < m_smVisionInfo.g_arrPin1.Count; u++)
                {
                    if (m_smVisionInfo.g_arrPin1[u].ref_intFinalResultSelectedTemplate >= 0)
                    {
                        m_smVisionInfo.g_arrPin1[u].DrawFinalResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_intSelectedTemplate);
                    }
                }
            }
        }

        private void Draw2DCodeObject()
        {
            if (!m_smVisionInfo.g_blnWantMark2DCode)
                return;

            if (m_smVisionInfo.g_arrMarkROIs == null || m_smVisionInfo.g_arrMarkROIs.Count == 0)
                return;

            if (m_smVisionInfo.g_arrMarkROIs.Count <= m_smVisionInfo.g_intSelectedUnit)
                return;

            if (m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit].Count < 3)
                return;

            if (m_smVisionInfo.g_strSelectedPage == "Mark" || m_smVisionInfo.g_strSelectedPage == "MarkOrient")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 13)
                {
                    // Read 2D code object
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].Read2DCodeObjects(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][2], m_smVisionInfo.g_int2DCodeType);
                    // Draw 2D code object
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].Draw2DCodeObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                    m_smVisionInfo.g_blnUpdate2DCodeResult = true;
                }
            }

            if (m_smVisionInfo.g_blnDrawMark2DCodeResult && m_smProductionInfo.g_blnViewInspection)
            {
                if (m_smVisionInfo.g_intSelectedImage == 0)// Mark 2D inspection using Image 1. So draw mark only when selected view image is 1.
                {
                    // Draw 2D code object
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].Draw2DCodeObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                }
            }
        }

        /// <summary>
        /// Draw package object
        /// </summary>
        private void DrawPackageObject()
        {
            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                return;

            if (m_smVisionInfo.g_blnPackageInspected)
            {
                if (m_smVisionInfo.g_blnViewSelectedBlobObject)
                {
                    if (m_smVisionInfo.g_arrPackage.Count > 1)
                    {
                        if (m_smVisionInfo.g_intSelectedUnit == 1)
                        {
                            m_smVisionInfo.g_arrPackage[1].DrawMarkViewObjects(m_Graphic, m_smVisionInfo.g_intSelectedBlobNo - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectList.Count, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            m_smVisionInfo.g_arrPackage[1].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                                           m_smVisionInfo.g_intSelectedBlobNo - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetColorDefectListCount(),
                                                                           m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX,
                                                                           m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY,
                                                                           m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawMarkViewObjects(m_Graphic, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                                                                          m_smVisionInfo.g_intSelectedBlobNo - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectList.Count,
                                                                                                          m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX,
                                                                                                          m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY,
                                                                                                          m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle);
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawMarkViewObjects(m_Graphic, m_smVisionInfo.g_intSelectedBlobNo, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                        m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                                                                      m_smVisionInfo.g_intSelectedBlobNo - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectList.Count,
                                                                                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX,
                                                                                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY,
                                                                                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle);
                    }

                }
                else //if (m_smVisionInfo.g_strSelectedPage == "MNPackage" || m_smVisionInfo.g_strSelectedPage == "MNMarkOrient")
                {
                    if (m_smProductionInfo.g_blnViewInspection)
                    {
                        if (m_smVisionInfo.g_blnDrawPkgResult && m_smVisionInfo.g_arrPackageROIs.Count > 0)
                            for (int i = 0; i < m_smVisionInfo.g_arrPackage.Count; i++)
                            {
                                m_smVisionInfo.g_arrPackage[i].DrawMarkViewObjects(m_Graphic, m_smVisionInfo.g_intSelectedImage, m_smVisionInfo.g_arrPackageROIs[i], m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                m_smVisionInfo.g_arrPackage[i].DrawColorDefect(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                                               m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX,
                                                                               m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY,
                                                                               m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle);
                            }
                    }
                }

                //else
                //    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawMarkViewObjects(m_Graphic, true, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit], m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
            }
            else if (m_smVisionInfo.g_blnViewPackageObjectBuilded)
            {
                m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].DrawPackageViewObjects(m_Graphic);
            }
            if (m_smVisionInfo.g_blnViewPackageDefectSetting && m_smVisionInfo.g_intSelectedPackageDefect != -1) // changed else if to if, to draw the roi even nt close the offline test form
            {
                //m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                RectGaugeM4L objGauge = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit];
                //objGauge.Measure(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0], 5);

                float fLeftX = objGauge.ref_pRectCenterPoint.X - (objGauge.ref_fRectWidth / 2);
                float fTopY = objGauge.ref_pRectCenterPoint.Y - (objGauge.ref_fRectHeight / 2);

                if (m_smVisionInfo.g_blnViewPackageAreaDefect)
                {
                    //float fAreaDimX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetDefectAreaParam(m_smVisionInfo.g_intSelectedPackageDefect);
                    float fAreaDimX = 0;
                    if (m_smVisionInfo.g_blnViewPackageTotalAreaDefect)
                        fAreaDimX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetDefectTotalAreaParam(m_smVisionInfo.g_intSelectedPackageDefect);
                    else
                        fAreaDimX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetDefectAreaParam(m_smVisionInfo.g_intSelectedPackageDefect);
                    float fDimX = Convert.ToSingle(Math.Sqrt(fAreaDimX));
                    if (fDimX > 10)
                        m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), 0, 0, fDimX, fDimX);    //fLeftX, fTopY, fDimX, fDimX); // 2019 02 18 - CCENG: Let defect setting drawing always at image 0,0
                    else
                    {
                        m_Graphic.FillRectangle(new SolidBrush(Color.Black), 0, 0, 50, 50);
                        m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), 25 - (int)(fDimX / 2), 25 - (int)(fDimX / 2), fDimX, fDimX);
                    }

                }
                else
                {
                    //float fDimX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetDefectParam(m_smVisionInfo.g_intSelectedPackageDefect);
                    float fDimX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].GetDefectParam(m_smVisionInfo.g_intSelectedPackageDefect, m_smVisionInfo.g_intSelectedPackageLengthType);
                    if (fDimX > 10)
                        m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), 0, 0, fDimX, fDimX);    //fLeftX, fTopY, fDimX, fDimX); // 2019 02 18 - CCENG: Let defect setting drawing always at image 0,0
                    else
                    {
                        m_Graphic.FillRectangle(new SolidBrush(Color.Black), 0, 0, 50, 50);
                        m_Graphic.FillRectangle(new SolidBrush(Color.Cyan), 25 - (int)(fDimX / 2), 25 - (int)(fDimX / 2), fDimX, fDimX);
                    }
                }
            }

            if (m_smVisionInfo.g_blnViewPackageTrainROI)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                {
                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 2 || m_smVisionInfo.g_intLearnStepNo == 3)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[0][0]);
                        else if (m_smVisionInfo.g_intLearnStepNo == 4)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[0][1]);
                        else if (m_smVisionInfo.g_intLearnStepNo == 7)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[1][0]);
                        else if (m_smVisionInfo.g_intLearnStepNo == 15)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[0][2]);
                        else if (m_smVisionInfo.g_intLearnStepNo == 20 || m_smVisionInfo.g_intLearnStepNo == 21)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[0][0]);
                        else if(m_smVisionInfo.g_intLearnStepNo != 22)
                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, "Package ROI", m_smVisionInfo.g_arrPackageROIColor[0][0]);
                    }
                }
            }
            if (m_smVisionInfo.g_blnViewPackageStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);
                //float fCenterX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX; // m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX; //ref_TemplateObjectCenterX
                //float fCenterY = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY; //ref_TemplateObjectCenterY

                //int UnitWidth = (int)m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px;// (int)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIWidth; //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth; //ref_TemplateObjectWidth
                //int UnitHeight = (int)m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px;// (int)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIHeight; //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight; //ref_TemplateObjectHeight

                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X; //ref_TemplateObjectCenterX
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y; //ref_TemplateObjectCenterY

                int UnitWidth = (int)m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth; //ref_TemplateObjectWidth
                int UnitHeight = (int)m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight; //ref_TemplateObjectHeight

                intStartX = (int)Math.Round(fCenterX - (UnitWidth / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round(fCenterY - (UnitHeight / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft;

                if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = (fCenterX + fLengthLeft - UnitWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (fCenterY + fLengthTop - UnitHeight / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (fCenterX - fLengthRight + UnitWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (fCenterY - fLengthBottom + UnitHeight / 2) * m_smVisionInfo.g_fScaleY;
                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), (intStartX + fLengthLeft) * m_smVisionInfo.g_fScaleX, (intStartY + fLengthTop) * m_smVisionInfo.g_fScaleY, (UnitWidth - fLengthRight - fLengthLeft) * m_smVisionInfo.g_fScaleX, (UnitHeight - fLengthBottom - fLengthTop) * m_smVisionInfo.g_fScaleY);

            }
            if (m_smVisionInfo.g_blnViewPackageStartPixelFromEdge_Dark)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);
                //float fCenterX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX; // m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX; //ref_TemplateObjectCenterX
                //float fCenterY = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY; //ref_TemplateObjectCenterY

                //int UnitWidth = (int)m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px;// (int)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIWidth; //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth; //ref_TemplateObjectWidth
                //int UnitHeight = (int)m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px;// (int)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIHeight; //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight; //ref_TemplateObjectHeight

                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X; //ref_TemplateObjectCenterX
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y; //ref_TemplateObjectCenterY

                int UnitWidth = (int)m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth; //ref_TemplateObjectWidth
                int UnitHeight = (int)m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight; //ref_TemplateObjectHeight

                intStartX = (int)Math.Round(fCenterX - (UnitWidth / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round(fCenterY - (UnitHeight / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateBrightDarkROITolerance)
                {
                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Dark;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Dark;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Dark;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Dark;
                }
                else
                {
                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft;
                }

                if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = (fCenterX + fLengthLeft - UnitWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (fCenterY + fLengthTop - UnitHeight / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (fCenterX - fLengthRight + UnitWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (fCenterY - fLengthBottom + UnitHeight / 2) * m_smVisionInfo.g_fScaleY;
                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), (intStartX + fLengthLeft) * m_smVisionInfo.g_fScaleX, (intStartY + fLengthTop) * m_smVisionInfo.g_fScaleY, (UnitWidth - fLengthRight - fLengthLeft) * m_smVisionInfo.g_fScaleX, (UnitHeight - fLengthBottom - fLengthTop) * m_smVisionInfo.g_fScaleY);

            }
            if (m_smProductionInfo.g_blnViewPackageTolerance && m_smVisionInfo.g_blnDrawPkgResult)
            {
                if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX.ToString() != "NaN" && m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY.ToString() != "NaN" &&
    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX.ToString() != "-NaN" && m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY.ToString() != "-NaN" &&
    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX.ToString() != "Infinity" && m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY.ToString() != "Infinity" &&
    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX.ToString() != "-Infinity" && m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY.ToString() != "-Infinity")
                {
                    float fLengthTop = 0;
                    float fLengthRight = 0;
                    float fLengthBottom = 0;
                    float fLengthLeft = 0;

                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft;


                    float fStartX = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX + fLengthLeft - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY + fLengthTop - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX - fLengthRight + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY - fLengthBottom + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;
                    float fUnitWidth = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px;
                    float fUnitHeight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px;

                    int intStartX = (int)Math.Round(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX - (fUnitWidth / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                    int intStartY = (int)Math.Round(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY - (fUnitHeight / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                    if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                    {
                        //2020-11-14 ZJYEOH : Need to rotate package drawing as now no more rotate image
                        PointF p1 = new PointF(0, 0);
                        PointF p2 = new PointF(0, 0);
                        PointF p3 = new PointF(0, 0);
                        PointF p4 = new PointF(0, 0);
                        Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                            new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p1);
                        Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                            new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p2);
                        Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                            new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p3);
                        Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                            m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                            new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p4);


                        m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p1.X, p1.Y, p2.X, p2.Y);

                        m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p2.X, p2.Y, p4.X, p4.Y);

                        m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p3.X, p3.Y, p4.X, p4.Y);

                        m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), p1.X, p1.Y, p3.X, p3.Y);
                    }
                    else
                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][0]), (intStartX + fLengthLeft) * m_smVisionInfo.g_fScaleX, (intStartY + fLengthTop) * m_smVisionInfo.g_fScaleY, (fUnitWidth - fLengthRight - fLengthLeft) * m_smVisionInfo.g_fScaleX, (fUnitHeight - fLengthBottom - fLengthTop) * m_smVisionInfo.g_fScaleY);


                    if (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_blnSeperateBrightDarkROITolerance)
                    {
                        fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Dark;
                        fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Dark;
                        fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Dark;
                        fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Dark;


                        fStartX = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX + fLengthLeft - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                        fStartY = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY + fLengthTop - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;
                        fEndX = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX - fLengthRight + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                        fEndY = (m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY - fLengthBottom + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;
                        fUnitWidth = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px;
                        fUnitHeight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px;

                        intStartX = (int)Math.Round(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX - (fUnitWidth / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                        intStartY = (int)Math.Round(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY - (fUnitHeight / 2), 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                        if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                        {
                            //2020-11-14 ZJYEOH : Need to rotate package drawing as now no more rotate image
                            PointF p1 = new PointF(0, 0);
                            PointF p2 = new PointF(0, 0);
                            PointF p3 = new PointF(0, 0);
                            PointF p4 = new PointF(0, 0);
                            Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p1);
                            Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p2);
                            Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p3);
                            Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultAngle, ref p4);


                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p1.X, p1.Y, p2.X, p2.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p2.X, p2.Y, p4.X, p4.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p3.X, p3.Y, p4.X, p4.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), p1.X, p1.Y, p3.X, p3.Y);
                        }
                        else
                            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][1]), (intStartX + fLengthLeft) * m_smVisionInfo.g_fScaleX, (intStartY + fLengthTop) * m_smVisionInfo.g_fScaleY, (fUnitWidth - fLengthRight - fLengthLeft) * m_smVisionInfo.g_fScaleX, (fUnitHeight - fLengthBottom - fLengthTop) * m_smVisionInfo.g_fScaleY);
                    }
                }

            }

            if (m_smVisionInfo.g_blnViewMoldStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                float fLengthTopInner = 0;
                float fLengthRightInner = 0;
                float fLengthBottomInner = 0;
                float fLengthLeftInner = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                int intExtendXInner = 0;
                int intExtendX2Inner = 0;
                int intExtendYInner = 0;
                int intExtendY2Inner = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);
                //float fCenterX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX; //ref_TemplateObjectCenterX
                //float fCenterY = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY; //ref_TemplateObjectCenterY

                //int UnitWidth = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px * m_smVisionInfo.g_fScaleX); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth; //ref_TemplateObjectWidth
                //int UnitHeight = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px * m_smVisionInfo.g_fScaleY); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight; //ref_TemplateObjectHeight

                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X; //ref_TemplateObjectCenterX
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y; //ref_TemplateObjectCenterY

                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX); //ref_TemplateObjectWidth
                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY); //ref_TemplateObjectHeight

                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Mold;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Mold;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Mold;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Mold;

                fLengthTopInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdgeInner_Mold;
                fLengthRightInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRightInner_Mold;
                fLengthBottomInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottomInner_Mold;
                fLengthLeftInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeftInner_Mold;

                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                intExtendXInner = (int)(fLengthLeftInner * m_smVisionInfo.g_fScaleX);
                intExtendX2Inner = (int)(fLengthRightInner * m_smVisionInfo.g_fScaleX);
                intExtendYInner = (int)(fLengthTopInner * m_smVisionInfo.g_fScaleY);
                intExtendY2Inner = (int)(fLengthBottomInner * m_smVisionInfo.g_fScaleY);

                if (m_smVisionInfo.g_blnWantNonRotateInspection && m_smVisionInfo.g_intLearnStepNo != 12 && m_smVisionInfo.g_intLearnStepNo != 13)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = (fCenterX - fLengthLeft - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (fCenterY - fLengthTop - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (fCenterX + fLengthRight + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (fCenterY + fLengthBottom + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p1.X, p1.Y, p3.X, p3.Y);

                    fStartX = (fCenterX - fLengthLeftInner - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fStartY = (fCenterY - fLengthTopInner - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    fEndX = (fCenterX + fLengthRightInner + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fEndY = (fCenterY + fLengthBottomInner + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    p1 = new PointF(0, 0);
                    p2 = new PointF(0, 0);
                    p3 = new PointF(0, 0);
                    p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                {
                    //Top
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendY, UnitWidth, intExtendY);

                    //Right
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth, intStartY, intExtendX2, UnitHeight);

                    //Bottom
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + UnitHeight, UnitWidth, intExtendY2);

                    //Left
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendX, intStartY, intExtendX, UnitHeight);

                    //Top
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendYInner, UnitWidth, intExtendYInner);

                    //Right
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth, intStartY, intExtendX2Inner, UnitHeight);

                    //Bottom
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + UnitHeight, UnitWidth, intExtendY2Inner);

                    //Left
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendXInner, intStartY, intExtendXInner, UnitHeight);
                }

            }

            if (m_smVisionInfo.g_blnViewDarkField2StartPixelFromEdge || m_smVisionInfo.g_blnViewDarkField3StartPixelFromEdge || m_smVisionInfo.g_blnViewDarkField4StartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);

                m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0], m_smVisionInfo.g_objWhiteImage);

                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX);
                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY);
                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                if (m_smVisionInfo.g_blnViewDarkField2StartPixelFromEdge)
                {
                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField2;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField2;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField2;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField2;
                }
                else if (m_smVisionInfo.g_blnViewDarkField3StartPixelFromEdge)
                {
                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField3;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField3;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField3;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField3;
                }
                else if (m_smVisionInfo.g_blnViewDarkField4StartPixelFromEdge)
                {
                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField4;
                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField4;
                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField4;
                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField4;
                }

                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);



                if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = 0, fStartY = 0, fEndX = 0, fEndY = 0;

                    if (m_smVisionInfo.g_blnViewDarkField2StartPixelFromEdge)
                    {
                        fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField2 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField2 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                        fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField2 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField2 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    }
                    else if (m_smVisionInfo.g_blnViewDarkField3StartPixelFromEdge)
                    {
                        fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField3 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField3 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                        fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField3 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField3 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    }
                    else if (m_smVisionInfo.g_blnViewDarkField4StartPixelFromEdge)
                    {
                        fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField4 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField4 - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                        fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField4 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                        fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField4 + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    }

                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), intStartX + intExtendX, intStartY + intExtendY, UnitWidth - intExtendX - intExtendX2,
                                            UnitHeight - intExtendY - intExtendY2);


            }

            if (m_smVisionInfo.g_blnViewChipStartPixelFromEdge)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                Pen pen = new Pen(Color.Red);
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                    pen = new Pen(Color.Cyan);

                m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0], m_smVisionInfo.g_objWhiteImage);

                //float fCenterX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX; //ref_TemplateObjectCenterX
                //float fCenterY = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY; //ref_TemplateObjectCenterY

                //int UnitWidth = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px * m_smVisionInfo.g_fScaleX); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth; //ref_TemplateObjectWidth
                //int UnitHeight = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px * m_smVisionInfo.g_fScaleY); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight; //ref_TemplateObjectHeight


                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X; //ref_TemplateObjectCenterX
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y; //ref_TemplateObjectCenterY

                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX); //ref_TemplateObjectWidth
                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY); //ref_TemplateObjectHeight

                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip;

                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                int intInwardStartX = intStartX + intExtendX;
                int intInwardStartY = intStartY + intExtendY;
                int intInwardWdith = intStartX + UnitWidth - intExtendX2 - intInwardStartX;
                int intInwardHeight = intStartY + UnitHeight - intExtendY2 - intInwardStartY;

                //For OutWard
                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip;

                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                int intOutwardStartX = intStartX + intExtendX;
                int intOutwardStartY = intStartY + intExtendY;
                int intOutwardWdith = intStartX + UnitWidth - intExtendX2 - intOutwardStartX;
                int intOutwardHeight = intStartY + UnitHeight - intExtendY2 - intOutwardStartY;

                if (m_smVisionInfo.g_blnWantNonRotateInspection && m_smVisionInfo.g_intLearnStepNo != 8 && m_smVisionInfo.g_intLearnStepNo != 9)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p1.X, p1.Y, p3.X, p3.Y);

                    fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    p1 = new PointF(0, 0);
                    p2 = new PointF(0, 0);
                    p3 = new PointF(0, 0);
                    p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                {
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), intOutwardStartX, intOutwardStartY, intOutwardWdith, intOutwardHeight);
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][0]), intInwardStartX, intInwardStartY, intInwardWdith, intInwardHeight);
                }

            }
            if (m_smVisionInfo.g_blnViewChipStartPixelFromEdge_Dark)
            {
                float fLengthTop = 0;
                float fLengthRight = 0;
                float fLengthBottom = 0;
                float fLengthLeft = 0;
                int intStartX = 0;
                int intStartY = 0;
                int intExtendX = 0;
                int intExtendX2 = 0;
                int intExtendY = 0;
                int intExtendY2 = 0;
                //Pen pen = new Pen(Color.Red);
                //if (m_smVisionInfo.g_intLearnStepNo == 3)
                //    pen = new Pen(Color.Cyan);

                m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].Measure_WithDontCareArea(m_smVisionInfo.g_arrImages, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0], m_smVisionInfo.g_objWhiteImage);

                //float fCenterX = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterX; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX; //ref_TemplateObjectCenterX
                //float fCenterY = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultCenterY; //m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY; //ref_TemplateObjectCenterY

                //int UnitWidth = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultWidth_px * m_smVisionInfo.g_fScaleX); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectWidth; //ref_TemplateObjectWidth
                //int UnitHeight = (int)(m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_fPackageResultHeight_px * m_smVisionInfo.g_fScaleY); //(int)m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectHeight; //ref_TemplateObjectHeight


                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X; //ref_TemplateObjectCenterX
                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y; //ref_TemplateObjectCenterY

                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX); //ref_TemplateObjectWidth
                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY); //ref_TemplateObjectHeight

                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip_Dark;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip_Dark;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip_Dark;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip_Dark;

                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                int intInwardStartX = intStartX + intExtendX;
                int intInwardStartY = intStartY + intExtendY;
                int intInwardWdith = intStartX + UnitWidth - intExtendX2 - intInwardStartX;
                int intInwardHeight = intStartY + UnitHeight - intExtendY2 - intInwardStartY;

                //For OutWard
                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip_Dark;
                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip_Dark;
                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip_Dark;
                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip_Dark;

                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                int intOutwardStartX = intStartX + intExtendX;
                int intOutwardStartY = intStartY + intExtendY;
                int intOutwardWdith = intStartX + UnitWidth - intExtendX2 - intOutwardStartX;
                int intOutwardHeight = intStartY + UnitHeight - intExtendY2 - intOutwardStartY;

                if (m_smVisionInfo.g_blnWantNonRotateInspection && m_smVisionInfo.g_intLearnStepNo != 8 && m_smVisionInfo.g_intLearnStepNo != 10)//m_smProductionInfo.g_blnWantNonRotateInspection
                {
                    float fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip_Dark - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip_Dark - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    float fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip_Dark + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    float fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip_Dark + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    PointF p1 = new PointF(0, 0);
                    PointF p2 = new PointF(0, 0);
                    PointF p3 = new PointF(0, 0);
                    PointF p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p1.X, p1.Y, p3.X, p3.Y);

                    fStartX = (fCenterX + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip_Dark - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fStartY = (fCenterY + m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip_Dark - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    fEndX = (fCenterX - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip_Dark + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX;
                    fEndY = (fCenterY - m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip_Dark + m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY;
                    p1 = new PointF(0, 0);
                    p2 = new PointF(0, 0);
                    p3 = new PointF(0, 0);
                    p4 = new PointF(0, 0);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p1);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p2);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p3);
                    Math2.GetNewXYAfterRotate_360deg(fCenterX * m_smVisionInfo.g_fScaleX,
                        fCenterY * m_smVisionInfo.g_fScaleY,
                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectAngle, ref p4);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p1.X, p1.Y, p2.X, p2.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p2.X, p2.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p3.X, p3.Y, p4.X, p4.Y);

                    m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), p1.X, p1.Y, p3.X, p3.Y);
                }
                else
                {
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), intOutwardStartX, intOutwardStartY, intOutwardWdith, intOutwardHeight);
                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[2][1]), intInwardStartX, intInwardStartY, intInwardWdith, intInwardHeight);
                }

            }
            if (m_smVisionInfo.g_blnDrawPkgResult) //m_smProductionInfo.g_blnViewInspection && 
            {
                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)    // this i index represent g_intUnitsOnImage. (MO have 1 only, IPM have 2 depends on quantity of pocket view)
                {
                    RectGaugeM4L objGauge;
                    RectGaugeM4L objGauge2;
                    bool blnDrawGaugeSize = true;
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "BottomOrient":
                        case "BottomPosition":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLiPkg":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLiPkg":
                            blnDrawGaugeSize = m_smVisionInfo.g_arrPackage[i].ref_blnPkgSizeInspectionDone & m_smProductionInfo.g_blnViewPackageResult;
                            //if (m_smVisionInfo.g_blnDisableMOGauge)
                            //{
                            //    if (m_smVisionInfo.g_intSelectedImage == 0 || m_smVisionInfo.g_intSelectedImage == 1)
                            //    {
                            //        objGauge = m_smVisionInfo.g_arrOrientGauge[i];
                            //        objGauge2 = m_smVisionInfo.g_arrOrientGauge[i];
                            //    }
                            //    else
                            //    {
                            //        objGauge = m_smVisionInfo.g_arrOrientGauge[i];
                            //        objGauge2 = m_smVisionInfo.g_arrPackageGauge2[i];
                            //    }
                            //}
                            //else
                            //{
                            //    //if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            //    //{
                            //    //    objGauge = m_smVisionInfo.g_arrOrientGauge[i];
                            //    //}
                            //    //else
                            //    {
                            //        objGauge = m_smVisionInfo.g_arrPackageGauge[i]; 
                            //    }

                            //    //if (m_smVisionInfo.g_intSelectedImage == 0)
                            //    //{
                            //    //    objGauge2 = m_smVisionInfo.g_arrOrientGauge[i];
                            //    //}
                            //    //else
                            //    {
                            //        objGauge2 = m_smVisionInfo.g_arrPackageGauge[i];
                            //    }
                            //}

                            if (blnDrawGaugeSize)
                            {
                                //if (m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                {
                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnDrawPkgGaugeResult)
                                    {
                                        // 2020 02 10 - CCENG: g_objGauge_PkgSize is used to measure unit edge, not g_arrPackageGaugeM4L
                                        //if (m_smVisionInfo.g_arrPackageGaugeM4L.Count > 0)
                                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        if (i == 0)
                                        {
                                            if (m_smVisionInfo.g_objGauge_PkgSize != null)
                                                m_smVisionInfo.g_objGauge_PkgSize.DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_objGauge_PkgSize2 != null)
                                                m_smVisionInfo.g_objGauge_PkgSize2.DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                    else
                                    {
                                        // 2020 02 08 - Display gauge drawing if image no rotated. (this happen when user check package size only, no check mark and no check package defect.)
                                        if (!m_smVisionInfo.g_arrblnImageRotated[m_smVisionInfo.g_intSelectedImage])
                                        {
                                            // 2020 02 10 - CCENG: g_objGauge_PkgSize is used to measure unit edge, not g_arrPackageGaugeM4L
                                            //if (m_smVisionInfo.g_arrPackageGaugeM4L.Count > 0)
                                            //    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            if (i == 0)
                                            {
                                                if (m_smVisionInfo.g_objGauge_PkgSize != null)
                                                    m_smVisionInfo.g_objGauge_PkgSize.DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                            else
                                            {
                                                if (m_smVisionInfo.g_objGauge_PkgSize2 != null)
                                                    m_smVisionInfo.g_objGauge_PkgSize2.DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                            }
                                        }
                                        else // 2020 02 08 - Display 0 deg rectange if image rotated.
                                        {

                                            if (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX.ToString() != "NaN" && m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY.ToString() != "NaN" &&
                                                m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX.ToString() != "-NaN" && m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY.ToString() != "-NaN" &&
                                                m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX.ToString() != "Infinity" && m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY.ToString() != "Infinity" &&
                                                m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX.ToString() != "-Infinity" && m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY.ToString() != "-Infinity")
                                            {

                                                //m_Graphic.DrawRectangle(new Pen(Color.Lime), (int)Math.Round((m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero) - 1,  // -1 to make sure the rectangle line does not cover the first point
                                                //                                             (int)Math.Round((m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero) - 1,
                                                //                                             (int)Math.Round((m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px + 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                                //                                             (int)Math.Round((m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px + 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));

                                                float fStartX = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                                                float fStartY = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;
                                                float fEndX = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX + m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleX;
                                                float fEndY = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY + m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleY;

                                                if (m_smVisionInfo.g_intOrientResult[0] == 1 || m_smVisionInfo.g_intOrientResult[0] == 3)
                                                {
                                                    fStartX = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleX;
                                                    fStartY = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY - m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleY;
                                                    fEndX = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX + m_smVisionInfo.g_arrPackage[i].ref_fPackageResultHeight_px / 2) * m_smVisionInfo.g_fScaleX;
                                                    fEndY = (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY + m_smVisionInfo.g_arrPackage[i].ref_fPackageResultWidth_px / 2) * m_smVisionInfo.g_fScaleY;
                                                }

                                                //g.DrawRectangle(new Pen(Color.Cyan), objSearchROI.ref_ROIOriPositionX+objROI.ref_ROIPositionX, objSearchROI.ref_ROIOriPositionY + objROI.ref_ROIPositionY, objROI.ref_ROIWidth, objROI.ref_ROIHeight);

                                                //if (m_smVisionInfo.g_blnViewRotatedImage)
                                                //{ }
                                                if (m_smVisionInfo.g_blnWantNonRotateInspection)//m_smProductionInfo.g_blnWantNonRotateInspection
                                                {
                                                    //2020-11-14 ZJYEOH : Need to rotate package drawing as now no more rotate image
                                                    PointF p1 = new PointF(0, 0);
                                                    PointF p2 = new PointF(0, 0);
                                                    PointF p3 = new PointF(0, 0);
                                                    PointF p4 = new PointF(0, 0);
                                                    Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                                        new PointF(fStartX, fStartY), m_smVisionInfo.g_arrPackage[i].ref_fPackageResultAngle, ref p1);
                                                    Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                                        new PointF(fEndX, fStartY), m_smVisionInfo.g_arrPackage[i].ref_fPackageResultAngle, ref p2);
                                                    Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                                        new PointF(fStartX, fEndY), m_smVisionInfo.g_arrPackage[i].ref_fPackageResultAngle, ref p3);
                                                    Math2.GetNewXYAfterRotate_360deg(m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY,
                                                        new PointF(fEndX, fEndY), m_smVisionInfo.g_arrPackage[i].ref_fPackageResultAngle, ref p4);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[0])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), p1.X, p1.Y, p2.X, p2.Y);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), p1.X, p1.Y, p2.X, p2.Y);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[1])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), p2.X, p2.Y, p4.X, p4.Y);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), p2.X, p2.Y, p4.X, p4.Y);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[2])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), p3.X, p3.Y, p4.X, p4.Y);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), p3.X, p3.Y, p4.X, p4.Y);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[3])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), p1.X, p1.Y, p3.X, p3.Y);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), p1.X, p1.Y, p3.X, p3.Y);
                                                }
                                                else
                                                {
                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[0])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), fStartX, fStartY, fEndX, fStartY);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), fStartX, fStartY, fEndX, fStartY);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[1])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), fEndX, fStartY, fEndX, fEndY);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), fEndX, fStartY, fEndX, fEndY);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[2])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), fStartX, fEndY, fEndX, fEndY);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), fStartX, fEndY, fEndX, fEndY);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnLineResultOK[3])
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), fStartX, fStartY, fStartX, fEndY);
                                                    else
                                                        m_Graphic.DrawLine(new Pen(Color.Red), fStartX, fStartY, fStartX, fEndY);

                                                    if (m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX != 0 && m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY != 0)
                                                    {
                                                        PointF pRectCenterPoint = new PointF();
                                                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                                                        {
                                                            pRectCenterPoint.X = (int)Math.Round((float)m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterX * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                                                            pRectCenterPoint.Y = (int)Math.Round((float)m_smVisionInfo.g_arrPackage[i].ref_fPackageResultCenterY * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                                                        }

                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), pRectCenterPoint.X - 5, pRectCenterPoint.Y - 5, pRectCenterPoint.X + 5, pRectCenterPoint.Y + 5);
                                                        m_Graphic.DrawLine(new Pen(Color.LightGreen), pRectCenterPoint.X + 5, pRectCenterPoint.Y - 5, pRectCenterPoint.X - 5, pRectCenterPoint.Y + 5);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //else
                                {
                                    // Draw package size with angle
                                }


                                //if (m_smVisionInfo.g_intOrientResult[0] == 0 || m_smVisionInfo.g_intOrientResult[0] == 2)
                                //{
                                //    m_Graphic.DrawRectangle(new Pen(Color.Lime), (int)Math.Round((objGauge.ref_ObjectCenterX - objGauge.ref_ObjectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero) - 1,  // -1 to make sure the rectangle line does not cover the first point
                                //                                                 (int)Math.Round((objGauge.ref_ObjectCenterY - objGauge.ref_ObjectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero) - 1,
                                //                                                 (int)Math.Round((objGauge.ref_ObjectWidth + 1) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                //                                                 (int)Math.Round((objGauge.ref_ObjectHeight + 1) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                                //}
                                //else
                                //{
                                //    m_Graphic.DrawRectangle(new Pen(Color.Lime), (int)Math.Round((objGauge2.ref_ObjectCenterX - objGauge.ref_ObjectHeight / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero) - 1,  // -1 to make sure the rectangle line does not cover the first point
                                //                                                 (int)Math.Round((objGauge2.ref_ObjectCenterY - objGauge.ref_ObjectWidth / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero) - 1,
                                //                                                 (int)Math.Round((objGauge.ref_ObjectHeight + 1) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                //                                                 (int)Math.Round((objGauge.ref_ObjectWidth + 1) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                                //}
                            }
                            else
                            {
                                if (m_smProductionInfo.g_blnViewPackageResult)
                                {
                                    if (m_smVisionInfo.g_arrPackage[i].ref_blnDrawPkgGaugeResult)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L.Count > 0)
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawGaugeResult_ResultLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                }
                            }
                            break;
                        default:
                            objGauge = m_smVisionInfo.g_arrPackageGaugeM4L[i];
                            objGauge2 = m_smVisionInfo.g_arrPackageGauge2M4L[i];
                            break;
                    }

                    //if (blnDrawGaugeSize)
                    //{
                    //    if (m_smVisionInfo.g_intOrientResult[0] == 0 || m_smVisionInfo.g_intOrientResult[0] == 2)
                    //    {
                    //        m_Graphic.DrawRectangle(new Pen(Color.Lime), (int)Math.Round((objGauge.ref_ObjectCenterX - objGauge.ref_ObjectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero) - 1,  // -1 to make sure the rectangle line does not cover the first point
                    //                                                     (int)Math.Round((objGauge.ref_ObjectCenterY - objGauge.ref_ObjectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero) - 1,
                    //                                                     (int)Math.Round((objGauge.ref_ObjectWidth + 1) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                    //                                                     (int)Math.Round((objGauge.ref_ObjectHeight + 1) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                    //    }
                    //    else
                    //    {
                    //        m_Graphic.DrawRectangle(new Pen(Color.Lime), (int)Math.Round((objGauge2.ref_ObjectCenterX - objGauge.ref_ObjectHeight / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero) - 1,  // -1 to make sure the rectangle line does not cover the first point
                    //                                                     (int)Math.Round((objGauge2.ref_ObjectCenterY - objGauge.ref_ObjectWidth / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero) - 1,
                    //                                                     (int)Math.Round((objGauge.ref_ObjectHeight + 1) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                    //                                                     (int)Math.Round((objGauge.ref_ObjectWidth + 1) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
                    //    }
                    //}

                }
            }

            if (m_smVisionInfo.g_blnViewCopperObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawCopperObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewOxidationObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawOxidationObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewWOBObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawWOBObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewBurrObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawBurrObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewLatentScratchObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawLatentScratchObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewChipObject)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawChipObjects(m_Graphic);
            }

            if (m_smVisionInfo.g_blnViewColorImage && m_smVisionInfo.g_blnViewChipROI)
            {
                m_smVisionInfo.g_arrColorPackage[0].DrawChipInspectionArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
            }
        }

        /// <summary>
        /// Draw all types of ROI
        /// </summary>
        private void DrawROI()
        {
            if (m_smVisionInfo.g_blnViewROI)
            {
                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "MNOrient":
                    case "MNMarkOrient":
                    case "MNPackage":
                        if (m_smProductionInfo.g_blnViewSearchROI)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                            {
                                m_smVisionInfo.g_arrOrientROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[i][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                            }
                        }

                        if (m_smVisionInfo.g_arrLeadROIs != null)
                        {

                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                                    else
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                                }
                            }
                        }
                        break;
                    case "MarkOtherSettingForm":
                        if (m_smProductionInfo.g_blnViewSearchROI)
                        {
                            if (m_smVisionInfo.g_intSelectedSetting == 1)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                                {
                                    if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                        continue;

                                    if (m_smVisionInfo.g_blnLeadInspected)
                                    {
                                        if (m_smVisionInfo.g_arrInspectLeadROI[i] != null)
                                        {
                                            if (m_smVisionInfo.g_arrInspectLeadROI[i].GetROIHandle())
                                                m_smVisionInfo.g_arrInspectLeadROI[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                                            else
                                                m_smVisionInfo.g_arrInspectLeadROI[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                            {
                                                if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                                    m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                                                else
                                                    m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                        {
                                            if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                                m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                                            else
                                                m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                                        }
                                    }
                                }

                            }
                            else if (m_smVisionInfo.g_intSelectedSetting == 2)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                {
                                    m_smVisionInfo.g_arrPackageROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                }
                            }
                            else
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                                {
                                    if(m_smVisionInfo.g_arrOrientROIs[i].Count > 0)
                                    m_smVisionInfo.g_arrOrientROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[i][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                }
                            }
                        }
                        break;
                    case "BottomOrient":
                    case "BottomPosition":
                    case "Orient":
                    case "Mark":
                    case "MarkOrient":
                    case "MOLi":
                    case "OCR":
                        {
                            if (m_smVisionInfo.g_blnViewSearchROI)
                            {
                                if (m_smVisionInfo.g_blnDisableMOGauge)
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrPackageROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrOrientROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[i][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                    }
                                }

                            }
                            else if (m_smVisionInfo.g_blnViewMOGauge)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                                {
                                    m_smVisionInfo.g_arrOrientGaugeM4L[i].SetEdgeROIPlacementLimit2(m_smVisionInfo.g_arrOrientROIs[i][0]);
                                    m_smVisionInfo.g_arrOrientGaugeM4L[i].AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                    if (m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_blnDrawDraggingBox)
                                    {
                                        m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkOrientROIColor[7][0]);
                                    }
                                }

                                for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrOrientGaugeM4L[i].ref_blnDrawDraggingBox)
                                    {
                                        m_smVisionInfo.g_arrOrientGaugeM4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                }
                            }
                            else if (m_smVisionInfo.g_blnViewUnitROI)
                            {
                                int intUnitROICenterX = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROICenterX;
                                int intUnitROICenterY = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROICenterY;
                                //int intUnitROICenterX = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIPositionX + m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROICenterX;
                                //int intUnitROICenterY = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROIPositionY + m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ref_ROICenterY;

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[m_smVisionInfo.g_intSelectedUnit][0]);

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].GetROIHandle(), 2, m_smVisionInfo.g_arrMarkOrientROIColor[4][0]);
                            }
                            else if (m_smVisionInfo.g_blnViewUnitSurfaceROI)
                            {
                                int intUnitROICenterX = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].ref_ROITotalX + m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].ref_ROIWidth / 2;
                                int intUnitROICenterY = m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].ref_ROITotalY + m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].ref_ROIHeight / 2;

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[m_smVisionInfo.g_intSelectedUnit][0]);

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].GetROIHandle(), 5);
                            }
                            else if (m_smVisionInfo.g_blnViewOrientTrainROI)
                            {
                                int intIndex = m_smVisionInfo.g_intSelectedUnit;

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].CheckROIParent();
                                m_smVisionInfo.g_arrOrientROIs[intIndex][1].CheckROIParent();

                                m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                    m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][0].GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[m_smVisionInfo.g_intSelectedUnit][0]);

                                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                    m_smVisionInfo.g_arrOrientROIs[intIndex][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[intIndex][1].GetROIHandle(), 1, m_smVisionInfo.g_arrMarkOrientROIColor[4][0]);
                                else
                                    m_smVisionInfo.g_arrOrientROIs[intIndex][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[intIndex][1].GetROIHandle(), 1, m_smVisionInfo.g_arrMarkOrientROIColor[3][0]);

                                if (m_smVisionInfo.g_blnViewSubROI)
                                {
                                    if (m_smVisionInfo.g_arrOrientROIs[intIndex].Count > 2)
                                        m_smVisionInfo.g_arrOrientROIs[intIndex][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrOrientROIs[intIndex][2].GetROIHandle(), 2, m_smVisionInfo.g_arrMarkOrientROIColor[3][0]);
                                }
                            }
                            else if (m_smVisionInfo.g_blnViewPin1TrainROI)
                            {
                                int intIndex = m_smVisionInfo.g_intSelectedUnit;

                                m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                    m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.GetROIHandle(), 0, m_smVisionInfo.g_arrMarkOrientROIColor[m_smVisionInfo.g_intSelectedUnit][0]);

                                m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objPin1ROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objPin1ROI.GetROIHandle(), 2, m_smVisionInfo.g_arrMarkOrientROIColor[5][0]);

                                if (m_smVisionInfo.g_arrMarks.Count > 0 && m_smVisionInfo.g_arrMarks[0].ref_intPin1PositionControl > 0)
                                {
                                    m_Graphic.DrawLine(new Pen(Color.Blue),
                                        m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROICenterX * m_smVisionInfo.g_fScaleX,
                                        m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                        m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROICenterX * m_smVisionInfo.g_fScaleX,
                                        (m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIPositionY + m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                    m_Graphic.DrawLine(new Pen(Color.Blue),
                                        m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                       m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROICenterY * m_smVisionInfo.g_fScaleY,
                                       (m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIPositionX + m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                       m_smVisionInfo.g_arrPin1[m_smVisionInfo.g_intSelectedUnit].ref_objSearchROI.ref_ROICenterY * m_smVisionInfo.g_fScaleY);
                                }
                            }
                            else if (m_smVisionInfo.g_blnViewMarkTrainROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                                {
                                    if (i != m_smVisionInfo.g_intSelectedUnit)
                                        continue;

                                    m_smVisionInfo.g_arrMarkROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkROIs[i][1].GetROIHandle(), 1, m_smVisionInfo.g_arrMarkOrientROIColor[2][0]);
                                }
                                if (m_smVisionInfo.g_intLearnStepNo == 14)
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                                    {
                                        m_smVisionInfo.g_arrMarkROIs[0][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkROIs[i][1].GetROIHandle(), 1, m_smVisionInfo.g_arrMarkOrientROIColor[2][0]);
                                    }

                                    for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                                    {
                                        if (m_smVisionInfo.g_intSelectedUnit < m_smVisionInfo.g_arrPolygon_Mark.Count && i < m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit].Count)
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_intFormMode == 0)
                                                m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            else if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_intFormMode == 1)
                                                m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            else if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_intFormMode == 2)
                                            {
                                                if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].ref_arrPoints.Count > 0)
                                                    m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][i].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                            }

                                            if (m_smVisionInfo.g_intSelectedDontCareROIIndex == i)
                                                m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrMarkOrientROIColor[6][0]);
                                            else
                                                m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].GetROIHandle(), 12, m_smVisionInfo.g_arrMarkOrientROIColor[6][0]);

                                            //if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedTemplate)
                                            //{
                                            //    if (m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 0)
                                            //        m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            //    else if (m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 1)
                                            //        m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrMarkDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            //    else if (m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                                            //    {
                                            //        if (m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].ref_arrPoints.Count > 0)
                                            //            m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_Mark[i][m_smVisionInfo.g_intSelectedTemplate].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                            //    }

                                            //    if (m_smVisionInfo.g_intSelectedDontCareROIIndex == i)
                                            //        m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12);
                                            //    else
                                            //        m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].GetROIHandle(), 12);
                                            //}
                                        }
                                    }

                                    //for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                                    //{
                                    //    if (m_smVisionInfo.g_intSelectedDontCareROIIndex == i)
                                    //        m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12);
                                    //    else
                                    //        m_smVisionInfo.g_arrMarkDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkDontCareROIs[i].GetROIHandle(), 12);
                                    //}

                                }
                            }
                            else if (m_smVisionInfo.g_blnViewMark2DCodeROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                                {
                                    if (i != m_smVisionInfo.g_intSelectedUnit)
                                        continue;

                                    m_smVisionInfo.g_arrMarkROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrMarkROIs[i][2].GetROIHandle(), 1, m_smVisionInfo.g_arrMarkOrientROIColor[9][0]);
                                }
                            }
                        }
                        break;
                    case "ColorPackage":
                    case "Package":
                        {
                            if (m_smVisionInfo.g_blnViewSearchROI)
                            {
                                if (m_smVisionInfo.g_intLearnStepNo == 1)
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_blnDrawDraggingBox)
                                        {
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].SetEdgeROIPlacementLimit2(m_smVisionInfo.g_arrPackageROIs[i][0]);
                                            //m_smVisionInfo.g_arrPackageGauge2M4L[i].AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIColor[5][1]);
                                        }
                                    }

                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGauge2M4L[i].ref_blnDrawDraggingBox)
                                        {
                                            m_smVisionInfo.g_arrPackageGauge2M4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                        {
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].SetEdgeROIPlacementLimit2(m_smVisionInfo.g_arrPackageROIs[i][0]);
                                            //m_smVisionInfo.g_arrPackageGaugeM4L[i].AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIColor[5][0]);
                                        }
                                    }

                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                    {
                                        if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                        {
                                            m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }

                                //for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                //{
                                //    //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                //    //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);

                                //    //if (!m_smVisionInfo.g_arrPackageROIs[i][0].CheckROIParent())
                                //    //    m_smVisionInfo.g_arrPackageROIs[i][0].AttachImage(m_smVisionInfo.g_arrImages[0]);

                                //    //m_smVisionInfo.g_arrPackageROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][0].GetROIHandle(), 0);

                                //    //if (m_smVisionInfo.g_blnViewUnitROI)
                                //    //    m_smVisionInfo.g_arrPackageROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][1].GetROIHandle(), 2);
                                //}
                            }
                            if (m_smVisionInfo.g_blnViewPackageTrainROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                    {
                                        if (m_smVisionInfo.g_intLearnStepNo == 2 || m_smVisionInfo.g_intLearnStepNo == 3)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][0]);
                                        else if (m_smVisionInfo.g_intLearnStepNo == 4)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][1]);
                                        else if (m_smVisionInfo.g_intLearnStepNo == 7)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[1][0]);
                                        else if (m_smVisionInfo.g_intLearnStepNo == 15)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][2]);
                                        else if (m_smVisionInfo.g_intLearnStepNo == 20 || m_smVisionInfo.g_intLearnStepNo == 21)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][0]);
                                        else if (m_smVisionInfo.g_intLearnStepNo != 22)
                                            m_smVisionInfo.g_arrPackageROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][2].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][0]);
                                    }
                                }
                            }
                            else if (m_smVisionInfo.g_blnViewPackageMaskROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                {
                                    for (int j = 3; j < m_smVisionInfo.g_arrPackageROIs[i].Count; j++)
                                    {
                                        m_smVisionInfo.g_arrPackageROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[i][j].GetROIHandle(), j);
                                    }
                                }
                            }
                            if (m_smVisionInfo.g_intLearnStepNo == 12 || m_smVisionInfo.g_intLearnStepNo == 13)
                            {
                                float fLengthTop = 0;
                                float fLengthRight = 0;
                                float fLengthBottom = 0;
                                float fLengthLeft = 0;
                                float fLengthTopInner = 0;
                                float fLengthRightInner = 0;
                                float fLengthBottomInner = 0;
                                float fLengthLeftInner = 0;
                                int intStartX = 0;
                                int intStartY = 0;
                                int intExtendX = 0;
                                int intExtendX2 = 0;
                                int intExtendY = 0;
                                int intExtendY2 = 0;
                                int intExtendXInner = 0;
                                int intExtendX2Inner = 0;
                                int intExtendYInner = 0;
                                int intExtendY2Inner = 0;
                                Pen pen = new Pen(Color.Red);
                                if (m_smVisionInfo.g_intLearnStepNo == 3)
                                    pen = new Pen(Color.Cyan);
                                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
                                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

                                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX);
                                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY);
                                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Mold;
                                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Mold;
                                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Mold;
                                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Mold;

                                fLengthTopInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdgeInner_Mold;
                                fLengthRightInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRightInner_Mold;
                                fLengthBottomInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottomInner_Mold;
                                fLengthLeftInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeftInner_Mold;

                                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                                intExtendXInner = (int)(fLengthLeftInner * m_smVisionInfo.g_fScaleX);
                                intExtendX2Inner = (int)(fLengthRightInner * m_smVisionInfo.g_fScaleX);
                                intExtendYInner = (int)(fLengthTopInner * m_smVisionInfo.g_fScaleY);
                                intExtendY2Inner = (int)(fLengthBottomInner * m_smVisionInfo.g_fScaleY);

                                //m_Graphic.DrawRectangle(pen, intStartX - intExtendX, intStartY - intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX + intExtendX2,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY + intExtendY2);

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendY, UnitWidth, intExtendY - intExtendYInner);

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth + intExtendX2Inner, intStartY,
                                                        intExtendX2 - intExtendX2Inner, UnitHeight);

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + UnitHeight + intExtendY2Inner,
                                                       UnitWidth, intExtendY2 - intExtendY2Inner);

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendX, intStartY, intExtendX - intExtendXInner, UnitHeight);

                                //Top
                                // m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY - intExtendYInner, UnitWidth, intExtendYInner);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendYInner, UnitWidth + intStartX, intStartY - intExtendYInner);

                                //Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + UnitWidth, intStartY,
                                //intExtendX2Inner, UnitHeight);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth + intExtendX2Inner, intStartY + UnitHeight, intStartX + UnitWidth + intExtendX2Inner, intStartY);

                                //Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + UnitHeight,
                                //UnitWidth, intExtendY2Inner);

                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + intExtendY2Inner + UnitHeight, UnitWidth + intStartX, intStartY + UnitHeight + intExtendY2Inner);

                                //Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX - intExtendXInner, intStartY, intExtendXInner, UnitHeight);
                                m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendXInner, intStartY + UnitHeight, intStartX - intExtendXInner, intStartY);

                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 14 || m_smVisionInfo.g_intLearnStepNo == 15 || m_smVisionInfo.g_intLearnStepNo == 16 || m_smVisionInfo.g_intLearnStepNo == 17 || m_smVisionInfo.g_intLearnStepNo == 18 || m_smVisionInfo.g_intLearnStepNo == 19)
                            //else if (m_smVisionInfo.g_intLearnStepNo == 14 || m_smVisionInfo.g_intLearnStepNo == 15)
                            {
                                float fLengthTop = 0;
                                float fLengthRight = 0;
                                float fLengthBottom = 0;
                                float fLengthLeft = 0;
                                int intStartX = 0;
                                int intStartY = 0;
                                int intExtendX = 0;
                                int intExtendX2 = 0;
                                int intExtendY = 0;
                                int intExtendY2 = 0;
                                //Pen pen = new Pen(Color.Red);
                                //if (m_smVisionInfo.g_intLearnStepNo == 3)
                                //    pen = new Pen(Color.Cyan);
                                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
                                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

                                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX);
                                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY);
                                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                                if (m_smVisionInfo.g_intLearnStepNo == 14 || m_smVisionInfo.g_intLearnStepNo == 15)
                                {
                                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField2;
                                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField2;
                                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField2;
                                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField2;
                                }
                                else if (m_smVisionInfo.g_intLearnStepNo == 16 || m_smVisionInfo.g_intLearnStepNo == 17)
                                {
                                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField3;
                                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField3;
                                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField3;
                                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField3;
                                }
                                else if (m_smVisionInfo.g_intLearnStepNo == 18 || m_smVisionInfo.g_intLearnStepNo == 19)
                                {
                                    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_DarkField4;
                                    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_DarkField4;
                                    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_DarkField4;
                                    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_DarkField4;
                                }

                                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);



                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]), intStartX + intExtendX, intStartY + intExtendY, UnitWidth - intExtendX - intExtendX2,
                                                        UnitHeight - intExtendY - intExtendY2);

                                ////Top
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY - intExtendY, UnitWidth, intExtendY);

                                ////Right
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + UnitWidth, intStartY,
                                //                        intExtendX2, UnitHeight);

                                ////Bottom
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + UnitHeight,
                                //                       UnitWidth, intExtendY2);

                                ////Left
                                //m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX - intExtendX, intStartY, intExtendX, UnitHeight);


                                //m_Graphic.DrawRectangle(new Pen(Color.Red), intStartX, intStartY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9 || m_smVisionInfo.g_intLearnStepNo == 10)
                            {
                                //////float fLengthTop = 0;
                                //////float fLengthRight = 0;
                                //////float fLengthBottom = 0;
                                //////float fLengthLeft = 0;
                                //////int intStartX = 0;
                                //////int intStartY = 0;
                                //////int intExtendX = 0;
                                //////int intExtendX2 = 0;
                                //////int intExtendY = 0;
                                //////int intExtendY2 = 0;
                                //////Pen pen = new Pen(Color.Red);
                                //////if (m_smVisionInfo.g_intLearnStepNo == 3)
                                //////    pen = new Pen(Color.Cyan);
                                //////float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
                                //////float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

                                //////int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX);
                                //////int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY);
                                //////intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                                //////intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                                //////if (m_smVisionInfo.g_blnViewChipStartPixelFromEdge)
                                //////{
                                //////    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip;
                                //////    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip;
                                //////    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip;
                                //////    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip;
                                //////}
                                //////else
                                //////{
                                //////    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Chip_Dark;
                                //////    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Chip_Dark;
                                //////    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Chip_Dark;
                                //////    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Chip_Dark;
                                //////}

                                ////////  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                                //////intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                //////intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                //////// intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                                //////intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                //////intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                                ////////Top
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, UnitWidth, intExtendY);

                                //////////Right
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + UnitWidth - intExtendX2, intStartY,
                                ////////                        intExtendX2, UnitHeight);

                                //////////Bottom
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + UnitHeight - intExtendY2,
                                ////////                       UnitWidth, intExtendY2);

                                //////////Left
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY, intExtendX, UnitHeight);

                                ////////For OutWard
                                //////if (m_smVisionInfo.g_blnViewChipStartPixelFromEdge)
                                //////{
                                //////    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip;
                                //////    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip;
                                //////    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip;
                                //////    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip;
                                //////}
                                //////else
                                //////{
                                //////    fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromEdge_Chip_Dark;
                                //////    fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromRight_Chip_Dark;
                                //////    fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromBottom_Chip_Dark;
                                //////    fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelExtendFromLeft_Chip_Dark;
                                //////}


                                //////intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                //////intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);
                                //////intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                //////intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                                ////////Top
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY - intExtendY, UnitWidth, intExtendY);

                                //////////Right
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX + UnitWidth, intStartY, intExtendX2, UnitHeight);

                                //////////Bottom
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX, intStartY + UnitHeight, UnitWidth, intExtendY2);

                                //////////Left
                                ////////m_Graphic.DrawRectangle(new Pen(Color.Cyan), intStartX - intExtendX, intStartY, intExtendX, UnitHeight);

                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 20)
                            {
                                //for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                //{
                                //    // 2019 4 17 - CCENG: Dont care area ROI start from index 4. (PadROI[0]=Search ROI, [1]=Unit/Gauge ROI, [2]=Pkg ROI, [3]=Pad ROI, [4] or above = Dont care roi
                                //    for (int j = 3; j < m_smVisionInfo.g_arrPackageROIs[i].Count; j++)
                                //    {
                                //        m_smVisionInfo.g_arrPackageROIs[i][j].AttachImage(m_smVisionInfo.g_arrPackageROIs[i][2]);
                                //        float fX = (float)(m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROITotalX) * m_smVisionInfo.g_fScaleX;
                                //        float fY = (float)(m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROITotalY) * m_smVisionInfo.g_fScaleY;
                                //        float fWidth = (float)m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX;
                                //        float fHeight = (float)m_smVisionInfo.g_arrPackageROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY;
                                //        m_Graphic.FillRectangle(new SolidBrush(Color.Gray), fX, fY, fWidth, fHeight);
                                //    }
                                //}


                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit].Count; i++)
                                {
                                    if (i == 1)
                                        m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][i].GetROIHandle(), 1, m_smVisionInfo.g_arrPackageROIColor[0][0]);

                                }

                                if (m_smVisionInfo.g_arrPackageDontCareROIs.Count > m_smVisionInfo.g_intSelectedType)
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType].Count; i++)
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_Package.Count > m_smVisionInfo.g_intSelectedUnit &&
                                            m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedType &&
                                            m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType].Count > i)
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][i].ref_intFormMode == 0)
                                                m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            else if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][i].ref_intFormMode == 1)
                                                m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            else if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][i].ref_intFormMode == 2)
                                            {
                                                if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][i].ref_arrPoints.Count > 0)
                                                    m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][i].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                            }
                                        }

                                    }

                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType].Count; i++)
                                    {
                                        if (m_smVisionInfo.g_intSelectedDontCareROIIndex == i)
                                            m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPackageROIColor[4][0]);
                                        else
                                            m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].GetROIHandle(), 12, m_smVisionInfo.g_arrPackageROIColor[4][0]);
                                    }
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 21)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit].Count; i++)
                                {
                                    if (i == 0)
                                        m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][i].GetROIHandle(), i, m_smVisionInfo.g_arrMarkOrientROIColor[m_smVisionInfo.g_intSelectedUnit][0]);

                                }

                                for (int i = 0; i < m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs.Count; i++)
                                {
                                    m_Graphic.FillRectangle(m_objTextureBrush, (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX + m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].ref_ROIPositionX) * m_smVisionInfo.g_fScaleX,
                                        (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY + m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].ref_ROIPositionY) * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);

                                }

                                for (int i = 0; i < m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_intSelectedMoldFlashDontCareROIIndex == i)
                                        m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPackageROIColor[4][1]);
                                    else
                                        m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].GetROIHandle(), 12, m_smVisionInfo.g_arrPackageROIColor[4][1]);
                                }

                                //Draw Mold Flash ROI
                                float fLengthTop = 0;
                                float fLengthRight = 0;
                                float fLengthBottom = 0;
                                float fLengthLeft = 0;
                                float fLengthTopInner = 0;
                                float fLengthRightInner = 0;
                                float fLengthBottomInner = 0;
                                float fLengthLeftInner = 0;
                                int intStartX = 0;
                                int intStartY = 0;
                                int intExtendX = 0;
                                int intExtendX2 = 0;
                                int intExtendY = 0;
                                int intExtendY2 = 0;
                                int intExtendXInner = 0;
                                int intExtendX2Inner = 0;
                                int intExtendYInner = 0;
                                int intExtendY2Inner = 0;
                                //Pen pen = new Pen(Color.Red);
                                //if (m_smVisionInfo.g_intLearnStepNo == 3)
                                //    pen = new Pen(Color.Cyan);
                                float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
                                float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

                                int UnitWidth = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth * m_smVisionInfo.g_fScaleX);
                                int UnitHeight = (int)(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight * m_smVisionInfo.g_fScaleY);
                                intStartX = (int)Math.Round((fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
                                intStartY = (int)Math.Round((fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

                                fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdge_Mold;
                                fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRight_Mold;
                                fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottom_Mold;
                                fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeft_Mold;

                                fLengthTopInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromEdgeInner_Mold;
                                fLengthRightInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromRightInner_Mold;
                                fLengthBottomInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromBottomInner_Mold;
                                fLengthLeftInner = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_intStartPixelFromLeftInner_Mold;

                                //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
                                intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);
                                intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                                // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
                                intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                                intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                                intExtendXInner = (int)(fLengthLeftInner * m_smVisionInfo.g_fScaleX);
                                intExtendX2Inner = (int)(fLengthRightInner * m_smVisionInfo.g_fScaleX);
                                intExtendYInner = (int)(fLengthTopInner * m_smVisionInfo.g_fScaleY);
                                intExtendY2Inner = (int)(fLengthBottomInner * m_smVisionInfo.g_fScaleY);

                                //m_Graphic.DrawRectangle(pen, intStartX - intExtendX, intStartY - intExtendY, m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIWidth * m_smVisionInfo.g_fScaleX + intExtendX + intExtendX2,
                                //                        m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROIHeight * m_smVisionInfo.g_fScaleY + intExtendY + intExtendY2);

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendY, UnitWidth, intExtendY);

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth, intStartY,
                                                        intExtendX2, UnitHeight);

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + UnitHeight,
                                                       UnitWidth, intExtendY2);

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendX, intStartY, intExtendX, UnitHeight);

                                //Top
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY - intExtendYInner, UnitWidth, intExtendYInner);

                                //Right
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX + UnitWidth, intStartY,
                                                        intExtendX2Inner, UnitHeight);

                                //Bottom
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX, intStartY + UnitHeight,
                                                       UnitWidth, intExtendY2Inner);

                                //Left
                                m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[3][0]), intStartX - intExtendXInner, intStartY, intExtendXInner, UnitHeight);

                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 22)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit && m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit].Count > 1)
                                    m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][0]);

                                if (m_smVisionInfo.g_blnViewColorPackageStartPixelFromEdge)
                                {
                                    DrawPackageColorROITolerance();
                                }

                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit &&
                                    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                    m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                    )
                                {
                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageColorDontCareROIs.Count; i++)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrPackageColorDontCareROIs[i].Count; j++)
                                        {
                                            if (j != m_smVisionInfo.g_intSelectedColorThresholdIndex)
                                                continue;

                                            for (int k = 0; k < m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j].Count; k++)
                                            {
                                                try
                                                {
                                                    if (m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_intFormMode == 0)
                                                        m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                    else if (m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_intFormMode == 1)
                                                        m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                    else if (m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_intFormMode == 2)
                                                    {
                                                        if (m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].ref_arrPoints.Count > 0)
                                                            m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_PackageColor[i][j][k].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                                    }
                                                }
                                                catch
                                                {

                                                }
                                            }
                                        }
                                    }

                                    for (int i = 0; i < m_smVisionInfo.g_arrPackageColorDontCareROIs.Count; i++)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrPackageColorDontCareROIs[i].Count; j++)
                                        {
                                            if (j != m_smVisionInfo.g_intSelectedColorThresholdIndex)
                                                continue;

                                            for (int k = 0; k < m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j].Count; k++)
                                            {
                                                if ((m_smVisionInfo.g_intSelectedDontCareROIIndex == k) && (m_smVisionInfo.g_intSelectedROI == i))
                                                    m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPackageROIColor[4][0]);
                                                else
                                                    m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageColorDontCareROIs[i][j][k].GetROIHandle(), 12, m_smVisionInfo.g_arrPackageROIColor[4][0]);
                                            }
                                        }
                                    }
                                }
                                
                            }
                        }
                        break;
                    case "Gauge":
                        switch (m_smVisionInfo.g_strSelectedRectGauge)
                        {
                            case "Orient":
                            case "MarkOrient":
                            case "MOLi":
                                for (int i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrOrientROIs[i].Count > 0)
                                        ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                }
                                break;
                            case "Mark":
                                for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrMarkROIs[i].Count > 0)
                                        ((ROI)m_smVisionInfo.g_arrMarkROIs[i][0]).DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                }
                                break;
                            case "Package":
                            case "Package1":
                            case "Package2":
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                        m_smVisionInfo.g_arrPackageROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                                }
                                break;
                        }
                        break;
                    case "Calibrate":
                        if (m_smVisionInfo.g_intCalibrationType == 0 || m_smVisionInfo.g_intCalibrationType == 3)
                        {
                            m_smVisionInfo.g_objCalibrateROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1, true);

                            if (m_smVisionInfo.g_blnViewGauge)
                            {
                                m_smVisionInfo.g_objCalibrateRectGauge.ModifyGauge(m_smVisionInfo.g_objCalibrateROI);
                            }
                        }

                        if (m_smVisionInfo.g_intCalibrationType == 2)
                        {
                            m_smVisionInfo.g_objCalibrateROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1, true);
                            m_smVisionInfo.g_objCalibrateCircleGauge.SetGaugePlacement(m_smVisionInfo.g_objCalibrateROI);
                            m_smVisionInfo.g_objCalibrateCircleGauge.Measure(m_smVisionInfo.g_objCalibrateROI);
                            m_smVisionInfo.g_objCalibrateCircleGauge.DrawCircleGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }

                        if (m_smVisionInfo.g_intCalibrationType == 4)
                        {
                            m_smVisionInfo.g_objCalibrateROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, 1, true);
                        }
                        break;
                    case "Calibrate5S":
                        if (m_smVisionInfo.g_blnViewPackageImage)
                            m_smVisionInfo.g_objCalibration.MeasureEdge_UsingCircleGaugeAndRectGauge4L(m_smVisionInfo.g_objPackageImage);
                        else
                            m_smVisionInfo.g_objCalibration.MeasureEdge_UsingCircleGaugeAndRectGauge4L(m_smVisionInfo.g_arrImages[0]);
                        m_smVisionInfo.g_objCalibration.DrawCalibrationROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        break;
                    case "CalibrateLead3D":
                        //if (m_smVisionInfo.g_blnViewPackageImage)
                        //    m_smVisionInfo.g_objCalibrationLead3D.MeasureEdge_UsingCircleGaugeAndRectGauge4L(m_smVisionInfo.g_objPackageImage);
                        //else
                        //    m_smVisionInfo.g_objCalibrationLead3D.MeasureEdge_UsingCircleGaugeAndRectGauge4L(m_smVisionInfo.g_arrImages[0]);
                        m_smVisionInfo.g_objCalibrationLead3D.DrawCalibrationROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        //if (m_smVisionInfo.g_blnDrawLead3DCalibrationResult)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs.Count; i++)
                            {
                                m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[i].AttachImage(m_smVisionInfo.g_objPackageImage);
                            }

                            if (m_smVisionInfo.g_objCalibrationLead3D.ref_blnHorizontal)
                            {
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureTopBlob(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureCenterHorizontalTop(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureBottomBlob(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureCenterHorizontalBottom(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.calaculateAngleAverage(0, false);
                            }
                            else
                            {
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureLeftBlob(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureCenterVerticalLeft(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureRightBlob(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.MeasureCenterVerticalRight(m_smVisionInfo.g_objPackageImage, false);
                                m_smVisionInfo.g_objCalibrationLead3D.calaculateAngleAverage(1, false);
                            }

                            m_smVisionInfo.g_objCalibrationLead3D.DrawCalibrateResult(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                        }
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "Pad5S":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Search ROI
                        {
                            if (m_intVisionType == 0)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                                {
                                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                        continue;

                                    if (m_smVisionInfo.g_arrPadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                }
                            }
                            else
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrPadOrientROIs[0].GetROIHandle())
                                        m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 14)
                        {
                            if (m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs[0].GetROIHandle())
                                    m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                else
                                    m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                            }
                            if (m_smVisionInfo.g_arrPadOrientROIs.Count > 1)
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs[1].GetROIHandle())
                                    m_smVisionInfo.g_arrPadOrientROIs[1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 2, m_smVisionInfo.g_arrPadROIColor[11][0]);
                                else
                                    m_smVisionInfo.g_arrPadOrientROIs[1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 2, m_smVisionInfo.g_arrPadROIColor[11][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 15)
                        {
                            if (m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs[0].GetROIHandle())
                                    m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                else
                                    m_smVisionInfo.g_arrPadOrientROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                            }
                            if (m_smVisionInfo.g_arrPadOrientROIs.Count > 2)
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs[2].GetROIHandle())
                                    m_smVisionInfo.g_arrPadOrientROIs[2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 1, m_smVisionInfo.g_arrPadROIColor[12][0]);
                                else
                                    m_smVisionInfo.g_arrPadOrientROIs[2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 1, m_smVisionInfo.g_arrPadROIColor[12][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            for (int i = 0; i < 4; i++)
                            {
                                if ((m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 1) ||
                                    (!m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 2))
                                {
                                    m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), 0);
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 2)  // Define Pad Package Gauge
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;
                            //    if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                            //        continue;
                            //    if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i].Count > 1)
                            //        {
                            //            if (m_smVisionInfo.g_arrPadROIs[i][1].GetROIHandle() || m_smVisionInfo.g_intSelectedROI == i)
                            //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, "", 1, Color.Red);
                            //            else
                            //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, "", 1, Color.Red);
                            //        }
                            //    }
                            //}

                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;
                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                                {
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnWantGaugeMeasurePkgSize)
                                    {
                                        if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                        {
                                            // 2020-02-17 ZJYEOH : No need draw center ROI if use side pkg to measure center pkg
                                        }
                                        else
                                        {
                                            m_smVisionInfo.g_arrPad[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_arrImages[0], m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIColor[2][0]);
                                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_intSelectedGaugeEdgeMask);
                                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawAutoDontCareBlobLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, i);
                                        }
                                        //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                        //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                    else
                                    {
                                        if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                        {
                                            m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                        }
                                        if (m_smVisionInfo.g_arrPadROIs[i].Count > 1)
                                        {
                                            if (m_smVisionInfo.g_arrPadROIs[i][1].GetROIHandle() || m_smVisionInfo.g_intSelectedROI == i)
                                                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, "", 1, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                            else
                                                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, "", 1, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                        }
                                    }
                                }
                            }
                            if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                            {
                                if (m_smVisionInfo.g_objTopParentROI.GetROIHandle())
                                    m_smVisionInfo.g_objTopParentROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[2][0]);
                                else
                                    m_smVisionInfo.g_objTopParentROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[2][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == i)
                                        m_smVisionInfo.g_arrPadROIs[i][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadDontCareROIs[i].Count; j++)
                                {
                                    try
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_intFormMode == 0)
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                        else if (m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_intFormMode == 1)
                                            m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadDontCareROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                        else if (m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_intFormMode == 2)
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_Pad[i][j].ref_arrPoints.Count > 0)
                                                m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_Pad[i][j].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadDontCareROIs[i].Count; j++)
                                {
                                    if ((m_smVisionInfo.g_intSelectedDontCareROIIndex == j) && (m_smVisionInfo.g_intSelectedROI == i))
                                        m_smVisionInfo.g_arrPadDontCareROIs[i][j].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPadROIColor[10][0]);
                                    else
                                        m_smVisionInfo.g_arrPadDontCareROIs[i][j].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadDontCareROIs[i][j].GetROIHandle(), 12, m_smVisionInfo.g_arrPadROIColor[10][0]);
                                }
                            }

                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 5 ||
                                 m_smVisionInfo.g_intLearnStepNo == 6 || m_smVisionInfo.g_intLearnStepNo == 7 || m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrPadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 4)
                        {
                            if (m_smVisionInfo.g_blnViewPin1TrainROI)
                            {
                                int intIndex = m_smVisionInfo.g_intSelectedUnit;

                                m_smVisionInfo.g_arrPin1[0].ref_objSearchROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                    m_smVisionInfo.g_arrPin1[0].ref_objSearchROI.GetROIHandle(), 0, m_smVisionInfo.g_arrPadROIColor[0][0]);

                                m_smVisionInfo.g_arrPin1[0].ref_objPin1ROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPin1[0].ref_objPin1ROI.GetROIHandle(), 2, m_smVisionInfo.g_arrPadROIColor[6][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 8)
                        {
                            m_smVisionInfo.g_arrPadROIs[0][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 1);
                            m_smVisionInfo.g_arrPadROIs[0][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 2);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 9 || m_smVisionInfo.g_intLearnStepNo == 10 || m_smVisionInfo.g_intLearnStepNo == 11)
                        {
                            m_smVisionInfo.g_arrPadROIs[0][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 1);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 16)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                int intIndex = 0;

                                if ((i == 0) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x01) > 0))
                                    intIndex = 1;
                                else if ((i == 1) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x02) > 0))
                                    intIndex = 1;
                                else if ((i == 2) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x04) > 0))
                                    intIndex = 1;
                                else if ((i == 3) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x08) > 0))
                                    intIndex = 1;
                                else if ((i == 4) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x10) > 0))
                                    intIndex = 1;

                                if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == i)
                                        m_smVisionInfo.g_arrPadROIs[i][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, intIndex, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][3].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, intIndex, m_smVisionInfo.g_arrPadROIColor[3][0]);
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadColorDontCareROIs.Count; i++)
                            {
                                if ((i == 0) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x01) == 0))
                                    continue;
                                else if ((i == 1) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x02) == 0))
                                    continue;
                                else if ((i == 2) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x04) == 0))
                                    continue;
                                else if ((i == 3) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x08) == 0))
                                    continue;
                                else if ((i == 4) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x10) == 0))
                                    continue;

                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                   )
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPadColorDontCareROIs[i].Count; j++)
                                    {
                                        if (j != m_smVisionInfo.g_intSelectedColorThresholdIndex)
                                            continue;

                                        for (int k = 0; k < m_smVisionInfo.g_arrPadColorDontCareROIs[i][j].Count; k++)
                                        {
                                            try
                                            {
                                                if (m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_intFormMode == 0)
                                                    m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                else if (m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_intFormMode == 1)
                                                    m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                                        m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                else if (m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_intFormMode == 2)
                                                {
                                                    if (m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].ref_arrPoints.Count > 0)
                                                        m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_PadColor[i][j][k].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                                }
                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadColorDontCareROIs.Count; i++)
                            {
                                if ((i == 0) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x01) == 0))
                                    continue;
                                else if ((i == 1) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x02) == 0))
                                    continue;
                                else if ((i == 2) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x04) == 0))
                                    continue;
                                else if ((i == 3) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x08) == 0))
                                    continue;
                                else if ((i == 4) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x10) == 0))
                                    continue;

                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                   )
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPadColorDontCareROIs[i].Count; j++)
                                    {
                                        if (j != m_smVisionInfo.g_intSelectedColorThresholdIndex)
                                            continue;

                                        for (int k = 0; k < m_smVisionInfo.g_arrPadColorDontCareROIs[i][j].Count; k++)
                                        {
                                            if ((m_smVisionInfo.g_intSelectedDontCareROIIndex == k) && (m_smVisionInfo.g_intSelectedROI == i))
                                                m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPadROIColor[10][1]);
                                            else
                                                m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadColorDontCareROIs[i][j][k].GetROIHandle(), 12, m_smVisionInfo.g_arrPadROIColor[10][1]);
                                        }
                                    }
                                }
                            }

                        }
                        //else
                        //{
                        //    for (int i = 1; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        //    {
                        //        if (m_smVisionInfo.g_arrPadROIs[i].Count > 1)
                        //        {
                        //            if (m_smVisionInfo.g_arrPadROIs[i][1].GetROIHandle())
                        //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 1);
                        //            else
                        //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 1);
                        //        }
                        //    }
                        //}
                        break;
                    case "PadPackage":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)  // Define Pad Package Gauge
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;
                            //    if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                            //        continue;
                            //    if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i].Count > 1)
                            //        {
                            //            if (m_smVisionInfo.g_arrPadROIs[i][1].GetROIHandle() || m_smVisionInfo.g_intSelectedROI == i)
                            //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, "", 1, Color.Red);
                            //            else
                            //                m_smVisionInfo.g_arrPadROIs[i][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, "", 1, Color.Red);
                            //        }
                            //    }
                            //}
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;
                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;
                                if (m_smVisionInfo.g_arrPad[i].ref_blnDrawDraggingBox)
                                {
                                    if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    {
                                        // 2020-02-17 ZJYEOH : No need draw center ROI if use side pkg to measure center pkg
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrPad[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_arrImages[0], m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadROIColor[2][0]);
                                        m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPad[i].ref_intSelectedGaugeEdgeMask);
                                        m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawAutoDontCareBlobLine(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, i);
                                    }
                                    //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                    //m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }

                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 9 || m_smVisionInfo.g_intLearnStepNo == 10)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == i)
                                        m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadPackageROIColor[0][0],0,0);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadPackageROIColor[0][0],0,0);
                                }

                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_intSelectedROI == i)
                                        m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadPackageROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadPackageROIColor[0][0]);
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadPackageDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Count; j++)
                                {
                                    if (m_smVisionInfo.g_intSelectedType == j)
                                    {
                                        for (int k = 0; k < m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j].Count; k++)
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_PadPackage.Count > i &&
                                                m_smVisionInfo.g_arrPolygon_PadPackage[i].Count > j &&
                                                m_smVisionInfo.g_arrPolygon_PadPackage[i][j].Count > k)
                                            {
                                                try
                                                {
                                                    // 2020 05 30 - happen once g_arrPadPackageDontCareROIs is not attached to image. so add attach image coding here.
                                                    //m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].AttachImage(m_smVisionInfo.g_arrPadROIs[i][2]);

                                                    if (m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_intFormMode == 0)
                                                        m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                    else if (m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_intFormMode == 1)
                                                        m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                                    else if (m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_intFormMode == 2)
                                                    {
                                                        if (m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].ref_arrPoints.Count > 0)
                                                            m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_PadPackage[i][j][k].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                                    }
                                                }
                                                catch
                                                {

                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPadPackageDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadPackageDontCareROIs[i].Count; j++)
                                {
                                    if (m_smVisionInfo.g_intSelectedType == j)
                                    {
                                        for (int k = 0; k < m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j].Count; k++)
                                        {
                                            if ((m_smVisionInfo.g_intSelectedDontCareROIIndex == k) && (m_smVisionInfo.g_intSelectedROI == i))
                                                m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrPadPackageROIColor[4][0]);
                                            else
                                                m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPadPackageDontCareROIs[i][j][k].GetROIHandle(), 12, m_smVisionInfo.g_arrPadPackageROIColor[4][0]);
                                        }
                                    }
                                }
                            }

                        }
                        //else if (m_smVisionInfo.g_intLearnStepNo == 4)
                        //{
                        //    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        //    {
                        //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        //            break;

                        //        if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                        //            continue;

                        //        if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                        //        {
                        //            if (m_smVisionInfo.g_arrPadROIs[i][0].GetROIHandle())
                        //                m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                        //            else
                        //                m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                        //        }
                        //    }
                        //}
                        //else if (m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 4)
                        //{
                        //    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        //    {
                        //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        //            break;

                        //        if (!m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                        //            continue;

                        //        if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                        //        {
                        //            if (m_smVisionInfo.g_arrPadROIs[i][2].GetROIHandle())
                        //                m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                        //            else
                        //                m_smVisionInfo.g_arrPadROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                        //        }
                        //    }
                        //}
                        break;
                    case "LeadPackage":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)  // Define Lead Package Gauge
                        {

                            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if (i != 0)
                                    break;
                                if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    continue;

                                if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                                {
                                    if (m_smVisionInfo.g_arrLead3D[i].ref_blnDrawDraggingBox)
                                    {
                                        m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                        m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                    }
                                }
                            }

                        }

                        break;
                    case "MNPad":
                    case "MNPad5S":
                        if (m_smVisionInfo.g_blnWantCheckPH && m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
                        {
                            if (m_smProductionInfo.g_blnViewSearchROI)
                                if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                                    m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIColor[7][0]);
                        }
                        else
                        {
                            if (m_smProductionInfo.g_blnViewSearchROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                                {
                                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                        break;

                                    if (m_smVisionInfo.g_arrPadROIs[i].Count >= 1)
                                    {
                                        m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                    }
                                }
                            }
                        }
                        break;
                    case "PadOtherSettingForm":
                    case "PadPackageToleranceForm":
                    case "InspectionOptionForm":
                    case "AdvanceSettingForm":
                        if (m_smVisionInfo.g_arrPadROIs == null)
                            break;

                        for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (m_smVisionInfo.g_arrPadROIs[i].Count >= 1)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[i][0].GetROIHandle() || m_smVisionInfo.g_intSelectedROI == i)
                                    m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 1, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                else if ((m_smVisionInfo.g_intSelectedROIMask & (0x01 << i)) > 0)
                                    m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 1, m_smVisionInfo.g_arrPadROIColor[0][0]);
                                else
                                    m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIColor[0][0]);
                            }
                        }
                        break;
                    case "Seal":
                        if (m_smVisionInfo.g_intLearnStepNo == 5)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[3].Count > 0)
                                m_smVisionInfo.g_arrSealROIs[3][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[3][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[0].Count > 0)
                            {
                                m_smVisionInfo.g_arrSealROIs[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[0][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[0][0]);
                                //if (m_smVisionInfo.g_arrSealROIs[0].Count > 2)
                                //    m_smVisionInfo.g_arrSealROIs[0][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[0][2]).GetROIHandle(), 0, 0, -35f, Color.YellowGreen);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 2)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[0].Count > 0)
                            {
                                m_smVisionInfo.g_arrSealROIs[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[0][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[0][0]);
                            }

                            if (m_smVisionInfo.g_arrSealROIs[0].Count > 1)
                                m_smVisionInfo.g_arrSealROIs[0][1].DrawROI_ForSeal(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).GetROIHandle(), 1, 0, -35f, m_smVisionInfo.g_arrSealROIColor[0][1]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 1; i < 3; i++)
                                if (m_smVisionInfo.g_arrSealROIs[i].Count > 0)
                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[i][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 4)
                        {
                            for (int i = 1; i < 3; i++)
                                if (m_smVisionInfo.g_arrSealROIs[i].Count > 0)
                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[i][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 6)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[6].Count > 0)
                            {
                                m_smVisionInfo.g_objSealCircleGauges.Measure(m_smVisionInfo.g_objSealImage);
                                m_smVisionInfo.g_arrSealROIs[6][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[6][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[3][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 7 || m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[6].Count > 0)
                            {
                                m_smVisionInfo.g_arrSealROIs[6][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[3][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 10)
                        {
                            //if (m_smVisionInfo.g_arrSealROIs[4].Count > 0)
                            //    m_smVisionInfo.g_arrSealROIs[4][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[4][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                            for (int i = 0; i < m_smVisionInfo.g_arrSealROIs[4].Count; i++)
                            {
                                if (m_smVisionInfo.g_intSelectedROI == i)
                                    m_smVisionInfo.g_arrSealROIs[4][i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                                else
                                    m_smVisionInfo.g_arrSealROIs[4][i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[4][i]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 11)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[7].Count > 0)
                                m_smVisionInfo.g_arrSealROIs[7][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[7][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 12)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[5].Count > 0)
                                m_smVisionInfo.g_arrSealROIs[5][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[5][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[5].Count > 1)
                            {
                                m_smVisionInfo.g_arrSealROIs[5][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[5][0]);
                                m_smVisionInfo.g_arrSealROIs[5][1].DrawROI_ForSeal(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).GetROIHandle(), 1, 0, -35f, m_smVisionInfo.g_arrSealROIColor[6][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 14)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[5].Count > 2)
                            {
                                m_smVisionInfo.g_arrSealROIs[5][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][0]).GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[5][0]);
                                m_smVisionInfo.g_arrSealROIs[5][2].DrawROI_ForSeal(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).GetROIHandle(), 1, 0, -35f, m_smVisionInfo.g_arrSealROIColor[7][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 15)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[5].Count > 1)
                                m_smVisionInfo.g_arrSealROIs[5][1].DrawROI_ForSeal(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).GetROIHandle(), 1, 0, -35f, m_smVisionInfo.g_arrSealROIColor[6][0]);

                            if (m_smVisionInfo.g_intSelectedTemplate >= 0 && m_smVisionInfo.g_intSelectedTemplate < m_smVisionInfo.g_arrPolygon_Seal.Count)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrSealDontCareROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPolygon_Seal[i].ref_intFormMode == 0)
                                    {
                                        m_smVisionInfo.g_arrSealDontCareROIs[i].AttachImage(m_smVisionInfo.g_arrSealROIs[5][1]);

                                        m_Graphic.FillRectangle(m_objTextureBrush,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                    }
                                    else if (m_smVisionInfo.g_arrPolygon_Seal[i].ref_intFormMode == 1)
                                    {
                                        m_smVisionInfo.g_arrSealDontCareROIs[i].AttachImage(m_smVisionInfo.g_arrSealROIs[5][1]);

                                        m_Graphic.FillEllipse(m_objTextureBrush,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROITotalX * m_smVisionInfo.g_fScaleX,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROITotalY * m_smVisionInfo.g_fScaleY,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROIWidth * m_smVisionInfo.g_fScaleX,
                                            m_smVisionInfo.g_arrSealDontCareROIs[i].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrSealDontCareROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_intSelectedDontCareROIIndex == i)
                                    m_smVisionInfo.g_arrSealDontCareROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrSealROIColor[6][1]);
                                else
                                    m_smVisionInfo.g_arrSealDontCareROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealDontCareROIs[i].GetROIHandle(), 12, m_smVisionInfo.g_arrSealROIColor[6][1]);
                            }
                        }
                        break;
                    case "MNSeal":
                    case "SealOtherSettingForm":
                        for (int i = 0; i < m_smVisionInfo.g_arrSealROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[i].Count > 0)
                            {
                                if (m_smVisionInfo.g_blnViewDimension)
                                {
                                    if (i == 1 || i == 2)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                    else if (i == 3)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);
                                    else if (i == 6)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[3][0]);
                                    else if (i == 7)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);
                                    else if (i == 4)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[i].Count; j++)
                                            m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[i][0]);
                                    }
                                    else
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[i][0]);
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        if (m_smProductionInfo.g_blnViewSearchROI)
                                        {
                                            if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 1)
                                            {
                                                if (m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionX != 0)
                                                {
                                                    m_smVisionInfo.g_arrSealROIs[i][0].LoadROISetting(0, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionY,
                                                        m_smVisionInfo.g_arrImages[0].ref_intImageWidth, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIHeight);
                                                }

                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);

                                                //if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                //{
                                                //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                                //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                //}
                                            }
                                            else
                                            {
                                                // 2020 08 12 - CCENG: For Pocket pitch 2mm and sprocket hole pitch 4mm, need to use whole width of image to find sprocket hole model.
                                                if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                {
                                                    if (m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionX != 0)
                                                    {
                                                        m_smVisionInfo.g_arrSealROIs[i][0].LoadROISetting(0, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionY,
                                                            m_smVisionInfo.g_arrImages[0].ref_intImageWidth, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIHeight);
                                                    }
                                                }

                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[0][0]);

                                                //if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                //{
                                                //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                                //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.YellowGreen);
                                                //}
                                            }
                                        }
                                        else
                                        {
                                            if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 1)
                                            {
                                                if (m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionX != 0)
                                                {
                                                    m_smVisionInfo.g_arrSealROIs[i][0].LoadROISetting(0, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIPositionY,
                                                        m_smVisionInfo.g_arrImages[0].ref_intImageWidth, m_smVisionInfo.g_arrSealROIs[i][0].ref_ROIHeight);
                                                }

                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);

                                                //if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                //{
                                                //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                                //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                //}
                                            }
                                        }
                                    }
                                    else if (i == 5)
                                    {
                                        if (m_smProductionInfo.g_blnViewSearchROI)
                                        {
                                            if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask == 128) || (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 256))
                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                            else
                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[5][0]);
                                        }
                                        else
                                        {
                                            if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask == 128) || (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 256))
                                                m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                        }
                                    }
                                    else
                                    {
                                        if ((i == 7) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x2000) > 0))
                                        {
                                            if (m_smProductionInfo.g_blnViewSearchROI)
                                            {
                                                if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x20000) > 0)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                else
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);
                                            }
                                            else
                                            {
                                                if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x20000) > 0)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                            }
                                        }

                                        if ((i == 4) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x10) > 0))
                                        {
                                            for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[i].Count; j++)
                                            {
                                                if (m_smProductionInfo.g_blnViewSearchROI)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 64 && m_smVisionInfo.g_objSeal.IsOverHeatFail(j))
                                                        m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                                                }
                                                else
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 64 && m_smVisionInfo.g_objSeal.IsOverHeatFail(j))
                                                        m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                }
                                            }
                                        }

                                        if ((i == 3) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x08) > 0))
                                        {
                                            if (m_smProductionInfo.g_blnViewSearchROI)
                                            {
                                                if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 2)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                else
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);
                                            }
                                            else
                                            {
                                                if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 2)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                            }
                                        }

                                        if (((i == 1) || (i == 2)) && (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x01) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x02) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x20) > 0)))
                                        {
                                            if (m_smProductionInfo.g_blnViewSearchROI)
                                            {
                                                if (i == 1)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal1)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                                }

                                                if (i == 2)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal2)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                                }
                                            }
                                            else
                                            {
                                                if (i == 1)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal1)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                }

                                                if (i == 2)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal2)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                }
                                            }
                                        }
                                        //m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f);
                                    }

                                }
                            }
                        }
                        break;
                    case "Position":
                    case "MNPosition":

                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 1:// Draw 4 search ROI for lines gauge
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Top" ||
                                        m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Bottom" ||
                                        m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Left" ||
                                        m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Right")
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                }
                                break;
                            case 2:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Search ROI")
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                }
                                break;
                            case 4:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Pocket ROI")
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                }
                                break;
                            case 5:
                            case 6:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                }

                                break;
                            case 7:
                                // 2019 07 11 - CCENG: For InPocket Vision > Learn Empty Form > Search ROI is index 0, Empty ROI is index 1
                                if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                                    m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrMarkOrientROIColor[0][0]);

                                if (m_smVisionInfo.g_arrPositioningROIs.Count > 1)
                                    m_smVisionInfo.g_arrPositioningROIs[1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[1]).GetROIHandle(), 1, m_smVisionInfo.g_arrEmptyROIColor[0][0]);

                                //for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                //{
                                //    //m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                                //    //if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Empty ROI")
                                //        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                //}
                                break;
                            case 8:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Orient ROI")
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[i]).GetROIHandle(), i);
                                }
                                break;
                            case 9:
                                for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                                {
                                    if (i == 0)
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, i, m_smVisionInfo.g_arrMarkOrientROIColor[0][0]);
                                    else if (i == 1)
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, i, m_smVisionInfo.g_arrEmptyROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, i);
                                }

                                break;
                        }
                        break;
                    case "PocketPosition":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Search ROI")
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPocketPositionROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrPocketPositionROIColor[0][0]);

                                }
                                break;
                            case 1:
                                for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pattern ROI")
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPocketPositionROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrPocketPositionROIColor[1][0]);
                                }
                                break;
                            case 2:
                                for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pocket Gauge ROI")
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPocketPositionROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrPocketPositionROIColor[2][0]);
                                }
                                break;
                            case 3:
                                for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Gauge ROI")
                                        m_smVisionInfo.g_arrPocketPositionROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPocketPositionROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrPocketPositionROIColor[3][0]);
                                }
                                break;
                        }
                        break;
                    case "Barcode":
                    case "MNBarcode":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                                {

                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Search ROI")
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrBarcodeROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrBarcodeROIColor[0][0]);

                                }
                                break;
                            case 1:
                                for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Pattern ROI")
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrBarcodeROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrBarcodeROIColor[1][0]);
                                }
                                break;
                            case 2:
                                for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Barcode ROI")
                                        m_smVisionInfo.g_arrBarcodeROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrBarcodeROIs[i]).GetROIHandle(), i, m_smVisionInfo.g_arrBarcodeROIColor[2][0]);
                                }
                                break;
                        }
                        break;
                    case "LeadPocketDontCareFix":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i].Count > 0)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                    case "LeadPocketDontCareManual":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                                {

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][0]);

                                }
                                break;
                            case 1:
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                                {

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][0]);

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 1)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1]).GetROIHandle(), 1, m_smVisionInfo.g_arrLeadROIColor[7][1]);
                                }
                                break;
                            case 2:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i].Count > 0)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                    case "LeadPocketDontCareAuto":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                                {

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][0]);

                                }
                                break;
                            case 1:
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                                {

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][0]);

                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 1)
                                        m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1]).GetROIHandle(), 1, m_smVisionInfo.g_arrLeadROIColor[6][1]);
                                }
                                break;
                            case 2:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i].Count > 0)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                    }
                                }
                                break;
                            case 3:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i].Count > 0 && m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.ref_blnDrawDraggingBox)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0))
                                        {
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[6][2]);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                    case "LeadPocketDontCareBlob":
                        switch (m_smVisionInfo.g_intLearnStepNo)
                        {
                            case 0:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i].Count > 0)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                        }
                                    }
                                }
                                break;
                            case 1:
                                for (int i = 1; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i].Count > 0)
                                    {
                                        if (i == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawRectangle(new Pen(Color.Yellow), m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY,
                                                                                           m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                            float fInwardDontCareROILimit = FindPocketShadowBlob(i);

                                            if (fInwardDontCareROILimit != -1f)
                                            {
                                                m_Graphic.DrawLine(new Pen(Color.Cyan, 2), m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + fInwardDontCareROILimit) * m_smVisionInfo.g_fScaleY,
                                                                                           (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + fInwardDontCareROILimit) * m_smVisionInfo.g_fScaleY);
                                            }

                                            m_smVisionInfo.g_arrLead[i].DrawAllObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else if (i == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawRectangle(new Pen(Color.Yellow), (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                                                  m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                            float fInwardDontCareROILimit = FindPocketShadowBlob(i);

                                            if (fInwardDontCareROILimit != -1f)
                                            {
                                                m_Graphic.DrawLine(new Pen(Color.Cyan, 2), (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + fInwardDontCareROILimit - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                                                           (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + fInwardDontCareROILimit - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }

                                            m_smVisionInfo.g_arrLead[i].DrawAllObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else if (i == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawRectangle(new Pen(Color.Yellow), m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleY,
                                                                                           m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                            float fInwardDontCareROILimit = FindPocketShadowBlob(i);

                                            if (fInwardDontCareROILimit != -1f)
                                            {
                                                m_Graphic.DrawLine(new Pen(Color.Cyan, 2), m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + fInwardDontCareROILimit - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleY,
                                                                                           (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + fInwardDontCareROILimit - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward) * m_smVisionInfo.g_fScaleY);
                                            }

                                            m_smVisionInfo.g_arrLead[i].DrawAllObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                        else if (i == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0))
                                        {
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_Graphic.DrawRectangle(new Pen(Color.Yellow), (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                                                        m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0]).GetROIHandle(), 0, m_smVisionInfo.g_arrLeadROIColor[7][2]);
                                            float fInwardDontCareROILimit = FindPocketShadowBlob(i);

                                            if (fInwardDontCareROILimit != -1f)
                                            {
                                                m_Graphic.DrawLine(new Pen(Color.Cyan, 2), (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + fInwardDontCareROILimit) * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY,
                                                                                           (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + fInwardDontCareROILimit) * m_smVisionInfo.g_fScaleX, (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                                            }

                                            m_smVisionInfo.g_arrLead[i].DrawAllObjects(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                        }
                                    }
                                }
                                break;
                        }
                        break;
                    //case "Camera":
                    //    m_smVisionInfo.g_objCameraROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                    //    break;
                    case "UnitPresent":
                        if (m_smVisionInfo.g_blnViewSearchROI)
                        {
                            // Display Position Search ROI
                            if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                            {
                                m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, ((ROI)m_smVisionInfo.g_arrPositioningROIs[0]).GetROIHandle());
                            }
                        }
                        break;
                    case "Lead":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Search ROI
                        {
                            if (m_smVisionInfo.g_arrLeadROIs[0][0].GetROIHandle())
                                m_smVisionInfo.g_arrLeadROIs[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLeadROIColor[0][0]);
                            else
                                m_smVisionInfo.g_arrLeadROIs[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLeadROIColor[0][0]);
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0) && (m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2))
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                    {
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].SetEdgeROIPlacementLimit2(m_smVisionInfo.g_arrLeadROIs[0][0]);
                                        //m_smVisionInfo.g_arrPackageGaugeM4L[i].AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIColor[4][0]);
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                    {
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].SetEdgeROIPlacementLimit2(m_smVisionInfo.g_arrPackageROIs[i][0]);
                                        //m_smVisionInfo.g_arrPackageGaugeM4L[i].AttachEdgeROI(m_smVisionInfo.g_arrImages[0]);
                                        m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawEdgeROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLeadROIColor[4][0]);
                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].ref_blnDrawDraggingBox)
                                {
                                    m_smVisionInfo.g_arrPackageGaugeM4L[i].DrawDontCareArea(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLeadROIColor[1][0]);
                                    else
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLeadROIColor[1][0]);
                                }
                            }
                        }
                        break;
                    case "MNLead3D":
                        if (m_smVisionInfo.g_blnWantCheckPH && m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
                        {
                            if (m_smProductionInfo.g_blnViewSearchROI)
                                if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                                    m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrLead3DROIColor[6][0]);
                        }
                        else
                        {
                            if (m_smProductionInfo.g_blnViewSearchROI)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                                {
                                    if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                        continue;

                                    if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                    {
                                        if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                            m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                        else
                                            m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                    }
                                }
                            }
                        }
                        break;
                    case "Lead3D":
                    case "Li3D":
                    case "Lead3DOtherSettingForm":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)   // Define Search ROI
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                    m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                else
                                    m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 2)
                        {
                            if (m_smVisionInfo.g_blnViewPin1TrainROI)
                            {
                                int intIndex = m_smVisionInfo.g_intSelectedUnit;

                                m_smVisionInfo.g_arrPin1[0].ref_objSearchROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY,
                                    m_smVisionInfo.g_arrPin1[0].ref_objSearchROI.GetROIHandle(), 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);

                                m_smVisionInfo.g_arrPin1[0].ref_objPin1ROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPin1[0].ref_objPin1ROI.GetROIHandle(), 2, m_smVisionInfo.g_arrLead3DROIColor[5][0]);
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrLead3DDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLead3DDontCareROIs[i].Count; j++)
                                {
                                    try
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_intFormMode == 0)
                                            m_Graphic.FillRectangle(m_objTextureBrush, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                        else if (m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_intFormMode == 1)
                                            m_Graphic.FillEllipse(m_objTextureBrush, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROITotalX * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROITotalY * m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROIWidth * m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].ref_ROIHeight * m_smVisionInfo.g_fScaleY);
                                        else if (m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_intFormMode == 2)
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_Lead3D[i][j].ref_arrPoints.Count > 0)
                                                m_Graphic.FillPolygon(m_objTextureBrush, m_smVisionInfo.g_arrPolygon_Lead3D[i][j].GetPoints(m_fZoomCount, m_fZoomCount).ToArray());
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }

                            for (int i = 0; i < m_smVisionInfo.g_arrLead3DDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrLead3DDontCareROIs[i].Count; j++)
                                {
                                    if ((m_smVisionInfo.g_intSelectedDontCareROIIndex == j) && (m_smVisionInfo.g_intSelectedROI == i))
                                        m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 12, m_smVisionInfo.g_arrLead3DROIColor[3][0]);
                                    else
                                        m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].DrawDontCareROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].GetROIHandle(), 12, m_smVisionInfo.g_arrLead3DROIColor[3][0]);
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                    continue;

                                if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i][0].GetROIHandle())
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                    else
                                        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                                }
                            }
                        }
                        break;
                    case "System":
                        m_smVisionInfo.g_arrSystemROI[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                        break;
                    case "PH":
                        if (m_smVisionInfo.g_blnWantCheckPH)
                        {
                            if (m_smVisionInfo.g_blnViewSearchROI)
                                if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                                {
                                    if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                    {
                                        m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrPadROIColor[7][0]);
                                    }
                                    else if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                                    {
                                        m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0, m_smVisionInfo.g_arrLead3DROIColor[6][0]);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                                    }
                                }
                        }
                        break;
                }
            }
            else if (m_smVisionInfo.VM_AT_ColorGuideline)
            {
                m_smVisionInfo.g_objColorROI.DrawROI(m_Graphic, true);
            }
            else if (m_smProductionInfo.g_blnViewSearchROI)
            {
                if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnWantCheckPH && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
                    {
                        if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                            m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrPadROIColor[7][0]);
                    }
                    else
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (m_smVisionInfo.g_arrPadROIs[i].Count > 0)
                                m_smVisionInfo.g_arrPadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrPadROIColor[0][0]);
                        }
                    }
                }

                if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    //for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                    //{
                    //    if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                    //        continue;

                    //    if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                    //        m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                    //}

                    if (m_smVisionInfo.g_arrLeadROIs.Count > 0)
                    {
                        if (m_smVisionInfo.g_arrLeadROIs[0].Count > 0)
                            m_smVisionInfo.g_arrLeadROIs[0][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                    }
                }

                if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_blnWantCheckPH && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
                    {
                        if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                            m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, m_smVisionInfo.g_arrLead3DROIColor[6][0]);
                    }
                    else
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                m_smVisionInfo.g_arrLeadROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrLead3DROIColor[0][0]);
                        }
                    }
                }

                if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrOrientROIs[i].Count > 0)
                            ((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                    }
                }
                else if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrMarkROIs[i].Count > 0)
                            ((ROI)m_smVisionInfo.g_arrMarkROIs[i][0]).DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                    }
                }
                else if ((m_smCustomizeInfo.g_intWantSeal & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    //if (m_smVisionInfo.g_blnViewSealObjectsBuilded && !m_smVisionInfo.VM_AT_SettingInDialog)
                    if (m_smVisionInfo.g_blnViewSealObjectsBuilded) // 2020 08 13 - CCENG: Allow keep drawing inspection result when enter tolerance form. If dont want to draw, then should reset the g_blnViewSealObjectsBuilded event.
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrSealROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[i].Count > 0)
                            {
                                if (m_smVisionInfo.g_blnViewDimension)
                                {
                                    if (i == 1 || i == 2)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                    else if (i == 3)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);
                                    else if (i == 6)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[3][0]);
                                    else if (i == 7)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);
                                    else if (i == 4)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[i].Count; j++)
                                            m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[i][0]);
                                    }
                                    else
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[i][0]);
                                }
                                else
                                {
                                    if (m_smProductionInfo.g_blnViewSearchROI)
                                    {
                                        if (i == 0)
                                        {
                                            if (m_smProductionInfo.g_blnViewSearchROI)
                                            {
                                                if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 1)
                                                {
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);

                                                    //if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                    //{
                                                    //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                                    //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    //}
                                                }
                                                else
                                                {
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[0][0]);

                                                    //if (m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                                    //{
                                                    //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                                    //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.YellowGreen);
                                                    //}
                                                }
                                            }
                                        }
                                        else if (i == 5)
                                        {
                                            if (m_smProductionInfo.g_blnViewSearchROI)
                                            {
                                                //if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask == 128) || (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 256))
                                                if (((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x80) > 0) || ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x100) > 0))
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                else
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[5][0]);
                                            }
                                        }
                                        else
                                        {
                                            if ((i == 4) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x10) > 0))
                                            {
                                                for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[i].Count; j++)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 64 && m_smVisionInfo.g_objSeal.IsOverHeatFail(j))
                                                        m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][j].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                                                }
                                            }

                                            if ((i == 7) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x2000) > 0))
                                            {
                                                if ((m_smVisionInfo.g_objSeal.ref_intSealFailMask & 0x20000) > 0)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                else
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);
                                            }

                                            if ((i == 3) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x08) > 0))
                                            {
                                                if (m_smVisionInfo.g_objSeal.ref_intSealFailMask == 2)
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                else
                                                    m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);
                                            }

                                            if (((i == 1) || (i == 2)) && (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x01) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x02) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x20) > 0)))
                                            {
                                                if (i == 1)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal1)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                                }

                                                if (i == 2)
                                                {
                                                    if (m_smVisionInfo.g_objSeal.ref_blnFailSeal2)
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.Red);
                                                    else
                                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);
                                                }
                                            }
                                            //m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrSealROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrSealROIs[i].Count > 0)
                            {
                                if (i == 0 || i == 5)
                                {
                                    if (m_smProductionInfo.g_blnViewSearchROI)
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[i][0]);

                                    //if (i == 0 && m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                                    //{
                                    //    if (m_smVisionInfo.g_arrSealROIs[i].Count > 2)
                                    //        m_smVisionInfo.g_arrSealROIs[i][2].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrSealROIs[i][0].GetROIHandle(), 0, 0, -35f, Color.YellowGreen);
                                    //}
                                }
                                else
                                {
                                    if ((i == 7) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x2000) > 0))
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[8][0]);

                                    if ((i == 4) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x10) > 0))
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[i].Count; j++)
                                            m_smVisionInfo.g_arrSealROIs[i][j].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[4][0]);
                                    }

                                    if ((i == 3) && ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x08) > 0))
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[2][0]);

                                    if (((i == 1) || (i == 2)) && (((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x01) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x02) > 0) || ((m_smVisionInfo.g_objSeal.ref_intFailOptionMaskSeal & 0x20) > 0)))
                                        m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f, m_smVisionInfo.g_arrSealROIColor[1][0]);


                                    //m_smVisionInfo.g_arrSealROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, 0, -35f);
                                }
                            }
                        }
                    }
                }
                else if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                            m_smVisionInfo.g_arrPackageROIs[i][0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrMarkOrientROIColor[i][0]);
                    }
                }
                else if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_objPositioning.ref_intMethod == 0)
                    {
                        if (m_smVisionInfo.g_blnViewGauge)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                            }
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_blnViewSearchROI)
                            if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                                m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                    }
                }
                //For Check Empty
                else if (m_smVisionInfo.g_blnWantCheckEmpty)
                {
                    if (m_smVisionInfo.g_objPositioning.ref_intMethod == 0)
                    {
                        if (m_smVisionInfo.g_blnViewGauge)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                m_smVisionInfo.g_arrPositioningROIs[i].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                            }
                        }
                    }
                    else
                    {
                        if (m_smVisionInfo.g_blnViewSearchROI)
                            if (m_smVisionInfo.g_arrPositioningROIs.Count > 0)
                                m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                    }
                }
                ////for Check PH
                //else if (m_smVisionInfo.g_blnWantCheckPH)
                //{
                //    if (m_smVisionInfo.g_blnViewSearchROI)
                //        if (m_smVisionInfo.g_arrPHROIs.Count > 0)
                //            m_smVisionInfo.g_arrPHROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                //}
                else if ((m_smCustomizeInfo.g_intWantCheckPresent & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if ((m_smVisionInfo.g_arrPositioningROIs != null) && (m_smVisionInfo.g_arrPositioningROIs.Count > 0))
                    {
                        m_smVisionInfo.g_arrPositioningROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0);
                    }
                }
                else if ((m_smCustomizeInfo.g_intWantBarcode & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if ((m_smVisionInfo.g_arrBarcodeROIs != null) && (m_smVisionInfo.g_arrBarcodeROIs.Count > 0))
                    {
                        m_smVisionInfo.g_arrBarcodeROIs[0].DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, false, 0, m_smVisionInfo.g_arrBarcodeROIColor[0][0]);
                    }
                }
            }
            if (m_smProductionInfo.g_blnViewROITool)
            {
                m_smVisionInfo.g_objCameraROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, true, 0);
                if (m_smProductionInfo.g_blnViewROIDetails)
                    DrawROIDetail();
            }
        }
        private void DrawROIDetail()
        {
            int intTextPositionX = 0, intTestPositionY = 0;
            Font objFont = new Font("Verdana", 10);
            intTextPositionX = Math.Abs(pnl_PictureBox.DisplayRectangle.X);// - pnl_PictureBox.HorizontalScroll.Value;
            intTestPositionY = Math.Abs(pnl_PictureBox.DisplayRectangle.Y);// - pnl_PictureBox.VerticalScroll.Value;
            m_Graphic.DrawString("Dimension - (" + m_smVisionInfo.g_objCameraROI.ref_ROIWidth + " , " + m_smVisionInfo.g_objCameraROI.ref_ROIHeight + ")", objFont, new SolidBrush(Color.Yellow), intTextPositionX, intTestPositionY);

            intTextPositionX = Math.Abs(pnl_PictureBox.DisplayRectangle.X);
            intTestPositionY = Math.Abs(pnl_PictureBox.DisplayRectangle.Y) + (int)(objFont.Size * 2);
            m_Graphic.DrawString("Start Point - (" + m_smVisionInfo.g_objCameraROI.ref_ROIPositionX + " , " + m_smVisionInfo.g_objCameraROI.ref_ROIPositionY + ")", objFont, new SolidBrush(Color.Yellow), intTextPositionX, intTestPositionY);

            intTextPositionX = Math.Abs(pnl_PictureBox.DisplayRectangle.X);
            intTestPositionY = Math.Abs(pnl_PictureBox.DisplayRectangle.Y) + (int)(objFont.Size * 4);
            m_Graphic.DrawString("End Point - (" + (m_smVisionInfo.g_objCameraROI.ref_ROIPositionX + m_smVisionInfo.g_objCameraROI.ref_ROIWidth) + " , " + (m_smVisionInfo.g_objCameraROI.ref_ROIPositionY + m_smVisionInfo.g_objCameraROI.ref_ROIHeight) + ")", objFont, new SolidBrush(Color.Yellow), intTextPositionX, intTestPositionY);

        }
        /// <summary>
        /// Draw rectangle using rectangle start and stop point
        /// </summary>
        /// <param name="p1">rectangle start point</param>
        /// <param name="p2">rectangle stop point</param>
        private void DrawRectangle(Point p1, Point p2)
        {
            p1 = new Point(p1.X - pnl_PictureBox.HorizontalScroll.Value, p1.Y - pnl_PictureBox.VerticalScroll.Value);
            p2 = new Point(p2.X - pnl_PictureBox.HorizontalScroll.Value, p2.Y - pnl_PictureBox.VerticalScroll.Value);

            // Convert the points to screen coordinates.
            p1 = PointToScreen(p1);
            p2 = PointToScreen(p2);
            // Normalize the rectangle.
            if (p1.X < p2.X)
            {
                rc.X = p1.X;
                rc.Width = p2.X - p1.X;
            }
            else
            {
                rc.X = p2.X;
                rc.Width = p1.X - p2.X;
            }
            if (p1.Y < p2.Y)
            {
                rc.Y = p1.Y;
                rc.Height = p2.Y - p1.Y;
            }
            else
            {
                rc.Y = p2.Y;
                rc.Height = p1.Y - p2.Y;
            }
            // Draw the reversible frame.
            ControlPaint.DrawReversibleFrame(rc,
                            Color.White, FrameStyle.Dashed);
        }

        /// <summary>
        /// Draw line to separate or join mark objects
        /// </summary>
        /// <param name="g">Destination to draw image</param>
        /// <param name="p1">point 1</param>
        /// <param name="p2">point 2</param>
        /// <param name="bRubOut">true = rub out, false = don't rub out</param>
        private void DrawXorLine(Graphics g, Point p1, Point p2, Boolean bRubOut)
        {
            p1 = new Point((int)Math.Round((float)p1.X * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                   (int)Math.Round((float)p1.Y * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
            p2 = new Point((int)Math.Round((float)p2.X * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero),
                                   (int)Math.Round((float)p2.Y * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero));
            g.CompositingMode = CompositingMode.SourceOver;

            if (bRubOut && staticTextureBrush == null && staticPenRubout == null)
            {
                staticTextureBrush = new TextureBrush(pic_Image.Image);
                staticPenRubout = new Pen(staticTextureBrush, 1);
            }

            if (bRubOut && staticPenRubout != null && !(p1 == p2))
            {
                g.DrawLine(staticPenRubout, p1, p2);
            }
            else
            {
                Color color;
                if (m_smVisionInfo.g_blnCutMode)
                    color = Color.Black;
                else
                    color = Color.White;

                g.DrawLine(new Pen(color), p1, p2);
            }
        }

        /// <summary>
        /// Enable / disable menu button
        /// </summary>
        /// <param name="blnEnable">true = enable, false = disable</param>
        private void EnableMenuItem(bool blnEnable)
        {
            btn_SystemFrontView.Enabled = blnEnable;
            btn_SystemCamera.Enabled = blnEnable;
            btn_SystemCalibration.Enabled = blnEnable;
            btn_Yield.Enabled = blnEnable;
            btn_ResultLog.Enabled = blnEnable;
            //btn_Gauge.Enabled = blnEnable;
            btn_Recipe.Enabled = blnEnable;
            btn_Position.Enabled = blnEnable;
            btn_PackageSetUp.Enabled = blnEnable;
            btn_Lead.Enabled = blnEnable;
            btn_ManualTest.Enabled = blnEnable;
            btn_Options.Enabled = blnEnable;
            btn_Tolerance.Enabled = blnEnable;
            btn_ToleranceLead.Enabled = blnEnable;
            btn_TolerancePackage.Enabled = blnEnable;

        }

        /// <summary>
        /// Load calibration settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadCalibrationSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("Calibrate");
            m_smVisionInfo.g_fCalibPixelX = objFile.GetValueAsFloat("PixelX", 5);
            m_smVisionInfo.g_fCalibPixelY = objFile.GetValueAsFloat("PixelY", 5);
            m_smVisionInfo.g_fCalibPixelZ = objFile.GetValueAsFloat("PixelZ", 5);
            m_smVisionInfo.g_fCalibOffSetX = objFile.GetValueAsFloat("OffSetX", 0);
            m_smVisionInfo.g_fCalibOffSetY = objFile.GetValueAsFloat("OffSetY", 0);
            m_smVisionInfo.g_fCalibOffSetZ = objFile.GetValueAsFloat("OffSetZ", 0);

            m_smVisionInfo.g_fCalibPixelXInUM = m_smVisionInfo.g_fCalibPixelX / 1000;
            m_smVisionInfo.g_fCalibPixelYInUM = m_smVisionInfo.g_fCalibPixelY / 1000;
            m_smVisionInfo.g_fCalibPixelZInUM = m_smVisionInfo.g_fCalibPixelZ / 1000;
        }

        private void LoadLead3DCalibrationSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);


            if (m_smVisionInfo.g_arrLead3D.Length > 0)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                {

                    if (i == 0)
                    {
                        objFile.GetFirstSection("Calibrate");
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX1 = objFile.GetValueAsFloat("CPixelX1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX2 = objFile.GetValueAsFloat("CPixelX2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX3 = objFile.GetValueAsFloat("CPixelX3", 15);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX4 = objFile.GetValueAsFloat("CPixelX4", 20);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX5 = objFile.GetValueAsFloat("CPixelX5", 25);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY1 = objFile.GetValueAsFloat("CPixelY1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY2 = objFile.GetValueAsFloat("CPixelY2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY3 = objFile.GetValueAsFloat("CPixelY3", 15);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY4 = objFile.GetValueAsFloat("CPixelY4", 20);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY5 = objFile.GetValueAsFloat("CPixelY5", 25);

                        objFile.GetFirstSection("Settings");

                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMX1 = objFile.GetValueAsFloat("Size2DC1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMX2 = objFile.GetValueAsFloat("Size2DC2", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMX3 = objFile.GetValueAsFloat("Size2DC3", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMX4 = objFile.GetValueAsFloat("Size2DC4", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMX5 = objFile.GetValueAsFloat("Size2DC5", 1);

                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMY1 = objFile.GetValueAsFloat("Size2DC1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMY2 = objFile.GetValueAsFloat("Size2DC2", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMY3 = objFile.GetValueAsFloat("Size2DC3", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMY4 = objFile.GetValueAsFloat("Size2DC4", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterMMY5 = objFile.GetValueAsFloat("Size2DC5", 1);

                        m_smVisionInfo.g_arrLead3D[i].Set2DCalibrationDataToFormLine(
                            new PointF(objFile.GetValueAsFloat("Size2DC1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX1),
                            new PointF(objFile.GetValueAsFloat("Size2DC2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX2),
                            new PointF(objFile.GetValueAsFloat("Size2DC3", 3), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX3),
                            new PointF(objFile.GetValueAsFloat("Size2DC4", 4), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX4),
                            new PointF(objFile.GetValueAsFloat("Size2DC5", 5), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountX5),
                            new PointF(objFile.GetValueAsFloat("Size2DC1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY1),
                        new PointF(objFile.GetValueAsFloat("Size2DC2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY2),
                        new PointF(objFile.GetValueAsFloat("Size2DC3", 3), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY3),
                        new PointF(objFile.GetValueAsFloat("Size2DC4", 4), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY4),
                        new PointF(objFile.GetValueAsFloat("Size2DC5", 5), m_smVisionInfo.g_arrLead3D[i].ref_f2DCenterPixelCountY5), m_smCustomizeInfo.g_intUnitDisplay);

                    }
                    else if (i == 1)
                    {
                        objFile.GetFirstSection("Calibrate");
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1 = objFile.GetValueAsFloat("TPixel1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2 = objFile.GetValueAsFloat("TPixel2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DAngle = objFile.GetValueAsFloat("TopAngle", 0);
                        objFile.GetFirstSection("Settings");

                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM1 = objFile.GetValueAsFloat("Size3DT1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM2 = objFile.GetValueAsFloat("Size3DT2", 1);

                        m_smVisionInfo.g_arrLead3D[i].Set3DCalibrationDataToFormLine(
                          new PointF(objFile.GetValueAsFloat("Size3DT1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1),
                          new PointF(objFile.GetValueAsFloat("Size3DT2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2), m_smCustomizeInfo.g_intUnitDisplay);
                    }
                    else if (i == 3)
                    {
                        objFile.GetFirstSection("Calibrate");
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1 = objFile.GetValueAsFloat("BPixel1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2 = objFile.GetValueAsFloat("BPixel2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DAngle = objFile.GetValueAsFloat("BottomAngle", 0);
                        objFile.GetFirstSection("Settings");

                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM1 = objFile.GetValueAsFloat("Size3DB1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM2 = objFile.GetValueAsFloat("Size3DB2", 1);

                        m_smVisionInfo.g_arrLead3D[i].Set3DCalibrationDataToFormLine(
                        new PointF(objFile.GetValueAsFloat("Size3DB1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1),
                        new PointF(objFile.GetValueAsFloat("Size3DB2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2), m_smCustomizeInfo.g_intUnitDisplay);
                    }
                    else if (i == 4)
                    {
                        objFile.GetFirstSection("Calibrate");
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1 = objFile.GetValueAsFloat("LPixel1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2 = objFile.GetValueAsFloat("LPixel2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DAngle = objFile.GetValueAsFloat("LeftAngle", 0);
                        objFile.GetFirstSection("Settings");

                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM1 = objFile.GetValueAsFloat("Size3DL1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM2 = objFile.GetValueAsFloat("Size3DL2", 1);

                        m_smVisionInfo.g_arrLead3D[i].Set3DCalibrationDataToFormLine(
                        new PointF(objFile.GetValueAsFloat("Size3DL1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1),
                        new PointF(objFile.GetValueAsFloat("Size3DL2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2), m_smCustomizeInfo.g_intUnitDisplay);
                    }
                    else if (i == 2)
                    {
                        objFile.GetFirstSection("Calibrate");
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1 = objFile.GetValueAsFloat("RPixel1", 5);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2 = objFile.GetValueAsFloat("RPixel2", 10);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DAngle = objFile.GetValueAsFloat("RightAngle", 0);
                        objFile.GetFirstSection("Settings");

                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM1 = objFile.GetValueAsFloat("Size3DR1", 1);
                        m_smVisionInfo.g_arrLead3D[i].ref_f3DMM2 = objFile.GetValueAsFloat("Size3DR2", 1);

                        m_smVisionInfo.g_arrLead3D[i].Set3DCalibrationDataToFormLine(
                        new PointF(objFile.GetValueAsFloat("Size3DR1", 1), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount1),
                        new PointF(objFile.GetValueAsFloat("Size3DR2", 2), m_smVisionInfo.g_arrLead3D[i].ref_f3DPixelCount2), m_smCustomizeInfo.g_intUnitDisplay);
                    }
                }
            }
        }

        /// <summary>
        /// Load calibration settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        /// <param name="arrGauge">rectangle gauge</param>
        /// <param name="arrROIs">ROI</param>
        private void LoadGaugeSetting(string strPath, List<RectGauge> arrGauge)
        {
            arrGauge.Clear();

            XmlParser objFile = new XmlParser(strPath);
            RectGauge objRectGauge;
            int intCount = objFile.GetFirstSectionCount();

            for (int j = 0; j < intCount; j++)
            {
                //create new ROI base on file read out
                objRectGauge = new RectGauge(m_smVisionInfo.g_WorldShape);
                objFile.GetFirstSection("RectG" + j);

                //set location,size,tolerance to place rect gauge
                objRectGauge.SetRectGaugePlacement(
                    objFile.GetValueAsFloat("CenterX", 0), objFile.GetValueAsFloat("CenterY", 0),
                    objFile.GetValueAsFloat("Width", 100), objFile.GetValueAsFloat("Height", 100),
                    objFile.GetValueAsFloat("Tolerance", 25), objFile.GetValueAsInt("SizeTolerance", 1));

                //set type and choice of measure
                objRectGauge.SetRectGaugeMeasurement(objFile.GetValueAsInt("TransType", 0), objFile.GetValueAsInt("TransChoice", 0));

                //set gauge setting for analysis
                objRectGauge.SetRectGaugeSetting(objFile.GetValueAsInt("Thickness", 13), objFile.GetValueAsInt("Filter", 1),
                    objFile.GetValueAsInt("Threshold", 2), objFile.GetValueAsInt("MinAmp", 10), objFile.GetValueAsInt("MinArea", 0));

                //set sampling step,interval 
                objRectGauge.SetRectGaugeFitting(objFile.GetValueAsInt("SamplingStep", 5));

                //Set rect gauge template
                objRectGauge.SetRectGaugeTemplate(objFile.GetValueAsFloat("ObjectCenterX", 0), objFile.GetValueAsFloat("ObjectCenterY", 0),
                    objFile.GetValueAsFloat("ObjectWidth", 0), objFile.GetValueAsFloat("ObjectHeight", 0));

                objRectGauge.ref_GaugeFilteringPasses = objFile.GetValueAsInt("FilteringPass", 0);
                objRectGauge.ref_GaugeFilterThreshold = objFile.GetValueAsFloat("FilteringThreshold", 3.0f);

                //add Rect Gauge into shared memory's Rect Gauge array list 
                arrGauge.Add(objRectGauge);
            }

            objRectGauge = null;
        }

        private void LoadGaugeSetting2(string strPath, List<RectGauge> arrGauge)
        {
            for (int i = 0; i < arrGauge.Count; i++)
            {
                arrGauge[i].Dispose();
            }
            arrGauge.Clear();

            XmlParser objFile = new XmlParser(strPath);
            RectGauge objRectGauge;
            int intCount = objFile.GetFirstSectionCount();

            for (int j = 0; j < intCount; j++)
            {
                objRectGauge = new RectGauge(m_smVisionInfo.g_WorldShape);
                objRectGauge.LoadGauge(strPath, "RectG" + j);
                arrGauge.Add(objRectGauge);
            }

            objRectGauge = null;
        }
        private void LoadROIColorSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);

            objFile.GetFirstSection("MarkOrient");
            for (int i = 0; i < m_smVisionInfo.g_arrMarkOrientROIColor.Length; i++)
            {
                objFile.GetSecondSection("MarkOrient" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrMarkOrientROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrMarkOrientROIColor[i][j] = Color.FromName(objFile.GetValueAsString("MarkOrient" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrMarkOrientROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Package");
            for (int i = 0; i < m_smVisionInfo.g_arrPackageROIColor.Length; i++)
            {
                objFile.GetSecondSection("Package" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrPackageROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrPackageROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Package" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrPackageROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Seal");
            for (int i = 0; i < m_smVisionInfo.g_arrSealROIColor.Length; i++)
            {
                objFile.GetSecondSection("Seal" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrSealROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrSealROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Seal" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrSealROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Barcode");
            for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIColor.Length; i++)
            {
                objFile.GetSecondSection("Barcode" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrBarcodeROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrBarcodeROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Barcode" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrBarcodeROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Pad");
            for (int i = 0; i < m_smVisionInfo.g_arrPadROIColor.Length; i++)
            {
                objFile.GetSecondSection("Pad" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrPadROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrPadROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Pad" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrPadROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("PadPackage");
            for (int i = 0; i < m_smVisionInfo.g_arrPadPackageROIColor.Length; i++)
            {
                objFile.GetSecondSection("PadPackage" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrPadPackageROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrPadPackageROIColor[i][j] = Color.FromName(objFile.GetValueAsString("PadPackage" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrPadPackageROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Lead3D");
            for (int i = 0; i < m_smVisionInfo.g_arrLead3DROIColor.Length; i++)
            {
                objFile.GetSecondSection("Lead3D" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrLead3DROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrLead3DROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Lead3D" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrLead3DROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Lead");
            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIColor.Length; i++)
            {
                objFile.GetSecondSection("Lead" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrLeadROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrLeadROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Lead" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrLeadROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("Empty");
            for (int i = 0; i < m_smVisionInfo.g_arrEmptyROIColor.Length; i++)
            {
                objFile.GetSecondSection("Empty" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrEmptyROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrEmptyROIColor[i][j] = Color.FromName(objFile.GetValueAsString("Empty" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrEmptyROIColor[i][j].Name, 2));
                }
            }

            objFile.GetFirstSection("PocketPosition");
            for (int i = 0; i < m_smVisionInfo.g_arrPocketPositionROIColor.Length; i++)
            {
                objFile.GetSecondSection("PocketPosition" + i.ToString());
                for (int j = 0; j < m_smVisionInfo.g_arrPocketPositionROIColor[i].Length; j++)
                {
                    m_smVisionInfo.g_arrPocketPositionROIColor[i][j] = Color.FromName(objFile.GetValueAsString("PocketPosition" + i.ToString() + j.ToString(), m_smVisionInfo.g_arrPocketPositionROIColor[i][j].Name, 2));
                }
            }
        }
        private void LoadYieldSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("Yield");
            m_smVisionInfo.g_blnStopLowYield = objFile.GetValueAsBoolean("StopLowYield", false);
            m_smVisionInfo.g_blnStopContinuousPass = objFile.GetValueAsBoolean("StopContinuousPass", false);
            m_smVisionInfo.g_blnStopContinuousFail = objFile.GetValueAsBoolean("StopContinuousFail", false);
            m_smVisionInfo.g_fLowYield = objFile.GetValueAsFloat("LowYield", 95f);
            m_smVisionInfo.g_intMinUnitCheck = objFile.GetValueAsInt("MinUnitCheck", 1000);
            m_smVisionInfo.g_intMinPassUnit = objFile.GetValueAsInt("MinPassUnit", 1000);
            m_smVisionInfo.g_intMinFailUnit = objFile.GetValueAsInt("MinFailUnit", 100);

            objFile.GetFirstSection("VisionSystem");
            m_smVisionInfo.g_intDelayCheckIO = objFile.GetValueAsInt("DelayCheckIO", 0);
        }
        private void LoadResultLogSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("ResultLog");
            m_smVisionInfo.g_intResultLogMaxCount = objFile.GetValueAsInt("ResultLogMaxCount", 1000);
            m_smVisionInfo.g_blnWantRecordResult = objFile.GetValueAsBoolean("WantRecordResult", false);
        }
        private void LoadPreTestSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("PreTest");
            for (int i = 0; i < m_smVisionInfo.g_arrPreTestExpectedResult.Count; i++)
            {
                m_smVisionInfo.g_arrPreTestExpectedResult[i] = objFile.GetValueAsInt("PreTestExpectedResult" + i.ToString(), 0);
                m_smVisionInfo.g_arrPreTestInspect[i] = objFile.GetValueAsBoolean("PreTestInspect" + i.ToString(), false);
            }
        }
        /// <summary>
        /// Load general template setting
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadGeneralSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("TemplateCounting");
            m_smVisionInfo.g_intTotalUnits = objFile.GetValueAsInt("TotalUnits", 0, 1);
            m_smVisionInfo.g_intTotalGroup = objFile.GetValueAsInt("TotalGroups", 0, 1);
            m_smVisionInfo.g_intTotalTemplates = objFile.GetValueAsInt("TotalTemplates", 0, 1);
            m_smVisionInfo.g_intTemplateMask = objFile.GetValueAsInt("TemplateMask", 0, 1);
            m_smVisionInfo.g_intTemplatePriority = objFile.GetValueAsLong("TemplatePriority", 0, 1);

            //objFile.GetFirstSection("PackageSetting");
            //m_smVisionInfo.g_blnCheckPackage = objFile.GetValueAsBoolean("CheckPackage", false, 1);

            // General Setting
            objFile.GetFirstSection("Advanced");
            //m_smVisionInfo.g_blnWantGauge = objFile.GetValueAsBoolean("WantGauge", true, 1);
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    //m_smVisionInfo.g_blnWantGauge = false;
                    break;
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "MOLi":
                case "Package":
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                default:

                    XmlParser objFileHandle = new XmlParser(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\PocketPosition\\Settings.xml");
                    objFileHandle.GetFirstSection("Advanced");
                    m_smVisionInfo.g_blnWantCheckPocketPosition = objFileHandle.GetValueAsBoolean("WantCheckPocketPosition", false, 1);
                    m_smVisionInfo.g_blnWantUsePocketPattern = objFileHandle.GetValueAsBoolean("WantUsePocketPattern", false, 1);
                    m_smVisionInfo.g_blnWantUsePocketGauge = objFileHandle.GetValueAsBoolean("WantUsePocketGauge", false, 1);

                    m_smVisionInfo.g_blnWantUseUnitPRFindGauge = objFile.GetValueAsBoolean("WantUnitPRFindGauge", false);
                    m_smVisionInfo.g_blnWantCheckEmpty = objFile.GetValueAsBoolean("WantCheckEmpty", false, 1);
                    m_smVisionInfo.g_blnWantUseEmptyPattern = objFile.GetValueAsBoolean("WantUseEmptyPattern", false, 1);
                    m_smVisionInfo.g_blnWantUseEmptyThreshold = objFile.GetValueAsBoolean("WantUseEmptyThreshold", true, 1); // 2020-02-04 ZJYEOH : Changed default value to true so that at least one method for check empty is selected
                    m_smVisionInfo.g_blnWantCheckUnitSitProper = objFile.GetValueAsBoolean("WantCheckUnitSitProper", false, 1);
                    m_smVisionInfo.g_blnUseAutoRepalceCounter = objFile.GetValueAsBoolean("UseAutoRepalceCounter", false, 1);
                    break;

            }


        }

        private void LoadToleranceReferenceSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Pad":
                case "Pad5S":
                case "PadPkg":
                case "Pad5SPkg":
                    objFile.GetFirstSection("Settings");
                    m_smVisionInfo.g_blnWantLoadRefTolWhenNewLot = objFile.GetValueAsBoolean("WantLoadRefTolWhenNewLot", false, 1);
                    m_smVisionInfo.g_blnWantLoadPadRefTol = objFile.GetValueAsBoolean("WantLoadPadRefTol", false, 1);
                    m_smVisionInfo.g_blnWantLoadPadPackageRefTol = objFile.GetValueAsBoolean("WantLoadPadPackageRefTol", false, 1);
                    m_smVisionInfo.g_blnWantLoadOtherRefTol = objFile.GetValueAsBoolean("WantLoadOtherRefTol", false, 1);
                    m_smVisionInfo.g_strBrowsePath = objFile.GetValueAsString("BrowsePath", "");
                    break;
                default:

                    break;

            }


        }

        public void LoadToleranceReference(string BrowsePath)
        {
            if (!m_smVisionInfo.g_blnWantLoadRefTolWhenNewLot)
                return;

            string strPath = m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\";

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Pad":
                case "Pad5S":
                case "PadPkg":
                case "Pad5SPkg":
                    if (m_smVisionInfo.g_blnWantLoadPadRefTol || m_smVisionInfo.g_blnWantLoadPadPackageRefTol)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            string strSectionName = "";
                            if (i == 0)
                                strSectionName = "CenterROI";
                            else if (i == 1)
                                strSectionName = "TopROI";
                            else if (i == 2)
                                strSectionName = "RightROI";
                            else if (i == 3)
                                strSectionName = "BottomROI";
                            else if (i == 4)
                                strSectionName = "LeftROI";

                            if (m_smVisionInfo.g_blnWantLoadPadRefTol)
                            {
                                //if(BrowsePath == "")
                                //    m_smVisionInfo.g_arrPad[i].LoadPadToleranceFromFile(strPath + m_smVisionInfo.g_strVisionName + "_TolRef.stol", strSectionName);
                                //else
                                STTrackLog.WriteLine("LoadToleranceReferent. i=" + i.ToString());
                                STTrackLog.WriteLine("> BrowsePath=" + BrowsePath);
                                STTrackLog.WriteLine("> strSectionName=" + strSectionName);
                                m_smVisionInfo.g_arrPad[i].LoadPadToleranceFromFile(BrowsePath, strSectionName);
                            }

                            if (m_smVisionInfo.g_blnWantLoadPadPackageRefTol)
                            {
                                if (BrowsePath == "")
                                    m_smVisionInfo.g_arrPad[i].LoadPackageToleranceFromFile(strPath + m_smVisionInfo.g_strVisionName + "_TolRef.stol", strSectionName);
                                else
                                    m_smVisionInfo.g_arrPad[i].LoadPackageToleranceFromFile(BrowsePath, strSectionName);
                            }

                            //2021-12-08 ZJYEOH : Need save back to template xml
                            m_smVisionInfo.g_arrPad[i].SavePad(strPath + m_smVisionInfo.g_strVisionFolderName + "\\Pad\\Template\\Template.xml", false, strSectionName, true);
                        }
                    }

                    if (m_smVisionInfo.g_blnWantLoadOtherRefTol)
                    {
                        if (m_smVisionInfo.g_arrPin1 != null && m_smVisionInfo.g_arrPin1.Count > 0)
                        {
                            if (BrowsePath == "")
                                m_smVisionInfo.g_arrPin1[0].LoadPin1ToleranceFromFile(strPath + m_smVisionInfo.g_strVisionName + "_TolRef.stol");
                            else
                                m_smVisionInfo.g_arrPin1[0].LoadPin1ToleranceFromFile(BrowsePath);

                            //2021-12-08 ZJYEOH : Need save back to template xml
                            m_smVisionInfo.g_arrPin1[0].SaveTemplate(strPath + m_smVisionInfo.g_strVisionFolderName + "\\Pad\\Template\\");
                        }

                        if (m_smVisionInfo.g_arrPad.Length > 0)
                        {
                            if (BrowsePath == "")
                                m_smVisionInfo.g_arrPad[0].LoadUnitPositionToleranceFromFile(strPath + m_smVisionInfo.g_strVisionName + "_TolRef.stol", "CenterROI");
                            else
                                m_smVisionInfo.g_arrPad[0].LoadUnitPositionToleranceFromFile(BrowsePath, "CenterROI");

                            //2021-12-08 ZJYEOH : Need save back to template xml
                            m_smVisionInfo.g_arrPad[0].SavePad(strPath + m_smVisionInfo.g_strVisionFolderName + "\\Pad\\Template\\Template.xml", false, "CenterROI", true);
                        }

                        if (m_smVisionInfo.g_objPositioning != null)
                        {
                            if (BrowsePath == "")
                                m_smVisionInfo.g_objPositioning.LoadPositionToleranceFromFile(strPath + m_smVisionInfo.g_strVisionName + "_TolRef.stol");
                            else
                                m_smVisionInfo.g_objPositioning.LoadPositionToleranceFromFile(BrowsePath);

                            //2021-12-08 ZJYEOH : Need save back to template xml
                            m_smVisionInfo.g_objPositioning.SavePosition(strPath + m_smVisionInfo.g_strVisionFolderName + "\\Positioning\\Settings.xml", false, "General", true);
                        }
                    }

                    break;
            }
        }

        private void LoadSealGeneralSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("TemplateCounting");
            m_smVisionInfo.g_intPocketTemplateTotal = objFile.GetValueAsInt("TotalPocketTemplates", 0, 1); 
            m_smVisionInfo.g_intMarkTemplateTotal = objFile.GetValueAsInt("TotalMarkTemplates", 0, 1);
            m_smVisionInfo.g_intPocketTemplateMask = objFile.GetValueAsInt("PocketTemplateMask", 0, 1);
            m_smVisionInfo.g_intMarkTemplateMask = objFile.GetValueAsInt("MarkTemplateMask", 0, 1);

        }



        /// <summary>
        /// Load orient settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadOrientSettings(string strPath)
        {
            for (int i = 0; i < m_smVisionInfo.g_arrOrients.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrOrients[i].Count; j++)
                {
                    m_smVisionInfo.g_arrOrients[i][j].Dispose();
                }
            }
            m_smVisionInfo.g_arrOrients.Clear();

            XmlParser objFileHandle = new XmlParser(strPath + "Template\\Template.xml");
            int intParentCount = objFileHandle.GetFirstSectionCount();

            for (int x = 0; x < m_smVisionInfo.g_intUnitsOnImage; x++)
            {
                m_smVisionInfo.g_arrOrients.Add(new List<Orient>());
                for (int y = 0; y < intParentCount; y++)
                    m_smVisionInfo.g_arrOrients[x].Add(new Orient(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
            }

            for (int i = 0; i < intParentCount; i++)
            {
                objFileHandle.GetFirstSection("Template" + i);
                for (int j = 0; j < m_smVisionInfo.g_intUnitsOnImage; j++)
                {
                    m_smVisionInfo.g_arrOrients[j][i].LoadPattern(strPath + "Template\\Template" + i + ".mch");
                    m_smVisionInfo.g_arrOrients[j][i].ref_fMinScore = objFileHandle.GetValueAsFloat("MinScore", 0.7f);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fAngleTolerance = objFileHandle.GetValueAsFloat("MaxAngle", 0);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fXTolerance = objFileHandle.GetValueAsFloat("MaxX", 0);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fYTolerance = objFileHandle.GetValueAsFloat("MaxY", 0);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fTemplateX = objFileHandle.GetValueAsFloat("TemplateCenterX", 0);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fTemplateY = objFileHandle.GetValueAsFloat("TemplateCenterY", 0);
                    if (objFileHandle.GetValueAsInt("SubMatcherCount", 0) > 0)
                        m_smVisionInfo.g_arrOrients[j][i].LoadSubPattern(strPath + "Template\\SubTemplate" + i + ".mch");
                    m_smVisionInfo.g_arrOrients[j][i].LoadPattern4Direction(strPath + "Template\\", "Template" + i.ToString());
                    if (File.Exists(strPath + "Template\\Template" + i + "_UnitPR.mch"))   // Unit PR is not always exist depends on learning method.
                        m_smVisionInfo.g_arrOrients[j][i].LoadUnitPRPattern(strPath + "Template\\Template" + i + "_UnitPR.mch");
                }
            }


            for (int i = 0; i < m_smVisionInfo.g_arrOrients.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrOrients[i].Count; j++)
                {
                    m_smVisionInfo.g_arrOrients[i][j].SetCalibrationData(
                                               m_smVisionInfo.g_fCalibPixelX,
                                               m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);
                    m_smVisionInfo.g_arrOrients[i][j].LoadOrient(strPath + "Settings.xml", "General");
                }
            }

            objFileHandle = new XmlParser(strPath + "Settings.xml");
            objFileHandle.GetFirstSection("Advanced");
            for (int i = 0; i < intParentCount; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_intUnitsOnImage; j++)
                {
                    m_smVisionInfo.g_arrOrients[j][i].ref_intDirections = objFileHandle.GetValueAsInt("Direction", 4);
                    m_smVisionInfo.g_arrOrients[j][i].ref_blnWantUsePositionCheckOrientation = objFileHandle.GetValueAsBoolean("WantUsePositionCheckOrientation", false);
                    m_smVisionInfo.g_arrOrients[j][i].ref_fCheckPositionOrientationWhenBelowDifferentScore = objFileHandle.GetValueAsFloat("CheckPositionOrientationWhenBelowDifferentScore", 0.1f);
                }
            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && m_smVisionInfo.g_strVisionName.Contains("BottomPosition"))
                m_smVisionInfo.g_blnOrientWantPackage = objFileHandle.GetValueAsBoolean("PositionWantGauge", false);

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && m_smVisionInfo.g_strVisionName.Contains("BottomOrient"))
                m_smVisionInfo.g_blnOrientWantPackage = objFileHandle.GetValueAsBoolean("OrientWantGauge", false);

            // 2019 08 06 - CCENG: For Bottom Orient Vision: Must have Sub ROI and No Gauge
            // 2019 06 13 - JBTAN: must use if bottom
            if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_smVisionInfo.g_blnWantGauge = false;
                m_smVisionInfo.g_blnWantSubROI = true;
            }

            if (m_smVisionInfo.g_arrPin1 != null)
            {
                // Load Pin 1
                for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                {
                    m_smVisionInfo.g_arrPin1[u].LoadTemplate(strPath + "Template\\");
                }
            }
        }

        private void LoadPackageSettings(string strPath)
        {
            XmlParser objFile;
            objFile = new XmlParser(strPath + "Settings.xml");
            objFile.GetFirstSection("Advanced");
            m_smVisionInfo.g_blnWantShowGRR = objFile.GetValueAsBoolean("WantShowGRR", false, 1);
            m_smVisionInfo.g_blnWantCheckVoidOnMarkArea = objFile.GetValueAsBoolean("WantCheckVoidOnMark", false);
            m_smVisionInfo.g_blnWantUseSideLightGauge = objFile.GetValueAsBoolean("WantUseSideLightGauge", false);
            m_smVisionInfo.g_blnWantUseDetailThreshold_Package = objFile.GetValueAsBoolean("WantUseDetailThresholdPackage", false);
            m_smVisionInfo.g_blnWantDontCareArea_Package = objFile.GetValueAsBoolean("WantDontCareAreaPackage", false);
            m_smVisionInfo.g_blnWantCheckPackageAngle = objFile.GetValueAsBoolean("WantCheckPackageAngle", false);
            m_smVisionInfo.g_blnSquareUnit = objFile.GetValueAsBoolean("SquareUnit", false);
            m_smVisionInfo.g_intPackageDefectInspectionMethod = objFile.GetValueAsInt("PackageDefectInspectionMethod", 0);
            m_smVisionInfo.g_intPackageInspectionAreaGrayValueSensitivity = objFile.GetValueAsInt("PackageInspectionAreaGrayValueSensitivity", 45);
            m_smVisionInfo.g_intPackageMergeSensitivity = objFile.GetValueAsInt("PackageMergeSensitivity", 3);
            m_smVisionInfo.g_intPackageBrightSensitivity = objFile.GetValueAsInt("PackageBrightSensitivity", 50);
            m_smVisionInfo.g_intPackageDarkSensitivity = objFile.GetValueAsInt("PackageDarkSensitivity", 30);
            m_smVisionInfo.g_blnCheckPackageColor = objFile.GetValueAsBoolean("WantCheckPackageColor", true);
            for (int i = 0; i < 3; i++)
            {
                m_smVisionInfo.g_blnWantCheckVoidOnMarkArea_SideLight[i] = objFile.GetValueAsBoolean("WantCheckVoidOnMark_SideLight" + i, false);
            }
            // 2019 07 30 - CCENG: Cannot dispose package object then reload new package. This will cause inconsistent error after reload new recipe.
            //for (int i = 0; i < m_smVisionInfo.g_arrPackage.Count; i++)
            //{
            //    if (m_smVisionInfo.g_arrPackage[i] != null)
            //        m_smVisionInfo.g_arrPackage[i].Dispose();
            //}

            //m_smVisionInfo.g_arrPackage.Clear();

            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
            {
                if (u >= m_smVisionInfo.g_arrPackage.Count)
                    m_smVisionInfo.g_arrPackage.Add(new Package(m_smVisionInfo.g_intVisionIndex, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                m_smVisionInfo.g_arrPackage[u].ref_blnUseDetailDefectCriteria = m_smVisionInfo.g_blnWantUseDetailThreshold_Package;
                m_smVisionInfo.g_arrPackage[u].ref_blnSquareUnit = m_smVisionInfo.g_blnSquareUnit;
                m_smVisionInfo.g_arrPackage[u].SetCalibrationData(
                                                  m_smVisionInfo.g_fCalibPixelX,
                                                  m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);

                if (u == 0)
                    m_smVisionInfo.g_arrPackage[u].LoadPackage(strPath + "Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                else
                {
                    if (File.Exists(strPath + "Settings2.xml"))
                        m_smVisionInfo.g_arrPackage[u].LoadPackage(strPath + "Settings2.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                    else
                        m_smVisionInfo.g_arrPackage[u].LoadPackage(strPath + "Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                }

                m_smVisionInfo.g_arrPackage[u].SetBlobSettings(m_smVisionInfo.g_arrPackage[u].ref_intPkgViewThreshold,
                                                               m_smVisionInfo.g_arrPackage[u].ref_intPkgViewMinArea,
                                                               m_smVisionInfo.g_arrPackage[u].ref_intMarkViewHighThreshold,
                                                               m_smVisionInfo.g_arrPackage[u].ref_intMarkViewLowThreshold,
                                                               m_smVisionInfo.g_arrPackage[u].ref_intMarkViewMinArea);

                if (File.Exists(strPath + "Template\\Template0.mch"))   // Unit PR is not always exist depends on learning method.
                    m_smVisionInfo.g_arrPackage[u].LoadUnitPRPattern(strPath + "Template\\Template0.mch");
            }
        }

        private void LoadColorPackageSettings(string strPath)
        {
            m_smVisionInfo.g_arrColorPackage.Clear();

            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
            {
                m_smVisionInfo.g_arrColorPackage.Add(new ColorPackage());

                m_smVisionInfo.g_arrColorPackage[u].LoadColorPackage(strPath, "Settings");
            }
        }


        //private void LoadColorPackageSettings(string strPath)
        //{
        //    m_smVisionInfo.g_arrPackage.Clear();
        //    if (m_smVisionInfo.g_blnViewColorImage)
        //        m_smVisionInfo.g_arrColorPackage.Clear();

        //    XmlParser objFile = new XmlParser(strPath);
        //    objFile.GetFirstSection("Settings");

        //    bool bCheckChipAtBorder = objFile.GetValueAsBoolean("CheckChipAtBorder", false);

        //    int intPixelFromEdge = objFile.GetValueAsInt("PixelFromEdge", 2);
        //    int intPackageThreshold = objFile.GetValueAsInt("PackageViewThreshold", 50);
        //    int intMarkHighThreshold = objFile.GetValueAsInt("MarkViewHighThreshold", 200);
        //    int intMarkLowThreshold = objFile.GetValueAsInt("MarkViewLowThreshold", 50);
        //    int intMarkMinArea = objFile.GetValueAsInt("MarkViewMinArea", 20);
        //    int intPkgMinArea = objFile.GetValueAsInt("PkgViewMinArea", 20);
        //    int intFailMask = objFile.GetValueAsInt("FailMask", 63);
        //    float fUnitSizeOffset = objFile.GetValueAsFloat("UnitSizeOffset", 20);
        //    int intChipMinArea = objFile.GetValueAsInt("ChipMinArea", 20);
        //    int intChipThreshold = objFile.GetValueAsInt("ChipViewThreshold", 150);
        //    int intBorderChipMinArea = objFile.GetValueAsInt("BorderChipMinArea", 20);

        //    float fTemplateUnitSizeWidth = objFile.GetValueAsFloat("TemplateUnitSizeWidth", 0) * m_smVisionInfo.g_fCalibPixelX;
        //    float fTemplateUnitSizeHeight = objFile.GetValueAsFloat("TemplateUnitSizeHeight", 0) * m_smVisionInfo.g_fCalibPixelY;
        //    int[] intGrabImageIndex = new int[objFile.GetValueAsInt("GrabImageIndexCount", 0)];
        //    for (int j = 0; j < intGrabImageIndex.Length; j++)
        //    {
        //        intGrabImageIndex[j] = objFile.GetValueAsInt("GrabImageIndex" + j.ToString(), 0);
        //    }

        //    int[] intCopperThreshold = new int[3];
        //    intCopperThreshold[0] = objFile.GetValueAsInt("CopperThreshold1", 0);
        //    intCopperThreshold[1] = objFile.GetValueAsInt("CopperThreshold2", 0);
        //    intCopperThreshold[2] = objFile.GetValueAsInt("CopperThreshold3", 0);
        //    int[] intCopperTolerance = new int[3];
        //    intCopperTolerance[0] = objFile.GetValueAsInt("CopperTolerance1", 0);
        //    intCopperTolerance[1] = objFile.GetValueAsInt("CopperTolerance2", 0);
        //    intCopperTolerance[2] = objFile.GetValueAsInt("CopperTolerance3", 0);
        //    int intCopperMinArea = objFile.GetValueAsInt("CopperMinArea", 0);

        //    int[] intFlipThreshold = new int[3];
        //    intFlipThreshold[0] = objFile.GetValueAsInt("FlipThreshold1", 0);
        //    intFlipThreshold[1] = objFile.GetValueAsInt("FlipThreshold2", 0);
        //    intFlipThreshold[2] = objFile.GetValueAsInt("FlipThreshold3", 0);
        //    int[] intFlipTolerance = new int[3];
        //    intFlipTolerance[0] = objFile.GetValueAsInt("FlipTolerance1", 0);
        //    intFlipTolerance[1] = objFile.GetValueAsInt("FlipTolerance2", 0);
        //    intFlipTolerance[2] = objFile.GetValueAsInt("FlipTolerance3", 0);

        //    int[] intOxidationThreshold = new int[3];
        //    intOxidationThreshold[0] = objFile.GetValueAsInt("OxidationThreshold1", 0);
        //    intOxidationThreshold[1] = objFile.GetValueAsInt("OxidationThreshold2", 0);
        //    intOxidationThreshold[2] = objFile.GetValueAsInt("OxidationThreshold3", 0);
        //    int[] intOxidationTolerance = new int[3];
        //    intOxidationTolerance[0] = objFile.GetValueAsInt("OxidationTolerance1", 0);
        //    intOxidationTolerance[1] = objFile.GetValueAsInt("OxidationTolerance2", 0);
        //    intOxidationTolerance[2] = objFile.GetValueAsInt("OxidationTolerance3", 0);
        //    int intOxidationMinArea = objFile.GetValueAsInt("OxidationMinArea", 0);

        //    int intWOBThreshold = objFile.GetValueAsInt("WOBThreshold", 2);
        //    int intWOBMinArea = objFile.GetValueAsInt("WOBMinArea", 0);

        //    int intBurrThreshold = objFile.GetValueAsInt("BurrThreshold", 2);
        //    int intBurrMinArea = objFile.GetValueAsInt("BurrMinArea", 0);

        //    int intLatentScratchThreshold = objFile.GetValueAsInt("LatentScratchThreshold", 2);
        //    int intLatentScratchMinArea = objFile.GetValueAsInt("LatentScratchMinArea", 0);

        //    ArrayList arrDefect = new ArrayList();
        //    objFile.GetFirstSection("Defect");
        //    int intCount = objFile.GetSecondSectionCount();

        //    for (int i = 0; i < m_smVisionInfo.g_intUnitsOnImage; i++)
        //    {
        //        Package objPackage = new Package();
        //        objPackage.ref_intStartPixelFromEdge = intPixelFromEdge;
        //        objPackage.ref_fUnitSizeTolerance = fUnitSizeOffset;
        //        objPackage.SetBlobSettings(intPackageThreshold, intPkgMinArea, intMarkHighThreshold,
        //            intMarkLowThreshold, intMarkMinArea);
        //        objPackage.ref_intFailMask = intFailMask; 
        //        objPackage.ref_intChipViewMinArea = intChipMinArea;
        //        objPackage.ref_intChipThreshold = intChipThreshold;

        //        for (int j = 0; j < intGrabImageIndex.Length; j++)
        //            objPackage.SetGrabImageIndex(j, intGrabImageIndex[j]);
        //        objPackage.ref_fTemplateUnitSizeX = fTemplateUnitSizeWidth;
        //        objPackage.ref_fTemplateUnitSizeY = fTemplateUnitSizeHeight;

        //        for (int j = 0; j < intCount; j++)
        //        {
        //            string strTitle = objFile.GetElementName(j, 1);
        //            objPackage.SetDefectParam(Convert.ToInt32(strTitle.Substring(2)), objFile.GetValueAsFloat(strTitle, 0, 1));
        //        }
        //        m_smVisionInfo.g_arrPackage.Add(objPackage);

        //        if (m_smVisionInfo.g_blnViewColorImage)
        //        {
        //            ColorPackage objColorPackage = new ColorPackage();
        //            objColorPackage.SetCopperBlobThreshold(intCopperThreshold[0],intCopperThreshold[1],intCopperThreshold[2],
        //                intCopperTolerance[0], intCopperTolerance[1], intCopperTolerance[2]);
        //            objColorPackage.SetFlipBlobThreshold(intFlipThreshold[0], intFlipThreshold[1], intFlipThreshold[2],
        //               intFlipTolerance[0], intFlipTolerance[1], intFlipTolerance[2]);
        //            objColorPackage.SetOxidationBlobThreshold(intOxidationThreshold[0], intOxidationThreshold[1], intOxidationThreshold[2],
        //                intOxidationTolerance[0], intOxidationTolerance[1], intOxidationTolerance[2]);
        //            objColorPackage.ref_intWOBThreshold = intWOBThreshold;
        //            objColorPackage.ref_intOxidationMinArea = intOxidationMinArea;
        //            objColorPackage.ref_intCopperMinArea = intCopperMinArea;
        //            objColorPackage.ref_intWOBMinArea = intWOBMinArea;
        //            objColorPackage.ref_intBurrThreshold = intBurrThreshold;
        //            objColorPackage.ref_intBurrMinArea = intBurrMinArea;
        //            objColorPackage.ref_intChipMinArea = intChipMinArea;
        //            objColorPackage.ref_intChipThreshold = intChipThreshold;
        //            objColorPackage.SetChipArea(intChipMinArea);
        //            objColorPackage.ref_intBorderChipMinArea = intBorderChipMinArea;
        //            objColorPackage.ref_intLatentScratchThreshold = intLatentScratchThreshold;
        //            objColorPackage.ref_intLatentScratchMinArea = intLatentScratchMinArea;

        //            objColorPackage.ref_bCheckChipAtBorder = bCheckChipAtBorder;

        //            m_smVisionInfo.g_arrColorPackage.Add(objColorPackage);
        //        }
        //    }
        //}

        /// <summary>
        /// Load pad offset settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadPadOffSetSetting(string strPath)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("OffSet");
            int intCount = objFile.GetSecondSectionCount();
            float f = objFile.GetValueAsFloat("WidthOffSet", 0);
            for (int y = 0; y < m_smVisionInfo.g_arrPad.Length; y++)
            {
                if (y > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                m_smVisionInfo.g_arrPad[y].SetWidthOffSet(objFile.GetValueAsFloat("WidthOffSet", 0));
                m_smVisionInfo.g_arrPad[y].SetHeightOffSet(objFile.GetValueAsFloat("HeightOffSet", 0));
                m_smVisionInfo.g_arrPad[y].SetPitchOffSet(objFile.GetValueAsFloat("PitchOffSet", 0));
                m_smVisionInfo.g_arrPad[y].SetGapOffSet(objFile.GetValueAsFloat("GapOffSet", 0));
            }
        }
        private void LoadPadOrientSettings(string strFolderPath)
        {
            XmlParser objFile = new XmlParser(strFolderPath + "Template\\Template.xml");

            objFile.GetFirstSection("Template" + 0);

            m_smVisionInfo.g_objPadOrient.ref_fMinScore = objFile.GetValueAsFloat("MinScore", 0.7f);
            m_smVisionInfo.g_objPadOrient.LoadOrient(strFolderPath + "Settings.xml", "General");
            m_smVisionInfo.g_objPadOrient.ref_intDirections = m_smVisionInfo.g_arrPad[0].ref_intOrientDirections;

            m_smVisionInfo.g_objPadOrient.SetCalibrationData(
                                   m_smVisionInfo.g_fCalibPixelX,
                                   m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);
        }
        /// <summary>
        /// Load pad settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadPadSetting(string strPath)
        {
            string strPkgPath = strPath + "Package\\";
            strPath = strPath + "Pad\\";
            XmlParser objFile;
            objFile = new XmlParser(strPath + "Settings.xml");
            objFile.GetFirstSection("Advanced");
            m_smVisionInfo.g_blnCheckPackage = objFile.GetValueAsBoolean("WantCheckPackage", false, 1);
            m_smVisionInfo.g_blnCheckPad = objFile.GetValueAsBoolean("WantCheckPad", true, 1);
            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) == 0) // 2020-09-23 ZJYEOH : If not pad orient then always want check pad
                m_smVisionInfo.g_blnCheckPad = true;
            m_smVisionInfo.g_blnCheckPadColor = objFile.GetValueAsBoolean("WantCheckPadColor", true, 1);
            m_smVisionInfo.g_blnCheck4Sides = objFile.GetValueAsBoolean("WantCheck4Sides", false, 1);
            m_smVisionInfo.g_blnWantShowGRR = objFile.GetValueAsBoolean("WantShowGRR", false, 1);
            m_smVisionInfo.g_blnCPKON = objFile.GetValueAsBoolean("WantCheckCPK", false, 1);
            m_smVisionInfo.g_blnRecordAllPadCPKEvenIfFail = objFile.GetValueAsBoolean("CheckAllPadCPK", false, 1);
            m_smVisionInfo.g_blnWantPin1 = objFile.GetValueAsBoolean("WantPin1", false);
            m_smVisionInfo.g_blnWantCheckPH = objFile.GetValueAsBoolean("WantCheckPH", false);
            m_smVisionInfo.g_blnWantUseDetailThreshold_PadPackage = objFile.GetValueAsBoolean("WantUseDetailThresholdPadPackage", false);
            m_smVisionInfo.g_intCPKTestCount = objFile.GetValueAsInt("PadCPKCount", 100);
            m_smVisionInfo.g_blnWantDontCareArea_Pad = objFile.GetValueAsBoolean("WantDontCareAreaPad", false);
            m_smVisionInfo.g_blnWantDontCareArea_Package = objFile.GetValueAsBoolean("WantDontCareAreaPadPackage", false);
            m_smVisionInfo.g_blnReferTemplateSize = true;
            if (m_smVisionInfo.g_arrPad.Length > 0)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    // 2021 07 23 - even though Check4Sides is false, but still need to read side pad information. 
                    //            - User may set Check4Sides to true anytime.
                    //            - User no read side pad information, and user set Check4Sides to true, all previous side information will empty.
                    //if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    //    break;

                    if (objFile.GetValueAsInt("OrientDirection", 4) == 4)
                    {
                        m_smVisionInfo.g_arrPad[i].ref_intOrientDirections = 4;
                    }
                    else
                    {
                        m_smVisionInfo.g_arrPad[i].ref_intOrientDirections = 2;
                    }
                    m_smVisionInfo.g_arrPad[i].ref_blnSeperateBrightDarkROITolerance = objFile.GetValueAsBoolean("SeperateBrightDarkROITolerancePadPackage", false);

                    m_smVisionInfo.g_arrPad[i].ref_blnSeperateCrackDefectSetting = objFile.GetValueAsBoolean("SeperateCrackDefectSetting", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnSeperateForeignMaterialDefectSetting = objFile.GetValueAsBoolean("SeperateForeignMaterialDefectSetting", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnSeperateChippedOffDefectSetting = objFile.GetValueAsBoolean("SeperateChippedOffDefectSetting", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnSeperateMoldFlashDefectSetting = objFile.GetValueAsBoolean("SeperateMoldFlashDefectSetting", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantDontCarePadForPackage = objFile.GetValueAsBoolean("WantDontCarePadForPackage", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantDontCareArea_Package = objFile.GetValueAsBoolean("WantDontCareAreaPadPackage", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantDontCareArea_Pad = objFile.GetValueAsBoolean("WantDontCareAreaPad", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantEdgeLimit_Pad = objFile.GetValueAsBoolean("WantEdgeLimitPad", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantEdgeDistance_Pad = objFile.GetValueAsBoolean("WantEdgeDistancePad", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantSpan_Pad = objFile.GetValueAsBoolean("WantSpanPad", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantStandOff_Pad = objFile.GetValueAsBoolean("WantStandOffPad", false);

                    m_smVisionInfo.g_arrPad[i].ref_blnWantLinkBrightDefect = objFile.GetValueAsBoolean("WantLinkBrightDefect", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantLinkDarkDefect = objFile.GetValueAsBoolean("WantLinkDarkDefect", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantLinkCrackDefect = objFile.GetValueAsBoolean("WantLinkCrackDefect", false);
                    m_smVisionInfo.g_arrPad[i].ref_blnWantLinkMoldFlashDefect = objFile.GetValueAsBoolean("WantLinkMoldFlashDefect", false);

                    m_smVisionInfo.g_arrPad[i].ref_intBrightDefectLinkTolerance = objFile.GetValueAsInt("BrightDefectLinkTolerance", 10);
                    m_smVisionInfo.g_arrPad[i].ref_intDarkDefectLinkTolerance = objFile.GetValueAsInt("DarkDefectLinkTolerance", 10);
                    m_smVisionInfo.g_arrPad[i].ref_intCrackDefectLinkTolerance = objFile.GetValueAsInt("CrackDefectLinkTolerance", 10);
                    m_smVisionInfo.g_arrPad[i].ref_intMoldFlashDefectLinkTolerance = objFile.GetValueAsInt("MoldFlashDefectLinkTolerance", 10);

                    m_smVisionInfo.g_arrPad[i].ref_intSavePadTemplateImageMethod = objFile.GetValueAsInt("SavePadTemplateImageMethod", 0);
                    m_smVisionInfo.g_arrPad[i].ref_intPadOffsetReferencePoint = objFile.GetValueAsInt("PadOffsetReferencePoint", 0);
                    if (i == 0)
                    {
                        m_smVisionInfo.g_arrPad[i].ref_intMoldFlashDefectType = objFile.GetValueAsInt("PadPkgMoldFlashDefectType_Center", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgSizeImageViewNo = objFile.GetValueAsInt("PadPkgSizeImageViewNo_Center", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgBrightFieldImageViewNo = objFile.GetValueAsInt("PadPkgBrightFieldImageViewNo_Center", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgDarkFieldImageViewNo = objFile.GetValueAsInt("PadPkgDarkFieldImageNo_Center", 1);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgMoldFlashImageViewNo = objFile.GetValueAsInt("PadPkgMoldFlashImageViewNo_Center", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadSubtractMethod = objFile.GetValueAsInt("PadSubtractMethod_Center", 0);
                    }
                    else
                    {
                        m_smVisionInfo.g_arrPad[i].ref_intMoldFlashDefectType = objFile.GetValueAsInt("PadPkgMoldFlashDefectType_Side", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgSizeImageViewNo = objFile.GetValueAsInt("PadPkgSizeImageViewNo_Side", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgBrightFieldImageViewNo = objFile.GetValueAsInt("PadPkgBrightFieldImageViewNo_Side", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgDarkFieldImageViewNo = objFile.GetValueAsInt("PadPkgDarkFieldImageNo_Side", 1);
                        m_smVisionInfo.g_arrPad[i].ref_intPadPkgMoldFlashImageViewNo = objFile.GetValueAsInt("PadPkgMoldFlashImageViewNo_Side", 0);
                        m_smVisionInfo.g_arrPad[i].ref_intPadSubtractMethod = objFile.GetValueAsInt("PadSubtractMethod_Side", 0);
                    }
                }
            }
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                // 2021 07 23 - even though Check4Sides is false, but still need to read side pad information. 
                //            - User may set Check4Sides to true anytime.
                //            - User no read side pad information, and user set Check4Sides to true, all previous side information will empty.
                //if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                //    break;

                m_smVisionInfo.g_arrPad[i].ref_blnUseDetailDefectCriteria = m_smVisionInfo.g_blnWantUseDetailThreshold_PadPackage;
                //if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)    // 2018 07 23 - CCENG: Load side pad data also eventhough g_blnCheck4Sides is false. Because may set it to true anytime and do side pad inspection without relearn.
                //break;

                if (i == 0)
                {
                    m_smVisionInfo.g_arrPad[i].SetCalibrationData(
                                                  m_smVisionInfo.g_fCalibPixelX,
                                                  m_smVisionInfo.g_fCalibPixelY,
                                                  m_smVisionInfo.g_fCalibOffSetX,
                                                  m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                }
                else
                {
                    m_smVisionInfo.g_arrPad[i].SetCalibrationData(
                                                  m_smVisionInfo.g_fCalibPixelZ,
                                                  m_smVisionInfo.g_fCalibPixelZ,
                                                  m_smVisionInfo.g_fCalibOffSetZ,
                                                  m_smVisionInfo.g_fCalibOffSetZ, m_smCustomizeInfo.g_intUnitDisplay);
                }

                // Load Pad Template Setting
                string strSectionName = "";
                if (i == 0)
                    strSectionName = "CenterROI";
                else if (i == 1)
                    strSectionName = "TopROI";
                else if (i == 2)
                    strSectionName = "RightROI";
                else if (i == 3)
                    strSectionName = "BottomROI";
                else if (i == 4)
                    strSectionName = "LeftROI";

                m_smVisionInfo.g_arrPad[i].LoadPad(strPath + "Template\\Template.xml", strSectionName);
                m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.LoadRectGauge4L(strPath + "RectGauge4L.xml",
                                                                              "Pad" + i.ToString(), false);
                m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.SetGaugeTiltAngle(i);

                m_smVisionInfo.g_arrPad[i].ref_objPointGauge.LoadPointGauge(strPath + "PointGauge.xml",
                                                              "Pad" + i.ToString());
                // Permanent set minAmp = 0, min area = 0, filter to 1, choice = from begin
                //m_smVisionInfo.g_arrPad[i].ref_objPointGauge.ref_GaugeTransChoice = 0;      // 2019-09-26 ZJYEOH : User now can select which TransChoice to use
                //m_smVisionInfo.g_arrPad[i].ref_objPointGauge.ref_GaugeMinAmplitude = 0;     // 2019-12-21 CCEMG : No more fix Min Amplitude to 0
                m_smVisionInfo.g_arrPad[i].ref_objPointGauge.ref_GaugeMinArea = 0;
                m_smVisionInfo.g_arrPad[i].ref_objPointGauge.ref_GaugeFilter = 1;

                m_smVisionInfo.g_arrPad[i].LoadPadTemplateImage(strPath + "Template\\", i);

                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    m_smVisionInfo.g_arrPad[i].LoadPadPackageTemplateImage(strPkgPath + "Template\\", i);

                    if (m_smVisionInfo.g_arrPolygon_PadPackage != null)
                        Polygon.LoadPolygon(strPkgPath + "\\Template\\Polygon.xml", m_smVisionInfo.g_arrPolygon_PadPackage, false);
                }
            }

            if (m_smVisionInfo.g_arrPin1 != null)
            {
                // Load Pin 1
                for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                {
                    m_smVisionInfo.g_arrPin1[u].LoadTemplate(strPath + "Template\\");
                }
            }
        }

        /// <summary>
        /// Load lead settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadLeadSetting(string strPath)
        {
            XmlParser objFile;
            objFile = new XmlParser(strPath + "Settings.xml");
            objFile.GetFirstSection("Advanced");
            m_smVisionInfo.g_blnCheckLead = objFile.GetValueAsBoolean("WantCheckLead", false, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIFixMask = objFile.GetValueAsInt("LeadPocketDontCareROIMaskFix", 0, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIManualMask = objFile.GetValueAsInt("LeadPocketDontCareROIMaskManual", 0, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask = objFile.GetValueAsInt("LeadPocketDontCareROIMaskAuto", 0, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask = objFile.GetValueAsInt("LeadPocketDontCareROIMaskBlob", 0, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX = objFile.GetValueAsInt("LeadPocketDontCareROIBlobDistanceX", -1, 1);
            m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY = objFile.GetValueAsInt("LeadPocketDontCareROIBlobDistanceY", -1, 1);
            m_smVisionInfo.g_blnWantShowGRR = objFile.GetValueAsBoolean("WantShowGRR", false, 1);
            m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead = objFile.GetValueAsBoolean("WantPocketDontCareAreaFix_Lead", false, 1);
            m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead = objFile.GetValueAsBoolean("WantPocketDontCareAreaManual_Lead", false, 1);
            m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead = objFile.GetValueAsBoolean("WantPocketDontCareAreaAuto_Lead", false, 1);
            m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead = objFile.GetValueAsBoolean("WantPocketDontCareAreaBlob_Lead", false, 1);
            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
            {
                //if (i == 0)
                //{
                //    m_smVisionInfo.g_arrLead[i].SetCalibrationData(
                //                                  m_smVisionInfo.g_fCalibPixelX,
                //                                  m_smVisionInfo.g_fCalibPixelY,
                //                                  m_smVisionInfo.g_fCalibOffSetX,
                //                                  m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                //}
                //else
                //{
                //    m_smVisionInfo.g_arrLead[i].SetCalibrationData(
                //                                  m_smVisionInfo.g_fCalibPixelZ,
                //                                  m_smVisionInfo.g_fCalibPixelZ,
                //                                  m_smVisionInfo.g_fCalibOffSetZ,
                //                                  m_smVisionInfo.g_fCalibOffSetZ, m_smCustomizeInfo.g_intUnitDisplay);
                //}

                m_smVisionInfo.g_arrLead[i].SetCalibrationData(
                              m_smVisionInfo.g_fCalibPixelX,
                              m_smVisionInfo.g_fCalibPixelY,
                              m_smVisionInfo.g_fCalibOffSetX,
                              m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);

                // Load Lead Template Setting
                string strSectionName = "";
                if (i == 0)
                    strSectionName = "SearchROI";
                else if (i == 1)
                    strSectionName = "TopROI";
                else if (i == 2)
                    strSectionName = "RightROI";
                else if (i == 3)
                    strSectionName = "BottomROI";
                else if (i == 4)
                    strSectionName = "LeftROI";

                m_smVisionInfo.g_arrLead[i].LoadLead(strPath + "Template\\Template.xml", strSectionName, m_smVisionInfo.g_arrImages.Count);
                m_smVisionInfo.g_arrLead[i].LoadLeadTemplateImage(strPath + "Template\\", i);
                m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.LoadPocketEdgeGauge(strPath + "PocketEdgeGauge.xml", strSectionName, m_smVisionInfo.g_WorldShape);
                m_smVisionInfo.g_arrLead[i].ref_objPointGauge.LoadPointGauge(strPath + "PointGauge.xml",
                                              "Lead" + i.ToString());
                m_smVisionInfo.g_arrLead[i].LoadArrayPointGauge(strPath + "PointGauge.xml");
                // Permanent set minAmp = 0, min area = 0, filter to 1, choice = from begin
                //m_smVisionInfo.g_arrLead[i].ref_objPointGauge.ref_GaugeTransChoice = 0;      // 2019-09-26 ZJYEOH : User now can select which TransChoice to use
                //m_smVisionInfo.g_arrLead[i].ref_objPointGauge.ref_GaugeMinAmplitude = 0;     // 2021-05-12 ZJYEOH : User now can set min amplitude
                m_smVisionInfo.g_arrLead[i].ref_objPointGauge.ref_GaugeMinArea = 0;
                m_smVisionInfo.g_arrLead[i].ref_objPointGauge.ref_GaugeFilter = 2;


                m_smVisionInfo.g_arrLead[i].ref_objPointGauge.SetGaugePlacementCenter(m_smCustomizeInfo.g_intResolutionWidth / 2, m_smCustomizeInfo.g_intResolutionHeight / 2);
            }
        }

        private void LoadLead3DSetting(string strPath)
        {
            XmlParser objFile;
            objFile = new XmlParser(strPath + "Settings.xml");
            objFile.GetFirstSection("Advanced");
            m_smVisionInfo.g_blnCheckLead = objFile.GetValueAsBoolean("WantCheckLead", false, 1);
            m_smVisionInfo.g_blnWantShowGRR = objFile.GetValueAsBoolean("WantShowGRR", false, 1);
            m_smVisionInfo.g_blnWantDontCareArea_Lead3D = objFile.GetValueAsBoolean("WantDontCareAreaLead3D", false);
            m_smVisionInfo.g_blnWantCheckPH = objFile.GetValueAsBoolean("WantCheckPH", false);
            m_smVisionInfo.g_blnWantPin1 = objFile.GetValueAsBoolean("WantPin1", false);

            if (m_smVisionInfo.g_arrLead3D.Length > 0)
            {
                for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                {
                    m_smVisionInfo.g_arrLead3D[i].ref_blnSeperateCrackDefectSetting = objFile.GetValueAsBoolean("SeperateCrackDefectSetting", false);
                    m_smVisionInfo.g_arrLead3D[i].ref_blnSeperateChippedOffDefectSetting = objFile.GetValueAsBoolean("SeperateChippedOffDefectSetting", false);
                    m_smVisionInfo.g_arrLead3D[i].ref_blnSeperateMoldFlashDefectSetting = objFile.GetValueAsBoolean("SeperateMoldFlashDefectSetting", false);
                    m_smVisionInfo.g_arrLead3D[i].ref_blnWantDontCareArea_Lead3D = objFile.GetValueAsBoolean("WantDontCareAreaLead3D", false);
                }
            }

            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
            {
                if (i == 0)
                {
                    m_smVisionInfo.g_arrLead3D[i].SetCalibrationData(
                                                  m_smVisionInfo.g_fCalibPixelX,
                                                  m_smVisionInfo.g_fCalibPixelY,
                                                  m_smVisionInfo.g_fCalibOffSetX,
                                                  m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                }
                else
                {
                    m_smVisionInfo.g_arrLead3D[i].SetCalibrationData(
                                                  m_smVisionInfo.g_fCalibPixelZ,
                                                  m_smVisionInfo.g_fCalibPixelZ,
                                                  m_smVisionInfo.g_fCalibOffSetZ,
                                                  m_smVisionInfo.g_fCalibOffSetZ, m_smCustomizeInfo.g_intUnitDisplay);
                }

                // Load Lead Template Setting
                string strSectionName = "";
                if (i == 0)
                    strSectionName = "CenterROI";
                else if (i == 1)
                    strSectionName = "TopROI";
                else if (i == 2)
                    strSectionName = "RightROI";
                else if (i == 3)
                    strSectionName = "BottomROI";
                else if (i == 4)
                    strSectionName = "LeftROI";

                m_smVisionInfo.g_arrLead3D[i].LoadLead3D(strPath + "Template\\Template.xml", strSectionName);
                m_smVisionInfo.g_arrLead3D[i].LoadLeadTemplateImage(strPath + "Template\\", i);

                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    m_smVisionInfo.g_arrLead3D[i].LoadLeadPackageTemplateImage(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\Package\\Template\\", i);



                if (i == 0)
                {
                    m_smVisionInfo.g_arrLead3D[i].LoadUnitPattern(strPath + "Template\\PatternMatcher0.mch");

                    m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.LoadRectGauge4L(strPath + "RectGauge4L.xml",
                                                                         "Lead3D" + i.ToString(), false);
                }

                m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.LoadPointGauge(strPath + "PointGauge.xml",
                                            "Lead3D" + i.ToString());
                // Permanent set minAmp = 0, min area = 0, filter to 1, choice = from begin
                //m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.ref_GaugeTransChoice = 0;      // 2019-09-26 ZJYEOH : User now can select which TransChoice to use
                //m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.ref_GaugeMinAmplitude = 0;     // 2021-05-12 ZJYEOH : User now can set min amplitude
                m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.ref_GaugeMinArea = 0;
                m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.ref_GaugeFilter = 2;


                m_smVisionInfo.g_arrLead3D[i].ref_objPointGauge.SetGaugePlacementCenter(m_smCustomizeInfo.g_intResolutionWidth / 2, m_smCustomizeInfo.g_intResolutionHeight / 2);


                //Center
                //m_smVisionInfo.g_arrLead3D[i].ref_objCenterPointGauge.LoadPointGauge(strPath + "CenterPointGauge.xml",
                //                         "Lead3D" + i.ToString());
                //m_smVisionInfo.g_arrLead3D[i].ref_objCenterPointGauge.ref_GaugeMinAmplitude = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCenterPointGauge.ref_GaugeMinArea = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCenterPointGauge.ref_GaugeFilter = 2;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCenterPointGauge.SetGaugePlacementCenter(m_smCustomizeInfo.g_intResolutionWidth / 2, m_smCustomizeInfo.g_intResolutionHeight / 2);
                m_smVisionInfo.g_arrLead3D[i].LoadArrayPointGauge_Center(strPath + "CenterPointGauge.xml", "Lead3D" + i.ToString());

                //Side
                //m_smVisionInfo.g_arrLead3D[i].ref_objSidePointGauge.LoadPointGauge(strPath + "SidePointGauge.xml",
                //                        "Lead3D" + i.ToString());
                //m_smVisionInfo.g_arrLead3D[i].ref_objSidePointGauge.ref_GaugeMinAmplitude = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objSidePointGauge.ref_GaugeMinArea = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objSidePointGauge.ref_GaugeFilter = 2;
                //m_smVisionInfo.g_arrLead3D[i].ref_objSidePointGauge.SetGaugePlacementCenter(m_smCustomizeInfo.g_intResolutionWidth / 2, m_smCustomizeInfo.g_intResolutionHeight / 2);
                m_smVisionInfo.g_arrLead3D[i].LoadArrayPointGauge_Side(strPath + "SidePointGauge.xml", "Lead3D" + i.ToString());

                //Corner
                //m_smVisionInfo.g_arrLead3D[i].ref_objCornerPointGauge.LoadPointGauge(strPath + "CornerPointGauge.xml",
                //                        "Lead3D" + i.ToString());
                //m_smVisionInfo.g_arrLead3D[i].ref_objCornerPointGauge.ref_GaugeMinAmplitude = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCornerPointGauge.ref_GaugeMinArea = 0;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCornerPointGauge.ref_GaugeFilter = 2;
                //m_smVisionInfo.g_arrLead3D[i].ref_objCornerPointGauge.SetGaugePlacementCenter(m_smCustomizeInfo.g_intResolutionWidth / 2, m_smCustomizeInfo.g_intResolutionHeight / 2);
                m_smVisionInfo.g_arrLead3D[i].LoadArrayPointGauge_Corner(strPath + "CornerPointGauge.xml", "Lead3D" + i.ToString());
            }

            if (m_smVisionInfo.g_arrPin1 != null)
            {
                // Load Pin 1
                for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                {
                    m_smVisionInfo.g_arrPin1[u].LoadTemplate(strPath + "Template\\");
                }
            }
        }
        /// <summary>
        /// Load ROI settings from selected path into ROI
        /// </summary>
        /// <param name="strPath">selected path</param>
        /// <param name="arrROIs">ROI</param>
        /// <param name="intROICount">ROI count</param>
        private void LoadROISetting(string strPath, List<List<ROI>> arrROIs, int intROICount)
        {
            if (arrROIs == null)
                return;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    if (arrROIs[i][j] != null)
                        arrROIs[i][j].Dispose();
                }
            }

            arrROIs.Clear();

            XmlParser objFile = new XmlParser(strPath);
            int intChildCount;
            ROI objROI;

            for (int i = 0; i < intROICount; i++)
            {
                arrROIs.Add(new List<ROI>());
                objFile.GetFirstSection("Unit" + i);
                intChildCount = objFile.GetSecondSectionCount();
                for (int j = 0; j < intChildCount; j++)
                {
                    objROI = new ROI();
                    objFile.GetSecondSection("ROI" + j);
                    objROI.ref_strROIName = objFile.GetValueAsString("Name", "", 2);
                    objROI.ref_intType = objFile.GetValueAsInt("Type", 4, 2);
                    objROI.ref_ROIPositionX = objFile.GetValueAsInt("PositionX", 0, 2);
                    objROI.ref_ROIPositionY = objFile.GetValueAsInt("PositionY", 0, 2);
                    objROI.ref_ROIWidth = objFile.GetValueAsInt("Width", 100, 2);
                    objROI.ref_ROIHeight = objFile.GetValueAsInt("Height", 100, 2);
                    objROI.ref_intStartOffsetX = objFile.GetValueAsInt("StartOffsetX", 0, 2);
                    objROI.ref_intStartOffsetY = objFile.GetValueAsInt("StartOffsetY", 0, 2);
                    objROI.SetROIPixelAverage(objFile.GetValueAsFloat("AreaPixel", 100.0f, 2));
                    if (objROI.ref_intType > 1)
                    {
                        objROI.ref_ROIOriPositionX = objROI.ref_ROIPositionX;
                        objROI.ref_ROIOriPositionY = objROI.ref_ROIPositionY;
                    }

                    arrROIs[i].Add(objROI);
                }
            }
        }
        private void LoadROISetting(string strPath, List<List<List<ROI>>> arrROIs, int intROICount)
        {
            if (arrROIs == null)
                return;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    for (int k = 0; k < arrROIs[i][j].Count; k++)
                    {
                        if (arrROIs[i][j][k] != null)
                            arrROIs[i][j][k].Dispose();
                    }
                }
            }

            arrROIs.Clear();

            XmlParser objFile = new XmlParser(strPath);
            int intChildCount;
            ROI objROI;

            for (int i = 0; i < intROICount; i++)
            {
                arrROIs.Add(new List<List<ROI>>());
                objFile.GetFirstSection("Unit" + i);
                intChildCount = objFile.GetSecondSectionCount();
                for (int j = 0; j < intChildCount; j++)
                {
                    arrROIs[i].Add(new List<ROI>());
                    objFile.GetSecondSection("Color Defect" + i + j);
                    int intThirdChildCount = objFile.GetThirdSectionCount();
                    for (int k = 0; k < intThirdChildCount; k++)
                    {
                        objROI = new ROI();
                        objFile.GetThirdSection("ROI" + k);
                        objROI.ref_strROIName = objFile.GetValueAsString("Name", "", 3);
                        objROI.ref_intType = objFile.GetValueAsInt("Type", 4, 3);
                        objROI.ref_ROIPositionX = objFile.GetValueAsInt("PositionX", 0, 3);
                        objROI.ref_ROIPositionY = objFile.GetValueAsInt("PositionY", 0, 3);
                        objROI.ref_ROIWidth = objFile.GetValueAsInt("Width", 100, 3);
                        objROI.ref_ROIHeight = objFile.GetValueAsInt("Height", 100, 3);
                        objROI.ref_intStartOffsetX = objFile.GetValueAsInt("StartOffsetX", 0, 3);
                        objROI.ref_intStartOffsetY = objFile.GetValueAsInt("StartOffsetY", 0, 3);
                        objROI.SetROIPixelAverage(objFile.GetValueAsFloat("AreaPixel", 100.0f, 3));
                        if (objROI.ref_intType > 1)
                        {
                            objROI.ref_ROIOriPositionX = objROI.ref_ROIPositionX;
                            objROI.ref_ROIOriPositionY = objROI.ref_ROIPositionY;
                        }

                        arrROIs[i][j].Add(objROI);
                    }
                }
            }
        }
        private void LoadColorROISetting(string strPath, List<List<CROI>> arrROIs, int intROICount)
        {
            if (arrROIs == null)
                return;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    if (arrROIs[i][j] != null)
                        arrROIs[i][j].Dispose();
                }
            }

            arrROIs.Clear();

            XmlParser objFile = new XmlParser(strPath);
            int intChildCount;
            CROI objROI;

            for (int i = 0; i < intROICount; i++)
            {
                arrROIs.Add(new List<CROI>());
                objFile.GetFirstSection("Unit" + i);
                intChildCount = objFile.GetSecondSectionCount();
                for (int j = 0; j < intChildCount; j++)
                {
                    objROI = new CROI();
                    objFile.GetSecondSection("ROI" + j);
                    objROI.ref_strROIName = objFile.GetValueAsString("Name", "", 2);
                    objROI.ref_intType = objFile.GetValueAsInt("Type", 4, 2);
                    objROI.ref_ROIPositionX = objFile.GetValueAsInt("PositionX", 0, 2);
                    objROI.ref_ROIPositionY = objFile.GetValueAsInt("PositionY", 0, 2);
                    objROI.ref_ROIWidth = objFile.GetValueAsInt("Width", 100, 2);
                    objROI.ref_ROIHeight = objFile.GetValueAsInt("Height", 100, 2);
                    objROI.ref_intStartOffsetX = objFile.GetValueAsInt("StartOffsetX", 0, 2);
                    objROI.ref_intStartOffsetY = objFile.GetValueAsInt("StartOffsetY", 0, 2);
                    //objROI.SetROIPixelAverage(objFile.GetValueAsFloat("AreaPixel", 100.0f, 2));
                    //if (objROI.ref_intType > 1)
                    //{
                    //    objROI.ref_ROIOriPositionX = objROI.ref_ROIPositionX;
                    //    objROI.ref_ROIOriPositionY = objROI.ref_ROIPositionY;
                    //}

                    arrROIs[i].Add(objROI);
                }
            }
        }
        private void LoadROISetting(string strPath, List<ROI> arrROIs)
        {
            if (arrROIs == null)
                return;

            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs[i] != null)
                    arrROIs[i].Dispose();
            }

            arrROIs.Clear();

            XmlParser objFile = new XmlParser(strPath);
            int intChildCount;
            ROI objROI;
            objFile.GetFirstSection("Unit" + 0);
            intChildCount = objFile.GetSecondSectionCount();
            for (int j = 0; j < intChildCount; j++)
            {
                objROI = new ROI();
                objFile.GetSecondSection("ROI" + j);
                objROI.ref_strROIName = objFile.GetValueAsString("Name", "", 2);
                objROI.ref_intType = objFile.GetValueAsInt("Type", 4, 2);
                objROI.ref_ROIPositionX = objFile.GetValueAsInt("PositionX", 0, 2);
                objROI.ref_ROIPositionY = objFile.GetValueAsInt("PositionY", 0, 2);
                objROI.ref_ROIWidth = objFile.GetValueAsInt("Width", 100, 2);
                objROI.ref_ROIHeight = objFile.GetValueAsInt("Height", 100, 2);
                objROI.ref_intStartOffsetX = objFile.GetValueAsInt("StartOffsetX", 0, 2);
                objROI.ref_intStartOffsetY = objFile.GetValueAsInt("StartOffsetY", 0, 2);
                objROI.SetROIPixelAverage(objFile.GetValueAsFloat("AreaPixel", 100.0f, 2));
                if (objROI.ref_intType > 1)
                {
                    objROI.ref_ROIOriPositionX = objROI.ref_ROIPositionX;
                    objROI.ref_ROIOriPositionY = objROI.ref_ROIPositionY;
                }

                arrROIs.Add(objROI);

                if (j == 1)
                    arrROIs[1].AttachImage(arrROIs[0]);
            }

        }


        /// <summary>
        ///  Load ROI settings from selected path into ROI
        /// </summary>
        /// <param name="strPath">selected path</param>
        /// <param name="objROI">ROI</param>
        private void LoadROISetting(string strPath, ROI objROI)
        {
            XmlParser objFile = new XmlParser(strPath);
            objFile.GetFirstSection("Unit0");
            objFile.GetSecondSection("ROI0");

            objROI.ref_strROIName = objFile.GetValueAsString("Name", "Unit", 2);
            objROI.ref_intType = objFile.GetValueAsInt("Type", 4, 2);
            objROI.ref_ROIPositionX = objFile.GetValueAsInt("PositionX", 0, 2);
            objROI.ref_ROIPositionY = objFile.GetValueAsInt("PositionY", 0, 2);
            objROI.ref_ROIWidth = objFile.GetValueAsInt("Width", 100, 2);
            objROI.ref_ROIHeight = objFile.GetValueAsInt("Height", 100, 2);

            objROI.ref_intUnitArea = objFile.GetValueAsInt("UnitArea", 0, 2);
            objROI.ref_intEmptyPocketArea = objFile.GetValueAsInt("EmptyPocketArea", 0, 2);
        }

        /// <summary>
        /// Load mark settings from folder path
        /// </summary>
        /// <param name="strFolderPath">folder path</param>
        private void LoadMarkSettings(string strFolderPath)
        {
            XmlParser objFile = new XmlParser(strFolderPath + "Settings.xml");

            //2021-03-01 ZJYEOH : need to set calibration data first because need calibration data when load advanced setting
            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
            {
                m_smVisionInfo.g_arrMarks[u].ref_intDisplayUnitMode = m_smCustomizeInfo.g_intMarkUnitDisplay;
                m_smVisionInfo.g_arrMarks[u].SetCalibrationData(
                                                 m_smVisionInfo.g_fCalibPixelX,
                                                 m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intMarkUnitDisplay);

            }

            // Load mark advance setting
            objFile.GetFirstSection("Advanced");
            if ((m_smCustomizeInfo.g_intWantOCR & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_smVisionInfo.g_blnWhiteOnBlack = objFile.GetValueAsBoolean("WhiteOnBlack", true);
                m_smVisionInfo.g_blnWantMultiTemplates = true; // objFile.GetValueAsBoolean("WantMultiTemplates", true);    2021 04 23 - CCENG: Always true. If user does not want multi template, can set template count to 1
                m_smVisionInfo.g_blnWantSetTemplateBasedOnBinInfo = objFile.GetValueAsBoolean("WantSetTemplateBasedOnBinInfo_PurposelyRename", false);
                m_smVisionInfo.g_blnWantRemoveBorderMode = objFile.GetValueAsBoolean("WantBorderRemoveMode", false);
                m_smVisionInfo.g_blnWantRecogPosition = objFile.GetValueAsBoolean("WantRecogCharPosition", false);
                m_smVisionInfo.g_blnWantSkipMark = false;// objFile.GetValueAsBoolean("WantSkipMark", false);   // 2019 07 08 - CCENG: If really want to skip mark, then add it in option form
                m_smVisionInfo.g_blnWantPin1 = objFile.GetValueAsBoolean("WantPin1", false);
                m_smVisionInfo.g_WantUsePin1OrientationWhenNoMark = objFile.GetValueAsBoolean("WantUsePin1OrientationWhenNoMark", false);
                m_smVisionInfo.g_blnWantGauge = objFile.GetValueAsBoolean("WantGaugeMeasureMarkDimension", false);
                m_smVisionInfo.g_blnWantClearMarkTemplateWhenNewLot = objFile.GetValueAsBoolean("WantClearMarkTemplateWhenNewLot", false);
                m_smVisionInfo.g_blnWantCheckNoMark = objFile.GetValueAsBoolean("WantCheckNoMark", false);
                m_smVisionInfo.g_blnWantCheckMarkBroken = objFile.GetValueAsBoolean("WantCheckBrokenMark", false);
                m_smVisionInfo.g_blnWantCheckMarkTotalExcess = objFile.GetValueAsBoolean("WantCheckTotalExcessMark", false);
                m_smVisionInfo.g_blnWantCheckMarkAverageGrayValue = objFile.GetValueAsBoolean("WantCheckMarkAverageGrayValue", false);
                m_smVisionInfo.g_blnWantUseUnitPatternAsMarkPattern = objFile.GetValueAsBoolean("WantUseUnitPatternAsMarkPattern", false);
                m_smVisionInfo.g_fMarkCharROIOffsetX = objFile.GetValueAsFloat("MarkCharROIOffsetX", 5);
                m_smVisionInfo.g_fMarkCharROIOffsetY = objFile.GetValueAsFloat("MarkCharROIOffsetY", 5);
                m_smVisionInfo.g_blnWantCheckContourOnMark = objFile.GetValueAsBoolean("WantCheckContourOnMark", false);
                m_smVisionInfo.g_blnWantMark2DCode = objFile.GetValueAsBoolean("WantMark2DCode", false);
                m_smVisionInfo.g_int2DCodeType = objFile.GetValueAsInt("CodeType", 0);
                m_smVisionInfo.g_blnWantDontCareArea_Mark = objFile.GetValueAsBoolean("WantDontCareAreaMark", false);
                m_smVisionInfo.g_blnWantRotateMarkImageUsingPkgAngle = objFile.GetValueAsBoolean("WantRotateMarkImageUsingPkgAngle", false);
                m_smVisionInfo.g_blnWantCheckMarkAngle = objFile.GetValueAsBoolean("WantCheckMarkAngle", false);
                m_smVisionInfo.g_blnUseDefaultMarkScoreAfterClearTemplate = objFile.GetValueAsBoolean("UseDefaultMarkScoreAfterNewLotClearTemplate", false);
                m_smVisionInfo.g_blnSeparateExtraMarkThreshold = objFile.GetValueAsBoolean("SeparateExtraMarkThreshold", false);
                m_smVisionInfo.g_blnWantExcessMarkThresholdFollowExtraMarkThreshold = objFile.GetValueAsBoolean("WantExcessMarkThresholdFollowExtraMarkThreshold", false);
                //m_smVisionInfo.g_blnWantUseLeadPointOffsetMarkROI = objFile.GetValueAsBoolean("WantUseLeadPointOffsetMarkROI", false);
                m_smVisionInfo.g_blnWantRemoveBorderWhenLearnMark = objFile.GetValueAsBoolean("WantRemoveBorderWhenLearnMark", false);
                m_smVisionInfo.g_blnWantCheckBarPin1 = objFile.GetValueAsBoolean("WantCheckBarPin1", false);
                m_smVisionInfo.g_blnUseOCR = objFile.GetValueAsBoolean("WantUseOCROnly", false);
                m_smVisionInfo.g_blnUseOCRandOCV = objFile.GetValueAsBoolean("WantUseOCRandOCV", false);
                m_smVisionInfo.g_intExtraExcessMarkInspectionAreaCutMode = objFile.GetValueAsInt("ExtraExcessMarkInspectionAreaCutMode", 0);
                m_smVisionInfo.g_intDefaultMarkScore = objFile.GetValueAsInt("DefaultMarkScore", 50);
                m_smVisionInfo.g_intMarkScoreOffset = objFile.GetValueAsInt("MarkScoreOffset", 70);
                m_smVisionInfo.g_intMarkOriPositionScore = objFile.GetValueAsInt("MarkOriPositionScore", 0);
                m_smVisionInfo.g_intCheckMarkAngleMinMaxTolerance = objFile.GetValueAsInt("CheckMarkAngleMinMaxTolerance", 10);
                m_smVisionInfo.g_intMinMarkScore = objFile.GetValueAsInt("MinMarkScore", 30);
                m_smVisionInfo.g_intMaxMarkTemplate = objFile.GetValueAsInt("MaxMarkTemplate", 4);
                m_smVisionInfo.g_intMarkDefectInspectionMethod = objFile.GetValueAsInt("MarkDefectInspectionMethod", 0);
                m_smVisionInfo.g_intMarkTextShiftMethod = objFile.GetValueAsInt("MarkTextShiftMethod", 0);
                m_smVisionInfo.g_intFinalReduction_Direction = objFile.GetValueAsInt("FinalReduction_Direction", 2);
                m_smVisionInfo.g_intFinalReduction_MarkDeg = objFile.GetValueAsInt("FinalReduction_MarkDeg", 0);
                m_smVisionInfo.g_intRotationInterpolation_Mark = objFile.GetValueAsInt("RotationInterpolation_Mark", 4);
                if (m_smVisionInfo.g_intRotationInterpolation_Mark != 0 && m_smVisionInfo.g_intRotationInterpolation_Mark != 4) // Make sure interpolation is 0 or 4 only
                    m_smVisionInfo.g_intRotationInterpolation_Mark = 4;
                m_smVisionInfo.g_intRotationInterpolation_PkgBright = objFile.GetValueAsInt("RotationInterpolation_PkgBright", 4);
                if (m_smVisionInfo.g_intRotationInterpolation_PkgBright != 0 && m_smVisionInfo.g_intRotationInterpolation_PkgBright != 4) // Make sure interpolation is 0 or 4 only
                    m_smVisionInfo.g_intRotationInterpolation_PkgBright = 4;
                m_smVisionInfo.g_intRotationInterpolation_PkgDark = objFile.GetValueAsInt("RotationInterpolation_PkgDark", 4);
                if (m_smVisionInfo.g_intRotationInterpolation_PkgDark != 0 && m_smVisionInfo.g_intRotationInterpolation_PkgDark != 4) // Make sure interpolation is 0 or 4 only
                    m_smVisionInfo.g_intRotationInterpolation_PkgDark = 4;
                m_smVisionInfo.g_intMarkInspectionAreaGrayValueSensitivity = objFile.GetValueAsInt("MarkInspectionAreaGrayValueSensitivity", 45);
                m_smVisionInfo.g_intMarkMergeSensitivity = objFile.GetValueAsInt("MarkMergeSensitivity", 3);
                m_smVisionInfo.g_intMarkBrightSensitivity = objFile.GetValueAsInt("MarkBrightSensitivity", 50);
                m_smVisionInfo.g_intMarkDarkSensitivity = objFile.GetValueAsInt("MarkDarkSensitivity", 30);

                m_smVisionInfo.g_blnWantUseMarkTypeInspectionSetting = objFile.GetValueAsBoolean("WantUseMarkTypeInspectionSetting", false);
                m_smVisionInfo.g_blnWantCheckCharExcessMark = objFile.GetValueAsBoolean("WantCheckCharExcessMark", true);
                m_smVisionInfo.g_blnWantCheckCharMissingMark = objFile.GetValueAsBoolean("WantCheckCharMissingMark", true);
                m_smVisionInfo.g_blnWantCheckCharBrokenMark = objFile.GetValueAsBoolean("WantCheckCharBrokenMark", true);
                m_smVisionInfo.g_blnWantCheckLogoExcessMark = objFile.GetValueAsBoolean("WantCheckLogoExcessMark", true);
                m_smVisionInfo.g_blnWantCheckLogoMissingMark = objFile.GetValueAsBoolean("WantCheckLogoMissingMark", true);
                m_smVisionInfo.g_blnWantCheckLogoBrokenMark = objFile.GetValueAsBoolean("WantCheckLogoBrokenMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol1ExcessMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol1MissingMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol1BrokenMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol2ExcessMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol2MissingMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol2BrokenMark", true);

                for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                {
                    //m_smVisionInfo.g_arrMarks[u].ref_intDisplayUnitMode = m_smCustomizeInfo.g_intMarkUnitDisplay;
                    //m_smVisionInfo.g_arrMarks[u].SetCalibrationData(
                    //                                 m_smVisionInfo.g_fCalibPixelX,
                    //                                 m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intMarkUnitDisplay);
                    m_smVisionInfo.g_arrMarks[u].ref_intPin1PositionControl = objFile.GetValueAsInt("Pin1PositionControl", 0);
                    m_smVisionInfo.g_arrMarks[u].ref_intPin1ImageNo = objFile.GetValueAsInt("Pin1ImageNo", 0);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckMarkAverageGrayValue = m_smVisionInfo.g_blnWantCheckMarkAverageGrayValue;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseUnitPatternAsMarkPattern = m_smVisionInfo.g_blnWantUseUnitPatternAsMarkPattern;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseExcessMissingMarkAffectScore = objFile.GetValueAsBoolean("WantUseExcessMissingMarkAffectScore", false);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckTotalExcessMark = m_smVisionInfo.g_blnWantCheckMarkTotalExcess;
                    m_smVisionInfo.g_arrMarks[u].ref_fCharROIOffsetX = m_smVisionInfo.g_fMarkCharROIOffsetX;
                    m_smVisionInfo.g_arrMarks[u].ref_fCharROIOffsetY = m_smVisionInfo.g_fMarkCharROIOffsetY;
                    m_smVisionInfo.g_arrMarks[u].ref_intDefaultCharSetting = objFile.GetValueAsInt("DefaultMarkScore", 50);
                    m_smVisionInfo.g_arrMarks[u].ref_blnUseDefaultSettingMarkAfterClearTemplate = objFile.GetValueAsBoolean("UseDefaultMarkScoreAfterNewLotClearTemplate", false);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantDontCareIgnoredMarkWholeArea = objFile.GetValueAsBoolean("WantDontCareIgnoredMarkWholeArea", false);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseGrayValue = (m_smVisionInfo.g_intMarkDefectInspectionMethod == 1);
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkTextShiftMethod = m_smVisionInfo.g_intMarkTextShiftMethod;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkInspectionAreaGrayValueSensitivity = m_smVisionInfo.g_intMarkInspectionAreaGrayValueSensitivity;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkBrightSensitivity = m_smVisionInfo.g_intMarkBrightSensitivity;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantSampleAreaScore = objFile.GetValueAsBoolean("WantSampleAreaScore", false);
                    m_smVisionInfo.g_arrMarks[u].ref_fNoMarkMaximumBlobArea = objFile.GetValueAsFloat("NoMarkMaximumBlob", 200);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantDontCareArea = m_smVisionInfo.g_blnWantDontCareArea_Mark;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkScoreOffset = m_smVisionInfo.g_intMarkScoreOffset;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkOriPositionScore = m_smVisionInfo.g_intMarkOriPositionScore;
                    m_smVisionInfo.g_arrMarks[u].ref_blnSeparateExtraMarkThreshold = m_smVisionInfo.g_blnSeparateExtraMarkThreshold;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantExcessMarkThresholdFollowExtraMarkThreshold = m_smVisionInfo.g_blnWantExcessMarkThresholdFollowExtraMarkThreshold;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckBarPin1 = m_smVisionInfo.g_blnWantCheckBarPin1;
                    m_smVisionInfo.g_arrMarks[u].ref_intExtraExcessMarkInspectionAreaCutMode = m_smVisionInfo.g_intExtraExcessMarkInspectionAreaCutMode;
                    m_smVisionInfo.g_arrMarks[u].ref_intCompensateMarkDiffSizeMode = m_smVisionInfo.g_intCompensateMarkDiffSizeMode;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkScoreMode = m_smVisionInfo.g_intMarkScoreMode;


                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharExcessMark = objFile.GetValueAsBoolean("WantCheckCharExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharMissingMark = objFile.GetValueAsBoolean("WantCheckCharMissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharBrokenMark = objFile.GetValueAsBoolean("WantCheckCharBrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoExcessMark = objFile.GetValueAsBoolean("WantCheckLogoExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoMissingMark = objFile.GetValueAsBoolean("WantCheckLogoMissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoBrokenMark = objFile.GetValueAsBoolean("WantCheckLogoBrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol1ExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol1MissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol1BrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol2ExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol2MissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol2BrokenMark", true);

                    if (m_smVisionInfo.g_arrOrients != null && u < m_smVisionInfo.g_arrOrients.Count)
                    {
                        for (int j = 0; j < m_smVisionInfo.g_arrOrients[u].Count; j++)
                            m_smVisionInfo.g_arrOrients[u][j].ref_intCheckMarkAngleMinMaxTolerance = m_smVisionInfo.g_intCheckMarkAngleMinMaxTolerance;
                    }
                }
            }
            else
            {
                m_smVisionInfo.g_blnWhiteOnBlack = objFile.GetValueAsBoolean("WhiteOnBlack", true);
                m_smVisionInfo.g_blnWantMultiGroups = objFile.GetValueAsBoolean("WantMultiGroups", false);
                m_smVisionInfo.g_blnWantBuildTexts = objFile.GetValueAsBoolean("WantBuildTexts", false);
                m_smVisionInfo.g_blnWantMultiTemplates = true; //  objFile.GetValueAsBoolean("WantMultiTemplates", true);   2021 04 23 - CCENG: Always true. If user does not want multi template, can set template count to 1
                m_smVisionInfo.g_blnWantSetTemplateBasedOnBinInfo = objFile.GetValueAsBoolean("WantSetTemplateBasedOnBinInfo_PurposelyRename", false);
                m_smVisionInfo.g_blnWantSet1ToAll = objFile.GetValueAsBoolean("WantSet1ToAll", false);
                m_smVisionInfo.g_blnWantSkipMark = false;// objFile.GetValueAsBoolean("WantSkipMark", false);  // 2019 07 08 - CCENG: If really want to skip mark, then add it in option form
                m_smVisionInfo.g_blnWantPin1 = objFile.GetValueAsBoolean("WantPin1", false);
                m_smVisionInfo.g_WantUsePin1OrientationWhenNoMark = objFile.GetValueAsBoolean("WantUsePin1OrientationWhenNoMark", false);
                m_smVisionInfo.g_blnWantGauge = objFile.GetValueAsBoolean("WantGaugeMeasureMarkDimension", false);
                m_smVisionInfo.g_blnWantClearMarkTemplateWhenNewLot = objFile.GetValueAsBoolean("WantClearMarkTemplateWhenNewLot", false);
                m_smVisionInfo.g_blnWantCheckNoMark = objFile.GetValueAsBoolean("WantCheckNoMark", false);
                m_smVisionInfo.g_blnWantCheckMarkBroken = objFile.GetValueAsBoolean("WantCheckBrokenMark", false);
                m_smVisionInfo.g_blnWantCheckMarkTotalExcess = objFile.GetValueAsBoolean("WantCheckTotalExcessMark", false);
                m_smVisionInfo.g_blnWantCheckMarkAverageGrayValue = objFile.GetValueAsBoolean("WantCheckMarkAverageGrayValue", false);
                m_smVisionInfo.g_blnWantUseUnitPatternAsMarkPattern = objFile.GetValueAsBoolean("WantUseUnitPatternAsMarkPattern", false);
                m_smVisionInfo.g_blnUseOCR = objFile.GetValueAsBoolean("WantUseOCROnly", false);
                m_smVisionInfo.g_blnUseOCRandOCV = objFile.GetValueAsBoolean("WantUseOCRandOCV", false);
                m_smVisionInfo.g_fMarkCharROIOffsetX = objFile.GetValueAsFloat("MarkCharROIOffsetX", 5);
                m_smVisionInfo.g_fMarkCharROIOffsetY = objFile.GetValueAsFloat("MarkCharROIOffsetY", 5);
                m_smVisionInfo.g_blnWantCheckContourOnMark = objFile.GetValueAsBoolean("WantCheckContourOnMark", false);
                m_smVisionInfo.g_blnWantMark2DCode = objFile.GetValueAsBoolean("WantMark2DCode", false);
                m_smVisionInfo.g_blnWantDontCareArea_Mark = objFile.GetValueAsBoolean("WantDontCareAreaMark", false);
                m_smVisionInfo.g_blnWantCheckBarPin1 = objFile.GetValueAsBoolean("WantCheckBarPin1", false);
                m_smVisionInfo.g_intExtraExcessMarkInspectionAreaCutMode = objFile.GetValueAsInt("ExtraExcessMarkInspectionAreaCutMode", 0);
                m_smVisionInfo.g_intCompensateMarkDiffSizeMode = objFile.GetValueAsInt("CompensateMarkDiffSizeMode", 0);
                m_smVisionInfo.g_intMarkScoreMode = objFile.GetValueAsInt("MarkScoreMode", 1);
                m_smVisionInfo.g_blnWantRotateMarkImageUsingPkgAngle = objFile.GetValueAsBoolean("WantRotateMarkImageUsingPkgAngle", false);
                m_smVisionInfo.g_blnWantCheckMarkAngle = objFile.GetValueAsBoolean("WantCheckMarkAngle", false);
                m_smVisionInfo.g_blnUseDefaultMarkScoreAfterClearTemplate = objFile.GetValueAsBoolean("UseDefaultMarkScoreAfterNewLotClearTemplate", false);
                m_smVisionInfo.g_blnSeparateExtraMarkThreshold = objFile.GetValueAsBoolean("SeparateExtraMarkThreshold", false);
                m_smVisionInfo.g_blnWantExcessMarkThresholdFollowExtraMarkThreshold = objFile.GetValueAsBoolean("WantExcessMarkThresholdFollowExtraMarkThreshold", false);
                //m_smVisionInfo.g_blnWantUseLeadPointOffsetMarkROI = objFile.GetValueAsBoolean("WantUseLeadPointOffsetMarkROI", false);
                m_smVisionInfo.g_blnWantRemoveBorderWhenLearnMark = objFile.GetValueAsBoolean("WantRemoveBorderWhenLearnMark", false);
                m_smVisionInfo.g_int2DCodeType = objFile.GetValueAsInt("CodeType", 0);
                m_smVisionInfo.g_intDefaultMarkScore = objFile.GetValueAsInt("DefaultMarkScore", 50);
                m_smVisionInfo.g_intMarkScoreOffset = objFile.GetValueAsInt("MarkScoreOffset", 0);
                m_smVisionInfo.g_intMarkOriPositionScore = objFile.GetValueAsInt("MarkOriPositionScore", 70);
                m_smVisionInfo.g_intCheckMarkAngleMinMaxTolerance = objFile.GetValueAsInt("CheckMarkAngleMinMaxTolerance", 10);
                m_smVisionInfo.g_intMinMarkScore = objFile.GetValueAsInt("MinMarkScore", 30);
                m_smVisionInfo.g_intMaxMarkTemplate = objFile.GetValueAsInt("MaxMarkTemplate", 4);
                m_smVisionInfo.g_intMarkDefectInspectionMethod = objFile.GetValueAsInt("MarkDefectInspectionMethod", 0);
                m_smVisionInfo.g_intMarkTextShiftMethod = objFile.GetValueAsInt("MarkTextShiftMethod", 0);
                m_smVisionInfo.g_intFinalReduction_Direction = objFile.GetValueAsInt("FinalReduction_Direction", 2);
                m_smVisionInfo.g_intFinalReduction_MarkDeg = objFile.GetValueAsInt("FinalReduction_MarkDeg", 0);
                m_smVisionInfo.g_intRotationInterpolation_Mark = objFile.GetValueAsInt("RotationInterpolation_Mark", 4);
                m_smVisionInfo.g_intRotationInterpolation_PkgBright = objFile.GetValueAsInt("RotationInterpolation_PkgBright", 4);
                m_smVisionInfo.g_intRotationInterpolation_PkgDark = objFile.GetValueAsInt("RotationInterpolation_PkgDark", 4);
                m_smVisionInfo.g_intMarkInspectionAreaGrayValueSensitivity = objFile.GetValueAsInt("MarkInspectionAreaGrayValueSensitivity", 45);
                m_smVisionInfo.g_intMarkMergeSensitivity = objFile.GetValueAsInt("MarkMergeSensitivity", 3);
                m_smVisionInfo.g_intMarkBrightSensitivity = objFile.GetValueAsInt("MarkBrightSensitivity", 50);
                m_smVisionInfo.g_intMarkDarkSensitivity = objFile.GetValueAsInt("MarkDarkSensitivity", 30);

                m_smVisionInfo.g_blnWantUseMarkTypeInspectionSetting = objFile.GetValueAsBoolean("WantUseMarkTypeInspectionSetting", false);
                m_smVisionInfo.g_blnWantCheckCharExcessMark = objFile.GetValueAsBoolean("WantCheckCharExcessMark", true);
                m_smVisionInfo.g_blnWantCheckCharMissingMark = objFile.GetValueAsBoolean("WantCheckCharMissingMark", true);
                m_smVisionInfo.g_blnWantCheckCharBrokenMark = objFile.GetValueAsBoolean("WantCheckCharBrokenMark", true);
                m_smVisionInfo.g_blnWantCheckLogoExcessMark = objFile.GetValueAsBoolean("WantCheckLogoExcessMark", true);
                m_smVisionInfo.g_blnWantCheckLogoMissingMark = objFile.GetValueAsBoolean("WantCheckLogoMissingMark", true);
                m_smVisionInfo.g_blnWantCheckLogoBrokenMark = objFile.GetValueAsBoolean("WantCheckLogoBrokenMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol1ExcessMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol1MissingMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol1BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol1BrokenMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol2ExcessMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol2MissingMark", true);
                m_smVisionInfo.g_blnWantCheckSymbol2BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol2BrokenMark", true);

                for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                {
                    //m_smVisionInfo.g_arrMarks[u].ref_intDisplayUnitMode = m_smCustomizeInfo.g_intMarkUnitDisplay;
                    //m_smVisionInfo.g_arrMarks[u].SetCalibrationData(
                    //                                    m_smVisionInfo.g_fCalibPixelX,
                    //                                    m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intMarkUnitDisplay);
                    m_smVisionInfo.g_arrMarks[u].ref_intPin1PositionControl = objFile.GetValueAsInt("Pin1PositionControl", 0);
                    m_smVisionInfo.g_arrMarks[u].ref_intPin1ImageNo = objFile.GetValueAsInt("Pin1ImageNo", 0);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckMarkAverageGrayValue = m_smVisionInfo.g_blnWantCheckMarkAverageGrayValue;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseUnitPatternAsMarkPattern = m_smVisionInfo.g_blnWantUseUnitPatternAsMarkPattern;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseExcessMissingMarkAffectScore = objFile.GetValueAsBoolean("WantUseExcessMissingMarkAffectScore", false);
                    m_smVisionInfo.g_arrMarks[u].ref_fCharROIOffsetX = m_smVisionInfo.g_fMarkCharROIOffsetX;
                    m_smVisionInfo.g_arrMarks[u].ref_fCharROIOffsetY = m_smVisionInfo.g_fMarkCharROIOffsetY;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckTotalExcessMark = m_smVisionInfo.g_blnWantCheckMarkTotalExcess;
                    m_smVisionInfo.g_arrMarks[u].ref_intDefaultCharSetting = objFile.GetValueAsInt("DefaultMarkScore", 50);
                    m_smVisionInfo.g_arrMarks[u].ref_blnUseDefaultSettingMarkAfterClearTemplate = objFile.GetValueAsBoolean("UseDefaultMarkScoreAfterNewLotClearTemplate", false);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantUseGrayValue = (m_smVisionInfo.g_intMarkDefectInspectionMethod == 1);
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkTextShiftMethod = m_smVisionInfo.g_intMarkTextShiftMethod;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkInspectionAreaGrayValueSensitivity = m_smVisionInfo.g_intMarkInspectionAreaGrayValueSensitivity;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkBrightSensitivity = m_smVisionInfo.g_intMarkBrightSensitivity;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantSampleAreaScore = objFile.GetValueAsBoolean("WantSampleAreaScore", false);
                    m_smVisionInfo.g_arrMarks[u].ref_fNoMarkMaximumBlobArea = objFile.GetValueAsFloat("NoMarkMaximumBlob", 200);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantDontCareArea = m_smVisionInfo.g_blnWantDontCareArea_Mark;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkScoreOffset = m_smVisionInfo.g_intMarkScoreOffset;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkOriPositionScore = m_smVisionInfo.g_intMarkOriPositionScore;
                    m_smVisionInfo.g_arrMarks[u].ref_blnSeparateExtraMarkThreshold = m_smVisionInfo.g_blnSeparateExtraMarkThreshold;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantExcessMarkThresholdFollowExtraMarkThreshold = m_smVisionInfo.g_blnWantExcessMarkThresholdFollowExtraMarkThreshold;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckBarPin1 = m_smVisionInfo.g_blnWantCheckBarPin1;
                    m_smVisionInfo.g_arrMarks[u].ref_intExtraExcessMarkInspectionAreaCutMode = m_smVisionInfo.g_intExtraExcessMarkInspectionAreaCutMode;
                    m_smVisionInfo.g_arrMarks[u].ref_intCompensateMarkDiffSizeMode = m_smVisionInfo.g_intCompensateMarkDiffSizeMode;
                    m_smVisionInfo.g_arrMarks[u].ref_intMarkScoreMode = m_smVisionInfo.g_intMarkScoreMode;
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantDontCareIgnoredMarkWholeArea = objFile.GetValueAsBoolean("WantDontCareIgnoredMarkWholeArea", false);
                    m_smVisionInfo.g_arrMarks[u].ref_intMissingMarkInspectionMethod = objFile.GetValueAsInt("MissingMarkInspectionMethod", 0);

                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharExcessMark = objFile.GetValueAsBoolean("WantCheckCharExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharMissingMark = objFile.GetValueAsBoolean("WantCheckCharMissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckCharBrokenMark = objFile.GetValueAsBoolean("WantCheckCharBrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoExcessMark = objFile.GetValueAsBoolean("WantCheckLogoExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoMissingMark = objFile.GetValueAsBoolean("WantCheckLogoMissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckLogoBrokenMark = objFile.GetValueAsBoolean("WantCheckLogoBrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol1ExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol1MissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol1BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol1BrokenMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2ExcessMark = objFile.GetValueAsBoolean("WantCheckSymbol2ExcessMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2MissingMark = objFile.GetValueAsBoolean("WantCheckSymbol2MissingMark", true);
                    m_smVisionInfo.g_arrMarks[u].ref_blnWantCheckSymbol2BrokenMark = objFile.GetValueAsBoolean("WantCheckSymbol2BrokenMark", true);

                    if (m_smVisionInfo.g_arrOrients != null && u < m_smVisionInfo.g_arrOrients.Count)
                    {
                        for (int j = 0; j < m_smVisionInfo.g_arrOrients[u].Count; j++)
                            m_smVisionInfo.g_arrOrients[u][j].ref_intCheckMarkAngleMinMaxTolerance = m_smVisionInfo.g_intCheckMarkAngleMinMaxTolerance;
                    }
                }

                // 2019 06 13 - JBTAN: if bottom disable gauge
                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    m_smVisionInfo.g_blnWantGauge = false;
            }

            // Load mark template
            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
            {
                if (m_smVisionInfo.g_blnWantSet1ToAll) //2020-05-11 ZJYEOH : Load template 1 setting to other template setting
                {
                    m_smVisionInfo.g_arrMarks[u].SetTemplate1SetingToOtherTemplate(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\Mark\\Template\\", m_smVisionInfo.g_arrMarkROIs, m_smVisionInfo.g_arrMarkDontCareROIs.Count, m_smVisionInfo.g_objWhiteImage);
                    m_smVisionInfo.g_arrMarks[u].SaveTemplate(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\Mark\\Template\\", false);
                }
                m_smVisionInfo.g_arrMarks[u].LoadTemplate(strFolderPath + "Template\\", m_smVisionInfo.g_arrMarkROIs, m_smVisionInfo.g_arrMarkDontCareROIs.Count, m_smVisionInfo.g_objWhiteImage);
                m_smVisionInfo.g_arrMarks[u].LoadTemplateOCR(strFolderPath + "Template\\");

                string[] m_strDatabaseName = Directory.GetFiles(strFolderPath + "Template\\", "*.o2?");

                if (m_strDatabaseName.Length != 0)
                    m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].OCRLoad(m_strDatabaseName);
            }

            if (m_smVisionInfo.g_arrMarks[0].GetNumTemplates() == 0)
                m_smVisionInfo.VM_AT_TemplateNotLearn = true;
            else
                m_smVisionInfo.VM_AT_TemplateNotLearn = false;

        }

        /// <summary>
        /// Load Control settings from folder path
        /// </summary>
        /// <param name="strFolderPath">folder path</param>
        private void LoadControlSettings(string strFolderPath)
        {
            XmlParser objFile;
            // Load Pad Advance Setting
            objFile = new XmlParser(strFolderPath + "ControlSetting.xml");
            objFile.GetFirstSection("ControlSetting");
            m_smVisionInfo.g_intOptionControlMask = objFile.GetValueAsLong("ControlMask", 0);
            m_smVisionInfo.g_intOptionControlMask2 = objFile.GetValueAsInt("ControlMask2", 0);
            m_smVisionInfo.g_intOptionControlMask3 = objFile.GetValueAsInt("ControlMask3", 0);
            m_smVisionInfo.g_intOptionControlMask4 = objFile.GetValueAsInt("ControlMask4", 0);
            m_smVisionInfo.g_intOptionControlMask5 = objFile.GetValueAsInt("ControlMask5", 0);
            m_smVisionInfo.g_intPkgOptionControlMask = objFile.GetValueAsLong("PkgControlMask", 0);
            m_smVisionInfo.g_intPkgOptionControlMask2 = objFile.GetValueAsInt("PkgControlMask2", 0);
            m_smVisionInfo.g_intLeadOptionControlMask = objFile.GetValueAsInt("LeadControlMask", 0);
        }

        /// <summary>
        /// Load pad matcher file from selected path into array pad
        /// </summary>
        /// <param name="strPath">selected path</param>
        /// <param name="arrPad">array pad</param>
        private void LoadMatcherFile(string strPath, Pad[] arrPad)
        { 
            //for (int i = 0; i < arrPad.Length; i++)
            //{
            //    if (File.Exists(strPath + "Pad\\Template\\Template" + i + ".mch"))
            //        m_smVisionInfo.g_arrPadOrient[i].LoadPattern(strPath + "Pad\\Template\\Template" + i + ".mch");
            //}
            m_smVisionInfo.g_objPadOrient.LoadPattern4Direction(strPath + "Orient\\Template\\", "PadUnitTemplate0");
            m_smVisionInfo.g_objPadOrient.LoadSubPattern(strPath + "Orient\\Template\\PadOrientTemplate0.mch");
        }

        /// <summary>
        /// Load polygon from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadPolygonSetting(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon.Add(new List<Polygon>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon[h].Add(new Polygon());
                    objFile.GetSecondSection("Template" + i);
                    m_smVisionInfo.g_arrPolygon[h][i].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 2);
                    int intPolygonCount = objFile.GetThirdSectionCount();
                    for (int j = 0; j < intPolygonCount; j++)
                    {
                        int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 2);
                        int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 2);

                        objFile.GetThirdSection("Polygon" + j);
                        int intPointCount = objFile.GetFourthSectionCount();
                        for (int k = 0; k < intPointCount; k++)
                        {
                            strPoint = objFile.GetValueAsString("Point" + k, "0,0", 3).Split(',');
                            if (strPoint.Length == 2)
                            {
                                p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                m_smVisionInfo.g_arrPolygon[h][i].AddPointFromFile(p);
                            }
                        }

                        m_smVisionInfo.g_arrPolygon[h][i].AddPolygon(intROICenterX, intROICenterY);
                    }
                }
            }
        }
        /// <summary>
        /// Load polygon from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadPolygonSetting_Package(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon_Package.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon_Package.Add(new List<List<Polygon>>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon_Package[h].Add(new List<Polygon>());
                    objFile.GetSecondSection("Image" + i);
                    int intImageCount = objFile.GetThirdSectionCount();
                    for (int a = 0; a < intImageCount; a++)
                    {
                        m_smVisionInfo.g_arrPolygon_Package[h][i].Add(new Polygon());
                        objFile.GetThirdSection("Template" + a);
                        m_smVisionInfo.g_arrPolygon_Package[h][i][a].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 3);
                        int intPolygonCount = objFile.GetFourthSectionCount();
                        for (int j = 0; j < intPolygonCount; j++)
                        {
                            int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 3);
                            int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 3);

                            objFile.GetFourthSection("Polygon" + j);
                            int intPointCount = objFile.GetFifthSectionCount();
                            for (int k = 0; k < intPointCount; k++)
                            {
                                strPoint = objFile.GetValueAsString("Point" + k, "0,0", 4).Split(',');
                                if (strPoint.Length == 2)
                                {
                                    p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                    m_smVisionInfo.g_arrPolygon_Package[h][i][a].AddPointFromFile(p);
                                }
                            }
                            objFile.GetFourthSection("Offset" + j);
                            int intPointOffsetCount = objFile.GetFifthSectionCount();
                            for (int k = 0; k < intPointOffsetCount; k++)
                            {
                                strPoint = objFile.GetValueAsString("PointOffset" + k, "0,0", 4).Split(',');
                                if (strPoint.Length == 2)
                                {
                                    p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                    m_smVisionInfo.g_arrPolygon_Package[h][i][a].AddOffsetPointFromFile(p);
                                }
                            }
                            m_smVisionInfo.g_arrPolygon_Package[h][i][a].AddPolygon(intROICenterX, intROICenterY);
                        }
                    }
                }
            }
            
            //2021-02-23 ZJYEOH : In case Polygon file no load anything 
            if (m_smVisionInfo.g_arrPolygon_Package.Count == 0)
            {
                m_smVisionInfo.g_arrPolygon_Package.Add(new List<List<Polygon>>());
                if (m_smVisionInfo.g_arrPolygon_Package[0].Count == 0)
                    m_smVisionInfo.g_arrPolygon_Package[0].Add(new List<Polygon>());
                if (m_smVisionInfo.g_arrPolygon_Package[0].Count == 1)
                    m_smVisionInfo.g_arrPolygon_Package[0].Add(new List<Polygon>());
            }
            else
            {
                if (m_smVisionInfo.g_arrPolygon_Package[0].Count == 0)
                    m_smVisionInfo.g_arrPolygon_Package[0].Add(new List<Polygon>());
                if (m_smVisionInfo.g_arrPolygon_Package[0].Count == 1)
                    m_smVisionInfo.g_arrPolygon_Package[0].Add(new List<Polygon>());
            }
        }
        private void LoadPolygonSetting_PackageColor(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon_PackageColor.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon_PackageColor.Add(new List<List<Polygon>>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon_PackageColor[h].Add(new List<Polygon>());
                    objFile.GetSecondSection("Image" + i);
                    int intImageCount = objFile.GetThirdSectionCount();
                    for (int a = 0; a < intImageCount; a++)
                    {
                        m_smVisionInfo.g_arrPolygon_PackageColor[h][i].Add(new Polygon());
                        objFile.GetThirdSection("Template" + a);
                        m_smVisionInfo.g_arrPolygon_PackageColor[h][i][a].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 3);
                        int intPolygonCount = objFile.GetFourthSectionCount();
                        for (int j = 0; j < intPolygonCount; j++)
                        {
                            int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 3);
                            int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 3);

                            objFile.GetFourthSection("Polygon" + j);
                            int intPointCount = objFile.GetFifthSectionCount();
                            for (int k = 0; k < intPointCount; k++)
                            {
                                strPoint = objFile.GetValueAsString("Point" + k, "0,0", 4).Split(',');
                                if (strPoint.Length == 2)
                                {
                                    p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                    m_smVisionInfo.g_arrPolygon_PackageColor[h][i][a].AddPointFromFile(p);
                                }
                            }
                            objFile.GetFourthSection("Offset" + j);
                            int intPointOffsetCount = objFile.GetFifthSectionCount();
                            for (int k = 0; k < intPointOffsetCount; k++)
                            {
                                strPoint = objFile.GetValueAsString("PointOffset" + k, "0,0", 4).Split(',');
                                if (strPoint.Length == 2)
                                {
                                    p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                    m_smVisionInfo.g_arrPolygon_PackageColor[h][i][a].AddOffsetPointFromFile(p);
                                }
                            }
                            m_smVisionInfo.g_arrPolygon_PackageColor[h][i][a].AddPolygon(intROICenterX, intROICenterY);
                        }
                    }
                }
            }
        }
        private void LoadPolygonSetting_Pad(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon_Pad.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon_Pad.Add(new List<Polygon>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon_Pad[h].Add(new Polygon());
                    objFile.GetSecondSection("Template" + i);
                    m_smVisionInfo.g_arrPolygon_Pad[h][i].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 2);
                    int intPolygonCount = objFile.GetThirdSectionCount();
                    for (int j = 0; j < intPolygonCount; j++)
                    {
                        int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 2);
                        int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 2);

                        objFile.GetThirdSection("Polygon" + j);
                        int intPointCount = objFile.GetFourthSectionCount();
                        for (int k = 0; k < intPointCount; k++)
                        {
                            strPoint = objFile.GetValueAsString("Point" + k, "0,0", 3).Split(',');
                            if (strPoint.Length == 2)
                            {
                                p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                m_smVisionInfo.g_arrPolygon_Pad[h][i].AddPointFromFile(p);
                            }
                        }
                        m_smVisionInfo.g_arrPolygon_Pad[h][i].AddPolygon(intROICenterX, intROICenterY);
                    }
                }
            }
        }
        private void LoadPolygonSetting_Lead3D(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon_Lead3D.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon_Lead3D.Add(new List<Polygon>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon_Lead3D[h].Add(new Polygon());
                    objFile.GetSecondSection("Template" + i);
                    m_smVisionInfo.g_arrPolygon_Lead3D[h][i].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 2);
                    int intPolygonCount = objFile.GetThirdSectionCount();
                    for (int j = 0; j < intPolygonCount; j++)
                    {
                        int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 2);
                        int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 2);

                        objFile.GetThirdSection("Polygon" + j);
                        int intPointCount = objFile.GetFourthSectionCount();
                        for (int k = 0; k < intPointCount; k++)
                        {
                            strPoint = objFile.GetValueAsString("Point" + k, "0,0", 3).Split(',');
                            if (strPoint.Length == 2)
                            {
                                p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                m_smVisionInfo.g_arrPolygon_Lead3D[h][i].AddPointFromFile(p);
                            }
                        }
                        m_smVisionInfo.g_arrPolygon_Lead3D[h][i].AddPolygon(intROICenterX, intROICenterY);
                    }
                }
            }
        }
        private void LoadPolygonSetting_Mark(string strPath)
        {
            // Clear existing polygon array list
            m_smVisionInfo.g_arrPolygon_Mark.Clear();

            XmlParser objFile = new XmlParser(strPath);
            PointF p = new PointF();
            string[] strPoint;

            // Load new polygon data
            int intTypeCount = objFile.GetFirstSectionCount();
            for (int h = 0; h < intTypeCount; h++)
            {
                m_smVisionInfo.g_arrPolygon_Mark.Add(new List<Polygon>());
                objFile.GetFirstSection("Type" + h);
                int intTemplateCount = objFile.GetSecondSectionCount();
                for (int i = 0; i < intTemplateCount; i++)
                {
                    m_smVisionInfo.g_arrPolygon_Mark[h].Add(new Polygon());
                    objFile.GetSecondSection("Template" + i);
                    m_smVisionInfo.g_arrPolygon_Mark[h][i].ref_intFormMode = objFile.GetValueAsInt("FormMode", 0, 2);
                    int intPolygonCount = objFile.GetThirdSectionCount();
                    for (int j = 0; j < intPolygonCount; j++)
                    {
                        int intROICenterX = objFile.GetValueAsInt("ROICenterX", 0, 2);
                        int intROICenterY = objFile.GetValueAsInt("ROICenterY", 0, 2);

                        objFile.GetThirdSection("Polygon" + j);
                        int intPointCount = objFile.GetFourthSectionCount();
                        for (int k = 0; k < intPointCount; k++)
                        {
                            strPoint = objFile.GetValueAsString("Point" + k, "0,0", 3).Split(',');
                            if (strPoint.Length == 2)
                            {
                                p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                m_smVisionInfo.g_arrPolygon_Mark[h][i].AddPointFromFile(p);
                            }
                        }
                        objFile.GetThirdSection("Offset" + j);
                        int intPointOffsetCount = objFile.GetFourthSectionCount();
                        for (int k = 0; k < intPointOffsetCount; k++)
                        {
                            strPoint = objFile.GetValueAsString("PointOffset" + k, "0,0", 3).Split(',');
                            if (strPoint.Length == 2)
                            {
                                p = new PointF(float.Parse(strPoint[0]), float.Parse(strPoint[1]));
                                m_smVisionInfo.g_arrPolygon_Mark[h][i].AddOffsetPointFromFile(p);
                            }
                        }
                        m_smVisionInfo.g_arrPolygon_Mark[h][i].AddPolygon(intROICenterX, intROICenterY);
                    }
                }
            }
        }

        /// <summary>
        /// Load bottom positioning settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        /// <param name="arrGauges">line gauge</param>
        private void LoadPositioningSettings(string strFolderPath)
        {
            m_smVisionInfo.g_objPositioning.LoadPosition(strFolderPath + "Settings.xml", "General");

            // Load Pattern
            if (File.Exists(strFolderPath + "\\Template\\PRS.mch"))
                m_smVisionInfo.g_objPositioning.LoadPattern(strFolderPath + "\\Template\\PRS.mch");

            if (m_smVisionInfo.g_objPositioning.ref_intMethod == 1)
                m_smVisionInfo.g_objPositioning.LoadPattern(strFolderPath + "Template\\Template0.mch",
                    strFolderPath + "Template\\OrientTemplate0.mch");

            if (File.Exists(strFolderPath + "Template\\EmptyTemplate0.mch"))
                m_smVisionInfo.g_objPositioning.LoadEmptyPattern(strFolderPath + "Template\\EmptyTemplate0.mch");

            if (File.Exists(strFolderPath + "Settings.xml"))
                m_smVisionInfo.g_objPositioning.LoadEmptyThreshold(strFolderPath + "Settings.xml", "General");


            if (m_smVisionInfo.g_arrPolygon != null)
                Polygon.LoadPolygon(strFolderPath + "\\Template\\Polygon.xml", m_smVisionInfo.g_arrPolygon);
        }

        private void LoadPocketPositionSettings(string strFolderPath)
        {
            if (File.Exists(strFolderPath + "Settings.xml"))
                m_smVisionInfo.g_objPocketPosition.LoadPocketPosition(strFolderPath + "Settings.xml", "Settings");
            if (File.Exists(strFolderPath + "ROI.xml"))
                ROI.LoadFile(strFolderPath + "ROI.xml", m_smVisionInfo.g_arrPocketPositionROIs);
            if (File.Exists(strFolderPath + "Gauge.xml"))
                LGauge.LoadFile(strFolderPath + "Gauge.xml", m_smVisionInfo.g_arrPocketPositionGauges, m_smVisionInfo.g_WorldShape);
            // Load Pattern
            if (File.Exists(strFolderPath + "\\Template\\Template0.mch"))
                m_smVisionInfo.g_objPocketPosition.LoadPattern(strFolderPath + "Template\\Template0.mch");

        }
        private void LoadBarcodeSettings(string strFolderPath)
        {
            //if (File.Exists(strFolderPath + "Settings.xml"))
            {
                XmlParser objFile;
                objFile = new XmlParser(strFolderPath + "Settings.xml");
                objFile.GetFirstSection("Advanced");
                m_smVisionInfo.g_objBarcode.ref_blnWantUseUniformize3x3 = objFile.GetValueAsBoolean("WantUseUniformize3x3", false, 1);
                m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage = objFile.GetValueAsBoolean("WantUseReferenceImage", false, 1);
                m_smVisionInfo.g_objBarcode.ref_blnWantUseAngleRange = objFile.GetValueAsBoolean("WantUseAngleRange", false, 1);
                m_smVisionInfo.g_objBarcode.ref_blnWantUseGainRange = objFile.GetValueAsBoolean("WantUseGainRange", false, 1);

                m_smVisionInfo.g_objBarcode.LoadBarcode(strFolderPath + "Settings.xml", "Settings");
            }
            //if (File.Exists(strFolderPath + "ROI.xml"))
            {
                ROI.LoadFile(strFolderPath + "ROI.xml", m_smVisionInfo.g_arrBarcodeROIs);
                for (int i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                {
                    if (i == 1)
                        m_smVisionInfo.g_arrBarcodeROIs[i].AttachImage(m_smVisionInfo.g_arrBarcodeROIs[0]);
                    else
                        m_smVisionInfo.g_arrBarcodeROIs[i].AttachImage(m_smVisionInfo.g_arrImages[0]);
                }
            }
            // Load Pattern
            if (File.Exists(strFolderPath + "\\Template\\Template0.mch"))
                m_smVisionInfo.g_objBarcode.LoadPattern(strFolderPath + "Template\\Template0.mch");

            if (File.Exists(strFolderPath + "\\Template\\" + "BrightReferenceImage.bmp"))
                m_smVisionInfo.g_objBrightReferenceImage.LoadImage(strFolderPath + "\\Template\\" + "BrightReferenceImage.bmp");

            if (File.Exists(strFolderPath + "\\Template\\" + "DarkReferenceImage.bmp"))
                m_smVisionInfo.g_objDarkReferenceImage.LoadImage(strFolderPath + "\\Template\\" + "DarkReferenceImage.bmp");

            if (m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage && File.Exists(strFolderPath + "\\Template\\" + "BrightReferenceImage.bmp") && File.Exists(strFolderPath + "\\Template\\" + "DarkReferenceImage.bmp"))
            {
                m_smVisionInfo.AT_PR_GrabImage = true;
                Thread.Sleep(5);
                m_smVisionInfo.AT_PR_GrabImage = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            }
        }
        /// <summary>
        /// Load seal settings from selected path
        /// </summary>
        /// <param name="strPath">selected path</param>
        private void LoadSealSettings(string strPath)
        {
            XmlParser objFileHandle = new XmlParser(strPath + "Settings.xml");
            objFileHandle.GetFirstSection("Advanced");
            m_smVisionInfo.g_objSeal.ref_blnWhiteOnBlack = objFileHandle.GetValueAsBoolean("SealWhiteOnBlack", true);
            m_smVisionInfo.g_objSeal.ref_intDirections = objFileHandle.GetValueAsInt("Direction", 4);
            m_smVisionInfo.g_intMaxSealMarkTemplate = objFileHandle.GetValueAsInt("MaxSealMarkTemplate", 8);
            m_smVisionInfo.g_intMaxSealEmptyTemplate = objFileHandle.GetValueAsInt("MaxSealEmptyTemplate", 4);
            if (m_smVisionInfo.g_intPocketTemplateTotal > m_smVisionInfo.g_intMaxSealEmptyTemplate)
                m_smVisionInfo.g_intPocketTemplateTotal = m_smVisionInfo.g_intMaxSealEmptyTemplate;
            if (m_smVisionInfo.g_intMarkTemplateTotal > m_smVisionInfo.g_intMaxSealMarkTemplate)
                m_smVisionInfo.g_intMarkTemplateTotal = m_smVisionInfo.g_intMaxSealMarkTemplate;
            //m_smVisionInfo.g_objSeal.ref_strPackageName = objFileHandle.GetValueAsString("PackageName", "");
            m_smVisionInfo.g_objSeal.ref_blnWantSkipOrient = objFileHandle.GetValueAsBoolean("WantSkipOrient", false);
            m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHole = objFileHandle.GetValueAsBoolean("WantSkipSprocketHole", true);
            m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleDiameterAndDefect = objFileHandle.GetValueAsBoolean("WantSkipSprocketHoleDiameterAndDefect", true);
            m_smVisionInfo.g_objSeal.ref_blnWantSkipSprocketHoleBrokenAndRoundness = objFileHandle.GetValueAsBoolean("WantSkipSprocketHoleBrokenAndRoundness", true);
            m_smVisionInfo.g_objSeal.ref_intCheckMarkMethod = objFileHandle.GetValueAsInt("CheckMarkMethod", 0);
            m_smVisionInfo.g_objSeal.ref_blnWantDontCareArea = objFileHandle.GetValueAsBoolean("WantDontCareAreaSeal", false);
            m_smVisionInfo.g_objSeal.ref_fMarkAreaBelowPercent = objFileHandle.GetValueAsFloat("MarkAreaBelowPercent", 3f) / 100;
            m_smVisionInfo.g_objSeal.ref_intPatternAngleTolerance = objFileHandle.GetValueAsInt("PatternAngleTolerance", 10);
            m_smVisionInfo.g_blnWantClearSealTemplateWhenNewLot = objFileHandle.GetValueAsBoolean("ClearSealTemplateWhenNewLot", false);
            //switch (objFileHandle.GetValueAsInt("PocketPitch", 0))
            //{
            //    case 0:
            //        m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 4;
            //        break;
            //    case 1:
            //        m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 8;
            //        break;
            //    case 2:
            //        m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 12;
            //        break;
            //    case 3:
            //        m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 2;
            //        break;
            //}
            switch (objFileHandle.GetValueAsInt("PocketPitch", 0))
            {
                case 0:
                    m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 2;
                    break;
                case 1:
                    m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 4;
                    break;
                case 2:
                    m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 8;
                    break;
                case 3:
                    m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 12;
                    break;
                case 4:
                    m_smVisionInfo.g_objSeal.ref_intTapePocketPitch = 16;
                    break;
            }

            m_smVisionInfo.g_objSeal.ref_blnWantUsePatternCheckUnitPresent = objFileHandle.GetValueAsBoolean("WantUsePatternCheckUnitPresent", true);
            m_smVisionInfo.g_objSeal.ref_blnWantUsePixelCheckUnitPresent = objFileHandle.GetValueAsBoolean("WantUsePixelCheckUnitPresent", true);
            m_smVisionInfo.g_objSeal.ref_blnWantCheckSealEdgeStraightness = objFileHandle.GetValueAsBoolean("WantCheckSealEdgeStraightness", false);
        }

        private void LoadSystemROISetting(string strFolderPath)
        {
            ROI.LoadFile(strFolderPath, m_smVisionInfo.g_arrSystemROI);
            ROI objROI;
            for (int i = 0; i < 5; i++)
            {
                switch (i)
                {
                    case 0:
                        //Middle
                        if (m_smVisionInfo.g_arrSystemROI.Count == 0)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            objROI.LoadROISetting(m_smVisionInfo.g_intCameraResolutionWidth / 4, m_smVisionInfo.g_intCameraResolutionHeight / 4, m_smVisionInfo.g_intCameraResolutionWidth / 2, m_smVisionInfo.g_intCameraResolutionHeight / 2);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIPositionX,
                                                                             ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIPositionY,
                                                                            ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIWidth,
                                                                            ((ROI)m_smVisionInfo.g_arrSystemROI[i]).ref_ROIHeight);
                        }

                        m_smVisionInfo.g_arrSystemROI[i].AttachImage(m_smVisionInfo.g_arrImages[0]);
                        break;
                    case 1:
                        //Top
                        if (m_smVisionInfo.g_arrSystemROI.Count < 2)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(0, 0, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth,
                                                m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY);
                        break;
                    case 2:
                        //Left
                        if (m_smVisionInfo.g_arrSystemROI.Count < 3)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(0, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX,
                            m_smVisionInfo.g_intCameraResolutionHeight - m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY);
                        break;
                    case 3:
                        //Bottom
                        if (m_smVisionInfo.g_arrSystemROI.Count < 4)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX, m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight,
                            m_smVisionInfo.g_intCameraResolutionWidth - m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX,
                            m_smVisionInfo.g_intCameraResolutionHeight - (m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight));
                        break;
                    case 4:
                        //Right
                        if (m_smVisionInfo.g_arrSystemROI.Count < 5)
                        {
                            objROI = new ROI("System Search ROI", 1);
                            m_smVisionInfo.g_arrSystemROI.Add(objROI);
                        }
                        m_smVisionInfo.g_arrSystemROI[i].LoadROISetting(m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth, 0,
                            m_smVisionInfo.g_intCameraResolutionWidth - (m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionX + m_smVisionInfo.g_arrSystemROI[0].ref_ROIWidth),
                            m_smVisionInfo.g_arrSystemROI[0].ref_ROIPositionY + m_smVisionInfo.g_arrSystemROI[0].ref_ROIHeight);
                        break;
                }
            }

            // 2019-09-13 ZJYEOH : Save to make sure XML got System ROI values
            ROI.SaveFile(strFolderPath, m_smVisionInfo.g_arrSystemROI);
        }
        private void LoadSystemSetting(string strFolderPath)
        {
            XmlParser objFile = new XmlParser(strFolderPath + "Settings.xml");

            objFile.GetFirstSection("ImageMaskingSetting");
            int intChildCount = objFile.GetSecondSectionCount();
            for (int j = 0; j < intChildCount; j++)
            {
                if (m_smVisionInfo.g_arrImageMaskingSetting.Count <= j)
                {
                    m_smVisionInfo.g_arrImageMaskingSetting.Add(objFile.GetValueAsInt("ImageMaskingSetting" + j, 0));
                }
            }

            objFile.GetFirstSection("ImageMaskingGain");
            intChildCount = objFile.GetSecondSectionCount();
            for (int j = 0; j < intChildCount; j++)
            {
                if (m_smVisionInfo.g_arrImageMaskingGain.Count <= j)
                {
                    m_smVisionInfo.g_arrImageMaskingGain.Add(objFile.GetValueAsFloat("ImageMaskingGain" + j, 1f));
                }
            }

            objFile.GetFirstSection("ImageMaskingThreshold");
            m_smVisionInfo.g_intImageMaskingThreshold = objFile.GetValueAsInt("ImageMaskingThresholdValue", 50);
            m_smVisionInfo.g_intWhiteBackgroundImageIndex = objFile.GetValueAsInt("WhiteBackgroundImageIndex", 0);

            for (int i = 0; i < m_smVisionInfo.g_arrImages.Count; i++)
            {
                if (m_smVisionInfo.g_arrImageMaskingSetting.Count <= i)
                {
                    m_smVisionInfo.g_arrImageMaskingSetting.Add(0);
                }

                if (m_smVisionInfo.g_arrImageMaskingGain.Count <= i)
                {
                    m_smVisionInfo.g_arrImageMaskingGain.Add(1f);
                }

                if (m_smVisionInfo.g_arrImageMaskingAvailable.Count <= i)
                {
                    m_smVisionInfo.g_arrImageMaskingAvailable.Add(false);
                }
                else
                {
                    m_smVisionInfo.g_arrImageMaskingAvailable[i] = false;
                }

                if (m_smVisionInfo.g_arrReferenceImages.Count <= i)
                    m_smVisionInfo.g_arrReferenceImages.Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                if (m_smVisionInfo.g_arrInvertedReferenceImages.Count <= i)
                    m_smVisionInfo.g_arrInvertedReferenceImages.Add(new ImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));

                if (File.Exists(strFolderPath + "ReferenceImages" + i + ".bmp"))
                {
                    m_smVisionInfo.g_arrReferenceImages[i].LoadImage(strFolderPath + "ReferenceImages" + i + ".bmp");
                    m_smVisionInfo.g_arrImageMaskingAvailable[i] = true;
                }

                if (File.Exists(strFolderPath + "InvertedReferenceImages" + i + ".bmp"))
                {
                    m_smVisionInfo.g_arrInvertedReferenceImages[i].LoadImage(strFolderPath + "InvertedReferenceImages" + i + ".bmp");
                }

                if ((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (m_smVisionInfo.g_arrReferenceColorImages.Count <= i)
                        m_smVisionInfo.g_arrReferenceColorImages.Add(new CImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));
                    if (m_smVisionInfo.g_arrInvertedReferenceColorImages.Count <= i)
                        m_smVisionInfo.g_arrInvertedReferenceColorImages.Add(new CImageDrawing(true, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight));

                    if (File.Exists(strFolderPath + "ReferenceColorImages" + i + ".bmp"))
                    {
                        m_smVisionInfo.g_arrReferenceColorImages[i].LoadImage(strFolderPath + "ReferenceColorImages" + i + ".bmp");
                        m_smVisionInfo.g_arrImageMaskingAvailable[i] = true;

                        STTrackLog.WriteLine("Load Color Uniformize Ref. Image: " + strFolderPath + "ReferenceColorImages" + i + ".bmp");                        
                    }

                    if (File.Exists(strFolderPath + "InvertedReferenceColorImages" + i + ".bmp"))
                    {
                        m_smVisionInfo.g_arrInvertedReferenceColorImages[i].LoadImage(strFolderPath + "InvertedReferenceColorImages" + i + ".bmp");
                    }
                }
            }

            if (m_smVisionInfo.g_arrImageMaskingAvailable.Contains(true) && (m_smVisionInfo.g_arrImageMaskingSetting.Contains(1) || m_smVisionInfo.g_arrImageMaskingSetting.Contains(2)))
            {
                m_smVisionInfo.AT_PR_GrabImage = true;
                Thread.Sleep(5);
                m_smVisionInfo.AT_PR_GrabImage = false;
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            }
        }
        private void ModifyMarkImage(bool blnMouseLeft)
        {
            if (!m_blnDrawLineDone)
            {
                m_blnDrawLineDone = true;
                m_pLineStartPrev = m_pLineStopPrev;
                staticTextureBrush = null;
                staticPenRubout = null;
                pic_Image.Image = null;

                if (m_blnDrawLine)
                {
                    if (m_pLineStop != new Point(0, 0))
                        CutObject(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][0], m_smVisionInfo.g_blnCutMode,
                            m_smVisionInfo.g_blnWhiteOnBlack, m_pLineStart, m_pLineStop);

                    if (m_smVisionInfo.g_intMarkDefectInspectionMethod == 0)
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].BuildLearnObject((ROI)m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1], false, true);
                    else
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].BuildLearnObject_UsingGrayValue(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1], false, true, m_smVisionInfo.g_intMarkInspectionAreaGrayValueSensitivity, m_smVisionInfo.g_intMarkBrightSensitivity);

                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
                m_blnDrawLine = false;
            }

            if (!m_blnDrawRectDone)
            {
                m_blnDrawRectDone = true;
                if (m_blnDrawRect)
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 12)
                    {
                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                        {
                            m_pRectStart = new Point((int)(m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStart.Y / m_smVisionInfo.g_fScaleY));
                            m_pRectStop = new Point((int)(m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStop.Y / m_smVisionInfo.g_fScaleY));
                        }

                        m_smVisionInfo.g_arrOrientGaugeM4L[m_smVisionInfo.g_intSelectedUnit].AddDontCareROI(m_pRectStart, m_pRectStop);

                        m_blnDrawRect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    else
                    {
                        bool blnResetPreviousChars = false;
                        if (Control.ModifierKeys != Keys.Control)//((Control.ModifierKeys & Keys.Shift) != Keys.Shift)
                        {
                            //blnResetPreviousChars = true; 25062019 ZJYEOH : No need press Ctrl to select multiple mark
                        }

                        ROI objROI = new ROI();
                        objROI.AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                        objROI.LoadROISetting(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalX,
                             m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalY,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight);

                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                        {
                            m_pRectStart = new Point((int)(m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStart.Y / m_smVisionInfo.g_fScaleY));
                            m_pRectStop = new Point((int)(m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStop.Y / m_smVisionInfo.g_fScaleY));
                        }
                        int intSelectedType = toolStripComboBox_MarkType.SelectedIndex;

                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectBuildOcvCharForAction(
                            m_pRectStart, m_pRectStop, 0, 0, blnResetPreviousChars, blnMouseLeft, true, ref intSelectedType);

                        if (!blnMouseLeft)
                            toolStripComboBox_MarkType.SelectedIndex = intSelectedType;

                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetTemplateImage(
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1],
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionX,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIPositionY,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight);

                        m_blnDrawRect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                }
                else // when user click only without drag rectangle
                {
                    if (m_smVisionInfo.g_intLearnStepNo != 12)
                    {
                        bool blnResetPreviousChars = false;
                        if (Control.ModifierKeys != Keys.Control)//((Control.ModifierKeys & Keys.Shift) != Keys.Shift)
                        {
                            //blnResetPreviousChars = true; 25062019 ZJYEOH : No need press Ctrl to select multiple mark
                        }

                        ROI objROI = new ROI();
                        objROI.AttachImage(m_smVisionInfo.g_arrRotatedImages[0]);
                        objROI.LoadROISetting(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalX,
                             m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalY,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth,
                            m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight);
                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                        {
                            m_pRectStart = new Point((int)(m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStart.Y / m_smVisionInfo.g_fScaleY));
                            m_pRectStop = new Point((int)(m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStop.Y / m_smVisionInfo.g_fScaleY));
                        }
                        int intSelectedType = toolStripComboBox_MarkType.SelectedIndex;

                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectBuildOcvCharForAction(
                            m_pRectStart, m_pRectStart, 0, 0, blnResetPreviousChars, blnMouseLeft, false, ref intSelectedType);

                        if (!blnMouseLeft)
                            toolStripComboBox_MarkType.SelectedIndex = intSelectedType;

                        //m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectTemplateChars(
                        //    objROI, blnResetPreviousChars, m_pRectStart, m_pRectStart);

                        m_blnDrawRect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                }
            }
        }

        private void ModifyPadImage()
        {
            if (!m_blnDrawLineDone)
            {
                m_blnDrawLineDone = true;
                m_pLineStartPrev = m_pLineStopPrev;
                staticTextureBrush = null;
                staticPenRubout = null;
                pic_Image.Image = null;

                int intPositionX = m_intMouseHitX;
                int intPositionY = m_intMouseHitY;

                if (m_blnDrawLine)
                {
                    if (m_pLineStop != new Point(0, 0))
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                CutObject(m_smVisionInfo.g_arrPadROIs[k][0], m_smVisionInfo.g_blnCutMode, m_smVisionInfo.g_arrPad[k].ref_blnWhiteOnBlack, m_pLineStart, m_pLineStop);

                                bool blnUseDoubleThreshold = false;
                                if (blnUseDoubleThreshold && k > 0)
                                    m_smVisionInfo.g_arrPad[k].BuildDoubleThresholdPadObjects(m_smVisionInfo.g_arrPadROIs[k][2], k);
                                else
                                    m_smVisionInfo.g_arrPad[k].BuildOnlyPadObjects(m_smVisionInfo.g_arrPadROIs[k][2]);
                                m_smVisionInfo.g_arrPad[k].ClearTempBlobsFeatures();
                                m_smVisionInfo.g_arrPad[k].SetBlobsFeaturesToTempArray(m_smVisionInfo.g_arrPadROIs[k][2],
                                    m_smVisionInfo.g_arrPadROIs[k][2].ref_ROITotalX - m_smVisionInfo.g_arrPadROIs[k][3].ref_ROITotalX,
                                      m_smVisionInfo.g_arrPadROIs[k][2].ref_ROITotalY - m_smVisionInfo.g_arrPadROIs[k][3].ref_ROITotalY);
                                m_smVisionInfo.g_arrPad[k].CompareSelectedBlobs();
                            }
                        }

                        m_smVisionInfo.g_blnViewObjectsBuilded = true;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }

                }
                m_blnDrawLine = false;
            }

            if (!m_blnDrawRectDone)
            {
                m_blnDrawRectDone = true;
                if (m_blnDrawRect)
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        int intOrientMaxX, intOrientMinX, intOrientMaxY, intOrientMinY;

                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (m_smVisionInfo.g_intSelectedROI != k)
                                continue;

                            //int intTolerance = m_smVisionInfo.g_arrPad[k].ref_intPadROISizeToleranceADV;
                            //intOrientMaxX = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionX + intTolerance +
                            //               m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                            //intOrientMinX = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionX - intTolerance) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                            //intOrientMaxY = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionY + intTolerance +
                            //                m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIHeight) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                            //intOrientMinY = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionY - intTolerance) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

                            // 2019-11-01 ZJYEOH : Pad ROI Tolerance now separate into 4 sides
                            intOrientMaxX = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionX + m_smVisionInfo.g_arrPad[k].ref_intPadROIStartPixelFromRight +
                                            m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                            intOrientMinX = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionX - m_smVisionInfo.g_arrPad[k].ref_intPadROIStartPixelFromLeft) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                            intOrientMaxY = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionY + m_smVisionInfo.g_arrPad[k].ref_intPadROIStartPixelFromBottom +
                                            m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIHeight) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                            intOrientMinY = (int)Math.Round((m_smVisionInfo.g_arrPadROIs[k][3].ref_ROIPositionY - m_smVisionInfo.g_arrPad[k].ref_intPadROIStartPixelFromTop) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);


                            //intOrientMaxX = m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[k][0].ref_ROIPositionX +
                            //    m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIWidth;
                            //intOrientMinX = m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrPadROIs[k][0].ref_ROIPositionX;
                            //intOrientMaxY = m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[k][0].ref_ROIPositionY +
                            //   m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIHeight;
                            //intOrientMinY = m_smVisionInfo.g_arrPadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrPadROIs[k][0].ref_ROIPositionY;

                            DrawDontCareArea_New(intOrientMinX, intOrientMaxX, intOrientMinY, intOrientMaxY, k);
                        }
                    }
                    else
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            PointF pStartPoint = new PointF(Math.Min(m_pRectStart.X, m_pRectStop.X), Math.Min(m_pRectStart.Y, m_pRectStop.Y));
                            PointF pEndPoint = new PointF(Math.Max(m_pRectStart.X, m_pRectStop.X), Math.Max(m_pRectStart.Y, m_pRectStop.Y));
                            m_smVisionInfo.g_arrPad[k].SelectTemplateObjects(new Point((int)(pStartPoint.X / m_smVisionInfo.g_fScaleX), (int)(pStartPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                 new Point((int)(pEndPoint.X / m_smVisionInfo.g_fScaleX), (int)(pEndPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                m_smVisionInfo.g_arrPadROIs[k][3].ref_ROITotalX,    // 2019 10 21 - CCENG: Change from array index 2 to index 3.
                                                m_smVisionInfo.g_arrPadROIs[k][3].ref_ROITotalY);

                            //m_smVisionInfo.g_arrPad[k].SelectTemplateObjects(new Point((int)((float)m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStart.Y / m_smVisionInfo.g_fScaleY)),
                            //                                                 new Point((int)((float)m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStop.Y / m_smVisionInfo.g_fScaleY)),
                            //                                                m_smVisionInfo.g_arrPadROIs[k][2].ref_ROITotalX,
                            //                                                m_smVisionInfo.g_arrPadROIs[k][2].ref_ROITotalY);

                        }
                    }

                    m_blnDrawRect = false;
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }
        }

        private void ModifyLeadImage()
        {
            if (!m_blnDrawLineDone)
            {
                m_blnDrawLineDone = true;
                m_pLineStartPrev = m_pLineStopPrev;
                staticTextureBrush = null;
                staticPenRubout = null;
                pic_Image.Image = null;

                int intPositionX = m_intMouseHitX;
                int intPositionY = m_intMouseHitY;

                if (m_blnDrawLine)
                {
                    if (m_pLineStop != new Point(0, 0))
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                CutObject(m_smVisionInfo.g_arrLeadROIs[k][0], m_smVisionInfo.g_blnCutMode, m_smVisionInfo.g_arrLead[k].ref_blnWhiteOnBlack, m_pLineStart, m_pLineStop);

                                //bool blnUseDoubleThreshold = false;
                                //if (blnUseDoubleThreshold && k > 0)
                                //    m_smVisionInfo.g_arrPad[k].BuildDoubleThresholdPadObjects(m_smVisionInfo.g_arrPadROIs[k][2], k);
                                //else
                                m_smVisionInfo.g_arrLead[k].BuildOnlyLeadObjects(m_smVisionInfo.g_arrLeadROIs[k][0]);
                                m_smVisionInfo.g_arrLead[k].ClearTempBlobsFeatures();
                                m_smVisionInfo.g_arrLead[k].SetBlobsFeaturesToTempArray(m_smVisionInfo.g_arrLeadROIs[k][0]);
                                m_smVisionInfo.g_arrLead[k].CompareSelectedBlobs();
                            }
                        }

                        m_smVisionInfo.g_blnViewObjectsBuilded = true;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }

                }
                m_blnDrawLine = false;
            }

            if (!m_blnDrawRectDone)
            {
                m_blnDrawRectDone = true;
                if (m_blnDrawRect)
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        int intOrientMaxX, intOrientMinX, intOrientMaxY, intOrientMinY;

                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle())
                            {
                                intOrientMaxX = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX +
                                                m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                                intOrientMinX = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                                intOrientMaxY = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY +
                                                m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                                intOrientMinY = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

                                //intOrientMaxX = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX +
                                //    m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIWidth;
                                //intOrientMinX = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX;
                                //intOrientMaxY = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY +
                                //   m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIHeight;
                                //intOrientMinY = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY;

                                DrawDontCareArea_Lead(intOrientMinX, intOrientMaxX, intOrientMinY, intOrientMaxY, k);
                            }
                        }
                    }
                    else
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;
                            if (m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle())
                            {
                                PointF pStartPoint = new PointF(Math.Min(m_pRectStart.X, m_pRectStop.X), Math.Min(m_pRectStart.Y, m_pRectStop.Y));
                                PointF pEndPoint = new PointF(Math.Max(m_pRectStart.X, m_pRectStop.X), Math.Max(m_pRectStart.Y, m_pRectStop.Y));
                                if (m_smVisionInfo.g_intLearnStepNo == 7)
                                {
                                    m_smVisionInfo.g_arrLead[k].SelectTemplateObjects_BaseLead(new Point((int)(pStartPoint.X / m_smVisionInfo.g_fScaleX), (int)(pStartPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                         new Point((int)(pEndPoint.X / m_smVisionInfo.g_fScaleX), (int)(pEndPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                        m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalX,
                                                        m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalY);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrLead[k].SelectTemplateObjects(new Point((int)(pStartPoint.X / m_smVisionInfo.g_fScaleX), (int)(pStartPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                         new Point((int)(pEndPoint.X / m_smVisionInfo.g_fScaleX), (int)(pEndPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                        m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalX,
                                                        m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalY);
                                }
                                //m_smVisionInfo.g_arrPad[k].SelectTemplateObjects(new Point((int)((float)m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStart.Y / m_smVisionInfo.g_fScaleY)),
                                //                                                 new Point((int)((float)m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStop.Y / m_smVisionInfo.g_fScaleY)),
                                //                                                m_smVisionInfo.g_arrLeadROIs[k][2].ref_ROITotalX,
                                //                                                m_smVisionInfo.g_arrLeadROIs[k][2].ref_ROITotalY);
                            }
                        }
                    }

                    m_blnDrawRect = false;
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }
        }

        private void ModifyLead3DImage()
        {
            if (!m_blnDrawLineDone)
            {
                m_blnDrawLineDone = true;
                m_pLineStartPrev = m_pLineStopPrev;
                staticTextureBrush = null;
                staticPenRubout = null;
                pic_Image.Image = null;

                int intPositionX = m_intMouseHitX;
                int intPositionY = m_intMouseHitY;

                if (m_blnDrawLine)
                {
                    if (m_pLineStop != new Point(0, 0))
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                CutObject(m_smVisionInfo.g_arrLeadROIs[k][0], m_smVisionInfo.g_blnCutMode, m_smVisionInfo.g_arrLead3D[k].ref_blnWhiteOnBlack, m_pLineStart, m_pLineStop);

                                //bool blnUseDoubleThreshold = false;
                                //if (blnUseDoubleThreshold && k > 0)
                                //    m_smVisionInfo.g_arrPad[k].BuildDoubleThresholdPadObjects(m_smVisionInfo.g_arrPadROIs[k][2], k);
                                //else
                                m_smVisionInfo.g_arrLead3D[k].BuildOnlyLeadObjects(m_smVisionInfo.g_arrLeadROIs[k][0]);
                                m_smVisionInfo.g_arrLead3D[k].ClearTempBlobsFeatures();
                                //m_smVisionInfo.g_arrLead3D[k].SetBlobsFeaturesToTempArray(m_smVisionInfo.g_arrLeadROIs[k][0]);
                                m_smVisionInfo.g_arrLead3D[k].CompareSelectedBlobs();
                            }
                        }

                        m_smVisionInfo.g_blnViewObjectsBuilded = true;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }

                }
                m_blnDrawLine = false;
            }

            if (!m_blnDrawRectDone)
            {
                m_blnDrawRectDone = true;
                if (m_blnDrawRect)
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        int intOrientMaxX, intOrientMinX, intOrientMaxY, intOrientMinY;

                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle())
                            {
                                intOrientMaxX = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX +
                                                m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                                intOrientMinX = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                                intOrientMaxY = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY +
                                                m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                                intOrientMinY = (int)Math.Round((m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

                                //intOrientMaxX = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX +
                                //    m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIWidth;
                                //intOrientMinX = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionX + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionX;
                                //intOrientMaxY = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY +
                                //   m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIHeight;
                                //intOrientMinY = m_smVisionInfo.g_arrLeadROIs[k][1].ref_ROIPositionY + m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROIPositionY;

                                DrawDontCareArea_Lead(intOrientMinX, intOrientMaxX, intOrientMinY, intOrientMaxY, k);
                            }
                        }
                    }
                    else
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;
                            if (m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle())
                            {
                                PointF pStartPoint = new PointF(Math.Min(m_pRectStart.X, m_pRectStop.X), Math.Min(m_pRectStart.Y, m_pRectStop.Y));
                                PointF pEndPoint = new PointF(Math.Max(m_pRectStart.X, m_pRectStop.X), Math.Max(m_pRectStart.Y, m_pRectStop.Y));
                                m_smVisionInfo.g_arrLead3D[k].SelectTemplateObjects(new Point((int)(pStartPoint.X / m_smVisionInfo.g_fScaleX), (int)(pStartPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                     new Point((int)(pEndPoint.X / m_smVisionInfo.g_fScaleX), (int)(pEndPoint.Y / m_smVisionInfo.g_fScaleY)),
                                                    m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalX,
                                                    m_smVisionInfo.g_arrLeadROIs[k][0].ref_ROITotalY);

                                //m_smVisionInfo.g_arrPad[k].SelectTemplateObjects(new Point((int)((float)m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStart.Y / m_smVisionInfo.g_fScaleY)),
                                //                                                 new Point((int)((float)m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStop.Y / m_smVisionInfo.g_fScaleY)),
                                //                                                m_smVisionInfo.g_arrLeadROIs[k][2].ref_ROITotalX,
                                //                                                m_smVisionInfo.g_arrLeadROIs[k][2].ref_ROITotalY);
                            }
                        }
                    }

                    m_blnDrawRect = false;
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }
        }

        private void ModifyPackageImage()
        {
            if (m_smVisionInfo.g_intLearnStepNo == 1)
            {
                if (!m_blnDrawRectDone)
                {
                    m_blnDrawRectDone = true;
                    if (m_blnDrawRect)
                    {
                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                        {
                            m_pRectStart = new Point((int)(m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStart.Y / m_smVisionInfo.g_fScaleY));
                            m_pRectStop = new Point((int)(m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStop.Y / m_smVisionInfo.g_fScaleY));
                        }

                        m_smVisionInfo.g_arrPackageGauge2M4L[m_smVisionInfo.g_intSelectedUnit].AddDontCareROI(m_pRectStart, m_pRectStop);

                        m_blnDrawRect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                }
            }
            else if (m_smVisionInfo.g_intLearnStepNo == 0)
            {
                if (!m_blnDrawRectDone)
                {
                    m_blnDrawRectDone = true;
                    if (m_blnDrawRect)
                    {
                        if (m_smVisionInfo.g_fScaleX != 1f || m_smVisionInfo.g_fScaleY != 1f)
                        {
                            m_pRectStart = new Point((int)(m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStart.Y / m_smVisionInfo.g_fScaleY));
                            m_pRectStop = new Point((int)(m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)(m_pRectStop.Y / m_smVisionInfo.g_fScaleY));
                        }

                        m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].AddDontCareROI(m_pRectStart, m_pRectStop);

                        m_blnDrawRect = false;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                }
            }
            else if (m_smVisionInfo.g_intLearnStepNo == 16)
            {
                //if (!m_blnDrawRectDone)
                //{
                //    m_blnDrawRectDone = true;
                //    if (m_blnDrawRect)
                //    {
                //        int intOrientMaxX, intOrientMinX, intOrientMaxY, intOrientMinY;

                //        for (int k = 0; k < m_smVisionInfo.g_arrPackageROIs.Count; k++)
                //        {
                //            int intTolerance = 0;
                //            intOrientMaxX = (int)Math.Round((m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROITotalX + intTolerance +
                //                            m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROIWidth) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                //            intOrientMinX = (int)Math.Round((m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROITotalX - intTolerance) * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                //            intOrientMaxY = (int)Math.Round((m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROITotalY + intTolerance +
                //                            m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROIHeight) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);
                //            intOrientMinY = (int)Math.Round((m_smVisionInfo.g_arrPackageROIs[k][2].ref_ROITotalY - intTolerance) * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

                //            DrawDontCareArea_NewPackage(intOrientMinX, intOrientMaxX, intOrientMinY, intOrientMaxY, k);
                //        }

                //        m_blnDrawRect = false;
                //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //    }
                //}
            }
        }

        private void OpenMarkOrientSetup(int intLearnType)
        {
            m_smVisionInfo.g_strSelectedPage = "";

            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_smVisionInfo.g_strSelectedPage += "Mark";
            }

            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                m_smVisionInfo.g_strSelectedPage += "Orient";
            }
            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
            }
            if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Mark Form", "Pressed Learn Mark Button", "", "", m_smProductionInfo.g_strLotID);
            
            LearnMarkOrientOCRForm objLearnForm = new LearnMarkOrientOCRForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo,
                m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smVisionInfo.g_blnWantGauge, intLearnType);
            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnMarkOrientOCRForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenMarkOrientOCRSetup(int intLearnType)
        {
            m_smVisionInfo.g_strSelectedPage = "OCR";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Mark OCR Form", "Pressed Learn Mark OCR Button", "", "", m_smProductionInfo.g_strLotID);
            LearnOCRForm Form = new LearnOCRForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo,
                m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, intLearnType);
            Form.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(Form);
            tabPage_Settings.Controls["LearnOCRForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenColorPackageSetup()
        {
            
            m_smVisionInfo.g_strSelectedPage = "ColorPackage";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Color Package Form", "Pressed Learn Color Package Button", "", "", m_smProductionInfo.g_strLotID);
            
            LearnColorPackageForm objLearnPackageForm = new LearnColorPackageForm(m_smVisionInfo,
                    m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo, m_smCustomizeInfo);
            objLearnPackageForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnPackageForm);
            tabPage_Settings.Controls["LearnColorPackageForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenPadSetup(int intLearnType)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Pad Form", "Pressed Learn Pad Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_strSelectedPage = "Pad";
            LearnPadForm objLearnPadForm = new LearnPadForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, intLearnType, m_intVisionType);

            objLearnPadForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnPadForm);
            tabPage_Settings.Controls["LearnPadForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenLead3DSetup()
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Lead3D Form", "Pressed Learn Lead3D Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_strSelectedPage = "Lead3D";
            LearnLead3DForm objLearnLead3DForm = new LearnLead3DForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnLead3DForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnLead3DForm);
            tabPage_Settings.Controls["LearnLead3DForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenPositioningSetup()
        {
            m_smVisionInfo.g_strSelectedPage = "Position";

            LearnPositionForm objLearnForm = new LearnPositionForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnPositionForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenPocketPositionSetup()
        {
            
            m_smVisionInfo.g_strSelectedPage = "PocketPosition";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Pocket Position Form", "Pressed Learn Pocket Position Button", "", "", m_smProductionInfo.g_strLotID);
            
            LearnPocketPositionForm objLearnForm = new LearnPocketPositionForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnPocketPositionForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenBarcodeSetup()
        {
            
            m_smVisionInfo.g_strSelectedPage = "Barcode";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Barcode Form", "Pressed Learn Barcode Button", "", "", m_smProductionInfo.g_strLotID);
            
            LearnBarcodeForm objLearnForm = new LearnBarcodeForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_intVisionType);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnBarcodeForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenLeadPocketDontCareAreaFixSetup()
        {
            m_smVisionInfo.g_strSelectedPage = "LeadPocketDontCareFix";
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Learn Lead Pocket Dont Care Manual Form", "Pressed Learn Lead Pocket Dont Care Manual Button", "", "", m_smProductionInfo.g_strLotID);
            LearnLeadPocketDontCareAreaFixForm objLearnForm = new LearnLeadPocketDontCareAreaFixForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnLeadPocketDontCareAreaFixForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenLeadPocketDontCareAreaManualSetup()
        {
            m_smVisionInfo.g_strSelectedPage = "LeadPocketDontCareManual";
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Learn Lead Pocket Dont Care Manual Form", "Pressed Learn Lead Pocket Dont Care Manual Button", "", "", m_smProductionInfo.g_strLotID);
            LearnLeadPocketDontCareAreaManualForm objLearnForm = new LearnLeadPocketDontCareAreaManualForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnLeadPocketDontCareAreaManualForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenLeadPocketDontCareAreaAutoSetup()
        {
            m_smVisionInfo.g_strSelectedPage = "LeadPocketDontCareAuto";
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Learn Lead Pocket Dont Care Manual Form", "Pressed Learn Lead Pocket Dont Care Manual Button", "", "", m_smProductionInfo.g_strLotID);
            LearnLeadPocketDontCareAreaAutoForm objLearnForm = new LearnLeadPocketDontCareAreaAutoForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnLeadPocketDontCareAreaAutoForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenLeadPocketDontCareAreaBlobSetup()
        {
            m_smVisionInfo.g_strSelectedPage = "LeadPocketDontCareBlob";
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Learn Lead Pocket Dont Care Manual Form", "Pressed Learn Lead Pocket Dont Care Manual Button", "", "", m_smProductionInfo.g_strLotID);
            LearnLeadPocketDontCareAreaBlobForm objLearnForm = new LearnLeadPocketDontCareAreaBlobForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnLeadPocketDontCareAreaBlobForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        private void OpenCheckPresentSetup()
        {
            
            m_smVisionInfo.g_strSelectedPage = "UnitPresent";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Unit Present Form", "Pressed Learn Unit Present Button", "", "", m_smProductionInfo.g_strLotID);
            
            LearnCheckPresentForm objLearnForm = new LearnCheckPresentForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);

            objLearnForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnForm);
            tabPage_Settings.Controls["LearnCheckPresentForm"].Show();

            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void OpenSealSetup(int intLearnType)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Seal Form", "Pressed Learn Seal Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_strSelectedPage = "Seal";
            LearnSealForm objLearnSealForm = new LearnSealForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_intVisionType, intLearnType);

            objLearnSealForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnSealForm);
            tabPage_Settings.Controls["LearnSealForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }
        
        private int GetUserRightGroup_Child1(string Child2)
        {
            //NewUserRight objUserRight = new NewUserRight(false);

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    return m_smCustomizeInfo.objNewUserRight.GetOrientationChild1Group(m_smVisionInfo.g_strVisionName, Child2);
                    break;
                case "Mark":
                case "MarkOrient":
                case "MOLi":
                case "Package":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    return m_smCustomizeInfo.objNewUserRight.GetMarkOrientChild1Group(m_smVisionInfo.g_strVisionName, Child2);
                    break;
                case "IPMLi":
                case "IPMLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                    return m_smCustomizeInfo.objNewUserRight.GetInPocketChild1Group(m_smVisionInfo.g_strVisionName, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                //case "BottomPosition":
                //case "BottomPositionOrient":
                //    break;
                //case "TapePocketPosition":
                //    break;
                //case "BottomOrientPad":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    return m_smCustomizeInfo.objNewUserRight.GetPadChild1Group(m_smVisionInfo.g_strVisionName, Child2);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    return m_smCustomizeInfo.objNewUserRight.GetLead3DChild1Group(m_smVisionInfo.g_strVisionName, Child2);
                    break;
                case "Seal":
                    return m_smCustomizeInfo.objNewUserRight.GetSealChild1Group(m_smVisionInfo.g_strVisionName, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                case "Barcode":
                    return m_smCustomizeInfo.objNewUserRight.GetBarcodeChild1Group(m_smVisionInfo.g_strVisionName, Child2);
                    break;
                    //default:

                    //    break;
            }

            return 1;
        }

        private int GetUserRightGroup_Child2(string Child1, string Child2)
        {
            //NewUserRight objUserRight = new NewUserRight(false);

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    return m_smCustomizeInfo.objNewUserRight.GetOrientationChild2Group(Child1, Child2);
                    break;
                case "Mark":
                case "MarkOrient":
                case "MOLi":
                case "Package":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    return m_smCustomizeInfo.objNewUserRight.GetMarkOrientChild2Group(Child1, Child2);
                    break;
                case "IPMLi":
                case "IPMLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                    return m_smCustomizeInfo.objNewUserRight.GetInPocketChild2Group(Child1, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                //case "BottomPosition":
                //case "BottomPositionOrient":
                //    break;
                //case "TapePocketPosition":
                //    break;
                //case "BottomOrientPad":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    return m_smCustomizeInfo.objNewUserRight.GetPadChild2Group(Child1, Child2);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    return m_smCustomizeInfo.objNewUserRight.GetLead3DChild2Group(Child1, Child2);
                    break;
                case "Seal":
                    return m_smCustomizeInfo.objNewUserRight.GetSealChild2Group(Child1, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                case "Barcode":
                    return m_smCustomizeInfo.objNewUserRight.GetBarcodeChild2Group(Child1, Child2);
                    break;
                    //default:

                    //    break;
            }

            return 1;
        }

        private int GetUserRightGroup_Child2(string Child2, bool ForPackage)
        {
            //NewUserRight objUserRight = new NewUserRight(false);
            string Child1 = "";
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                    if (ForPackage)
                        Child1 = "Package";
                    else
                        Child1 = "OPad";
                    return m_smCustomizeInfo.objNewUserRight.GetOrientationChild2Group(Child1, Child2);
                    break;
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    Child1 = "Orient";
                    return m_smCustomizeInfo.objNewUserRight.GetOrientationChild2Group(Child1, Child2);
                    break;
                case "Mark":
                case "MarkOrient":
                case "MOLi":
                case "Package":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    if (ForPackage)
                        Child1 = "Package";
                    else
                        Child1 = "Mark";
                    return m_smCustomizeInfo.objNewUserRight.GetMarkOrientChild2Group(Child1, Child2);
                    break;
                case "IPMLi":
                case "IPMLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                    if (ForPackage)
                        Child1 = "Package";
                    else
                        Child1 = "Mark";
                    return m_smCustomizeInfo.objNewUserRight.GetInPocketChild2Group(Child1, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                //case "BottomPosition":
                //case "BottomPositionOrient":
                //    break;
                //case "TapePocketPosition":
                //    break;
                //case "BottomOrientPad":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (ForPackage)
                        Child1 = "Package";
                    else
                        Child1 = "Pad";
                    return m_smCustomizeInfo.objNewUserRight.GetPadChild2Group(Child1, Child2);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    return m_smCustomizeInfo.objNewUserRight.GetLead3DChild2Group(Child1, Child2);
                    break;
                case "Seal":
                    Child1 = "Seal";
                    return m_smCustomizeInfo.objNewUserRight.GetSealChild2Group(Child1, Child2, m_smVisionInfo.g_intVisionNameNo);
                    break;
                case "Barcode":
                    Child1 = "Barcode";
                    return m_smCustomizeInfo.objNewUserRight.GetBarcodeChild2Group(Child1, Child2);
                    break;
                    //default:

                    //    break;
            }

            return 1;
        }
        /// <summary>
        /// Customize GUI according to user level
        /// </summary>
        /// <param name="blnDeviceReady">true = recipe is available, false = recipe is not available</param>
        public void SetCustomView_Visible(bool blnDeviceReady)
        {
            // -------------------------------------------------------------------------------------------------
            string strChild1 = "System";
            string strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_System.Visible = false;
            else
                btn_System.Visible = true;

            strChild2 = "Camera Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_SystemCamera.Visible = false;
            else
                btn_SystemCamera.Visible = true;

            strChild2 = "Calibration Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled = false;
            else
                btn_SystemCalibration.Visible = btn_SystemCalibration.Enabled = true;

            strChild2 = "Yield Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_Yield.Visible = false;
            else
                btn_Yield.Visible = true;

            strChild2 = "Result Log Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_ResultLog.Visible = false;
            else
            {
                if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                    ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                    ((m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                    ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0) ||
                    ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
                    btn_ResultLog.Visible = true;
                else
                    btn_ResultLog.Visible = false;
            }

            strChild2 = "Set Front Light View Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_SystemFrontView.Visible = false;
            else
            {
                if (m_smVisionInfo.g_intImageMergeType != 0 && m_smVisionInfo.g_arrImages.Count > 1)
                    btn_SystemFrontView.Visible = true;
                else
                    btn_SystemFrontView.Visible = false;
            }

            // ----------------------------------------------------------------------------------------------------------------------

            strChild1 = "";
            strChild2 = "";

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                    strChild1 = "OPad";
                    break;
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    strChild1 = "Orient";
                    break;
                case "Mark":
                case "MarkOrient":
                case "MOLi":
                case "Package":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    strChild1 = "Mark";
                    break;
                case "IPMLi":
                case "IPMLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                    strChild1 = "Mark";
                    break;
                //case "BottomOrientPad":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    strChild1 = "Pad";
                    break;
                case "Li3D":
                case "Li3DPkg":
                    strChild1 = "Lead3D";
                    break;
                case "Seal":
                    strChild1 = "Seal";
                    break;
                case "Barcode":
                    strChild1 = "Barcode";
                    break;
            }

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_Recipe.Visible = btn_Recipe.Enabled = false;
            else
                btn_Recipe.Visible = btn_Recipe.Enabled = true;

            strChild2 = "Learn Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_RecipeLearn.Visible = btn_RecipeLearn.Enabled = false;
            else
                btn_RecipeLearn.Visible = btn_RecipeLearn.Enabled = true;

            strChild2 = "Learn Seal Mark Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnSealMark.Visible = btn_LearnSealMark.Enabled = false;
            else
                btn_LearnSealMark.Visible = btn_LearnSealMark.Enabled = true;

            strChild2 = "Learn Seal Empty Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnSealEmpty.Visible = btn_LearnSealEmpty.Enabled = false;
            else
                btn_LearnSealEmpty.Visible = btn_LearnSealEmpty.Enabled = true;

            strChild2 = "Learn PH Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnPH.Visible = btn_LearnPH.Enabled = false;
            else
                btn_LearnPH.Visible = btn_LearnPH.Enabled = true;

            strChild2 = "Learn Pad Orient Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnPadOrient.Visible = btn_LearnPadOrient.Enabled = false;
            else
                btn_LearnPadOrient.Visible = btn_LearnPadOrient.Enabled = true;

            strChild2 = "Learn Pad Color Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnPadColor.Visible = btn_LearnPadColor.Enabled = false;
            else
                btn_LearnPadColor.Visible = btn_LearnPadColor.Enabled = true;

            strChild2 = "Learn Empty Unit Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnEmptyUnit.Visible = btn_LearnEmptyUnit.Enabled = false;
            else
                btn_LearnEmptyUnit.Visible = btn_LearnEmptyUnit.Enabled = true;

            strChild2 = "Learn Pocket Position Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnPocketPosition.Visible = btn_LearnPocketPosition.Enabled = false;
            else
                btn_LearnPocketPosition.Visible = btn_LearnPocketPosition.Enabled = true;

            strChild2 = "Learn Reference Image Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnReferenceImage.Visible = btn_LearnReferenceImage.Enabled = false;
            else
                btn_LearnReferenceImage.Visible = btn_LearnReferenceImage.Enabled = true;

            strChild2 = "Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled = false;
            else
                btn_OtherSetting.Visible = btn_OtherSetting.Enabled = true;

            strChild2 = "Advance Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_AdvanceSetting.Visible = btn_AdvanceSetting.Enabled = false;
            else
                btn_AdvanceSetting.Visible =  btn_AdvanceSetting.Enabled = true;

            //------------------------------------------------------------------------------------------------------------------------------
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                    strChild1 = "OPad";
                    break;
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                    strChild1 = "Orient";
                    break;
                case "Mark":
                case "MarkOrient":
                case "MOLi":
                case "Package":
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                    strChild1 = "Lead";
                    break;
                case "IPMLi":
                case "IPMLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                    strChild1 = "Lead";
                    break;
                //case "BottomOrientPad":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    strChild1 = "Pad";
                    break;
                case "Li3D":
                case "Li3DPkg":
                    strChild1 = "Lead3D";
                    break;
                case "Seal":
                    strChild1 = "Seal";
                    break;
                case "Barcode":
                    strChild1 = "Barcode";
                    break;
            }

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_Lead.Visible = btn_Lead.Enabled = false;
            else
                btn_Lead.Visible = btn_Lead.Enabled = true;

            strChild2 = "Learn Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LeadLearn.Visible = btn_LeadLearn.Enabled = false;
            else
                btn_LeadLearn.Visible = btn_LeadLearn.Enabled = true;

            strChild2 = "Learn Pocket Dont Care Area Fix";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnLeadPocketDontCareAreaFix.Visible = btn_LearnLeadPocketDontCareAreaFix.Enabled = false;
            else
                btn_LearnLeadPocketDontCareAreaFix.Visible = btn_LearnLeadPocketDontCareAreaFix.Enabled = true;

            strChild2 = "Learn Pocket Dont Care Area Manual";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnLeadPocketDontCareAreaManual.Visible = btn_LearnLeadPocketDontCareAreaManual.Enabled = false;
            else
                btn_LearnLeadPocketDontCareAreaManual.Visible = btn_LearnLeadPocketDontCareAreaManual.Enabled = true;

            strChild2 = "Learn Pocket Dont Care Area Auto";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnLeadPocketDontCareAreaAuto.Visible = btn_LearnLeadPocketDontCareAreaAuto.Enabled = false;
            else
                btn_LearnLeadPocketDontCareAreaAuto.Visible = btn_LearnLeadPocketDontCareAreaAuto.Enabled = true;

            strChild2 = "Learn Pocket Dont Care Area Blob";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnLeadPocketDontCareAreaBlob.Visible = btn_LearnLeadPocketDontCareAreaBlob.Enabled = false;
            else
                btn_LearnLeadPocketDontCareAreaBlob.Visible = btn_LearnLeadPocketDontCareAreaBlob.Enabled = true;

            strChild2 = "Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LeadOtherSetting.Visible = btn_LeadOtherSetting.Enabled = false;
            else
                btn_LeadOtherSetting.Visible = btn_LeadOtherSetting.Enabled = true;

            strChild2 = "Advance Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LeadAdvanceSetting.Visible = btn_LeadAdvanceSetting.Enabled = false;
            else
                btn_LeadAdvanceSetting.Visible = btn_LeadAdvanceSetting.Enabled = true;

            // -----------------------------------------------------------------------------------------------------------------------------
            strChild1 = "Package";
            strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = false;
            else
                btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = true;

            strChild2 = "Learn Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_PkgLearn.Visible = btn_PkgLearn.Enabled = false;
            else
                btn_PkgLearn.Visible = btn_PkgLearn.Enabled = true;

            strChild2 = "Learn Color Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_LearnPackageColor.Visible = btn_LearnPackageColor.Enabled = false;
            else
                btn_LearnPackageColor.Visible = btn_LearnPackageColor.Enabled = true;

            strChild2 = "Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_PkgOtherSetting.Visible = btn_PkgOtherSetting.Enabled = false;
            else
                btn_PkgOtherSetting.Visible = btn_PkgOtherSetting.Enabled = true;

            strChild2 = "Advance Setting Page";
            if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
                btn_PkgAdvanceSetting.Visible = btn_PkgAdvanceSetting.Enabled = false;
            else
                btn_PkgAdvanceSetting.Visible = btn_PkgAdvanceSetting.Enabled = true;

            // ------------------------------------------------------------------------------------------------------------------
            strChild1 = "Position";
            strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_Position.Visible = btn_Position.Enabled = false;
            else
                btn_Position.Visible = btn_Position.Enabled = true;

            // ------------------------------------------------------------------------------------------------------------------
            //strChild1 = "Lead";
            //strChild2 = "";

            //if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
            //    btn_Lead.Visible = btn_Lead.Enabled = false;
            //else
            //    btn_Lead.Visible = btn_Lead.Enabled = true;

            //strChild2 = "Setting Page";
            //if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
            //    btn_LeadOtherSetting.Visible = btn_LeadOtherSetting.Enabled = false;
            //else
            //    btn_LeadOtherSetting.Visible = btn_LeadOtherSetting.Enabled = true;

            //strChild2 = "Advance Setting Page";
            //if (m_intUserGroup > GetUserRightGroup_Child2(strChild1, strChild2))
            //    btn_LeadAdvanceSetting.Visible = btn_LeadAdvanceSetting.Enabled = false;
            //else
            //    btn_LeadAdvanceSetting.Visible = btn_LeadAdvanceSetting.Enabled = true;

            // ------------------------------------------------------------------------------------------------------------------
            strChild1 = "Tolerance";
            strChild2 = "";

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    {
                        strChild1 = "Tol.Pad";

                        if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = false;
                        else
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = true;

                        strChild1 = "Tolerance";
                        strChild2 = "";

                        if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                            btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled = false;
                        else
                            btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled = true;
                    }
                    break;
                case "Li3D":
                case "Li3DPkg":
                    {
                        strChild1 = "Tol.Lead3D";

                        if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = false;
                        else
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = true;

                        strChild1 = "Tolerance";
                        strChild2 = "";

                        if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                            btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled = false;
                        else
                            btn_TolerancePackage.Visible = btn_TolerancePackage.Enabled = true;
                    }
                    break;
                default:
                    {
                        strChild1 = "Tolerance";

                        if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = false;
                        else
                            btn_Tolerance.Visible = btn_Tolerance.Enabled = true;
                    }
                    break;
            }

            //strChild1 = "Tol. Lead";
            //strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_ToleranceLead.Visible = btn_ToleranceLead.Enabled = false;
            else
                btn_ToleranceLead.Visible = btn_ToleranceLead.Enabled = true;

            strChild1 = "Option";
            strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_Options.Visible = btn_Options.Enabled = false;
            else
                btn_Options.Visible = btn_Options.Enabled = true;

            strChild1 = "Test";
            strChild2 = "";

            if (m_intUserGroup > GetUserRightGroup_Child1(strChild1))
                btn_ManualTest.Visible = btn_ManualTest.Enabled = false;
            else
                btn_ManualTest.Visible = btn_ManualTest.Enabled = true;

            tls_Function.Enabled = blnDeviceReady;
        }

        private void SetSelectedModulePage(string strPage)
        {
            m_smVisionInfo.g_strSelectedPage = strPage;
        }

        /// <summary>
        /// Set the tab 
        /// </summary>
        private void SetTabControl()
        {
            STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "a");

            tabCtrl_Production.SelectedTab = tabPage_General;
            m_smVisionInfo.PG_VM_LoadTemplate = true;
            m_smVisionInfo.VM_AT_DisableImageLoad = false;
            m_smVisionInfo.g_intSelectedImage = m_smVisionInfo.g_intProductionViewImage;

            STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "b");

            if (m_smVisionInfo.g_strSelectedPage == "Camera" || m_smVisionInfo.g_strSelectedPage == "Calibrate" || m_smVisionInfo.g_strSelectedPage == "Calibrate5S" || m_smVisionInfo.g_strSelectedPage == "CalibrateLead3D")
                m_smVisionInfo.VS_AT_UpdateQuantity = true;

            

            // If offline page is not displaying
            if (!m_smVisionInfo.g_blnViewOfflinePage)
            {
                STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "c");
                if (m_smVisionInfo.AT_VM_ManualTestMode)
                    m_smVisionInfo.AT_VM_ManualTestMode = false;

                m_smVisionInfo.g_strSelectedPage = "";
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

                STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "d");
            }
            else
            {
                STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "e");
                //m_smVisionInfo.VM_AT_SettingInDialog = true; // 2019 07 09 - Use VM_AT_OfflinePageView instead of VM_AT_SettingInDialog // Old : Set back the VM_AT_SettingInDialog to true because VisionOfflinePage is still displaying.

                // Change back to offline page display after closing the option/tolerance form
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "Orient":
                    case "BottomOrient":
                    case "BottomPosition":
                    case "Mark":
                    case "MarkOrient":
                    case "MarkPkg":
                    case "MOPkg":
                    case "Package":
                        m_smVisionInfo.g_blnDrawMarkResult = false;
                        m_smVisionInfo.g_blnDrawPin1Result = false;
                        m_smVisionInfo.g_blnDrawMark2DCodeResult = false;
                        m_smVisionInfo.g_blnDrawPkgResult = false;
                        m_smVisionInfo.g_blnViewOrientObject = false;
                        m_smVisionInfo.g_blnPackageInspected = false;
                        m_smVisionInfo.g_strSelectedPage = "MNMarkOrient";
                        break;
                    case "UnitPresent":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "PadPos":
                    case "PadPkg":
                    case "PadPkgPos":
                    case "Pad5S":
                    case "Pad5SPos":
                    case "Pad5SPkg":
                    case "Pad5SPkgPos":
                        m_smVisionInfo.g_strSelectedPage = "MNPad";
                        break;
                    case "Li3D":
                    case "Li3DPkg":
                        m_smVisionInfo.g_strSelectedPage = "MNLead3D";
                        break;
                    case "IPMLi":
                    case "IPMLiPkg":
                    case "InPocket":
                    case "InPocketPkg":
                    case "InPocketPkgPos":
                        m_smVisionInfo.g_blnDrawMarkResult = false;
                        m_smVisionInfo.g_blnDrawPin1Result = false;
                        m_smVisionInfo.g_blnDrawMark2DCodeResult = false;
                        m_smVisionInfo.g_blnDrawPkgResult = false;
                        m_smVisionInfo.g_blnViewOrientObject = false;
                        m_smVisionInfo.g_blnDrawPocketPositionResult = false;
                        m_smVisionInfo.g_blnPackageInspected = false;
                        m_smVisionInfo.g_strSelectedPage = "MNMarkOrient";
                        break;
                    case "Seal":
                        m_smVisionInfo.g_strSelectedPage = "MNSeal";
                        break;
                    default:
                        break;
                }

                STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "f");
            }

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

            STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "g");
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":

                    STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "g1");
                    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    {
                        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            break;

                        if (i == 0)
                        {
                            m_smVisionInfo.g_arrPad[i].SetCalibrationData(
                                                          m_smVisionInfo.g_fCalibPixelX,
                                                          m_smVisionInfo.g_fCalibPixelY,
                                                          m_smVisionInfo.g_fCalibOffSetX,
                                                          m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                        }
                        else
                        {
                            m_smVisionInfo.g_arrPad[i].SetCalibrationData(
                                                          m_smVisionInfo.g_fCalibPixelZ,
                                                          m_smVisionInfo.g_fCalibPixelZ,
                                                          m_smVisionInfo.g_fCalibOffSetZ,
                                                          m_smVisionInfo.g_fCalibOffSetZ, m_smCustomizeInfo.g_intUnitDisplay);
                        }
                        //2020-03-25 ZJYEOH : Load again so that tolerance value will not affected by current calibration value after done calibration
                        // Load Pad Template Setting
                        string strSectionName = "";
                        if (i == 0)
                            strSectionName = "CenterROI";
                        else if (i == 1)
                            strSectionName = "TopROI";
                        else if (i == 2)
                            strSectionName = "RightROI";
                        else if (i == 3)
                            strSectionName = "BottomROI";
                        else if (i == 4)
                            strSectionName = "LeftROI";

                        m_smVisionInfo.g_arrPad[i].LoadPad(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\Pad\\Template\\Template.xml", strSectionName);
                    }
                    break;
                case "MarkPkg":
                case "MOPkg":
                case "MOLiPkg":
                case "Package":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLiPkg":
                    {
                        if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                m_smVisionInfo.g_arrMarks[u].SetCalibrationData(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intMarkUnitDisplay);
                            }
                        }

                        STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "g2");
                        for (int i = 0; i < m_smVisionInfo.g_arrPackage.Count; i++)
                        {
                            m_smVisionInfo.g_arrPackage[i].SetCalibrationData(
                                                              m_smVisionInfo.g_fCalibPixelX,
                                                              m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);

                            //2020-03-25 ZJYEOH : Load again so that tolerance value will not affected by current calibration value after done calibration
                            if (i == 0)
                                m_smVisionInfo.g_arrPackage[i].LoadPackage(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "Package\\Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                            else
                            {
                                if (File.Exists(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "Package\\Settings2.xml"))
                                    m_smVisionInfo.g_arrPackage[i].LoadPackage(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "Package\\Settings2.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                                else
                                    m_smVisionInfo.g_arrPackage[i].LoadPackage(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "Package\\Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                            }
                        }

                        if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                m_smVisionInfo.g_arrLead[i].SetCalibrationData(
                          m_smVisionInfo.g_fCalibPixelX,
                          m_smVisionInfo.g_fCalibPixelY,
                          m_smVisionInfo.g_fCalibOffSetX,
                          m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                            }
                        }
                    }
                    break;
                case "BottomOrient":
                case "BottomPosition":
                    {
                        STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "g3");
                        if (m_smVisionInfo.g_arrOrients != null)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrOrients.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrOrients[i].Count; j++)
                                {
                                    m_smVisionInfo.g_arrOrients[i][j].SetCalibrationData(
                                                               m_smVisionInfo.g_fCalibPixelX,
                                                               m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);
                                }
                            }
                        }

                        if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_strVisionName.Contains("BottomPosition") || m_smVisionInfo.g_strVisionName.Contains("BottomOrient")))
                        {
                            m_smVisionInfo.g_arrPackage[0].SetCalibrationData(
                                  m_smVisionInfo.g_fCalibPixelX,
                                  m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intUnitDisplay);

                            m_smVisionInfo.g_arrPackage[0].LoadPackage(m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\" + "Package\\Settings.xml", "Settings", m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY);
                        }
                    }
                    break;
                case "Mark":
                case "MarkOrient":
                case "MO":
                case "InPocket":
                case "IPMLi":
                case "MOLi":
                    {
                        if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                m_smVisionInfo.g_arrMarks[u].SetCalibrationData(m_smVisionInfo.g_fCalibPixelX, m_smVisionInfo.g_fCalibPixelY, m_smCustomizeInfo.g_intMarkUnitDisplay);
                            }
                        }

                        if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                            {
                                m_smVisionInfo.g_arrLead[i].SetCalibrationData(
                          m_smVisionInfo.g_fCalibPixelX,
                          m_smVisionInfo.g_fCalibPixelY,
                          m_smVisionInfo.g_fCalibOffSetX,
                          m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                            }
                        }
                    }
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if ((m_smCustomizeInfo.g_intWantLead3D & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                        {
                            if (i == 0)
                            {
                                m_smVisionInfo.g_arrLead3D[i].SetCalibrationData(
                                                              m_smVisionInfo.g_fCalibPixelX,
                                                              m_smVisionInfo.g_fCalibPixelY,
                                                              m_smVisionInfo.g_fCalibOffSetX,
                                                              m_smVisionInfo.g_fCalibOffSetY, m_smCustomizeInfo.g_intUnitDisplay);
                            }
                            else
                            {
                                m_smVisionInfo.g_arrLead3D[i].SetCalibrationData(
                                                              m_smVisionInfo.g_fCalibPixelZ,
                                                              m_smVisionInfo.g_fCalibPixelZ,
                                                              m_smVisionInfo.g_fCalibOffSetZ,
                                                              m_smVisionInfo.g_fCalibOffSetZ, m_smCustomizeInfo.g_intUnitDisplay);
                            }
                        }
                    }
                    break;
            }

            STTrackLog.WriteLine("After-" + m_smVisionInfo.g_strVisionName + "h");
        }

        /// <summary>
        /// Update the image on picture box
        /// </summary>
        private void UpdatePictureBox()
        {
            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[Draw1]";
            if (m_smVisionInfo.g_blnClearResult)
            {
                m_smVisionInfo.g_blnClearResult = false;

                if (m_smVisionInfo.g_objPositioning != null)
                    m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult = false;
                m_smVisionInfo.g_blnViewPadInspection = false;
                m_smVisionInfo.g_blnViewLeadInspection = false;
                m_smVisionInfo.g_blnViewSealObjectsBuilded = false;
                m_smVisionInfo.g_blnViewUnitPresentObjectsBuilded = false;
                m_smVisionInfo.g_blnViewSealInspection = false;
                m_smVisionInfo.g_blnViewOrientObject = false;
                m_smVisionInfo.g_blnDrawMarkResult = false;
                m_smVisionInfo.g_blnDrawMark2DCodeResult = false;
                m_smVisionInfo.g_blnDrawPkgResult = false;
                m_smVisionInfo.g_blnDrawPin1Result = false;
                m_smVisionInfo.g_blnDrawPocketPositionResult = false;
                m_smVisionInfo.g_blnDrawBarcodeResult = false;
            }

            //DrawTempImage();
            DrawZoomInOutImage();
            DrawMainImage();
            DrawROI();
            DrawGauge();
            DrawMarkObject();
            DrawSealObject();
            DrawOrientObject();
            DrawPadObject();
            DrawLeadObject();
            DrawLead3DObject();
            DrawPackageObject();
            DrawUnitPresent();
            DrawPin1Object();
            Draw2DCodeObject();
            DrawPocketPositionObject();
            DrawBarcodeObject();
            DrawCrosshair();
            DrawPositionObject();
            DrawDontCareArea();
            DrawRectangle();

            ////Draw PH Object
            //if (m_smVisionInfo.g_blnWantCheckPH && m_smProductionInfo.g_blnViewInspection && m_smVisionInfo.g_objPositioning.ref_blnDrawPHResult)
            //{

            //    //m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].RedrawImage(m_Graphic);
            //    m_smVisionInfo.g_objPositioning.DrawPHDefectObjects(m_Graphic, 0, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY);
            //}
            if (m_smVisionInfo.g_blnTrackBasic) m_smVisionInfo.g_strTrackPad += "[Draw2]";

            m_smVisionInfo.g_blnDrawCompletedAfterInspect = true;
        }

        /// <summary>
        /// Change ROI handle to true if the mouse point is within the selected change ROI
        /// </summary>
        /// <param name="intPositionX">Mouse Position X</param>
        /// <param name="intPositionY">Mouse Position Y</param>
        private void VerifyROIArea(int intPositionX, int intPositionY)
        {
            int i = 0;
            // Hit Test - Detects if the cursor is placed over one of the dragging handles
            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "Calibrate":
                    if (m_smVisionInfo.g_intCalibrationType == 0 ||
                        m_smVisionInfo.g_intCalibrationType == 2 ||
                        m_smVisionInfo.g_intCalibrationType == 3 ||
                        m_smVisionInfo.g_intCalibrationType == 4)
                    {
                        if (m_smVisionInfo.g_objCalibrateROI.VerifyROIArea(intPositionX, intPositionY))
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                    break;
                case "Calibrate5S":
                    //m_smVisionInfo.g_objCalibration.VerifyROI(intPositionX, intPositionY);
                    //m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

                    for (int k = 0; k < m_smVisionInfo.g_objCalibration.ref_arrROIs.Count; k++)
                    {
                        if (m_smVisionInfo.g_objCalibration.ref_arrROIs[k].VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedROI = k;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        }
                        else
                            m_smVisionInfo.g_objCalibration.ref_arrROIs[k].ClearDragHandle();
                    }
                    break;
                case "CalibrateLead3D":
                    for (int k = 0; k < m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs.Count; k++)
                    {
                        if (m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[k].VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedROI = k;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        }
                        else
                            m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[k].ClearDragHandle();
                    }
                    break;
                case "BottomOrient":
                case "BottomPosition":
                case "Orient":
                    for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                        for (int j = (m_smVisionInfo.g_arrOrientROIs[i].Count - 1); j >= 0; j--)
                        {
                            if ((m_smVisionInfo.g_arrOrientROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                if (((m_smVisionInfo.g_arrOrientROIs[i][j]).ref_intType == 1) &&
                                    ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) == 0))
                                    m_smVisionInfo.g_blnViewGauge = true;
                                else
                                    m_smVisionInfo.g_blnViewGauge = false;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                if (m_smVisionInfo.g_intLearnStepNo == 0)
                                {
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    // (m_smVisionInfo.g_arrOrientROIs[i][m_smVisionInfo.g_arrOrientROIs[i].Count-1]).ClearDragHandle();
                                    continue;
                                }
                                if (m_smVisionInfo.g_intLearnStepNo == 3)
                                {
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    (m_smVisionInfo.g_arrOrientROIs[i][0]).ClearDragHandle();
                                    continue;
                                }
                                if (m_smVisionInfo.g_intLearnStepNo == 4)
                                {
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    (m_smVisionInfo.g_arrOrientROIs[i][0]).ClearDragHandle();
                                    (m_smVisionInfo.g_arrOrientROIs[i][1]).ClearDragHandle();
                                    continue;
                                }
                                break;
                            }
                        }
                    break;
                case "Mark":
                case "OCR":
                    if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)

                        {
                            if (((ROI)m_smVisionInfo.g_arrMarkDontCareROIs[i]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    if (m_smVisionInfo.g_intLearnStepNo > 5)
                        break;
                    for (i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                        for (int j = (m_smVisionInfo.g_arrMarkROIs[i].Count - 1); j >= 0; j--)
                        {
                            if (((ROI)m_smVisionInfo.g_arrMarkROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                if (((ROI)m_smVisionInfo.g_arrMarkROIs[i][j]).ref_intType == 1)
                                    m_smVisionInfo.g_blnViewGauge = true;
                                else
                                    m_smVisionInfo.g_blnViewGauge = false;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                if (m_smVisionInfo.g_intLearnStepNo == 0)
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                break;
                            }
                        }
                    break;
                case "MarkOrient":
                case "MOLi":
                case "MOPkg":
                    if (m_smVisionInfo.g_blnViewSearchROI)
                    {
                        if (m_smVisionInfo.g_blnDisableMOGauge)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrPackageROIs[i][0]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                                        m_smVisionInfo.g_intSelectedUnit = i;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrOrientROIs[i][0]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                                        m_smVisionInfo.g_intSelectedUnit = i;
                                    break;
                                }
                            }
                        }
                    }
                    if (m_smVisionInfo.g_blnViewMOGauge)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrOrientGaugeM4L[i].VerifyROI(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = i;
                            }
                        }
                    }
                    if (m_smVisionInfo.g_blnViewUnitROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                        {
                            if (((ROI)m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewUnitSurfaceROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                        {
                            if (((ROI)m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewOrientTrainROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                        {
                            if (((ROI)m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][1]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPin1TrainROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPin1.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewMark2DCodeROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                            for (int j = (m_smVisionInfo.g_arrMarkROIs[i].Count - 1); j >= 0; j--)
                            {
                                if (j == 2)
                                {
                                    if (((ROI)m_smVisionInfo.g_arrMarkROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        break;
                                    }
                                }
                            }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 6)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                            for (int j = (m_smVisionInfo.g_arrMarkROIs[i].Count - 1); j >= 0; j--)
                            {
                                if (j == 1)
                                {
                                    if (((ROI)m_smVisionInfo.g_arrMarkROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        if (((ROI)m_smVisionInfo.g_arrMarkROIs[i][j]).ref_intType == 1)
                                            m_smVisionInfo.g_blnViewGauge = true;
                                        else
                                            m_smVisionInfo.g_blnViewGauge = false;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        break;
                                    }
                                }
                            }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                        {
                            if (((ROI)m_smVisionInfo.g_arrMarkDontCareROIs[i]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_intSelectedDontCareROIIndex = i;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                            
                        }
                    }
                    break;
                case "MarkOtherSettingForm":
                    if (m_smVisionInfo.g_intSelectedSetting == 1)
                    {
                        //for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        //{
                        //    if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                        //        continue;

                        //    int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                        //    if (intMaxIndex > 1)
                        //        intMaxIndex = 1;

                        //    for (int j = intMaxIndex; j >= 0; j--)
                        //    {
                        //        if (m_smVisionInfo.g_arrLeadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                        //        {
                        //            m_smVisionInfo.g_intSelectedROI = k;
                        //            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //            m_smVisionInfo.g_intSelectedUnit = 0;

                        //            if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        //            {
                        //                m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                        //            }
                        //            else
                        //            {
                        //                m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                        //            }
                        //            break;
                        //        }
                        //    }
                        //}
                    }
                    else if (m_smVisionInfo.g_intSelectedSetting == 2)
                    {
                        //for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        //{
                        //    m_smVisionInfo.g_arrPackageROIs[i][0].ClearDragHandle();
                        //    if (((ROI)m_smVisionInfo.g_arrPackageROIs[i][0]).VerifyROIArea(intPositionX, intPositionY))
                        //    {
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //        m_smVisionInfo.g_intSelectedUnit = i;
                        //        m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        //        //break;
                        //    }
                        //}
                    }
                    else
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                            for (int j = (m_smVisionInfo.g_arrOrientROIs[i].Count - 1); j >= 0; j--)
                            {
                                if (j == m_smVisionInfo.g_intLearnStepNo)
                                {
                                    if (((ROI)m_smVisionInfo.g_arrOrientROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_intSelectedUnit = i;
                                        break;
                                    }
                                }
                            }
                    }
                    break;
                case "MNMarkOrient":
                    for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                        for (int j = (m_smVisionInfo.g_arrOrientROIs[i].Count - 1); j >= 0; j--)
                        {
                            if (j == m_smVisionInfo.g_intLearnStepNo)
                            {
                                if (((ROI)m_smVisionInfo.g_arrOrientROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    break;
                                }
                            }
                        }
                    break;
                case "ColorPackage":
                case "Package":
                    if (m_smVisionInfo.g_blnViewSearchROI)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageGauge2M4L[i].VerifyROI(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                }
                            }
                        }
                        else
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageGaugeM4L[i].VerifyROI(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true; //2020-11-11 ZJYEOH : To trigger gauge form update setting
                                }
                            }
                        }
                        //for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        //    if (m_smVisionInfo.g_arrPackageROIs[i][0].VerifyROIArea(intPositionX, intPositionY))
                        //    {
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //        m_smVisionInfo.g_intSelectedUnit = i;
                        //        //break;    // 2019 01 15 - CCENG: Don't break bcos other deselect ROI need to call VerifyROIArea() also in order to deselect the ROI's handler.
                        //    }
                    }
                    else if (m_smVisionInfo.g_blnViewPackageTrainROI)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 2)
                            return;

                        if (m_smVisionInfo.g_intLearnStepNo != 20 && m_smVisionInfo.g_intLearnStepNo != 21 && m_smVisionInfo.g_intLearnStepNo != 22)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs[i].Count > 2)
                                {
                                    m_smVisionInfo.g_arrPackageROIs[i][2].ClearDragHandle();
                                    if (m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_intSelectedUnit = i;
                                        m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 20)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs.Count; i++)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPackageDontCareROIs[i].Count; j++)
                                {
                                    if (((ROI)m_smVisionInfo.g_arrPackageDontCareROIs[i][j]).VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        break;
                                    }
                                }

                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 21)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs.Count; i++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedMoldFlashDontCareROIIndex = i;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 22)
                        {
                            if (m_smVisionInfo.g_blnDragROI)
                            {
                                if (m_smVisionInfo.g_arrPackageColorDontCareROIs.Count > m_smVisionInfo.g_intSelectedUnit)
                                {
                                    if (m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        if (m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > 0)
                                        {
                                            m_smVisionInfo.g_intSelectedDontCareROIIndex = m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count - 1;
                                        }
                                    }
                                }
                                
                                if (m_smVisionInfo.g_arrPackageColorDontCareROIs.Count > m_smVisionInfo.g_intSelectedUnit)
                                {
                                    if (m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        for (int j = 0; j < m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                        {
                                            if (((ROI)m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][j]).VerifyROIArea(intPositionX, intPositionY))
                                            {
                                                m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPackageMaskROI)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        {
                            for (int j = 2; j < m_smVisionInfo.g_arrPackageROIs[i].Count; j++)
                            {
                                if (m_smVisionInfo.g_arrPackageROIs[i][j].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = i;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "Gauge":
                    switch (m_smVisionInfo.g_strSelectedRectGauge)
                    {
                        case "MarkOrient":
                        case "MOLi":
                        case "Orient":
                            for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                                if (m_smVisionInfo.g_arrOrientROIs[i][0].VerifyROIArea(intPositionX, intPositionY))
                                    m_smVisionInfo.g_intSelectedUnit = i;
                            break;
                        case "Mark":
                            for (i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                                m_smVisionInfo.g_arrMarkROIs[i][0].VerifyROIArea(intPositionX, intPositionY);
                            break;
                        case "Package":
                        case "Package1":
                        case "Package2":
                            for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                m_smVisionInfo.g_arrPackageROIs[i][0].VerifyROIArea(intPositionX, intPositionY);
                            break;
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "Pad5S":
                    if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                        {
                            if ((m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 1) ||
                                (!m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 2))
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.AT_VM_UpdateResult = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 5 || // || m_smVisionInfo.g_intLearnStepNo == 3 
                             m_smVisionInfo.g_intLearnStepNo == 6 || m_smVisionInfo.g_intLearnStepNo == 7 || m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = 0;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            }
                            else
                                m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            if (m_smVisionInfo.g_arrPadROIs[k][3].VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_intSelectedROI = k; // 2019-11-01 ZJYEOH: Update selected ROI so that when drawing Dont care ROI, it will not exceeded to other ROI
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = 0;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            }
                            else
                                m_smVisionInfo.g_arrPadROIs[k][3].ClearDragHandle();
                        }

                        if (m_smVisionInfo.g_blnUpdateSelectedROI)
                        {
                            if (m_smVisionInfo.g_arrPadDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                            {
                                if (m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > 0)
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count - 1;
                                }
                            }
                        }

                        if (m_smVisionInfo.g_arrPadDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count; j++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI][j]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                        
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 4)
                    {
                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPin1.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            //2020-06-12 ZJYEOH : Not allow to drag center ROI if measure center pkg size using side pkg
                            if (k == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides && m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false))
                                continue;

                            if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrPadROIs[k].Count > 1)
                            {
                                // 2019-09-10 ZJYEOH : Changed from [1] to [0], when user clicked whithin the search ROI, the g_intSelectedROI will be updated, solved the bug - only clicked Top Edge ROI just will update
                                if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }

                                    m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    m_smVisionInfo.g_arrPadROIs[k][1].VerifyROIArea(intPositionX, intPositionY);
                                    break;
                                }
                            }
                        }

                        if (m_smVisionInfo.g_objTopParentROI.VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_intTopParentPositionXPrev = m_smVisionInfo.g_objTopParentROI.ref_ROITotalX;
                            m_intTopParentPositionXCurr = m_smVisionInfo.g_objTopParentROI.ref_ROITotalX;
                            m_intTopParentPositionYPrev = m_smVisionInfo.g_objTopParentROI.ref_ROITotalY;
                            m_intTopParentPositionYCurr = m_smVisionInfo.g_objTopParentROI.ref_ROITotalY;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }

                        for (int k = 0; k < m_smVisionInfo.g_arrPad.Length; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (m_smVisionInfo.g_arrPad[k].ref_objRectGauge4L.VerifyROI(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_objTopParentROI.ClearDragHandle();
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if(m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (m_intVisionType == 0)
                        {
                            int intSelectedROI_Prev = m_smVisionInfo.g_intSelectedROI;
                            int intSelectedROI = 0;
                            bool blnReVerify = false;
                            bool blnMoreThanOne = false;
                            for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                                    continue;

                                int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;
                                if (intMaxIndex > 1)
                                    intMaxIndex = 1;

                                if (m_smVisionInfo.g_intLearnStepNo == 0)
                                    intMaxIndex = 0;

                                for (int j = intMaxIndex; j >= 0; j--)
                                {
                                    if (m_smVisionInfo.g_arrPadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        if(blnMoreThanOne)
                                            blnReVerify = true;

                                        m_smVisionInfo.g_intSelectedROI = k;
                                        m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_intSelectedUnit = 0;

                                        if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                        {
                                            m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                        }
                                        else
                                        {
                                            m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                        }
                                        intSelectedROI |= m_smVisionInfo.g_intSelectedROIMask;
                                        blnMoreThanOne = true;
                                        break;
                                    }
                                }
                            }

                            if (blnReVerify)
                            {
                                if ((intSelectedROI & 0x01) > 0 && intSelectedROI_Prev == 0)
                                {
                                    m_smVisionInfo.g_intSelectedROI = intSelectedROI_Prev;
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 0);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != intSelectedROI_Prev && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                                else if ((intSelectedROI & 0x02) > 0 && intSelectedROI_Prev == 1)
                                {
                                    m_smVisionInfo.g_intSelectedROI = intSelectedROI_Prev;
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 1);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != intSelectedROI_Prev && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                                else if ((intSelectedROI & 0x04) > 0 && intSelectedROI_Prev == 2)
                                {
                                    m_smVisionInfo.g_intSelectedROI = intSelectedROI_Prev;
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 2);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != intSelectedROI_Prev && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                                else if ((intSelectedROI & 0x08) > 0 && intSelectedROI_Prev == 3)
                                {
                                    m_smVisionInfo.g_intSelectedROI = intSelectedROI_Prev;
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 3);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != intSelectedROI_Prev && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                                else if ((intSelectedROI & 0x10) > 0 && intSelectedROI_Prev == 4)
                                {
                                    m_smVisionInfo.g_intSelectedROI = intSelectedROI_Prev;
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 4);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != intSelectedROI_Prev && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                                else
                                {
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << m_smVisionInfo.g_intSelectedROI);
                                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                                    {
                                        if (k != m_smVisionInfo.g_intSelectedROI && m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                                            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                    }
                                }
                            }
                        }
                        else
                        {
                            if(m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrPadOrientROIs[0].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = 0;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << 0);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << 0);
                                    }
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        if (m_smVisionInfo.g_arrPadOrientROIs.Count > 1)
                        {
                            if (m_smVisionInfo.g_arrPadOrientROIs[1].VerifyROIArea(intPositionX, intPositionY))
                            {
                                //m_smVisionInfo.g_intSelectedROI = 0;
                                //m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                //m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                //m_smVisionInfo.g_intSelectedUnit = 0;

                                //if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                //{
                                //    m_smVisionInfo.g_intSelectedROIMask |= (0x01 << 0);
                                //}
                                //else
                                //{
                                //    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 0);
                                //}
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 15)
                    {
                        if (m_smVisionInfo.g_arrPadOrientROIs.Count > 2)
                        {
                            if (m_smVisionInfo.g_arrPadOrientROIs[2].VerifyROIArea(intPositionX, intPositionY))
                            {
                                //m_smVisionInfo.g_intSelectedROI = 0;
                                //m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                //m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                //m_smVisionInfo.g_intSelectedUnit = 0;

                                //if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                //{
                                //    m_smVisionInfo.g_intSelectedROIMask |= (0x01 << 0);
                                //}
                                //else
                                //{
                                //    m_smVisionInfo.g_intSelectedROIMask = (0x01 << 0);
                                //}
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 16)
                    {
                        //for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        //{
                        //    //if (m_smVisionInfo.g_blnColorThresholdForm)
                        //    //{
                        //    //    if ((k == 0) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x01) == 0))
                        //    //        continue;
                        //    //    else if ((k == 1) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x02) == 0))
                        //    //        continue;
                        //    //    else if ((k == 2) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x04) == 0))
                        //    //        continue;
                        //    //    else if ((k == 3) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x08) == 0))
                        //    //        continue;
                        //    //    else if ((k == 4) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x10) == 0))
                        //    //        continue;
                        //    //}

                        //    if (m_smVisionInfo.g_arrPadROIs[k][3].VerifyROIArea(intPositionX, intPositionY) && m_smVisionInfo.g_intSelectedROI == k)
                        //    {
                        //        m_smVisionInfo.g_intSelectedROI = k; // 2019-11-01 ZJYEOH: Update selected ROI so that when drawing Dont care ROI, it will not exceeded to other ROI
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //        m_smVisionInfo.g_intSelectedUnit = 0;
                        //        //m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        //    }
                        //    else
                        //        m_smVisionInfo.g_arrPadROIs[k][3].ClearDragHandle();
                        //}

                        if (m_smVisionInfo.g_blnDragROI)
                        {
                            if (m_smVisionInfo.g_blnUpdateSelectedROI)
                            {
                                if (m_smVisionInfo.g_arrPadColorDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                                {
                                    if (m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        if (m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > 0)
                                        {
                                            m_smVisionInfo.g_intSelectedDontCareROIIndex = m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count - 1;
                                        }
                                    }
                                }
                            }

                            if (m_smVisionInfo.g_arrPadColorDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                            {
                                if (m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                    {
                                        if (((ROI)m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][j]).VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                                continue;

                            int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            for (int j = intMaxIndex; j >= 0; j--)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "MNPad":
                case "MNPad5S":
                //case "PadOtherSettingForm":   // 2021 07 30 - no longer using mouse click on image to select pad. Replaced with combo box
                case "PadPackageToleranceForm":
                case "InspectionOptionForm":
                    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                    {
                        if (m_smVisionInfo.g_arrPadROIs[k].Count > 0)
                        {
                            if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {

                                m_smVisionInfo.g_intSelectedROI = k;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

                                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                {
                                    m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                }
                                else
                                {
                                    m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                }
                            }
                        }
                    }
                    break;
                case "PadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            //2020-06-12 ZJYEOH : Not allow to drag center ROI if measure center pkg size using side pkg
                            if (k == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrPadROIs[k].Count > 0)//2021-12-28 ZJYEOH : Changed 1 to 0
                            {
                                // 2019-09-10 ZJYEOH : Changed from [1] to [0], when user clicked whithin the search ROI, the g_intSelectedROI will be updated, solved the bug - only clicked Top Edge ROI just will update
                                if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))    // 2019 05 10- Use [1] because Gauge ROI is displaying at this step.
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }

                                    // 2020 11 27 - CCENG: Clear handler after get selected ROI information. Bcos if no clearn handler, the hidden pad search will be dragged when user drag gauge.
                                    m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                                }
                            }
                        }

                        for (int k = 0; k < m_smVisionInfo.g_arrPad.Length; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            if (m_smVisionInfo.g_arrPad[k].ref_objRectGauge4L.VerifyROI(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            if (m_smVisionInfo.g_arrPadROIs[k][2].VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_intSelectedROI = k; // 2019-11-01 ZJYEOH: Update selected ROI so that when drawing Dont care ROI, it will not exceeded to other ROI
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = 0;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            }
                            else
                                m_smVisionInfo.g_arrPadROIs[k][2].ClearDragHandle();
                        }

                        if (m_smVisionInfo.g_blnUpdateSelectedROI)
                        {
                            if (m_smVisionInfo.g_arrPadPackageDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                            {
                                if (m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedType)
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType].Count - 1;
                                }
                            }
                        }

                        if (m_smVisionInfo.g_arrPadPackageDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                        {
                            if (m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedType)
                            {
                                for (int j = 0; j < m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType].Count; j++)
                                {
                                    if (((ROI)m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][j]).VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    else //if (m_smVisionInfo.g_intLearnStepNo == 1 || m_smVisionInfo.g_intLearnStepNo == 2|| m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        {
                            if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                continue;

                            if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrPadROIs[k].Count > 1)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }
                                }
                            }
                        }

                        //for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                        //{
                        //    if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        //        continue;

                        //    if (!m_smVisionInfo.g_arrPad[k].ref_blnSelected)
                        //        continue;

                        //    int intMaxIndex = m_smVisionInfo.g_arrPadROIs[k].Count - 1;

                        //    for (int j = intMaxIndex; j >= 0; j--)
                        //    {
                        //        if (m_smVisionInfo.g_arrPadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                        //        {
                        //            m_smVisionInfo.g_intSelectedROI = k;
                        //            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //            m_smVisionInfo.g_intSelectedUnit = 0;

                        //            if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        //            {
                        //                m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                        //            }
                        //            else
                        //            {
                        //                m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                        //            }
                        //            break;
                        //        }
                        //    }
                        //}
                    }
                    //else
                    //{
                    //    for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                    //    {
                    //        if (m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                    //        {
                    //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //            m_smVisionInfo.g_intSelectedUnit = 0;
                    //            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                    //        }
                    //        else
                    //            m_smVisionInfo.g_arrPadROIs[k][0].ClearDragHandle();
                    //    }
                    //}
                    break;
                case "LeadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (k != 0)
                                break;
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;

                            if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[k].Count > 1)
                                {
                                    // 2019-09-10 ZJYEOH : Changed from [1] to [0], when user clicked whithin the search ROI, the g_intSelectedROI will be updated, solved the bug - only clicked Top Edge ROI just will update
                                    if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))    // 2019 05 10- Use [1] because Gauge ROI is displaying at this step.
                                    {
                                        m_smVisionInfo.g_intSelectedROI = k;
                                        m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_intSelectedUnit = 0;

                                        if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                        {
                                            m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                        }
                                        else
                                        {
                                            m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                        }
                                    }
                                }
                            }
                        }

                        for (int k = 0; k < m_smVisionInfo.g_arrLead3D.Length; k++)
                        {
                            if (k != 0)
                                break;

                            if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                            {
                                if (m_smVisionInfo.g_arrLead3D[k].ref_objRectGauge4L.VerifyROI(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else //if (m_smVisionInfo.g_intLearnStepNo == 1 || m_smVisionInfo.g_intLearnStepNo == 2|| m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (k != 0)
                                break;
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;

                            if (m_smVisionInfo.g_arrLeadROIs[k].Count > 1)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }
                                }
                            }
                        }
                    }
                    break;
                case "Seal":
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        for (int j = 2; j >= 1; j--)
                        {
                            if (((ROI)m_smVisionInfo.g_arrSealROIs[j][0]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                //m_smVisionInfo.g_intSelectedUnit = j;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[0][0]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 1;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }

                        if (((ROI)m_smVisionInfo.g_arrSealROIs[0][2]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 1;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[0][1]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 1;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 5)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[3][0]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 3;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 6)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[6][0]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            //m_smVisionInfo.g_intSelectedUnit = 6;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 10)
                    {
                        for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[4].Count; j++)
                        {
                            if (((ROI)m_smVisionInfo.g_arrSealROIs[4][j]).VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_intSelectedROI = j;
                                m_smVisionInfo.g_intSelectedUnit = 4;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 11)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[7][0]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 7;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 12)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[5][0]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 5;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[5][1]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 5;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        if (((ROI)m_smVisionInfo.g_arrSealROIs[5][2]).VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedUnit = 5;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 15)
                    {
                        bool blnFound = false;
                        for (i = 0; i < m_smVisionInfo.g_arrSealDontCareROIs.Count; i++)
                        {
                            if (i == m_smVisionInfo.g_intSelectedDontCareROIIndex)
                            {
                                if (((ROI)m_smVisionInfo.g_arrSealDontCareROIs[i]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = i;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    blnFound = true;
                                    break;
                                }
                            }
                        }

                        if (!blnFound)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrSealDontCareROIs.Count; i++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrSealDontCareROIs[i]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = i;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                //case "Camera":
                //    if (m_smVisionInfo.g_objCameraROI.VerifyROIArea(intPositionX, intPositionY))
                //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //    break;
                case "System":
                    if (m_smVisionInfo.g_arrSystemROI[0].VerifyROIArea(intPositionX, intPositionY))
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                case "Position":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Top" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Bottom" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Left" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Right")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        break;
                                    }
                            }
                            break;

                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Search ROI")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 4:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Pocket ROI")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 5:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 7:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Empty ROI")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 8:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Orient ROI")
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                    }
                    break; 
                case "PocketPosition":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Search ROI")
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pattern ROI")
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pocket Gauge ROI")
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 3:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Gauge ROI")
                                    if (m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                    }
                    break;
                case "Barcode":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Search ROI")
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Pattern ROI")
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Barcode ROI")
                                    if (m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareFix":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count; x++)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[x].Count > 0)
                                {
                                    if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareManual":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 1)
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 2:
                            for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count; x++)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x].Count > 0)
                                {
                                    if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareAuto":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 1)
                                    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1].VerifyROIArea(intPositionX, intPositionY))
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        case 2:
                        case 3:
                            for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count; x++)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x].Count > 0)
                                {
                                    if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareBlob":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                        case 1:
                            for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count; x++)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[x].Count > 0)
                                {
                                    if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                    else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[x][0].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.g_intSelectedROI = x;
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "UnitPresent":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (m_smVisionInfo.g_arrPositioningROIs[0].VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 0)
                        {
                            if (m_smVisionInfo.g_objUnitPresent.VerifyTemporaryUnitROI(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                break;
                            }
                        }
                    }


                    break;
                case "Lead":
                    if (m_smVisionInfo.g_intLearnStepNo == 3 /*|| m_smVisionInfo.g_intLearnStepNo == 4*/ || m_smVisionInfo.g_intLearnStepNo == 5 /*|| m_smVisionInfo.g_intLearnStepNo == 7*/)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;

                            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = 0;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            }
                            else
                                m_smVisionInfo.g_arrLeadROIs[k][0].ClearDragHandle();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (m_smVisionInfo.g_arrLeadROIs[0][0].VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_intSelectedROI = 0;
                            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            m_smVisionInfo.g_intSelectedUnit = 0;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].VerifyROI(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = i;
                            }
                        }
                    }
                    else if(m_smVisionInfo.g_intLearnStepNo != 4 && m_smVisionInfo.g_intLearnStepNo != 7)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;

                            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            for (int j = intMaxIndex; j >= 0; j--)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "Li3D":
                case "Lead3D":
                //case "Lead3DOtherSettingForm":
                    if (/*m_smVisionInfo.g_intLearnStepNo == 4 ||*/ m_smVisionInfo.g_intLearnStepNo == 6 ||
                             m_smVisionInfo.g_intLearnStepNo == 7 || m_smVisionInfo.g_intLearnStepNo == 8)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                m_smVisionInfo.g_intSelectedUnit = 0;
                                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                            }
                            else
                                m_smVisionInfo.g_arrLeadROIs[k][0].ClearDragHandle();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPin1.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 5)
                    {
                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPin1.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        //for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        //{
                        //    int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                        //    if (intMaxIndex > 1)
                        //        intMaxIndex = 1;

                        //    if (m_smVisionInfo.g_intLearnStepNo == 0)
                        //        intMaxIndex = 0;

                        //    if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                        //    {
                        //        m_smVisionInfo.g_intSelectedROI = k; // 2019-11-01 ZJYEOH: Update selected ROI so that when drawing Dont care ROI, it will not exceeded to other ROI
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //        m_smVisionInfo.g_intSelectedUnit = 0;
                        //        m_smVisionInfo.g_blnUpdateSelectedROI = true;
                        //    }
                        //    else
                        //        m_smVisionInfo.g_arrLeadROIs[k][0].ClearDragHandle();
                        //}

                        //if (m_smVisionInfo.g_blnUpdateSelectedROI)
                        //{
                        //    if (m_smVisionInfo.g_arrLead3DDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                        //    {
                        //        if (m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count > 0)
                        //        {
                        //            m_smVisionInfo.g_intSelectedDontCareROIIndex = m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count - 1;
                        //        }
                        //    }
                        //}

                        if (m_smVisionInfo.g_arrLead3DDontCareROIs.Count > m_smVisionInfo.g_intSelectedROI)
                        {
                            for (int j = 0; j < m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI].Count; j++)
                            {
                                if (((ROI)m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI][j]).VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedDontCareROIIndex = j;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    break;
                                }
                            }
                        }

                    }
                    else if(m_smVisionInfo.g_intLearnStepNo != 4)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                            if (intMaxIndex > 1)
                                intMaxIndex = 1;

                            if (m_smVisionInfo.g_intLearnStepNo == 0)
                                intMaxIndex = 0;

                            for (int j = intMaxIndex; j >= 0; j--)
                            {
                                if (m_smVisionInfo.g_arrLeadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_intSelectedROI = k;
                                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_intSelectedUnit = 0;

                                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                                    }
                                    else
                                    {
                                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    break;

            }
        }

        /// <summary>
        /// Change cursor shape if the mouse point is within the selected ROI area
        /// </summary>
        /// <param name="intPositionX">Mouse Position X</param>
        /// <param name="intPositionY">Mouse Position Y</param>
        private void VerifyROIShape(int intPositionX, int intPositionY)
        {
            if (m_smProductionInfo.g_blnViewROITool)
            {
                m_smVisionInfo.g_objCameraROI.VerifyROIHandleShape(intPositionX, intPositionY);
            }

            int i = 0;
            // Hit Test - Detects if the cursor is placed over one of the dragging handles
            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "Calibrate":
                    if (m_smVisionInfo.g_intCalibrationType == 0 ||
                        m_smVisionInfo.g_intCalibrationType == 2 ||
                        m_smVisionInfo.g_intCalibrationType == 3 ||
                        m_smVisionInfo.g_intCalibrationType == 4)
                    {
                        m_smVisionInfo.g_objCalibrateROI.VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                case "Calibrate5S":
                    m_smVisionInfo.g_objCalibration.VerifyROIHandleShape(intPositionX, intPositionY);
                    break;
                case "CalibrateLead3D":
                    m_smVisionInfo.g_objCalibrationLead3D.VerifyROIHandleShape(intPositionX, intPositionY);
                    break;
                case "BottomOrient":
                case "BottomPosition":
                case "Orient":
                    for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo == 0)
                        {
                            m_smVisionInfo.g_arrOrientROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                        }
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            m_smVisionInfo.g_arrOrientROIs[i][1].VerifyROIHandleShape(intPositionX, intPositionY);
                        }
                        if (m_smVisionInfo.g_intLearnStepNo == 4)
                        {
                            m_smVisionInfo.g_arrOrientROIs[i][2].VerifyROIHandleShape(intPositionX, intPositionY);
                        }
                    }
                    break;
                case "Mark":
                    break;
                case "MarkOrient":
                case "MOLi":
                    if (m_smVisionInfo.g_blnViewSearchROI)
                    {
                        if (m_smVisionInfo.g_blnDisableMOGauge)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                            {
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                    continue;

                                m_smVisionInfo.g_arrPackageROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = i;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPackageROIs[i][0].GetROIHandle2();
                            }
                        }
                        else
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                            {
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                    continue;

                                m_smVisionInfo.g_arrOrientROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = i;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrOrientROIs[i][0].GetROIHandle2();
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewMOGauge)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                        {
                            //m_smVisionInfo.g_arrOrientGaugeM4L[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                continue;

                            m_intSelectedROIPrev = i;
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrOrientGaugeM4L[i].VerifyROIHandleShape(intPositionX, intPositionY);
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewUnitROI)
                    {
                        m_smVisionInfo.g_arrOrientROIs[i][2].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_blnViewUnitSurfaceROI)
                    {
                        m_smVisionInfo.g_arrOrientROIs[i][3].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_blnViewOrientTrainROI)
                    {
                        m_smVisionInfo.g_arrOrientROIs[i][1].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_blnViewPin1TrainROI)
                    {
                        m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_blnViewMark2DCodeROI)
                    {
                        m_smVisionInfo.g_arrMarkROIs[i][2].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 6)
                    {
                        m_smVisionInfo.g_arrMarkROIs[i][1].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                case "ColorPackage":
                case "Package":
                    if (m_smVisionInfo.g_blnViewSearchROI)
                    {
                        //m_smVisionInfo.g_arrPackageROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                        if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrPackageGauge2M4L[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                        else
                        {
                            for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrPackageGaugeM4L[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPackageTrainROI)
                    {
                        if (m_smVisionInfo.g_intLearnStepNo != 20 && m_smVisionInfo.g_intLearnStepNo != 21 && m_smVisionInfo.g_intLearnStepNo != 22)
                            m_smVisionInfo.g_arrPackageROIs[i][1].VerifyROIHandleShape(intPositionX, intPositionY);
                        else if (m_smVisionInfo.g_intLearnStepNo == 20)
                        {
                            if (m_smVisionInfo.g_arrPackageDontCareROIs.Count > m_smVisionInfo.g_intSelectedType)
                            {
                                if ((m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                {
                                    m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].VerifyROIHandleShape(intPositionX, intPositionY);
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 21)
                        {
                            if ((m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs.Count > m_smVisionInfo.g_intSelectedMoldFlashDontCareROIIndex) && (m_smVisionInfo.g_intSelectedMoldFlashDontCareROIIndex != -1))
                            {
                                m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[m_smVisionInfo.g_intSelectedMoldFlashDontCareROIIndex].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPackageMaskROI)
                    {
                        m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                case "Gauge":
                    switch (m_smVisionInfo.g_strSelectedRectGauge)
                    {
                        case "MarkOrient":
                        case "MOLi":
                        case "Orient":
                            for (i = 0; i < m_smVisionInfo.g_arrOrientROIs.Count; i++)
                            {
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                    continue;
                                m_smVisionInfo.g_arrOrientROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = i;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrOrientROIs[i][0].GetROIHandle2();
                            }
                            break;
                        case "Mark":
                            for (i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                            {
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                    continue;
                                m_smVisionInfo.g_arrMarkROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = i;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrMarkROIs[i][0].GetROIHandle2();
                            }
                            break;
                        case "Package":
                        case "Package1":
                        case "Package2":
                            for (i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                            {
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != i)
                                    continue;
                                m_smVisionInfo.g_arrPackageROIs[i][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = i;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPackageROIs[i][0].GetROIHandle2();
                            }
                            break;
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "Pad5S":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (m_intVisionType == 0)
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_smVisionInfo.g_arrPadROIs[k][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadROIs[k][0].GetROIHandle2();
                            }
                        }
                        else
                        {
                            if (m_smVisionInfo.g_arrPadOrientROIs.Count > 0)
                            {
                                m_smVisionInfo.g_arrPadOrientROIs[0].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadOrientROIs[0].GetROIHandle2();
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        if (m_smVisionInfo.g_arrPadOrientROIs.Count > 1)
                        {
                            m_smVisionInfo.g_arrPadOrientROIs[1].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadOrientROIs[1].GetROIHandle2();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 15)
                    {
                        if (m_smVisionInfo.g_arrPadOrientROIs.Count > 2)
                        {
                            m_smVisionInfo.g_arrPadOrientROIs[2].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadOrientROIs[2].GetROIHandle2();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                        {
                            if ((m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 1) ||
                                (!m_smVisionInfo.g_blnViewSearchROI && m_smVisionInfo.g_arrPositioningROIs[i].ref_intType == 2))
                            {
                                m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        if (m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrPad.Length; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                //2020-06-12 ZJYEOH : Not allow to drag center ROI if measure center pkg size using side pkg
                                if (k == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPad[k].ref_objRectGauge4L.VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                        else
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_smVisionInfo.g_arrPadROIs[k][1].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadROIs[k][1].GetROIHandle2();
                            }
                        }

                        if (!m_blnCursorShapeVerifying)
                            m_smVisionInfo.g_objTopParentROI.VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 4)
                    {
                        m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                case "PadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        //2021-12-28 ZJYEOH: Changed this condition to true because Pad Package step will always use gauge
                        if (true)//m_smVisionInfo.g_arrPad[0].ref_blnWantGaugeMeasurePkgSize)
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrPad.Length; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                //2020-06-12 ZJYEOH : Not allow to drag center ROI if measure center pkg size using side pkg
                                if (k == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPad[k].ref_objRectGauge4L.VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                        }
                        else
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrPadROIs.Count; k++)
                            {
                                if (k > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    continue;

                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_smVisionInfo.g_arrPadROIs[k][1].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrPadROIs[k][1].GetROIHandle2();
                            }
                        }
                    }
                    break;
                case "LeadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        if (true)//(m_smVisionInfo.g_arrLead3D[0].ref_blnWantGaugeMeasurePkgSize)
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrLead3D.Length; k++)
                            {
                                if (k != 0)
                                    break;
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                                {
                                    m_intSelectedROIPrev = k;
                                    m_blnCursorShapeVerifying = m_smVisionInfo.g_arrLead3D[k].ref_objRectGauge4L.VerifyROIHandleShape(intPositionX, intPositionY);
                                }
                            }
                        }
                        else
                        {
                            for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                            {
                                if (k != 0)
                                    break;
                                if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                    continue;

                                m_smVisionInfo.g_arrLeadROIs[k][1].VerifyROIHandleShape(intPositionX, intPositionY);
                                m_intSelectedROIPrev = k;
                                m_blnCursorShapeVerifying = m_smVisionInfo.g_arrLeadROIs[k][1].GetROIHandle2();
                            }
                        }
                    }
                    break;
                case "Seal":
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        for (int j = 2; j >= 1; j--)
                        {
                            if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != j)
                                continue;

                            m_smVisionInfo.g_arrSealROIs[j][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_intSelectedROIPrev = j;
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrSealROIs[j][0].GetROIHandle2();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        //m_smVisionInfo.g_arrSealROIs[0][0].VerifyROIHandleShape(intPositionX, intPositionY);
                        //m_smVisionInfo.g_arrSealROIs[0][2].VerifyROIHandleShape(intPositionX, intPositionY);

                        for (int j = 0; j >= 0; j--)    // 2020 04 15 - CCENG: Only one position search Roi
                        {
                            if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != j)
                                continue;

                            m_smVisionInfo.g_arrSealROIs[0][j].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_intSelectedROIPrev = j;
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrSealROIs[0][j].GetROIHandle2();
                            j--;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        m_smVisionInfo.g_arrSealROIs[0][1].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 5)
                    {
                        m_smVisionInfo.g_arrSealROIs[3][0].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 6)
                    {
                        m_smVisionInfo.g_arrSealROIs[6][0].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 10)
                    {
                        for (int j = 0; j < m_smVisionInfo.g_arrSealROIs[4].Count; j++)
                            m_smVisionInfo.g_arrSealROIs[4][j].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 11)
                    {
                        m_smVisionInfo.g_arrSealROIs[7][0].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 12)
                    {
                        m_smVisionInfo.g_arrSealROIs[5][0].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        m_smVisionInfo.g_arrSealROIs[5][1].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 14)
                    {
                        m_smVisionInfo.g_arrSealROIs[5][2].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                case "PH":
                    m_smVisionInfo.g_arrPHROIs[0].VerifyROIHandleShape(intPositionX, intPositionY);
                    break;
                //case "Camera":
                //    m_smVisionInfo.g_objCameraROI.VerifyROIHandleShape(intPositionX, intPositionY);
                //    break;
                case "System":
                    m_smVisionInfo.g_arrSystemROI[0].VerifyROIHandleShape(intPositionX, intPositionY);
                    break;
                case "Position":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {

                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Top" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Bottom" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Left" ||
                                    m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Right")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);

                            }
                            break;

                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Search ROI")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 4:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Pocket ROI")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 5:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 7:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Empty ROI")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 8:
                            for (i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Orient ROI")
                                    m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                    }
                    break;
                case "PocketPosition":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Search ROI")
                                    m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pattern ROI")
                                    m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Pocket Gauge ROI")
                                    m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 3:
                            for (i = 0; i < m_smVisionInfo.g_arrPocketPositionROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPocketPositionROIs[i].ref_strROIName == "Gauge ROI")
                                    m_smVisionInfo.g_arrPocketPositionROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                    }
                    break;
                case "Barcode":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Search ROI")
                                    m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 1:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Pattern ROI")
                                    m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 2:
                            for (i = 0; i < m_smVisionInfo.g_arrBarcodeROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrBarcodeROIs[i].ref_strROIName == "Barcode ROI")
                                    m_smVisionInfo.g_arrBarcodeROIs[i].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                       
                    }
                    break;
                case "LeadPocketDontCareFix":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_intSelectedROI < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[m_smVisionInfo.g_intSelectedROI].Count > 0)
                                {
                                    if (1 < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[1].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (2 < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[2].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (3 < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[3].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (4 < m_smVisionInfo.g_arrLeadPocketDontCareROIsFix.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[4].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareManual":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 0)
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0].Count > 1)
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[0][1].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 2:
                            //for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count; x++)
                            //{
                            //    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i].Count > 0)
                            //    {
                            //        if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //    }
                            //}
                            if (m_smVisionInfo.g_intSelectedROI < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[m_smVisionInfo.g_intSelectedROI].Count > 0)
                                {
                                    if (1 < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[1].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (2 < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[2].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (3 < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[3].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (4 < m_smVisionInfo.g_arrLeadPocketDontCareROIsManual.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[4].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareAuto":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 0)
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 1:
                            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count > 0)
                            {

                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0].Count > 1)
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[0][1].VerifyROIHandleShape(intPositionX, intPositionY);
                            }
                            break;
                        case 2:
                        case 3:
                            //for (int x = 1; x < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count; x++)
                            //{
                            //    if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x].Count > 0)
                            //    {
                            //        if (x == 1 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 2 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 3 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //        else if (x == 4 && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0))
                            //        {
                            //            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[x][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            //        }
                            //    }
                            //}
                            if (m_smVisionInfo.g_intSelectedROI < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[m_smVisionInfo.g_intSelectedROI].Count > 0)
                                {
                                    if (1 < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[1].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (2 < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[2].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (3 < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[3].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (4 < m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[4].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "LeadPocketDontCareBlob":
                    switch (m_smVisionInfo.g_intLearnStepNo)
                    {
                        case 0:
                        case 1:
                            if (m_smVisionInfo.g_intSelectedROI < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count)
                            {
                                if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[m_smVisionInfo.g_intSelectedROI].Count > 0)
                                {
                                    if (1 < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (2 < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[2].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (3 < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[3].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                    if (4 < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) > 0))
                                    {
                                        if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4].Count > 0)
                                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[m_smVisionInfo.g_intSelectedROI][0].VerifyROIHandleShape(intPositionX, intPositionY);
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "Lead":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        m_smVisionInfo.g_arrLeadROIs[0][0].VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                    {
                        for (i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrPackageGaugeM4L[i].VerifyROIHandleShape(intPositionX, intPositionY);
                        }
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        for (int k = 1; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                                continue;

                            if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                continue;

                            m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_intSelectedROIPrev = k;
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle2();
                        }
                    }
                    break;
                case "Li3D":
                case "Lead3D":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[k].ref_blnSelected)
                                continue;

                            if (m_blnCursorShapeVerifying && m_intSelectedROIPrev != k)
                                continue;

                            m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIHandleShape(intPositionX, intPositionY);
                            m_intSelectedROIPrev = k;
                            m_blnCursorShapeVerifying = m_smVisionInfo.g_arrLeadROIs[k][0].GetROIHandle2();
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIHandleShape(intPositionX, intPositionY);
                    }
                    break;
                //case "UnitPresent":
                //    if (m_smVisionInfo.g_intLearnStepNo == 0)
                //    {
                //        if (m_smVisionInfo.g_arrPositioningROIs[0].VerifyROIArea(intPositionX, intPositionY))
                //        {
                //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //            break;
                //        }
                //    }
                //    else if (m_smVisionInfo.g_intLearnStepNo == 1)
                //    {
                //        if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 0)
                //        {
                //            if (m_smVisionInfo.g_objUnitPresent.VerifyTemporaryUnitROI(intPositionX, intPositionY))
                //            {
                //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //                break;
                //            }
                //        }
                //    }


                //    break;
                //case "Lead":
                //    if (m_smVisionInfo.g_intLearnStepNo == 2 || m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 4)
                //    {
                //        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                //        {
                //            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                //                continue;

                //            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                //            if (intMaxIndex > 1)
                //                intMaxIndex = 1;

                //            if (m_smVisionInfo.g_intLearnStepNo == 0)
                //                intMaxIndex = 0;

                //            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                //            {
                //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //                m_smVisionInfo.g_intSelectedUnit = 0;
                //                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                //            }
                //            else
                //                m_smVisionInfo.g_arrLeadROIs[k][0].ClearDragHandle();
                //        }
                //    }
                //    else if (m_smVisionInfo.g_intLearnStepNo == 0)
                //    {
                //        if (m_smVisionInfo.g_arrLeadROIs[0][0].VerifyROIArea(intPositionX, intPositionY))
                //        {
                //            m_smVisionInfo.g_intSelectedROI = 0;
                //            m_smVisionInfo.g_blnUpdateSelectedROI = true;
                //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //            m_smVisionInfo.g_intSelectedUnit = 0;
                //        }
                //    }
                //    else
                //    {
                //        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                //        {
                //            if (!m_smVisionInfo.g_arrLead[k].ref_blnSelected)
                //                continue;

                //            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                //            if (intMaxIndex > 1)
                //                intMaxIndex = 1;

                //            for (int j = intMaxIndex; j >= 0; j--)
                //            {
                //                if (m_smVisionInfo.g_arrLeadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                //                {
                //                    m_smVisionInfo.g_intSelectedROI = k;
                //                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                //                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //                    m_smVisionInfo.g_intSelectedUnit = 0;

                //                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                //                    {
                //                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                //                    }
                //                    else
                //                    {
                //                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }
                //    break;
                //case "Li3D":
                    //    if (m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 5 ||
                    //             m_smVisionInfo.g_intLearnStepNo == 6 || m_smVisionInfo.g_intLearnStepNo == 7)
                    //    {
                    //        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                    //        {
                    //            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                    //            if (intMaxIndex > 1)
                    //                intMaxIndex = 1;

                    //            if (m_smVisionInfo.g_intLearnStepNo == 0)
                    //                intMaxIndex = 0;

                    //            if (m_smVisionInfo.g_arrLeadROIs[k][0].VerifyROIArea(intPositionX, intPositionY))
                    //            {
                    //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //                m_smVisionInfo.g_intSelectedUnit = 0;
                    //                m_smVisionInfo.g_blnUpdateSelectedROI = true;
                    //            }
                    //            else
                    //                m_smVisionInfo.g_arrLeadROIs[k][0].ClearDragHandle();
                    //        }
                    //    }
                    //    else if (m_smVisionInfo.g_intLearnStepNo == 4)
                    //    {
                    //        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                    //        {
                    //            for (i = 0; i < m_smVisionInfo.g_arrPin1.Count; i++)
                    //            {
                    //                if (m_smVisionInfo.g_arrPin1[i].ref_objPin1ROI.VerifyROIArea(intPositionX, intPositionY))
                    //                {
                    //                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //                    break;
                    //                }
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        for (int k = 0; k < m_smVisionInfo.g_arrLeadROIs.Count; k++)
                    //        {
                    //            int intMaxIndex = m_smVisionInfo.g_arrLeadROIs[k].Count - 1;
                    //            if (intMaxIndex > 1)
                    //                intMaxIndex = 1;

                    //            if (m_smVisionInfo.g_intLearnStepNo == 0)
                    //                intMaxIndex = 0;

                    //            for (int j = intMaxIndex; j >= 0; j--)
                    //            {
                    //                if (m_smVisionInfo.g_arrLeadROIs[k][j].VerifyROIArea(intPositionX, intPositionY))
                    //                {
                    //                    m_smVisionInfo.g_intSelectedROI = k;
                    //                    m_smVisionInfo.g_blnUpdateSelectedROI = true;
                    //                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //                    m_smVisionInfo.g_intSelectedUnit = 0;

                    //                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    //                    {
                    //                        m_smVisionInfo.g_intSelectedROIMask |= (0x01 << k);
                    //                    }
                    //                    else
                    //                    {
                    //                        m_smVisionInfo.g_intSelectedROIMask = (0x01 << k);
                    //                    }
                    //                    break;
                    //                }
                    //            }
                    //        }
                    //    }
                    //    break;

            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intTabPage">0=MarkOtherSettingPage / PadOtherSettingPage, 1=PkgOtherSettingPage, 2=LeadOtherSettingPage</param>
        private void OpenOtherSettingPage()
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Li3D":
                case "Li3DPkg":
                    {
                        m_smVisionInfo.g_strSelectedPage = "Lead3DOtherSettingForm";
                        Lead3DOtherSettingForm objLead3DOtherSettingForm = new Lead3DOtherSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup, m_intSelectedTabPage);

                        objLead3DOtherSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLead3DOtherSettingForm);
                        tabPage_Settings.Controls["Lead3DOtherSettingForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Orient":
                case "BottomOrient":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    {
                        m_smVisionInfo.g_strSelectedPage = "MarkOtherSettingForm";
                        MarkOtherSettingForm objMarkOtherSettingForm = new MarkOtherSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup, m_intSelectedTabPage);

                        objMarkOtherSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objMarkOtherSettingForm);
                        tabPage_Settings.Controls["MarkOtherSettingForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Package":
                    break;
                case "UnitPresent":
                    {
                        m_smVisionInfo.g_strSelectedPage = "CheckPresentOtherSettingForm";
                        CheckPresentOtherSettingForm objCheckPresentOtherSettingForm = new CheckPresentOtherSettingForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_intUserGroup, m_smProductionInfo);

                        objCheckPresentOtherSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objCheckPresentOtherSettingForm);
                        tabPage_Settings.Controls["CheckPresentOtherSettingForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "BottomPosition":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    m_smVisionInfo.g_strSelectedPage = "PadOtherSettingForm";
                    PadOtherSettingForm objPadOtherSettingForm = new PadOtherSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup, m_intSelectedTabPage);

                    objPadOtherSettingForm.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(objPadOtherSettingForm);
                    tabPage_Settings.Controls["PadOtherSettingForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
                case "Seal":
                    {
                        m_smVisionInfo.g_strSelectedPage = "SealOtherSettingForm";
                        SealOtherSettingForm objSealOtherSettingForm = new SealOtherSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup);

                        objSealOtherSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objSealOtherSettingForm);
                        tabPage_Settings.Controls["SealOtherSettingForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                default:
                    break;
            }
        }
        public void DeleteSealTemplateWhenNewLot()
        {
            string strFolderPath = m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\";
            for (int i = 0; i < m_smVisionInfo.g_intUnitsOnImage; i++)
            {
                m_smVisionInfo.g_objSeal.DeleteAllPreviousTemplate(strFolderPath + "Seal\\");
                m_smVisionInfo.g_objSeal.ClearTemplateSetting();
                m_smVisionInfo.g_blnUnitInspected[i] = false;
            }
            // Reset variables
            m_smVisionInfo.g_intMarkTemplateTotal = 0;
            m_smVisionInfo.g_intMarkTemplateMask = 0;

            XmlParser objFile = new XmlParser(strFolderPath + "General.xml");
            objFile.WriteSectionElement("TemplateCounting");
            objFile.WriteElement1Value("TotalMarkTemplates", m_smVisionInfo.g_intMarkTemplateTotal);
            objFile.WriteElement1Value("MarkTemplateMask ", m_smVisionInfo.g_intMarkTemplateMask);
            objFile.WriteEndElement();

            m_smVisionInfo.VM_AT_TemplateNotLearn = true;
        }
        public void DeleteMarkTemplateWhenNewLot()
        {
            string strFolderPath = m_smProductionInfo.g_strRecipePath + m_strSelectedRecipe + "\\" + m_smVisionInfo.g_strVisionFolderName + "\\";

            // 2019 07 31 - JBTAN: Delete all mark template
            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
            {
                //m_smVisionInfo.g_arrOrients[u].Clear();   // 2020 05 11 - CCENG: Do not clear Orient array after new lot bcos later user direct go to do inspection will have error.
                m_smVisionInfo.g_arrMarks[u].DeleteAllPreviousTemplate(strFolderPath + "Mark\\");
                m_smVisionInfo.g_arrMarks[u].SaveSingleTemplate(strFolderPath + "Mark\\Template\\", false, false); // 2020-05-11 ZJYEOH: Save first template setting 
                m_smVisionInfo.g_arrMarks[u].ClearTemplateSetting();
                m_smVisionInfo.g_blnUnitInspected[u] = false;
            }

            // Reset variables
            m_smVisionInfo.g_intTotalGroup = 1; //Group count is always 1
            m_smVisionInfo.g_intTotalTemplates = 0;
            m_smVisionInfo.g_intTemplateMask = 0;
            m_smVisionInfo.g_intTemplatePriority = 0;

            XmlParser objFile = new XmlParser(strFolderPath + "General.xml");
            objFile.WriteSectionElement("TemplateCounting");
            objFile.WriteElement1Value("TotalGroups", m_smVisionInfo.g_intTotalGroup);
            objFile.WriteElement1Value("TotalTemplates", m_smVisionInfo.g_intTotalTemplates);
            objFile.WriteElement1Value("TemplateMask", m_smVisionInfo.g_intTemplateMask);
            objFile.WriteElement1Value("TemplatePriority", m_smVisionInfo.g_intTemplatePriority);

            objFile.WriteEndElement();

            //// Delete database
            //try
            //{
            //    if (Directory.Exists(strFolderPath + "Orient\\Template"))
            //        Directory.Delete(strFolderPath + "Orient\\Template", true);
            //}
            //catch
            //{
            //}

            //Directory.CreateDirectory(strFolderPath + "Orient\\Template");
            m_smVisionInfo.VM_AT_TemplateNotLearn = true;
        }

        public void InitCPK(bool blnFirstTimeInit)
        {
            if (blnFirstTimeInit)
            {
                int intTotalPadCount = 0;
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    intTotalPadCount += m_smVisionInfo.g_arrPad[i].GetBlobsFeaturesNumber();
                }
                // Set init setting
                m_smVisionInfo.g_objCPK.Init(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime,
                                                  m_smProductionInfo.g_strOperatorID,
                                                  m_smProductionInfo.g_strRecipeID,
                                                  m_smCustomizeInfo.g_strMachineID,
                                                  m_smVisionInfo.g_strVisionName,
                                                  intTotalPadCount,
                                                  m_smVisionInfo.g_intCPKTestCount, true);

                string strTemplateBlobsFeatures;
                string[] strTemplateFeature = new string[100];
                int intPadNumber;

                int intGroupIndex = 0;
                for (int p = 0; p < m_smVisionInfo.g_arrPad.Length; p++)
                {
                    if (p > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    intPadNumber = m_smVisionInfo.g_arrPad[p].GetBlobsFeaturesNumber();

                    for (int i = 0; i < intPadNumber; i++)
                    {
                        strTemplateBlobsFeatures = m_smVisionInfo.g_arrPad[p].GetBlobFeaturesInspectRealData(i);
                        strTemplateFeature = strTemplateBlobsFeatures.Split('#');

                        for (int j = 0; j < strTemplateFeature.Length; j++)
                        {
                            if (strTemplateFeature[j] != "")
                                if (Convert.ToSingle(strTemplateFeature[j]) == -1)
                                    strTemplateFeature[j] = "0";
                        }

                        m_smVisionInfo.g_objCPK.SetSpecification(0, intGroupIndex, 0f, Convert.ToSingle(strTemplateFeature[0]));
                        m_smVisionInfo.g_objCPK.SetSpecification(1, intGroupIndex, Convert.ToSingle(strTemplateFeature[1]), Convert.ToSingle(strTemplateFeature[2]));
                        m_smVisionInfo.g_objCPK.SetSpecification(2, intGroupIndex, Convert.ToSingle(strTemplateFeature[3]), Convert.ToSingle(strTemplateFeature[4]));
                        m_smVisionInfo.g_objCPK.SetSpecification(3, intGroupIndex, Convert.ToSingle(strTemplateFeature[5]), Convert.ToSingle(strTemplateFeature[6]));
                        m_smVisionInfo.g_objCPK.SetSpecification(4, intGroupIndex, Convert.ToSingle(strTemplateFeature[7]), Convert.ToSingle(strTemplateFeature[8]));
                        m_smVisionInfo.g_objCPK.SetSpecification(5, intGroupIndex, Convert.ToSingle(strTemplateFeature[9]), Convert.ToSingle(strTemplateFeature[10]));

                        intGroupIndex++;
                    }
                }
            }
            else
            {
                m_smVisionInfo.g_objCPK.CreateIncompleteCPKReport();

                int intTotalPadCount = 0;
                for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                {
                    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    intTotalPadCount += m_smVisionInfo.g_arrPad[i].GetBlobsFeaturesNumber();
                }
                // Set init setting
                m_smVisionInfo.g_objCPK.Init(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime,
                                                  m_smProductionInfo.g_strOperatorID,
                                                  m_smProductionInfo.g_strRecipeID,
                                                  m_smCustomizeInfo.g_strMachineID,
                                                  m_smVisionInfo.g_strVisionName,
                                                  intTotalPadCount,
                                                  m_smVisionInfo.g_intCPKTestCount, false);

                string strTemplateBlobsFeatures;
                string[] strTemplateFeature = new string[100];
                int intPadNumber;

                int intGroupIndex = 0;
                for (int p = 0; p < m_smVisionInfo.g_arrPad.Length; p++)
                {
                    if (p > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        break;

                    intPadNumber = m_smVisionInfo.g_arrPad[p].GetBlobsFeaturesNumber();

                    for (int i = 0; i < intPadNumber; i++)
                    {
                        strTemplateBlobsFeatures = m_smVisionInfo.g_arrPad[p].GetBlobFeaturesInspectRealData(i);
                        strTemplateFeature = strTemplateBlobsFeatures.Split('#');

                        for (int j = 0; j < strTemplateFeature.Length; j++)
                        {
                            if (strTemplateFeature[j] != "")
                                if (Convert.ToSingle(strTemplateFeature[j]) == -1)
                                    strTemplateFeature[j] = "0";
                        }

                        m_smVisionInfo.g_objCPK.SetSpecification(0, intGroupIndex, 0f, Convert.ToSingle(strTemplateFeature[0]));
                        m_smVisionInfo.g_objCPK.SetSpecification(1, intGroupIndex, Convert.ToSingle(strTemplateFeature[1]), Convert.ToSingle(strTemplateFeature[2]));
                        m_smVisionInfo.g_objCPK.SetSpecification(2, intGroupIndex, Convert.ToSingle(strTemplateFeature[3]), Convert.ToSingle(strTemplateFeature[4]));
                        m_smVisionInfo.g_objCPK.SetSpecification(3, intGroupIndex, Convert.ToSingle(strTemplateFeature[5]), Convert.ToSingle(strTemplateFeature[6]));
                        m_smVisionInfo.g_objCPK.SetSpecification(4, intGroupIndex, Convert.ToSingle(strTemplateFeature[7]), Convert.ToSingle(strTemplateFeature[8]));
                        m_smVisionInfo.g_objCPK.SetSpecification(5, intGroupIndex, Convert.ToSingle(strTemplateFeature[9]), Convert.ToSingle(strTemplateFeature[10]));

                        intGroupIndex++;
                    }
                }
            }
        }

        private void btn_Calibration_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Calibration Form", "Pressed Calibration Button", "", "", m_smProductionInfo.g_strLotID);
            
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Li3D":
                case "Li3DPkg":
                    m_smVisionInfo.g_strSelectedPage = "CalibrateLead3D";
                    CalibrationLead3DForm objCalibrateLead3D = new CalibrationLead3DForm(m_smVisionInfo, m_strSelectedRecipe, m_intUserGroup, m_smCustomizeInfo
                      , m_objAVTFireGrab, m_objIDSCamera, m_objTeliCamera, m_smProductionInfo);

                    objCalibrateLead3D.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(objCalibrateLead3D);
                    tabPage_Settings.Controls["CalibrationLead3DForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    m_smVisionInfo.g_strSelectedPage = "Calibrate5S";
                    Calibration5SForm objCalibrate5S = new Calibration5SForm(m_smVisionInfo, m_strSelectedRecipe, m_intUserGroup, m_smCustomizeInfo
                      , m_objAVTFireGrab, m_objIDSCamera, m_objTeliCamera, m_smProductionInfo);

                    objCalibrate5S.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(objCalibrate5S);
                    tabPage_Settings.Controls["Calibration5SForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
                default:
                    m_smVisionInfo.g_strSelectedPage = "Calibrate";
                    CalibrationForm objCalibrate = new CalibrationForm(m_smVisionInfo, m_strSelectedRecipe, m_intUserGroup, m_smCustomizeInfo
                      , m_objAVTFireGrab, m_objIDSCamera, m_objTeliCamera, m_smProductionInfo);
                    objCalibrate.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(objCalibrate);
                    tabPage_Settings.Controls["CalibrationForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
            }

            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_Camera_Click(object sender, EventArgs e)
        {
            
            m_smVisionInfo.g_strSelectedPage = "Camera";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Camera Form", "Pressed Camera Button", "", "", m_smProductionInfo.g_strLotID);
            
            CameraSettingsImageView objCameraForm = new CameraSettingsImageView(m_smVisionInfo, m_smCustomizeInfo.g_blnLEDiControl, m_smCustomizeInfo.g_blnVTControl,
                m_strSelectedRecipe, m_objAVTFireGrab, m_objIDSCamera, m_objTeliCamera, m_smProductionInfo.g_intUserGroup, m_smProductionInfo, m_smCustomizeInfo);
  
            objCameraForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objCameraForm);
            tabPage_Settings.Controls["CameraSettingsImageView"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_Gauge_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_strSelectedPage = "Gauge";
            LearnRectGaugeForm objGaugeForm = new LearnRectGaugeForm(m_smVisionInfo, m_smCustomizeInfo,
               m_strSelectedRecipe, m_intUserGroup, m_smProductionInfo);

            objGaugeForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objGaugeForm);
            tabPage_Settings.Controls["LearnRectGaugeForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_Learn_Click(object sender, EventArgs e)
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    OpenMarkOrientSetup(0);
                    break;
                case "Package":
                    OpenColorPackageSetup();
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    m_intVisionType = 0;
                    OpenPadSetup(0);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    OpenLead3DSetup();
                    break;
                case "Seal":
                    m_intVisionType = 0;
                    OpenSealSetup(0);
                    break;
                case "UnitPresent":
                    OpenCheckPresentSetup();
                    break;
                default:
                    SRMMessageBox.Show("btn_Learn_Click -> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
        }

        private void btn_ManualTest_Click(object sender, EventArgs e)
        {
            //
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Offline Test Page", "Pressed Test Button", "", "", m_smProductionInfo.g_strLotID);
            //
            DisplayOfflinePage();
        }

        private void pic_Image_MouseClick(object sender, MouseEventArgs e)
        {
            int intPositionX = (int)Math.Round(e.X / m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
            int intPositionY = (int)Math.Round(e.Y / m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

            if (e.Button == MouseButtons.Left)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "UnitPresent":
                    case "BottomPosition":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":
                    case "InPocketPkgPos":
                        //if (m_smVisionInfo.g_blnViewDontCareArea && m_smVisionInfo.g_arrPolygon[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                        if (m_smVisionInfo.g_blnViewDontCareArea && m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        //m_smVisionInfo.g_arrPolygon[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                                        m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                        break;

                }

                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "Package":
                        if (m_smVisionInfo.g_intLearnStepNo == 20)
                        {
                            if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                            {
                                if (m_smVisionInfo.g_arrPolygon_Package[0].Count > m_smVisionInfo.g_intSelectedType)
                                {
                                    if ((m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                        {
                                            //for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                            //{
                                            //    if (m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                                            //    {
                                            //        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                            //        {
                                            //            for (int j = 0; j < 2; j++)
                                            //            {
                                            //                m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                                            //            }
                                            //        }
                                            //        else
                                            //            m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                                            //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                            //        m_smVisionInfo.g_arrPackageROIs[i][2].ClearDragHandle();
                                            //    }
                                            //}
                                            if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                            {
                                                for (int i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType].Count; i++)
                                                {
                                                    if (m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][i].VerifyROIArea(intPositionX, intPositionY))
                                                    {
                                                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                                        {
                                                            if (m_smVisionInfo.g_intSelectedType == 0)
                                                            {
                                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                            }
                                                            else
                                                            {
                                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                            }
                                                        }
                                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                        m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 22)
                        {
                            if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit &&
                                   m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                   m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                   )
                            {
                                if (m_smVisionInfo.g_arrPolygon_PackageColor.Count > m_smVisionInfo.g_intSelectedUnit)
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        if ((m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                            {
                                                if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                                {
                                                    if (m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                                    {
                                                        for (int j = 0; j < m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                                        {
                                                            if (m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][j].VerifyROIArea(intPositionX, intPositionY))
                                                            {
                                                                m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                                m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "MarkOrient":
                        if (m_smVisionInfo.g_intLearnStepNo == 14 &&
                        m_smVisionInfo.g_intSelectedDontCareROIIndex >= 0 &&
                        m_smVisionInfo.g_arrPolygon_Mark.Count > m_smVisionInfo.g_intSelectedDontCareROIIndex &&
                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex].Count > m_smVisionInfo.g_intSelectedTemplate &&
                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                            //{
                            //    if (m_smVisionInfo.g_arrMarkROIs[i][1].VerifyROIArea(intPositionX, intPositionY))
                            //    {
                            //        m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                            //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //        m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                            //    }
                            //}
                            if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrMarkDontCareROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_arrMarkDontCareROIs[m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                    }
                                }
                            }
                        }
                        break;
                    case "OCR":
                        if (m_smVisionInfo.g_blnUseOCR && m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].OCRHitTest(intPositionX, intPositionY, 1, 1);
                        }
                        break;
                    case "PadPackage":
                        if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;

                            //    if (m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].ref_intFormMode == 2)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                            //        {
                            //            if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                            //            {
                            //                for (int j = 0; j < 2; j++)
                            //                {
                            //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPoint(e.Location);
                            //                }
                            //            }
                            //            else
                            //            {
                            //                m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPoint(e.Location);
                            //            }
                            //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //            m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                            //        }
                            //    }
                            //}

                            for (int i = 0; i < m_smVisionInfo.g_arrPolygon_PadPackage.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPolygon_PadPackage[i].Count > m_smVisionInfo.g_intSelectedType)
                                {
                                    if ((m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                    {
                                        if (m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                        {
                                            if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                            {

                                                if (m_smVisionInfo.g_arrPadPackageDontCareROIs[i][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].VerifyROIArea(intPositionX, intPositionY))
                                                {
                                                    m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));

                                                    if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                                    {
                                                        if (m_smVisionInfo.g_intSelectedType == 0)
                                                        {
                                                            m_smVisionInfo.g_arrPolygon_PadPackage[i][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                        }
                                                        else
                                                        {
                                                            m_smVisionInfo.g_arrPolygon_PadPackage[i][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                        }
                                                    }

                                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[i][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "Pad5S":
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if ((m_smVisionInfo.g_arrPolygon_Pad[i].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                {
                                    if (m_smVisionInfo.g_arrPolygon_Pad[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                    {
                                        //if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                                        //{
                                        //    m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPoint(e.Location);
                                        //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        //    m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                                        //}

                                        if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                        {
                                            for (int j = 0; j < m_smVisionInfo.g_arrPadDontCareROIs[i].Count; j++)
                                            {
                                                if (m_smVisionInfo.g_arrPadDontCareROIs[i][j].VerifyROIArea(intPositionX, intPositionY))
                                                {
                                                    m_smVisionInfo.g_arrPolygon_Pad[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                    m_smVisionInfo.g_arrPadDontCareROIs[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 16)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                   )
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PadColor[i].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                                    {
                                        if ((m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                        {
                                            if (m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                            {
                                                //if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                                                //{
                                                //    m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPoint(e.Location);
                                                //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                //    m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                                                //}

                                                if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                                {
                                                    if (m_smVisionInfo.g_arrPadColorDontCareROIs[i][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                                    {
                                                        for (int j = 0; j < m_smVisionInfo.g_arrPadColorDontCareROIs[i][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count; j++)
                                                        {
                                                            if (m_smVisionInfo.g_arrPadColorDontCareROIs[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][j].VerifyROIArea(intPositionX, intPositionY))
                                                            {
                                                                m_smVisionInfo.g_arrPolygon_PadColor[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                                m_smVisionInfo.g_arrPadColorDontCareROIs[i][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "Li3D":
                    case "Lead3D":
                        if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                            {
                                if ((m_smVisionInfo.g_arrPolygon_Lead3D[i].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                {
                                    if (m_smVisionInfo.g_arrPolygon_Lead3D[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                    {
                                        if (!m_smVisionInfo.g_blnDrawFreeShapeDone)
                                        {
                                            for (int j = 0; j < m_smVisionInfo.g_arrLead3DDontCareROIs[i].Count; j++)
                                            {
                                                if (m_smVisionInfo.g_arrLead3DDontCareROIs[i][j].VerifyROIArea(intPositionX, intPositionY))
                                                {
                                                    m_smVisionInfo.g_arrPolygon_Lead3D[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(e.Location.X / m_fZoomCount, e.Location.Y / m_fZoomCount));
                                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                                    m_smVisionInfo.g_arrLead3DDontCareROIs[i][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }
            }

        }

        private void pic_Image_DoubleClick(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_blnViewDontCareArea)
            {
                //m_smVisionInfo.g_arrPolygon[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].AddPolygon();
                m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrPositioningROIs[m_smVisionInfo.g_intSelectedTemplate].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPositioningROIs[m_smVisionInfo.g_intSelectedTemplate].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));

                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            }

            // when watching threshold, directly set the pixel color to LSH value
            if (m_smVisionInfo.g_blnGetPixel)
            {
                //if (m_smVisionInfo.g_blnUseRGBFormat)
                //{
                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //    else
                //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //}
                //else
                //{
                //    if (m_smVisionInfo.g_blnViewRotatedImage)
                //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //    else
                //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //}
                if (m_smVisionInfo.g_intColorFormat == 1)
                {
                    if (m_smVisionInfo.g_blnViewRotatedImage)
                        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                    else
                        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                }
                else if (m_smVisionInfo.g_intColorFormat == 0)
                {
                    if (m_smVisionInfo.g_blnViewRotatedImage)
                        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                    else
                        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                }
            }

            if (m_smVisionInfo.g_strSelectedPage == "Package")
            {
                //if (m_smVisionInfo.g_intLearnStepNo == 16)
                //{
                //    //m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].AddPolygon();
                //    if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                //    {
                //        for (int j = 0; j < 2; j++)
                //        {
                //            m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedTemplate][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedTemplate][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                //        }
                //    }
                //    else
                //        m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedTemplate][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedTemplate][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));

                //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                //}

                if (m_smVisionInfo.g_intLearnStepNo == 20)
                {
                    if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                    {
                        if (m_smVisionInfo.g_arrPolygon_Package[0].Count > m_smVisionInfo.g_intSelectedType)
                        {
                            if ((m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                            {
                                if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                {
                                    if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                    {
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                        int intX = 0;
                                        int intY = 0;
                                        int intWidth = 0;
                                        int intHeight = 0;
                                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                        m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                        {
                                            if (m_smVisionInfo.g_intSelectedType == 0)
                                            {
                                                //if (m_smVisionInfo.g_arrPolygon_Package[0][1].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                                m_smVisionInfo.g_arrPolygon_Package[0][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].CopyAllTo(m_smVisionInfo.g_arrPolygon_Package[0][1][m_smVisionInfo.g_intSelectedDontCareROIIndex]);
                                                m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting(
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionX,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionY,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIWidth,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIHeight);
                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                            }
                                            else
                                            {
                                                //if (m_smVisionInfo.g_arrPolygon_Package[0][0].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex)
                                                m_smVisionInfo.g_arrPolygon_Package[0][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].CopyAllTo(m_smVisionInfo.g_arrPolygon_Package[0][0][m_smVisionInfo.g_intSelectedDontCareROIIndex]);
                                                m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting(
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionX,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionY,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIWidth,
                                                    m_smVisionInfo.g_arrPackageDontCareROIs[1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIHeight);
                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPackageDontCareROIs[0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                            }
                                        }
                                    }
                                    else if (m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                    {
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                        m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                        {
                                            if (m_smVisionInfo.g_intSelectedType == 0)
                                            {
                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            }
                                            else
                                            {
                                                m_smVisionInfo.g_arrPolygon_Package[m_smVisionInfo.g_intSelectedUnit][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            }
                                        }
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_arrPackageDontCareROIs[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                    }
                                    else
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 22)
                {
                    if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPackageROIs.Count > m_smVisionInfo.g_intSelectedUnit &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                                      m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                                      )
                    {
                        if (m_smVisionInfo.g_arrPolygon_PackageColor.Count > m_smVisionInfo.g_intSelectedUnit)
                        {

                            //m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                            if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                            {
                                if ((m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                    {
                                        if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                        {
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                            int intX = 0;
                                            int intY = 0;
                                            int intWidth = 0;
                                            int intHeight = 0;
                                            m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrPackageColorROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrPackageColorROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                            m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                                m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                                m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                        }
                                        else if (m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                        {
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                            m_smVisionInfo.g_arrPolygon_PackageColor[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                            m_smVisionInfo.g_arrPackageColorDontCareROIs[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                        }
                                        else
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (m_smVisionInfo.g_strSelectedPage == "PadPackage")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 13)
                {
                    if (m_smVisionInfo.g_arrPolygon_PadPackage.Count > m_smVisionInfo.g_intSelectedROI)
                    {
                        if (m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedType)
                        {
                            if ((m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                            {
                                if (m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                {
                                    if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                    {
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                        int intX = 0;
                                        int intY = 0;
                                        int intWidth = 0;
                                        int intHeight = 0;
                                        m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                        m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][2].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                        m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);


                                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                        {
                                            if (m_smVisionInfo.g_intSelectedType == 0)
                                            {
                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].CopyAllTo(m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex]);

                                                m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting(
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionX,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionY,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIWidth,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIHeight);

                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                            }
                                            else
                                            {
                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].CopyAllTo(m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex]);

                                                m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting(
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionX,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIPositionY,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIWidth,
                                                    m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROIHeight);

                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                            m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                            }
                                        }

                                    }
                                    else if (m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                    {
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                        m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));

                                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                        {
                                            if (m_smVisionInfo.g_intSelectedType == 0)
                                            {
                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][1][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            }
                                            else
                                            {
                                                m_smVisionInfo.g_arrPolygon_PadPackage[m_smVisionInfo.g_intSelectedROI][0][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            }
                                        }

                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                        m_smVisionInfo.g_arrPadPackageDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                    }
                                    else
                                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }
                            }
                        }
                    }
                }
            }

            int intLoopTo, intLoopFrom;
            if (m_smVisionInfo.g_strSelectedPage == "Pad" || m_smVisionInfo.g_strSelectedPage == "Pad5S")
            {
                //if (m_smVisionInfo.g_intLearnStepNo == 6 || m_smVisionInfo.g_intLearnStepNo == 8)
                if (m_smVisionInfo.g_blnPadAllowCustomize && (m_smVisionInfo.g_intLearnStepNo == 6 || m_smVisionInfo.g_intLearnStepNo == 8))    // 2021 04 06 - ZJYeoh : add user right control
                {

                    intLoopFrom = 0;
                    intLoopTo = m_smVisionInfo.g_arrPad.Length;

                    for (int i = intLoopFrom; i < intLoopTo; i++)
                    {
                        int intSelectedPadNo = m_smVisionInfo.g_arrPad[i].HitPadNumber(
                            m_intMouseHitX - m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX,
                            m_intMouseHitY - m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY,
                            ref m_startX, ref m_startY, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY,
                            ref m_width, ref m_height, ref m_LineCount, ref m_fFeretWidth, ref m_fFeretHeight, ref m_FeretStartX, ref m_FeretStartY, ref m_FeretAngle,
                            ref m_MaxX, ref m_MaxY, ref m_MinX, ref m_MinY, ref m_intLengthMode, ref m_fAngle);

                        if (intSelectedPadNo >= 0)
                        {
                            string strPath = AppDomain.CurrentDomain.BaseDirectory + "DeviceNo\\" + m_strSelectedRecipe + "\\" +
    m_smVisionInfo.g_strVisionFolderName + "\\Pad\\";
                            SetGroupNoForm objSetGroupNoForm = new SetGroupNoForm(m_smVisionInfo.g_arrPad[i].IsFeretActivated(intSelectedPadNo), m_smVisionInfo.g_arrPad[i].IsPadEnable(intSelectedPadNo),
                               intSelectedPadNo + 1, m_smVisionInfo, m_startX, m_startY, m_smProductionInfo, m_width, m_height, i, m_LineCount,
                               m_fFeretWidth, m_fFeretHeight, m_FeretStartX, m_FeretStartY, m_FeretAngle, m_MaxX, m_MaxY, m_MinX, m_MinY, m_intLengthMode, m_smCustomizeInfo.g_intLanguageCulture, m_fAngle, m_smVisionInfo.g_arrPad[i].GetBlobsFeaturesPadID(intSelectedPadNo));
                            if (objSetGroupNoForm.ShowDialog() == DialogResult.OK)
                            {
                                if (!objSetGroupNoForm.ref_blnEnablePad)    // No checking for Turn Width Length or Pad No if Pad is disabled.
                                {
                                    m_smVisionInfo.g_arrPad[i].EnableDisablePad(intSelectedPadNo, false);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[i].EnableDisablePad(intSelectedPadNo, true);

                                    if (objSetGroupNoForm.ref_blnTurnWidthLength)
                                    {
                                        m_smVisionInfo.g_arrPad[i].TurnPadWidthHeight(intSelectedPadNo);
                                    }

                                    int intMax = m_smVisionInfo.g_arrPad[i].GetBlobsFeaturesNumber();
                                    if ((objSetGroupNoForm.ref_intSetValue > 0) && (objSetGroupNoForm.ref_intSetValue <= intMax))
                                    {
                                        m_smVisionInfo.g_arrPad[i].UpdatePadNo(intSelectedPadNo, objSetGroupNoForm.ref_intSetValue - 1);
                                        m_smVisionInfo.g_blnUpdatePadSetting = true;
                                    }
                                }

                                if (!objSetGroupNoForm.ref_blnFeretActivated)
                                {
                                    m_smVisionInfo.g_arrPad[i].EnableDisableFeret(intSelectedPadNo, false);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[i].EnableDisableFeret(intSelectedPadNo, true);
                                }

                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 3)
                {
                    if (m_smVisionInfo.g_arrPolygon_Pad.Count > m_smVisionInfo.g_intSelectedROI)
                    {

                        //m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                        if ((m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                        {
                            if (m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                            {
                                if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                {
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                    int intX = 0;
                                    int intY = 0;
                                    int intWidth = 0;
                                    int intHeight = 0;
                                    m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                    m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][3].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][3].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                    m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                        m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                        m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                                else if (m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                {
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                    m_smVisionInfo.g_arrPolygon_Pad[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_arrPadDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                }
                                else
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }

                    }
                }
                else if (m_smVisionInfo.g_intLearnStepNo == 16)
                {
                    if (m_smVisionInfo.g_intSelectedColorThresholdIndex != -1 &&
                                    m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode.Count > m_smVisionInfo.g_intSelectedColorThresholdIndex &&
                        m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_arrDefectDontCareMode[m_smVisionInfo.g_intSelectedColorThresholdIndex] == 3
                       )
                    {
                        if (m_smVisionInfo.g_arrPolygon_PadColor.Count > m_smVisionInfo.g_intSelectedROI)
                        {

                            //m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                            if (m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedColorThresholdIndex && m_smVisionInfo.g_intSelectedColorThresholdIndex != -1)
                            {
                                if ((m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                                {
                                    if (m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                                    {
                                        if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                        {
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                            int intX = 0;
                                            int intY = 0;
                                            int intWidth = 0;
                                            int intHeight = 0;
                                            m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                            m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][3].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrPadROIs[m_smVisionInfo.g_intSelectedROI][3].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                            m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                                m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                                m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                        }
                                        else if (m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                        {
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                            m_smVisionInfo.g_arrPolygon_PadColor[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                            m_smVisionInfo.g_arrPadColorDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedColorThresholdIndex][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                        }
                                        else
                                            m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (m_smVisionInfo.g_strSelectedPage == "Lead3D" || m_smVisionInfo.g_strSelectedPage == "Li3D")
            {
                if (m_smVisionInfo.g_intLearnStepNo == 3)
                {
                    if (m_smVisionInfo.g_arrPolygon_Lead3D.Count > m_smVisionInfo.g_intSelectedROI)
                    {
                        if ((m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex) && (m_smVisionInfo.g_intSelectedDontCareROIIndex != -1))
                        {
                            if (m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode == 2)
                            {
                                if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count > 1)
                                {
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                                    int intX = 0;
                                    int intY = 0;
                                    int intWidth = 0;
                                    int intHeight = 0;
                                    m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                                    m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrLeadROIs[m_smVisionInfo.g_intSelectedROI][0].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrLeadROIs[m_smVisionInfo.g_intSelectedROI][0].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                                    m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].SetPointsOffset(
                                        m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                                        m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                                }
                                else if (m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_arrPoints.Count == 0)
                                {
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                                    m_smVisionInfo.g_arrPolygon_Lead3D[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    m_smVisionInfo.g_arrLead3DDontCareROIs[m_smVisionInfo.g_intSelectedROI][m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                                }
                                else
                                    m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }

                    }
                }
            }
            else if (m_smVisionInfo.g_strSelectedPage == "MarkOrient" || m_smVisionInfo.g_strSelectedPage == "OCR")
            {
                //if (m_smVisionInfo.g_intLearnStepNo != 8)
                //    return;

                if (m_smVisionInfo.g_intLearnStepNo == 14 &&
                    m_smVisionInfo.g_intSelectedDontCareROIIndex >= 0 &&
                    m_smVisionInfo.g_arrPolygon_Mark.Count > m_smVisionInfo.g_intSelectedDontCareROIIndex &&
                    m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex].Count > m_smVisionInfo.g_intSelectedTemplate &&
                    m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode == 2)
                {
                    //m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedTemplate].AddPolygon();
                    //m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedTemplate][1].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedTemplate][1].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));

                    if (!m_smVisionInfo.g_blnDrawFreeShapeDone && m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].ref_arrPoints.Count > 1)
                    {
                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;
                        int intX = 0;
                        int intY = 0;
                        int intWidth = 0;
                        int intHeight = 0;
                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].GetROISize(ref intX, ref intY, ref intWidth, ref intHeight);
                        m_smVisionInfo.g_arrMarkDontCareROIs[m_smVisionInfo.g_intSelectedDontCareROIIndex].LoadROISetting((int)(intX / m_smVisionInfo.g_fScaleX * m_fZoomCount) - m_smVisionInfo.g_arrMarkROIs[0][1].ref_ROITotalX, (int)(intY / m_smVisionInfo.g_fScaleY * m_fZoomCount) - m_smVisionInfo.g_arrMarkROIs[0][1].ref_ROITotalY, (int)(intWidth / m_smVisionInfo.g_fScaleX * m_fZoomCount), (int)(intHeight / m_smVisionInfo.g_fScaleY * m_fZoomCount));
                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].SetPointsOffset(
                            m_smVisionInfo.g_arrMarkDontCareROIs[m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterX * m_smVisionInfo.g_fScaleX / m_fZoomCount,
                            m_smVisionInfo.g_arrMarkDontCareROIs[m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_ROICenterY * m_smVisionInfo.g_fScaleY / m_fZoomCount);
                    }
                    else if (m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].ref_arrPoints.Count == 0)
                    {
                        m_smVisionInfo.g_blnDrawFreeShapeDone = false;
                        m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].AddPoint(new PointF(m_smProductionInfo.g_intMousePositonX * m_smVisionInfo.g_fScaleX / m_fZoomCount, m_smProductionInfo.g_intMousePositonY * m_smVisionInfo.g_fScaleY / m_fZoomCount));
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        m_smVisionInfo.g_arrMarkDontCareROIs[m_smVisionInfo.g_intSelectedDontCareROIIndex].ClearDragHandle();
                    }
                    else
                        m_smVisionInfo.g_blnDrawFreeShapeDone = true;

                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                }
            }

        }

        private void pic_Image_MouseDown(object sender, MouseEventArgs e)
        {
            if (m_smVisionInfo.g_intMachineStatus == 2)
                return;

            int intPositionX = m_intMouseHitX = (int)Math.Round(e.X / m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
            int intPositionY = m_intMouseHitY = (int)Math.Round(e.Y / m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

            if (e.Button == MouseButtons.Left)
            {
                if (pnl_PictureBox.VerticalScroll.Visible == true)
                {
                    m_intZoomImageMouseDownPointX = intPositionX;
                    m_intZoomImageMouseDownPointY = intPositionY;

                    if (m_smVisionInfo.g_strContextMenuType.Equals("Mark Setting"))
                        m_blnEnableDragZoomImage = false;
                    else if ((m_smVisionInfo.g_strSelectedPage == "Pad" || m_smVisionInfo.g_strSelectedPage == "Pad5S") && m_smVisionInfo.g_intLearnStepNo == 5)
                        m_blnEnableDragZoomImage = false;
                    else
                        m_blnEnableDragZoomImage = true;
                }

                if (m_smProductionInfo.g_blnViewROITool)
                {
                    if (m_smVisionInfo.g_objCameraROI.VerifyROIArea(intPositionX, intPositionY))
                    {
                        m_smVisionInfo.g_blnDragROI = true;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    }
                }

                if (m_smVisionInfo.g_blnViewROI)
                    VerifyROIArea(intPositionX, intPositionY);
                else if (m_smVisionInfo.VM_AT_ColorGuideline)
                    m_smVisionInfo.g_objColorROI.VerifyROIArea(intPositionX, intPositionY);

                //2021-07-21 ZJYEOH : Moved to double click
                //// when watching threshold, directly set the pixel color to LSH value
                //if (m_smVisionInfo.g_blnGetPixel)
                //{
                //    //if (m_smVisionInfo.g_blnUseRGBFormat)
                //    //{
                //    //    if (m_smVisionInfo.g_blnViewRotatedImage)
                //    //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //    //    else
                //    //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //    //}
                //    //else
                //    //{
                //    //    if (m_smVisionInfo.g_blnViewRotatedImage)
                //    //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //    //    else
                //    //        m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //    //}
                //    if (m_smVisionInfo.g_intColorFormat == 1)
                //    {
                //        if (m_smVisionInfo.g_blnViewRotatedImage)
                //            m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //        else
                //            m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(intPositionX, intPositionY);
                //    }
                //    else if (m_smVisionInfo.g_intColorFormat == 0)
                //    {
                //        if (m_smVisionInfo.g_blnViewRotatedImage)
                //            m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //        else
                //            m_smVisionInfo.g_intColorThreshold = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].ConvertRGBToLSH(intPositionX, intPositionY);
                //    }
                //}

                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "MarkOtherSettingForm":
                        if (m_smVisionInfo.g_blnViewPointGauge)
                        {
                            m_smVisionInfo.g_arrLead[0].ref_objPointGauge.VerifyGaugeArea(e.X, e.Y);
                        }
                        break;
                    case "PH":
                        if (m_smVisionInfo.g_arrPHROIs[0].VerifyROIArea(intPositionX, intPositionY))
                        {
                            m_smVisionInfo.g_blnDragROI = true;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                        break;
                    case "Position":
                        if (m_smVisionInfo.g_blnViewDontCareArea &&
                            m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                                        m_blnDrawDontCareArea = false;
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                        break;
                    case "Gauge":
                        switch (m_smVisionInfo.g_strSelectedRectGauge)
                        {
                            case "MarkOrient":
                            case "MOLi":
                                if (m_smVisionInfo.g_intUnitsOnImage > 1)
                                {
                                    if (m_smVisionInfo.g_intSelectedUnit == 0)
                                    {
                                        m_intClickedX = intPositionX - m_smVisionInfo.g_arrOrientROIs[0][0].ref_ROITotalX;
                                    }
                                    else if (m_smVisionInfo.g_intSelectedUnit == 1)
                                    {
                                        m_intClickedXRe = m_smVisionInfo.g_arrOrientROIs[1][0].ref_ROITotalX + m_smVisionInfo.g_arrOrientROIs[1][0].ref_ROIWidth - intPositionX;
                                    }
                                }
                                break;
                        }
                        break;
                    case "Seal":
                        if (m_smVisionInfo.g_intLearnStepNo == 1 && m_smVisionInfo.g_objSeal.ref_intTapePocketPitch == 2)
                        {
                            m_intClickedX = intPositionX;
                        }
                        break;
                    case "Mark":
                    case "MarkOrient":
                    case "MOLi":
                    case "OCR":
                        if (m_smVisionInfo.g_intLearnStepNo == 0)
                        {
                            if (m_smVisionInfo.g_intUnitsOnImage > 1)
                            {
                                if (m_smVisionInfo.g_intSelectedUnit == 0)
                                {
                                    m_intClickedX = intPositionX - m_smVisionInfo.g_arrOrientROIs[0][0].ref_ROITotalX;
                                }
                                else if (m_smVisionInfo.g_intSelectedUnit == 1)
                                {
                                    m_intClickedXRe = m_smVisionInfo.g_arrOrientROIs[1][0].ref_ROITotalX + m_smVisionInfo.g_arrOrientROIs[1][0].ref_ROIWidth - intPositionX;

                                }
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 7 && m_blnDrawLineDone &&
                        !((ROI)m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1]).GetROIHandle())
                        {
                            // 2019 07 31 - JBTAN: Still got use?
                            //Image i = new Bitmap(640, 480, m_Graphic);
                            //pic_Image.Image = i;

                            //// Get a Graphics object for the image
                            //Graphics g2 = Graphics.FromImage(i);

                            //// Now get handles to device contexts, and perform the bit blitting operation.
                            //IntPtr dc1 = m_Graphic.GetHdc();
                            //IntPtr dc2 = g2.GetHdc();
                            //BitBlt(dc2, 0, 0, 640, 480, dc1, 0, 0, 0x00CC0020);
                            //// Clean up !!
                            //m_Graphic.ReleaseHdc(dc1);
                            //g2.ReleaseHdc(dc2);

                            //m_pLineStart = new Point(intPositionX, intPositionY);

                            //m_blnDrawLineDone = false;
                        }
                        else if ((m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9) &&
                       m_blnDrawRectDone && !((ROI)m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1]).GetROIHandle())
                        {
                            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].IsSplitLineDisplaying())
                            {
                                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SplitLineHitTest(intPositionX, intPositionY);
                            }
                            else
                            {
                                m_pRectStart.X = e.X; // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                m_pRectStart.Y = e.Y; // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                m_pRectStop.X = -1;
                                m_pRectStop.Y = -1;

                                m_blnDrawRectDone = false;
                            }
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 10)
                        {
                            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].HitChars(intPositionX, intPositionY);
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 12)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                            {
                                //Make sure mouse is within ROI
                                if (m_smVisionInfo.g_arrOrientGaugeM4L[i].GetEdgeROIHandle())
                                {
                                    m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                    m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                    m_pRectStop.X = -1;
                                    m_pRectStop.Y = -1;
                                    m_blnDrawRectDone = false;
                                }
                            }
                        }
                        //else if (m_smVisionInfo.g_intLearnStepNo == 14 &&
                        //      m_smVisionInfo.g_intSelectedDontCareROIIndex >= 0 &&
                        //      m_smVisionInfo.g_arrPolygon_Mark.Count > m_smVisionInfo.g_intSelectedDontCareROIIndex &&
                        //      m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex].Count > m_smVisionInfo.g_intSelectedTemplate &&
                        //      m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedDontCareROIIndex][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                        else if (m_smVisionInfo.g_intLearnStepNo == 14 &&
                              m_smVisionInfo.g_intSelectedDontCareROIIndex >= 0 &&
                              m_smVisionInfo.g_arrPolygon_Mark.Count > m_smVisionInfo.g_intSelectedUnit &&
                              m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit].Count > m_smVisionInfo.g_intSelectedDontCareROIIndex &&
                              m_smVisionInfo.g_arrPolygon_Mark[m_smVisionInfo.g_intSelectedUnit][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode != 2)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                            //{
                            //    if (m_smVisionInfo.g_arrMarkROIs[i][1].VerifyROIArea(intPositionX, intPositionY))
                            //    {
                            //        m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                            //        m_blnDrawDontCareArea = false;
                            //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //        m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                            //    }
                            //}

                            for (int i = 0; i < m_smVisionInfo.g_arrMarkDontCareROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrMarkDontCareROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    //m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                                }
                            }
                        }

                        if (m_smVisionInfo.g_blnViewPointGauge)
                        {
                            m_smVisionInfo.g_arrLead[0].ref_objPointGauge.VerifyGaugeArea(intPositionX, intPositionY);
                        }
                        break;
                    case "BottomOrientPad":
                    case "BottomOPadPkg":
                    case "Pad":
                    case "Pad5S":
                        //if (m_smVisionInfo.g_intLearnStepNo == 5 && m_blnDrawLineDone && m_smVisionInfo.g_blnViewObjectsBuilded)    // 2018 10 22 - CCENG: Hide the feature of drawing cut or repair line because customer not need to use it and feel confuse about this feature.
                        //{
                        //    Image i = new Bitmap(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, m_Graphic);
                        //    pic_Image.Image = i;

                        //    // Get a Graphics object for the image
                        //    Graphics g2 = Graphics.FromImage(i);

                        //    // Now get handles to device contexts, and perform the bit blitting operation.
                        //    IntPtr dc1 = m_Graphic.GetHdc();
                        //    IntPtr dc2 = g2.GetHdc();
                        //    BitBlt(dc2, 0, 0, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionWidth, dc1, 0, 0, 0x00CC0020);
                        //    // Clean up !!
                        //    m_Graphic.ReleaseHdc(dc1);
                        //    g2.ReleaseHdc(dc2);

                        //    m_pLineStart = new Point(intPositionX, intPositionY);

                        //    m_blnDrawLineDone = false;
                        //}
                        //else 
                        if (m_smVisionInfo.g_intLearnStepNo == 0 && m_intVisionType == 0)
                        {

                            if (m_smVisionInfo.g_intSelectedROI == 0)
                            {
                                m_intClickedPad0L = intPositionX - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalX;
                                m_intClickedPad0R = m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIWidth - intPositionX;
                                m_intClickedPad0T = intPositionY - m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalY;
                                m_intClickedPad0B = m_smVisionInfo.g_arrPadROIs[0][0].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[0][0].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 1)
                            {
                                m_intClickedPad1L = intPositionX - m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalX;
                                m_intClickedPad1R = m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[1][0].ref_ROIWidth - intPositionX;
                                m_intClickedPad1T = intPositionY - m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalY;
                                m_intClickedPad1B = m_smVisionInfo.g_arrPadROIs[1][0].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[1][0].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 2)
                            {
                                m_intClickedPad2L = intPositionX - m_smVisionInfo.g_arrPadROIs[2][0].ref_ROITotalX;
                                m_intClickedPad2R = m_smVisionInfo.g_arrPadROIs[2][0].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[2][0].ref_ROIWidth - intPositionX;
                                m_intClickedPad2T = intPositionY - m_smVisionInfo.g_arrPadROIs[2][0].ref_ROITotalY;
                                m_intClickedPad2B = m_smVisionInfo.g_arrPadROIs[2][0].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[2][0].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 3)
                            {
                                m_intClickedPad3L = intPositionX - m_smVisionInfo.g_arrPadROIs[3][0].ref_ROITotalX;
                                m_intClickedPad3R = m_smVisionInfo.g_arrPadROIs[3][0].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[3][0].ref_ROIWidth - intPositionX;
                                m_intClickedPad3T = intPositionY - m_smVisionInfo.g_arrPadROIs[3][0].ref_ROITotalY;
                                m_intClickedPad3B = m_smVisionInfo.g_arrPadROIs[3][0].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[3][0].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 4)
                            {
                                m_intClickedPad4L = intPositionX - m_smVisionInfo.g_arrPadROIs[4][0].ref_ROITotalX;
                                m_intClickedPad4R = m_smVisionInfo.g_arrPadROIs[4][0].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[4][0].ref_ROIWidth - intPositionX;
                                m_intClickedPad4T = intPositionY - m_smVisionInfo.g_arrPadROIs[4][0].ref_ROITotalY;
                                m_intClickedPad4B = m_smVisionInfo.g_arrPadROIs[4][0].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[4][0].ref_ROIHeight - intPositionY;
                            }

                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 2)
                        {

                            if (m_smVisionInfo.g_intSelectedROI == 0)
                            {
                                m_intClickedPad0L = intPositionX - m_smVisionInfo.g_arrPadROIs[0][1].ref_ROITotalX;
                                m_intClickedPad0R = m_smVisionInfo.g_arrPadROIs[0][1].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[0][1].ref_ROIWidth - intPositionX;
                                m_intClickedPad0T = intPositionY - m_smVisionInfo.g_arrPadROIs[0][1].ref_ROITotalY;
                                m_intClickedPad0B = m_smVisionInfo.g_arrPadROIs[0][1].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[0][1].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 1)
                            {
                                m_intClickedPad1L = intPositionX - m_smVisionInfo.g_arrPadROIs[1][1].ref_ROITotalX;
                                m_intClickedPad1R = m_smVisionInfo.g_arrPadROIs[1][1].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[1][1].ref_ROIWidth - intPositionX;
                                m_intClickedPad1T = intPositionY - m_smVisionInfo.g_arrPadROIs[1][1].ref_ROITotalY;
                                m_intClickedPad1B = m_smVisionInfo.g_arrPadROIs[1][1].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[1][1].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 2)
                            {
                                m_intClickedPad2L = intPositionX - m_smVisionInfo.g_arrPadROIs[2][1].ref_ROITotalX;
                                m_intClickedPad2R = m_smVisionInfo.g_arrPadROIs[2][1].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[2][1].ref_ROIWidth - intPositionX;
                                m_intClickedPad2T = intPositionY - m_smVisionInfo.g_arrPadROIs[2][1].ref_ROITotalY;
                                m_intClickedPad2B = m_smVisionInfo.g_arrPadROIs[2][1].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[2][1].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 3)
                            {
                                m_intClickedPad3L = intPositionX - m_smVisionInfo.g_arrPadROIs[3][1].ref_ROITotalX;
                                m_intClickedPad3R = m_smVisionInfo.g_arrPadROIs[3][1].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[3][1].ref_ROIWidth - intPositionX;
                                m_intClickedPad3T = intPositionY - m_smVisionInfo.g_arrPadROIs[3][1].ref_ROITotalY;
                                m_intClickedPad3B = m_smVisionInfo.g_arrPadROIs[3][1].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[3][1].ref_ROIHeight - intPositionY;
                            }
                            else if (m_smVisionInfo.g_intSelectedROI == 4)
                            {
                                m_intClickedPad4L = intPositionX - m_smVisionInfo.g_arrPadROIs[4][1].ref_ROITotalX;
                                m_intClickedPad4R = m_smVisionInfo.g_arrPadROIs[4][1].ref_ROITotalX + m_smVisionInfo.g_arrPadROIs[4][1].ref_ROIWidth - intPositionX;
                                m_intClickedPad4T = intPositionY - m_smVisionInfo.g_arrPadROIs[4][1].ref_ROITotalY;
                                m_intClickedPad4B = m_smVisionInfo.g_arrPadROIs[4][1].ref_ROITotalY + m_smVisionInfo.g_arrPadROIs[4][1].ref_ROIHeight - intPositionY;
                            }

                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 3)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;

                            //    if (m_smVisionInfo.g_arrPolygon_Pad[i][0].ref_intFormMode != 2)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                            //        {
                            //            m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPoint(e.Location);
                            //            m_blnDrawDontCareArea = false;
                            //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //            m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                            //        }
                            //    }
                            //}
                        }
                        //else if ((m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 5) && m_blnDrawRectDone && !m_smVisionInfo.g_blnViewObjectsBuilded)
                        else if ((m_smVisionInfo.g_intLearnStepNo == 5) && m_blnDrawRectDone && !m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                            m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                            m_pRectStop.X = -1;
                            m_pRectStop.Y = -1;
                            m_blnDrawRectDone = false;
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 7)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            {
                                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                    break;

                                if (m_smVisionInfo.g_arrPad[i].ref_blnSelected)
                                {
                                    if (m_smVisionInfo.g_arrPad[i].ref_blnViewGroupClassificationDrawing)
                                    {
                                        // 2019 10 21 - CCENG: Change pad ROI array index 2 to index 3
                                        m_smVisionInfo.g_arrPad[i].SelectTemplateObject_ForGrouping(new Point(intPositionX, intPositionY), m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalX, m_smVisionInfo.g_arrPadROIs[i][3].ref_ROITotalY);
                                    }
                                }
                            }

                        }

                        if (m_smVisionInfo.g_blnViewPointGauge)
                        {
                            m_smVisionInfo.g_arrPad[0].ref_objPointGauge.VerifyGaugeArea(intPositionX, intPositionY);
                        }
                        break;
                    case "Calibrate5S":

                        int intSelectedROI = m_smVisionInfo.g_objCalibration.GetSelectedROI();
                        if (intSelectedROI >= 0)
                        {
                            if (intSelectedROI == 0)
                            {
                                m_intClickedPad0L = intPositionX - m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROITotalX;
                                m_intClickedPad0R = m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROITotalX + m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROIWidth - intPositionX;
                                m_intClickedPad0T = intPositionY - m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROITotalY;
                                m_intClickedPad0B = m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROITotalY + m_smVisionInfo.g_objCalibration.ref_arrROIs[0].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedROI == 1)
                            {
                                m_intClickedPad1L = intPositionX - m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROITotalX;
                                m_intClickedPad1R = m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROITotalX + m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROIWidth - intPositionX;
                                m_intClickedPad1T = intPositionY - m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROITotalY;
                                m_intClickedPad1B = m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROITotalY + m_smVisionInfo.g_objCalibration.ref_arrROIs[1].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedROI == 2)
                            {
                                m_intClickedPad2L = intPositionX - m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROITotalX;
                                m_intClickedPad2R = m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROITotalX + m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROIWidth - intPositionX;
                                m_intClickedPad2T = intPositionY - m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROITotalY;
                                m_intClickedPad2B = m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROITotalY + m_smVisionInfo.g_objCalibration.ref_arrROIs[2].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedROI == 3)
                            {
                                m_intClickedPad3L = intPositionX - m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROITotalX;
                                m_intClickedPad3R = m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROITotalX + m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROIWidth - intPositionX;
                                m_intClickedPad3T = intPositionY - m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROITotalY;
                                m_intClickedPad3B = m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROITotalY + m_smVisionInfo.g_objCalibration.ref_arrROIs[3].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedROI == 4)
                            {
                                m_intClickedPad4L = intPositionX - m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROITotalX;
                                m_intClickedPad4R = m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROITotalX + m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROIWidth - intPositionX;
                                m_intClickedPad4T = intPositionY - m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROITotalY;
                                m_intClickedPad4B = m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROITotalY + m_smVisionInfo.g_objCalibration.ref_arrROIs[4].ref_ROIHeight - intPositionY;
                            }
                        }

                        break;
                    case "CalibrateLead3D":

                        int intSelectedLeadROI = m_smVisionInfo.g_objCalibrationLead3D.GetSelectedROI();
                        if (intSelectedLeadROI >= 0)
                        {
                            if (intSelectedLeadROI == 0)
                            {
                                m_intClickedPad0L = intPositionX - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROITotalX;
                                m_intClickedPad0R = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROITotalX + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROIWidth - intPositionX;
                                m_intClickedPad0T = intPositionY - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROITotalY;
                                m_intClickedPad0B = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROITotalY + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[0].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedLeadROI == 1)
                            {
                                m_intClickedPad1L = intPositionX - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROITotalX;
                                m_intClickedPad1R = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROITotalX + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROIWidth - intPositionX;
                                m_intClickedPad1T = intPositionY - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROITotalY;
                                m_intClickedPad1B = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROITotalY + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[1].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedLeadROI == 2)
                            {
                                m_intClickedPad2L = intPositionX - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROITotalX;
                                m_intClickedPad2R = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROITotalX + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROIWidth - intPositionX;
                                m_intClickedPad2T = intPositionY - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROITotalY;
                                m_intClickedPad2B = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROITotalY + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[2].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedLeadROI == 3)
                            {
                                m_intClickedPad3L = intPositionX - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROITotalX;
                                m_intClickedPad3R = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROITotalX + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROIWidth - intPositionX;
                                m_intClickedPad3T = intPositionY - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROITotalY;
                                m_intClickedPad3B = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROITotalY + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[3].ref_ROIHeight - intPositionY;
                            }
                            else if (intSelectedLeadROI == 4)
                            {
                                m_intClickedPad4L = intPositionX - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROITotalX;
                                m_intClickedPad4R = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROITotalX + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROIWidth - intPositionX;
                                m_intClickedPad4T = intPositionY - m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROITotalY;
                                m_intClickedPad4B = m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROITotalY + m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[4].ref_ROIHeight - intPositionY;
                            }
                        }

                        break;
                    case "PadPackage":
                        if (m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;

                            //    if (m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].ref_intFormMode != 2)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                            //        {
                            //            if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                            //            {
                            //                for (int j = 0; j < 2; j++)
                            //                {
                            //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPoint(e.Location);
                            //                }
                            //            }
                            //            else
                            //                m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPoint(e.Location);
                            //            m_blnDrawDontCareArea = false;
                            //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //            m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                            //        }
                            //    }
                            //}
                        }
                        break;
                    case "LineProfileGaugeSetting":
                        if (m_smVisionInfo.g_blnViewPointGauge)
                        {
                            m_smVisionInfo.g_arrPad[0].ref_objPointGauge.VerifyGaugeArea(e.X, e.Y);
                        }
                        break;
                    case "Lead3DLineProfileGaugeSetting":
                        if (m_smVisionInfo.g_blnViewPointGauge)
                        {
                            m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.VerifyGaugeArea(e.X, e.Y);
                        }
                        break;
                    case "MNPad":
                    case "MNPad5S":
                    case "PadOtherSettingForm":
                    case "PadPackageToleranceForm":
                    case "InspectionOptionForm":
                        if (m_smVisionInfo.g_blnPadInpected)
                        {
                            //Pad
                            int intPadSelectedNoCount = 0;
                            int intPadDefectSelectedNoCount = 0;
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPadROIs[i].Count == 0)
                                    continue;

                                int intPadSelectedNo = -1;
                                int intOrgX = intPositionX - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionX;
                                int intOrgY = intPositionY - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionY;

                                if ((m_smVisionInfo.g_arrPad[i].ref_intFailResultMask & 0x1000) > 0) // not use?
                                    intPadSelectedNo = m_smVisionInfo.g_arrPad[i].SelectOrientFailSampleObject(intOrgX, intOrgY);
                                else
                                    intPadSelectedNo = m_smVisionInfo.g_arrPad[i].SelectSampleObject(intOrgX, intOrgY);

                                if (intPadSelectedNo != -1)
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnSelected = true;
                                    m_smVisionInfo.g_intPadSelectedNumber = intPadSelectedNo;
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnSelected = false;
                                    intPadSelectedNoCount++;
                                }

                                //Defect
                                int intPadDefectSelectedNo = -1;
                                if ((m_smVisionInfo.g_arrPad[i].ref_intFailResultMask & 0x1007) > 0)
                                    intPadDefectSelectedNo = m_smVisionInfo.g_arrPad[i].SelectPadDefectObject(intOrgX, intOrgY);
                                else if ((m_smVisionInfo.g_arrPad[i].ref_intFailResultMask & 0x18) > 0)
                                    intPadDefectSelectedNo = m_smVisionInfo.g_arrPad[i].SelectBrokenPadDefectObject(intOrgX, intOrgY);

                                if (intPadDefectSelectedNo != -1)
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected = true;
                                    m_smVisionInfo.g_intPadDefectSelectedNumber = intPadDefectSelectedNo;
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected = false;
                                    intPadDefectSelectedNoCount++;
                                }
                            }

                            if (intPadSelectedNoCount == m_smVisionInfo.g_arrPadROIs.Count)
                                m_smVisionInfo.g_intPadSelectedNumber = -1;

                            if (intPadDefectSelectedNoCount == m_smVisionInfo.g_arrPadROIs.Count)
                                m_smVisionInfo.g_intPadDefectSelectedNumber = -1;

                            //Package
                            int intPadPkgSelectedNoCount = 0;
                            for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                            {
                                int intPadPkgSelectedNo = -1;
                                int intOrgX = intPositionX;// - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionX;
                                int intOrgY = intPositionY;// - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionY;

                                if ((m_smVisionInfo.g_arrPad[i].ref_intFailPkgResultMask & 0x8D) > 0)
                                    intPadPkgSelectedNo = m_smVisionInfo.g_arrPad[i].SelectPkgDefectObject(intOrgX, intOrgY);

                                if (intPadPkgSelectedNo != -1)
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnPkgDefectSelected = true;
                                    m_smVisionInfo.g_intPadPkgDefectSelectedNumber = intPadPkgSelectedNo;
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[i].ref_blnPkgDefectSelected = false;
                                    intPadPkgSelectedNoCount++;
                                }
                            }

                            if (intPadPkgSelectedNoCount == m_smVisionInfo.g_arrPadROIs.Count)
                                m_smVisionInfo.g_intPadPkgDefectSelectedNumber = -1;
                            
                            //Color
                            if ((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            {
                                if (m_smVisionInfo.g_intPadDefectSelectedNumber == -1)
                                {
                                    int intPadColorSelectedNoCount = 0;
                                    for (int i = 0; i < m_smVisionInfo.g_arrPadROIs.Count; i++)
                                    {
                                        int intPaColorSelectedNo = -1;
                                        int intOrgX = intPositionX;// - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionX;
                                        int intOrgY = intPositionY;// - m_smVisionInfo.g_arrPadROIs[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrPadROIs[i][2].ref_ROIPositionY;

                                        if ((m_smVisionInfo.g_arrPad[i].ref_intFailColorResultMask) > 0)
                                            intPaColorSelectedNo = m_smVisionInfo.g_arrPad[i].SelectColorDefectObject(intOrgX, intOrgY);

                                        if (intPaColorSelectedNo != -1)
                                        {
                                            m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected = true;
                                            m_smVisionInfo.g_intPadDefectSelectedNumber = intPaColorSelectedNo + m_smVisionInfo.g_arrPad[i].GetDefectList().Count;
                                        }
                                        else
                                        {
                                            m_smVisionInfo.g_arrPad[i].ref_blnPadDefectSelected = false;
                                            intPadColorSelectedNoCount++;
                                        }
                                    }

                                    if (intPadColorSelectedNoCount == m_smVisionInfo.g_arrPadROIs.Count)
                                        m_smVisionInfo.g_intPadDefectSelectedNumber = -1;
                                }
                            }

                            m_smVisionInfo.g_blnPadSelecting = true;
                            m_smVisionInfo.g_blnUpdatePadSetting = true;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                        break;
                    case "MNLead3D":
                        //Package
                        int intLead3DPkgSelectedNoCount = 0;
                        for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                        {
                            int intLead3DPkgSelectedNo = -1;
                            int intOrgX = intPositionX;// - m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIPositionX;
                            int intOrgY = intPositionY;// - m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrLeadROIs[i][1].ref_ROIPositionY;

                            if ((m_smVisionInfo.g_arrLead3D[i].ref_intFailPkgResultMask & 0x8D) > 0)
                                intLead3DPkgSelectedNo = m_smVisionInfo.g_arrLead3D[i].SelectPkgDefectObject(intOrgX, intOrgY);

                            if (intLead3DPkgSelectedNo != -1)
                            {
                                m_smVisionInfo.g_arrLead3D[i].ref_blnPkgDefectSelected = true;
                                m_smVisionInfo.g_intLead3DPkgDefectSelectedNumber = intLead3DPkgSelectedNo;
                            }
                            else
                            {
                                m_smVisionInfo.g_arrLead3D[i].ref_blnPkgDefectSelected = false;
                                intLead3DPkgSelectedNoCount++;
                            }
                        }

                        if (intLead3DPkgSelectedNoCount == m_smVisionInfo.g_arrLeadROIs.Count)
                            m_smVisionInfo.g_intLead3DPkgDefectSelectedNumber = -1;


                        m_smVisionInfo.g_blnLead3DSelecting = true;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    case "MNMark":
                    case "MNMarkOrient":
                    case "MNPackage":
                        if (m_smVisionInfo.g_blnMarkInspected)
                        {
                            // 2019 08 24 - CCENG: Disable this feature because User feel confuse when press on image and mark color change from green to red.
                            ////Allow user to click on mark (select mark) after mark inspection done.
                            //for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            //{
                            //    if (!m_smVisionInfo.g_blnViewMarkInspection)
                            //    {
                            //        m_smVisionInfo.g_intMarkCharSelectedNo[u] = -1;
                            //        m_smVisionInfo.g_intMarkTextSelectedNo[u] = -1;
                            //    }
                            //    else
                            //    {
                            //        m_smVisionInfo.g_intMarkCharSelectedNo[u] = m_smVisionInfo.g_arrMarks[u].HitOCVChars(intPositionX, intPositionY);
                            //        m_smVisionInfo.g_intMarkTextSelectedNo[u] = m_smVisionInfo.g_arrMarks[u].HitOCVText(intPositionX, intPositionY);
                            //    }

                            //    m_smVisionInfo.g_blnMarkSelecting = true;
                            //    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //    m_smVisionInfo.g_blnUpdateMarkTolerance = true;
                            //}
                        }

                        if (m_smVisionInfo.g_blnLeadInspected)
                        {
                            int intLeadSelectedNoCount = 0;
                            m_smVisionInfo.g_intSelectedLeadExtraBlobID = -2;
                            for (int i = 0; i < m_smVisionInfo.g_arrLeadROIs.Count; i++)
                            {
                                int intLeadSelectedNo = -1;
                                int intOrgX = intPositionX - m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIPositionX;
                                int intOrgY = intPositionY - m_smVisionInfo.g_arrLeadROIs[i][0].ref_ROIPositionY;

                                //if ((m_smVisionInfo.g_arrLead[i].ref_intFailResultMask & 0x1000) > 0)
                                //    intLeadSelectedNo = m_smVisionInfo.g_arrLead[i].SelectOrientFailSampleObject(intOrgX, intOrgY);
                                //else
                                //    intLeadSelectedNo = m_smVisionInfo.g_arrLead[i].SelectSampleObject(intOrgX, intOrgY);

                                //if (intLeadSelectedNo != -1)
                                //{
                                //    m_smVisionInfo.g_arrLead[i].ref_blnSelected = true;
                                //    m_smVisionInfo.g_intLeadSelectedNumber = intLeadSelectedNo;
                                //}
                                //else
                                //{
                                //    m_smVisionInfo.g_arrLead[i].ref_blnSelected = false;
                                //    intLeadSelectedNoCount++;
                                //}
                            }

                            if (intLeadSelectedNoCount == m_smVisionInfo.g_arrLeadROIs.Count)
                                m_smVisionInfo.g_intLeadSelectedNumber = -1;

                            //m_smVisionInfo.g_blnLeadSelecting = false; //2021-04-23 ZJYEOH : Hide this as it will cause drawing weird
                            m_smVisionInfo.g_blnUpdateLeadSetting = true;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        }
                        break;
                    case "UnitPresent":

                        if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 1)
                        {
                            if (m_smVisionInfo.g_intLearnStepNo == 1 && m_blnDrawRectDone)
                            {
                                m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                m_pRectStop.X = -1;
                                m_pRectStop.Y = -1;
                                m_blnDrawRectDone = false;
                            }
                        }
                        break;
                    case "Lead":
                        //if (m_smVisionInfo.g_intLearnStepNo == 3 && m_blnDrawLineDone && m_smVisionInfo.g_blnViewObjectsBuilded)
                        //{
                        //    Image i = new Bitmap(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, m_Graphic);
                        //    pic_Image.Image = i;

                        //    // Get a Graphics object for the image
                        //    Graphics g2 = Graphics.FromImage(i);

                        //    // Now get handles to device contexts, and perform the bit blitting operation.
                        //    IntPtr dc1 = m_Graphic.GetHdc();
                        //    IntPtr dc2 = g2.GetHdc();
                        //    BitBlt(dc2, 0, 0, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionWidth, dc1, 0, 0, 0x00CC0020);
                        //    // Clean up !!
                        //    m_Graphic.ReleaseHdc(dc1);
                        //    g2.ReleaseHdc(dc2);

                        //    m_pLineStart = new Point(intPositionX, intPositionY);

                        //    m_blnDrawLineDone = false;
                        //}
                        if ((m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 7) && m_blnDrawRectDone && !m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                            m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                            m_pRectStop.X = -1;
                            m_pRectStop.Y = -1;
                            m_blnDrawRectDone = false;
                        }
                        else if (m_smVisionInfo.g_intLearnStepNo == 1)
                        {
                            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0) && (m_smVisionInfo.g_arrLead[0].ref_intRotationMethod == 2))
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                    {
                                        if (i < m_smVisionInfo.g_arrLeadROIs.Count && m_smVisionInfo.g_arrLeadROIs[i].Count > 0)
                                        {
                                            //Make sure mouse is within ROI
                                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].GetEdgeROIHandle())
                                            {
                                                m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                                m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                                m_pRectStop.X = -1;
                                                m_pRectStop.Y = -1;
                                                m_blnDrawRectDone = false;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                    {
                                        if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                        {
                                            //Make sure mouse is within ROI
                                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].GetEdgeROIHandle())
                                            {
                                                m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                                m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                                m_pRectStop.X = -1;
                                                m_pRectStop.Y = -1;
                                                m_blnDrawRectDone = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "Li3D":
                    case "Lead3D":
                        if (m_smVisionInfo.g_intLearnStepNo == 6 && m_blnDrawLineDone && m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            Image i = new Bitmap(m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionHeight, m_Graphic);
                            pic_Image.Image = i;

                            // Get a Graphics object for the image
                            Graphics g2 = Graphics.FromImage(i);

                            // Now get handles to device contexts, and perform the bit blitting operation.
                            IntPtr dc1 = m_Graphic.GetHdc();
                            IntPtr dc2 = g2.GetHdc();
                            BitBlt(dc2, 0, 0, m_smVisionInfo.g_intCameraResolutionWidth, m_smVisionInfo.g_intCameraResolutionWidth, dc1, 0, 0, 0x00CC0020);
                            // Clean up !!
                            m_Graphic.ReleaseHdc(dc1);
                            g2.ReleaseHdc(dc2);

                            m_pLineStart = new Point(intPositionX, intPositionY);

                            m_blnDrawLineDone = false;
                        }
                        else if ((m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 6) && m_blnDrawRectDone && !m_smVisionInfo.g_blnViewObjectsBuilded)
                        {
                            m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                            m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                            m_pRectStop.X = -1;
                            m_pRectStop.Y = -1;
                            m_blnDrawRectDone = false;
                        }
                        break;
                    case "Package":
                        if (m_blnDrawRectDone)
                        {
                            if (m_smVisionInfo.g_intLearnStepNo == 1)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                    {
                                        if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                        {
                                            //Make sure mouse is within ROI
                                            if (m_smVisionInfo.g_arrPackageGauge2M4L[i].GetEdgeROIHandle())
                                            {
                                                m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                                m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                                m_pRectStop.X = -1;
                                                m_pRectStop.Y = -1;
                                                m_blnDrawRectDone = false;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 0)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageROIs[i].Count > 0)
                                    {
                                        if (i < m_smVisionInfo.g_arrPackageROIs.Count && m_smVisionInfo.g_arrPackageROIs[i].Count > 1)
                                        {
                                            //Make sure mouse is within ROI
                                            if (m_smVisionInfo.g_arrPackageGaugeM4L[i].GetEdgeROIHandle())
                                            {
                                                m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                                m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                                m_pRectStop.X = -1;
                                                m_pRectStop.Y = -1;
                                                m_blnDrawRectDone = false;
                                            }
                                        }
                                    }
                                }
                            }
                            //else if (m_smVisionInfo.g_intLearnStepNo == 16 && m_blnDrawRectDone)
                            //{
                            //    m_pRectStart.X = e.X;   // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                            //    m_pRectStart.Y = e.Y;   // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                            //    m_pRectStop.X = -1;
                            //    m_pRectStop.Y = -1;
                            //    m_blnDrawRectDone = false;
                            //}
                            else if (m_smVisionInfo.g_intLearnStepNo == 20)
                            {
                                //if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                                //{
                                //    if (m_smVisionInfo.g_arrPolygon_Package[0].Count > 0)
                                //    {
                                //        if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count > 0)
                                //        {
                                //            if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode != 2)
                                //            {
                                //                for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                                //                {
                                //                    if (m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                                //                    {
                                //                        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                                //                        {
                                //                            for (int j = 0; j < 2; j++)
                                //                            {
                                //                                m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                                //                            }
                                //                        }
                                //                        else
                                //                            m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                                //                        m_blnDrawDontCareArea = false;
                                //                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                //                        m_smVisionInfo.g_arrPackageROIs[i][2].ClearDragHandle();
                                //                    }
                                //                }
                                //            }
                                //        }
                                //    }
                                //}
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageDontCareROIs.Count; i++)
                                {
                                    for (int j = 0; j < m_smVisionInfo.g_arrPackageDontCareROIs[i].Count; j++)
                                    {
                                        if (m_smVisionInfo.g_arrPackageDontCareROIs[i][j].VerifyROIArea(intPositionX, intPositionY))
                                        {
                                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                            //m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                                        }
                                    }
                                }
                            }
                            else if (m_smVisionInfo.g_intLearnStepNo == 21)
                            {
                                for (int i = 0; i < m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs.Count; i++)
                                {
                                    if (m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                        break;
                    default:
                        if (m_smProductionInfo.g_blnView5SRuler)
                        {
                            if (m_objSubRulerROI.VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_blnDragROI = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            else if (m_smVisionInfo.g_objCameraROI.VerifyROIArea(intPositionX, intPositionY))
                            {
                                m_smVisionInfo.g_blnDragROI = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                            break;
                        }

                        break;

                }

            }
            else if (e.Button == MouseButtons.Right)
            {
                if (m_smVisionInfo.g_arrImages[0].ref_intImageWidth < m_smVisionInfo.g_intCameraResolutionWidth || m_smVisionInfo.g_arrImages[0].ref_intImageHeight < m_smVisionInfo.g_intCameraResolutionHeight)
                    return;

                m_intZoomImageFocusPointX = (int)Math.Round(intPositionX * m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
                m_intZoomImageFocusPointY = (int)Math.Round(intPositionY * m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "Mark":
                    case "MarkOrient":
                    case "MOLi":
                    case "OCR":
                        {
                            if ((m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9) &&
                                m_blnDrawRectDone && !((ROI)m_smVisionInfo.g_arrMarkROIs[m_smVisionInfo.g_intSelectedUnit][1]).GetROIHandle())
                            {
                                //if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() <= 1)
                                {
                                    m_pRectStart.X = e.X; // For Drawing, use e.X value (picture box location), not intPositionX (Actual size Image location)
                                    m_pRectStart.Y = e.Y; // For Drawing, use e.Y value (picture box location), not intPositionY (Actual size Image location)
                                    m_pRectStop.X = -1;
                                    m_pRectStop.Y = -1;

                                    m_blnDrawRectDone = false;
                                }
                            }
                        }
                        break;
                }

                //if (m_smVisionInfo.g_arrImages[0].ref_intImageWidth < 640 || m_smVisionInfo.g_arrImages[0].ref_intImageHeight < 480)
                //    return;

                pnl_PictureBox.Focus();

                if (m_fZoomCount == 0.25)
                {
                    btn_25.BackColor = Color.Yellow;
                    btn_ModifyPad25.BackColor = Color.Yellow;
                }
                else
                {
                    btn_25.BackColor = Color.White;
                    btn_ModifyPad25.BackColor = Color.White;
                }

                if (m_fZoomCount == 0.5)
                {
                    btn_50.BackColor = Color.Yellow;
                    btn_ModifyPad50.BackColor = Color.Yellow;
                }
                else
                {
                    btn_50.BackColor = Color.White;
                    btn_ModifyPad50.BackColor = Color.White;
                }

                if (m_fZoomCount == 0.75)
                {
                    btn_75.BackColor = Color.Yellow;
                    btn_ModifyPad75.BackColor = Color.Yellow;
                }
                else
                {
                    btn_75.BackColor = Color.White;
                    btn_ModifyPad75.BackColor = Color.White;
                }

                if (m_fZoomCount == 1.0)
                {
                    btn_100.BackColor = Color.Yellow;
                    btn_ModifyPad100.BackColor = Color.Yellow;
                }
                else
                {
                    btn_100.BackColor = Color.White;
                    btn_ModifyPad100.BackColor = Color.White;
                }

                if (m_fZoomCount == 1.25)
                {
                    btn_125.BackColor = Color.Yellow;
                    btn_ModifyPad125.BackColor = Color.Yellow;
                }
                else
                {
                    btn_125.BackColor = Color.White;
                    btn_ModifyPad125.BackColor = Color.White;
                }

                if (m_fZoomCount == 1.5)
                {
                    btn_150.BackColor = Color.Yellow;
                    btn_ModifyPad150.BackColor = Color.Yellow;
                }
                else
                {
                    btn_150.BackColor = Color.White;
                    btn_ModifyPad150.BackColor = Color.White;
                }

                if (m_fZoomCount == 1.75)
                {
                    btn_175.BackColor = Color.Yellow;
                    btn_ModifyPad175.BackColor = Color.Yellow;
                }
                else
                {
                    btn_175.BackColor = Color.White;
                    btn_ModifyPad175.BackColor = Color.White;
                }

                if (m_fZoomCount == 2.0)
                {
                    btn_200.BackColor = Color.Yellow;
                    btn_ModifyPad200.BackColor = Color.Yellow;
                }
                else
                {
                    btn_200.BackColor = Color.White;
                    btn_ModifyPad200.BackColor = Color.White;
                }

                if (m_fZoomCount == 2.25)
                {
                    btn_225.BackColor = Color.Yellow;
                    btn_ModifyPad225.BackColor = Color.Yellow;
                }
                else
                {
                    btn_225.BackColor = Color.White;
                    btn_ModifyPad225.BackColor = Color.White;
                }

                if (m_fZoomCount == 2.5)
                {
                    btn_250.BackColor = Color.Yellow;
                    btn_ModifyPad250.BackColor = Color.Yellow;
                }
                else
                {
                    btn_250.BackColor = Color.White;
                    btn_ModifyPad250.BackColor = Color.White;
                }

                if (m_fZoomCount == 2.75)
                {
                    btn_275.BackColor = Color.Yellow;
                    btn_ModifyPad275.BackColor = Color.Yellow;
                }
                else
                {
                    btn_275.BackColor = Color.White;
                    btn_ModifyPad275.BackColor = Color.White;
                }

                if (m_fZoomCount == 3.0)
                {
                    btn_300.BackColor = Color.Yellow;
                    btn_ModifyPad300.BackColor = Color.Yellow;
                }
                else
                {
                    btn_300.BackColor = Color.White;
                    btn_ModifyPad300.BackColor = Color.White;
                }

                if (m_fZoomCount == 3.25)
                {
                    btn_325.BackColor = Color.Yellow;
                    btn_ModifyPad325.BackColor = Color.Yellow;
                }
                else
                {
                    btn_325.BackColor = Color.White;
                    btn_ModifyPad325.BackColor = Color.White;
                }

                if (m_fZoomCount == 3.5)
                {
                    btn_350.BackColor = Color.Yellow;
                    btn_ModifyPad350.BackColor = Color.Yellow;
                }
                else
                {
                    btn_350.BackColor = Color.White;
                    btn_ModifyPad350.BackColor = Color.White;
                }

                if (m_fZoomCount == 3.75)
                {
                    btn_375.BackColor = Color.Yellow;
                    btn_ModifyPad375.BackColor = Color.Yellow;
                }
                else
                {
                    btn_375.BackColor = Color.White;
                    btn_ModifyPad375.BackColor = Color.White;
                }

                if (m_fZoomCount == 4.0)
                {
                    btn_400.BackColor = Color.Yellow;
                    btn_ModifyPad400.BackColor = Color.Yellow;
                }
                else
                {
                    btn_400.BackColor = Color.White;
                    btn_ModifyPad400.BackColor = Color.White;
                }

                if (m_fZoomCount == 4.25)
                {
                    btn_425.BackColor = Color.Yellow;
                    btn_ModifyPad425.BackColor = Color.Yellow;
                }
                else
                {
                    btn_425.BackColor = Color.White;
                    btn_ModifyPad425.BackColor = Color.White;
                }

                if (m_fZoomCount == 4.5)
                {
                    btn_450.BackColor = Color.Yellow;
                    btn_ModifyPad450.BackColor = Color.Yellow;
                }
                else
                {
                    btn_450.BackColor = Color.White;
                    btn_ModifyPad450.BackColor = Color.White;
                }
                if (m_fZoomCount == 4.75)
                {
                    btn_475.BackColor = Color.Yellow;
                    btn_ModifyPad475.BackColor = Color.Yellow;
                }
                else
                {
                    btn_475.BackColor = Color.White;
                    btn_ModifyPad475.BackColor = Color.White;
                }

                if (m_fZoomCount == 5.0)
                {
                    btn_500.BackColor = Color.Yellow;
                    btn_ModifyPad500.BackColor = Color.Yellow;
                }
                else
                {
                    btn_500.BackColor = Color.White;
                    btn_ModifyPad500.BackColor = Color.White;
                }

            }
        }

        private void pic_Image_MouseMove(object sender, MouseEventArgs e)
        {
            int intPositionX = (int)Math.Round(e.X / m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
            int intPositionY = (int)Math.Round(e.Y / m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            m_smProductionInfo.g_intMousePositonX = (int)Math.Round(e.X / m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
            m_smProductionInfo.g_intMousePositonY = (int)Math.Round(e.Y / m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

            if (m_smVisionInfo.g_blnViewColorImage)
            {
                if (!m_smProductionInfo.g_blnDisplayColorPixelInfo)
                    m_smProductionInfo.g_blnDisplayColorPixelInfo = true;
            }
            else
            {
                if (m_smProductionInfo.g_blnDisplayColorPixelInfo)
                    m_smProductionInfo.g_blnDisplayColorPixelInfo = false;
            }

            if (m_smVisionInfo.g_blnViewRotatedImage)
            {
                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrRotatedImages.Count)
                    m_smProductionInfo.g_intMousePixel = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].GetImageGrayPixel(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                if (m_smVisionInfo.g_blnViewColorImage && m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorRotatedImages.Count)
                    m_smProductionInfo.g_arrMouseRGBPixel = m_smVisionInfo.g_arrColorRotatedImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
            }
            else
            {
                if (m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrImages.Count)
                    m_smProductionInfo.g_intMousePixel = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].GetImageGrayPixel(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                if (m_smVisionInfo.g_blnViewColorImage && m_smVisionInfo.g_intSelectedImage < m_smVisionInfo.g_arrColorImages.Count)
                    m_smProductionInfo.g_arrMouseRGBPixel = m_smVisionInfo.g_arrColorImages[m_smVisionInfo.g_intSelectedImage].GetRGBPixelValue(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
            }

            if (m_smVisionInfo.g_intMachineStatus == 2) // 2019 07 11 - CCENG: Move this code to after read e.XY because want read gray value w hen mouse move over picture box.
                return;

            if (m_smVisionInfo.g_blnDragROI)
            {
                VerifyROIShape(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                DragROI(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
            }
            else
            {
                if (m_blnEnableDragZoomImage)
                {
                    // 2019 08 26 - CCENG: Check is there other tools selected e.g point gauge or ROI? if yes, then dun drag the image, but should drag the tools first.
                    bool blnOtherToolSelected = false;
                    switch (m_smVisionInfo.g_strSelectedPage)
                    {
                        case "MarkOtherSettingForm":
                            if (m_smVisionInfo.g_blnViewPointGauge)
                            {
                                if (m_smVisionInfo.g_arrLead[0].ref_objPointGauge.ref_Handler)
                                    blnOtherToolSelected = true;
                            }
                            break;
                        case "Lead3DLineProfileGaugeSetting":
                            if (m_smVisionInfo.g_blnViewPointGauge)
                            {
                                if (m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.ref_Handler)
                                    blnOtherToolSelected = true;
                            }
                            break;
                        case "LineProfileGaugeSetting":
                            if (m_smVisionInfo.g_blnViewPointGauge)
                            {
                                if (m_smVisionInfo.g_arrPad[0].ref_objPointGauge.ref_Handler)
                                    blnOtherToolSelected = true;
                            }
                            break;
                        default:
                            break;
                    }

                    if (!blnOtherToolSelected)  // 2019 08 26 - CCENG: if other tools no selected.
                    {
                        int intMoveValue = (int)Math.Round(3 * m_fZoomCount, 0, MidpointRounding.AwayFromZero);

                        if (Math.Abs(m_intZoomImageMouseDownPointX - intPositionX) > 10)
                        {
                            if (m_intZoomImageMouseDownPointX > intPositionX)
                            {
                                if ((pnl_PictureBox.HorizontalScroll.Value + intMoveValue) < (pic_Image.Size.Width - 623))
                                {
                                    pnl_PictureBox.HorizontalScroll.Value += intMoveValue;
                                    m_fStrFileNamePointX = pnl_PictureBox.HorizontalScroll.Value;
                                }
                                else
                                {
                                    pnl_PictureBox.HorizontalScroll.Value = pic_Image.Size.Width - 623;
                                    m_fStrFileNamePointX = pic_Image.Size.Width - 623;
                                }
                            }
                            else if (m_intZoomImageMouseDownPointX < intPositionX)
                            {
                                if ((pnl_PictureBox.HorizontalScroll.Value - intMoveValue) > 0)
                                {
                                    pnl_PictureBox.HorizontalScroll.Value -= intMoveValue;
                                    m_fStrFileNamePointX = pnl_PictureBox.HorizontalScroll.Value;
                                }
                                else
                                {
                                    pnl_PictureBox.HorizontalScroll.Value = 0;
                                    m_fStrFileNamePointX = 0;
                                }
                            }
                        }

                        if (Math.Abs(m_intZoomImageMouseDownPointY - intPositionY) > 10)
                        {
                            if (m_intZoomImageMouseDownPointY > intPositionY)
                            {
                                if ((pnl_PictureBox.VerticalScroll.Value + intMoveValue) < (pic_Image.Size.Height - 463))
                                {
                                    pnl_PictureBox.VerticalScroll.Value += intMoveValue;
                                    m_fStrFileNamePointY = pnl_PictureBox.VerticalScroll.Value;
                                }
                                else
                                {
                                    pnl_PictureBox.VerticalScroll.Value = pic_Image.Size.Height - 463;
                                    m_fStrFileNamePointY = pic_Image.Size.Height - 463;
                                }
                            }
                            else if (m_intZoomImageMouseDownPointY < intPositionY)
                            {
                                if ((pnl_PictureBox.VerticalScroll.Value - intMoveValue) > 0)
                                {
                                    pnl_PictureBox.VerticalScroll.Value -= intMoveValue;
                                    m_fStrFileNamePointY = pnl_PictureBox.VerticalScroll.Value;
                                }
                                else
                                {
                                    pnl_PictureBox.VerticalScroll.Value = 0;
                                    m_fStrFileNamePointY = 0;
                                }
                            }
                        }
                    }
                }

                switch (m_smVisionInfo.g_strSelectedPage)
                {
                    case "Position":
                        if (!m_blnDrawDontCareArea && m_smVisionInfo.g_blnViewDontCareArea && m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                                {
                                    if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                    {
                                        m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                    }
                                }
                            }
                        }
                        break;
                    case "Package":
                        //if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 16)
                        //{
                        //    if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                        //    {
                        //        if (m_smVisionInfo.g_arrPolygon_Package[0].Count > 0)
                        //        {
                        //            if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count > 0)
                        //            {
                        //                if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode != 2)
                        //                {
                        //                    for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        //                    {
                        //                        if (m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                        //                        {
                        //                            if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                        //                            {
                        //                                for (int j = 0; j < 2; j++)
                        //                                {
                        //                                    m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                        //                                }
                        //                            }
                        //                            else
                        //                                m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                        //                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //                            m_smVisionInfo.g_arrPackageROIs[i][2].ClearDragHandle();
                        //                        }
                        //                    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        break;
                    case "PadPackage":
                        if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 13)
                        {
                            //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                            //{
                            //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                            //        break;

                            //    if (m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].ref_intFormMode != 2)
                            //    {
                            //        if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                            //        {
                            //            if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                            //            {
                            //                for (int j = 0; j < 2; j++)
                            //                {
                            //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPoint(e.Location);
                            //                }
                            //            }
                            //            else
                            //                m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPoint(e.Location);
                            //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            //            m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                            //        }
                            //    }
                            //}
                        }
                        break;
                }

                if (m_smVisionInfo.g_strSelectedPage == "Mark" || m_smVisionInfo.g_strSelectedPage == "MarkOrient" || m_smVisionInfo.g_strSelectedPage == "OCR")
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 7 && !m_blnDrawLineDone)
                    {
                        m_pLineStop = new Point(intPositionX, intPositionY);
                        if (pic_Image.DisplayRectangle.Contains(m_pLineStop))
                        {
                            if (m_pLineStartPrev != m_pLineStopPrev)
                                DrawXorLine(m_Graphic, m_pLineStartPrev, m_pLineStopPrev, true);
                            DrawXorLine(m_Graphic, m_pLineStart, m_pLineStop, false);
                            m_blnDrawLine = true;

                            m_pLineStartPrev = m_pLineStart;
                            m_pLineStopPrev = m_pLineStop;
                        }
                    }
                    else if ((m_smVisionInfo.g_intLearnStepNo == 8 || m_smVisionInfo.g_intLearnStepNo == 9) &&
                        !m_blnDrawRectDone)
                    {
                        if (e.Button == MouseButtons.Left)
                        {
                            Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                            if (m_pRectStop.X != -1)
                            {
                                DrawRectangle(m_pRectStart, m_pRectStop);
                            }
                            m_pRectStop = pCurPoint;
                            // Draw new lines.
                            DrawRectangle(m_pRectStart, m_pRectStop);
                            m_blnDrawRect = true;
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 8)
                    {
                        if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].IsSplitLineDisplaying())
                        {
                            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DragSplitLine(intPositionX, intPositionY);
                        }
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 12 && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }
                    //if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 14 && m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                    //{
                    //    for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                    //    {
                    //        if (m_smVisionInfo.g_arrMarkROIs[i][1].VerifyROIArea(intPositionX, intPositionY))
                    //        {
                    //            m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                    //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //            m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                    //        }
                    //    }
                    //}

                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        if (m_smVisionInfo.g_arrLead.Length > 0 && m_smVisionInfo.g_arrLead[0] != null)
                            m_smVisionInfo.g_arrLead[0].ref_objPointGauge.DragGauge(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "Pad" || m_smVisionInfo.g_strSelectedPage == "Pad5S")
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 5 && !m_blnDrawLineDone)
                    {
                        m_pLineStop = new Point(intPositionX, intPositionY);
                        Point pLineStop = new Point(e.X, e.Y);
                        if (pic_Image.DisplayRectangle.Contains(pLineStop))
                        {
                            if (m_pLineStartPrev != m_pLineStopPrev)
                                DrawXorLine(m_Graphic, m_pLineStartPrev, m_pLineStopPrev, true);
                            DrawXorLine(m_Graphic, m_pLineStart, m_pLineStop, false);
                            m_blnDrawLine = true;

                            m_pLineStartPrev = m_pLineStart;
                            m_pLineStopPrev = m_pLineStop;
                        }
                    }
                    //else if ((m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 5) && !m_blnDrawRectDone)
                    if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        //for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        //{
                        //    if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                        //        break;

                        //    if (m_smVisionInfo.g_arrPolygon_Pad[i][0].ref_intFormMode != 2)
                        //    {
                        //        if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                        //        {
                        //            m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPoint(e.Location);
                        //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //            m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                        //        }
                        //    }
                        //}
                    }
                    else if ((m_smVisionInfo.g_intLearnStepNo == 5) && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }

                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        if (m_smVisionInfo.g_arrPad.Length > 0 && m_smVisionInfo.g_arrPad[0] != null)
                            m_smVisionInfo.g_arrPad[0].ref_objPointGauge.DragGauge(m_smProductionInfo.g_intMousePositonX, m_smProductionInfo.g_intMousePositonY);
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "Lead")
                {
                    if ((m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 7) && !m_blnDrawLineDone)
                    {
                        m_pLineStop = new Point(intPositionX, intPositionY);
                        Point pLineStop = new Point(e.X, e.Y);
                        if (pic_Image.DisplayRectangle.Contains(pLineStop))
                        {
                            if (m_pLineStartPrev != m_pLineStopPrev)
                                DrawXorLine(m_Graphic, m_pLineStartPrev, m_pLineStopPrev, true);
                            DrawXorLine(m_Graphic, m_pLineStart, m_pLineStop, false);
                            m_blnDrawLine = true;

                            m_pLineStartPrev = m_pLineStart;
                            m_pLineStopPrev = m_pLineStop;
                        }
                    }
                    else if ((m_smVisionInfo.g_intLearnStepNo == 3 || m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 7) && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "Lead3D")
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 6 && !m_blnDrawLineDone)
                    {
                        m_pLineStop = new Point(intPositionX, intPositionY);
                        Point pLineStop = new Point(e.X, e.Y);
                        if (pic_Image.DisplayRectangle.Contains(pLineStop))
                        {
                            if (m_pLineStartPrev != m_pLineStopPrev)
                                DrawXorLine(m_Graphic, m_pLineStartPrev, m_pLineStopPrev, true);
                            DrawXorLine(m_Graphic, m_pLineStart, m_pLineStop, false);
                            m_blnDrawLine = true;

                            m_pLineStartPrev = m_pLineStart;
                            m_pLineStopPrev = m_pLineStop;
                        }
                    }
                    else if ((m_smVisionInfo.g_intLearnStepNo == 4 || m_smVisionInfo.g_intLearnStepNo == 6) && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "LineProfileGaugeSetting")
                {
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        if (m_smVisionInfo.g_arrPad.Length > 0 && m_smVisionInfo.g_arrPad[0] != null)
                        {
                            if (m_smVisionInfo.g_arrPad[0].ref_objPointGauge.ref_Handler)
                            {
                                m_smVisionInfo.g_arrPad[0].ref_objPointGauge.SetGaugeCenter(e.X, e.Y);
                                ROI objROI = new ROI();
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                                objROI.LoadROISetting(0, 0, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth,
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                                m_smVisionInfo.g_arrPad[0].ref_objPointGauge.Measure(objROI);
                                objROI.Dispose();
                                m_smVisionInfo.AT_VM_UpdateHistogram = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "MarkOtherSettingForm")
                {
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        if (m_smVisionInfo.g_arrLead.Length > 0 && m_smVisionInfo.g_arrLead[0] != null)
                        {
                            if (m_smVisionInfo.g_arrLead[0].ref_objPointGauge.ref_Handler)
                            {
                                m_smVisionInfo.g_arrLead[0].ref_objPointGauge.SetGaugeCenter(e.X, e.Y);
                                ROI objROI = new ROI();
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                                objROI.LoadROISetting(0, 0, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth,
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                                m_smVisionInfo.g_arrLead[0].ref_objPointGauge.Measure(objROI);
                                objROI.Dispose();
                                m_smVisionInfo.AT_VM_UpdateHistogram = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "Lead3DLineProfileGaugeSetting")
                {
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        if (m_smVisionInfo.g_arrLead3D.Length > 0 && m_smVisionInfo.g_arrLead3D[0] != null)
                        {
                            if (m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.ref_Handler)
                            {
                                m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.SetGaugeCenter(e.X, e.Y);
                                ROI objROI = new ROI();
                                objROI.AttachImage(m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage]);
                                objROI.LoadROISetting(0, 0, m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageWidth,
                                    m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].ref_intImageHeight);
                                m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.Measure(objROI);
                                objROI.Dispose();
                                m_smVisionInfo.AT_VM_UpdateHistogram = true;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "UnitPresent")
                {
                    if (m_smVisionInfo.g_intLearnStepNo == 1 && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }
                }
                else if (m_smVisionInfo.g_strSelectedPage == "Package")
                {
                    //if ((m_smVisionInfo.g_intLearnStepNo == 0 || m_smVisionInfo.g_intLearnStepNo == 1 || m_smVisionInfo.g_intLearnStepNo == 16) && !m_blnDrawRectDone)
                    if ((m_smVisionInfo.g_intLearnStepNo == 0 || m_smVisionInfo.g_intLearnStepNo == 1) && !m_blnDrawRectDone)
                    {
                        Point pCurPoint = new Point(e.X, e.Y);    // current mouse move rectange points (use e.X and e.Y picture box location, not intPositionXY (actual size image location)
                        if (m_pRectStop.X != -1)
                        {
                            DrawRectangle(m_pRectStart, m_pRectStop);
                        }
                        m_pRectStop = pCurPoint;
                        // Draw new lines.
                        DrawRectangle(m_pRectStart, m_pRectStop);
                        m_blnDrawRect = true;
                    }
                }

            }
        }

        private void pic_Image_MouseUp(object sender, MouseEventArgs e)
        {
            if (m_smVisionInfo.g_intMachineStatus == 2)
                return;

            int intPositionX = (int)Math.Round(e.X / m_smVisionInfo.g_fScaleX, 0, MidpointRounding.AwayFromZero);
            int intPositionY = (int)Math.Round(e.Y / m_smVisionInfo.g_fScaleY, 0, MidpointRounding.AwayFromZero);

            if (m_smVisionInfo.VM_AT_ColorGuideline)
            {
                if (m_smVisionInfo.g_objColorROI.GetROIHandle())
                    m_smVisionInfo.g_objColorROI.ClearDragHandle();
            }

            if (m_smProductionInfo.g_blnViewROITool)
            {
                m_smVisionInfo.g_objCameraROI.ClearDragHandle();
            }

            if (pnl_PictureBox.VerticalScroll.Visible == true)
                m_blnEnableDragZoomImage = false;

            switch (m_smVisionInfo.g_strSelectedPage)
            {
                case "MarkOtherSettingForm":
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        m_smVisionInfo.g_arrLead[0].ref_objPointGauge.ClearDragHandle();
                    }
                    break;
                case "Calibrate":
                    if (m_smVisionInfo.g_objCalibrateROI.GetROIHandle())
                        m_smVisionInfo.g_objCalibrateROI.ClearDragHandle();
                    break;
                case "Calibrate5S":
                    for (int i = 0; i < m_smVisionInfo.g_objCalibration.ref_arrROIs.Count; i++)
                    {
                        m_smVisionInfo.g_objCalibration.ref_arrROIs[i].ClearDragHandle();
                    }
                    for (int i = 0; i < m_smVisionInfo.g_objCalibration.ref_arrRectGauge4L.Count; i++)
                    {
                        m_smVisionInfo.g_objCalibration.ref_arrRectGauge4L[i].ClearDragHandle();
                    }
                    break;
                case "CalibrateLead3D":
                    for (int i = 0; i < m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs.Count; i++)
                    {
                        m_smVisionInfo.g_objCalibrationLead3D.ref_arrROIs[i].ClearDragHandle();
                    }
                    //for (int i = 0; i < m_smVisionInfo.g_objCalibrationLead3D.ref_arrRectGauge4L.Count; i++)
                    //{
                    //    m_smVisionInfo.g_objCalibrationLead3D.ref_arrRectGauge4L[i].ClearDragHandle();
                    //}
                    break;
                case "Orient":
                    ClearDragHandle(m_smVisionInfo.g_arrOrientROIs);
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        m_smVisionInfo.g_blnViewRotatedImage_AfterMouseUp = true;
                    }
                    break;
                case "Mark":
                case "OCR":
                    ClearDragHandle(m_smVisionInfo.g_arrMarkROIs);
                    ModifyMarkImage(e.Button == MouseButtons.Left);
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        m_smVisionInfo.g_blnViewRotatedImage_AfterMouseUp = true;
                    }
                    break;
                case "MarkOrient":
                case "MOLi":
                    if (m_smVisionInfo.g_blnViewOrientTrainROI || (m_smVisionInfo.g_blnViewSearchROI && !m_smVisionInfo.g_blnViewPackageImage))
                    {
                        if (m_smVisionInfo.g_blnViewMOGauge)
                        {
                            for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                            {
                                m_smVisionInfo.g_arrOrientGaugeM4L[i].ClearDragHandle();
                            }
                        }
                        else
                            ClearDragHandle(m_smVisionInfo.g_arrOrientROIs);
                    }
                    else if (m_smVisionInfo.g_blnViewMOGauge)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrOrientGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrOrientGaugeM4L[i].ClearDragHandle();
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewPin1TrainROI)
                    {
                        for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                        {
                            m_smVisionInfo.g_arrPin1[u].ref_objSearchROI.ClearDragHandle();
                            m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.ClearDragHandle();
                        }
                    }
                    else if (m_smVisionInfo.g_blnViewMarkTrainROI || m_smVisionInfo.g_blnViewMark2DCodeROI)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrMarkROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrOrientROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrMarkDontCareROIs);
                    }
                    else if (m_smVisionInfo.g_blnViewUnitROI)
                        m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][2].ClearDragHandle();
                    else if (m_smVisionInfo.g_blnViewUnitSurfaceROI)
                        m_smVisionInfo.g_arrOrientROIs[m_smVisionInfo.g_intSelectedUnit][3].ClearDragHandle();
                    else if (m_smVisionInfo.g_blnViewPackageImage)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrOrientROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrPackageROIs);
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 8)
                    {
                        m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].ClearSplitLineDragHandler();
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        m_smVisionInfo.g_blnViewRotatedImage_AfterMouseUp = true;
                    }
                    ModifyMarkImage(e.Button == MouseButtons.Left);

                    //if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 14 && m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                    //{
                    //    for (int i = 0; i < m_smVisionInfo.g_arrMarkROIs.Count; i++)
                    //    {
                    //        if (m_smVisionInfo.g_arrMarkROIs[i][1].VerifyROIArea(intPositionX, intPositionY))
                    //        {
                    //            m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                    //            m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrMarkROIs[i][1].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrMarkROIs[i][1].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //            m_blnDrawDontCareArea = true;
                    //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //            m_smVisionInfo.g_arrMarkROIs[i][1].ClearDragHandle();
                    //        }
                    //        else
                    //        {
                    //            m_smVisionInfo.g_arrPolygon_Mark[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrMarkROIs[i][1].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrMarkROIs[i][1].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //            m_blnDrawDontCareArea = true;
                    //            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //        }
                    //    }
                    //}
                    break;
                case "ColorPackage":
                    if (m_smVisionInfo.g_blnViewSearchROI || m_smVisionInfo.g_blnViewPackageTrainROI)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPackageROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrColorPackageROIs);
                    }
                    break;
                case "Package":
                    ModifyPackageImage();
                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                    {
                        m_smVisionInfo.g_arrPackageGaugeM4L[i].ClearDragHandle();
                    }
                    for (int i = 0; i < m_smVisionInfo.g_arrPackageGauge2M4L.Count; i++)
                    {
                        m_smVisionInfo.g_arrPackageGauge2M4L[i].ClearDragHandle();
                    }
                    //if ((m_smVisionInfo.g_blnViewPackageImage && m_smVisionInfo.g_blnViewSearchROI) ||
                    //    m_smVisionInfo.g_blnViewPackageTrainROI || m_smVisionInfo.g_blnViewPackageMaskROI)
                    //    ClearDragHandle(m_smVisionInfo.g_arrPackageROIs);

                    //if (m_smVisionInfo.g_intLearnStepNo == 0)
                    //    ClearDragHandle(m_smVisionInfo.g_arrPackageROIs);

                    if (m_smVisionInfo.g_intLearnStepNo == 20) //!m_blnDrawDontCareArea && 
                    {
                        //if (m_smVisionInfo.g_arrPolygon_Package.Count > 0)
                        //{
                        //    if (m_smVisionInfo.g_arrPolygon_Package[0].Count > m_smVisionInfo.g_intSelectedType)
                        //    {
                        //        if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType].Count > 0)
                        //        {
                                    ////if (m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].ref_intFormMode != 2)
                                        ClearDragHandle(m_smVisionInfo.g_arrPackageDontCareROIs);
                        //        }
                        //    }
                        //}
                        //for (int i = 0; i < m_smVisionInfo.g_arrPackageROIs.Count; i++)
                        //{
                        //    if (m_smVisionInfo.g_arrPackageROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                        //    {
                        //        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                        //        {
                        //            for (int j = 0; j < 2; j++)
                        //            {
                        //                m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                        //                m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                        //            }
                        //        }
                        //        else
                        //        {
                        //            m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPoint(e.Location);
                        //            m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                        //        }
                        //        m_blnDrawDontCareArea = true;
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //        m_smVisionInfo.g_arrPackageROIs[i][2].ClearDragHandle();
                        //    }
                        //    else
                        //    {
                        //        if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                        //        {
                        //            for (int j = 0; j < 2; j++)
                        //            {
                        //                m_smVisionInfo.g_arrPolygon_Package[0][j][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                        //            }
                        //        }
                        //        else
                        //            m_smVisionInfo.g_arrPolygon_Package[0][m_smVisionInfo.g_intSelectedType][m_smVisionInfo.g_intSelectedDontCareROIIndex].AddPolygon((int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPackageROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                        //        m_blnDrawDontCareArea = true;
                        //        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        //    }
                        //}
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 21)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPackageMoldFlashDontCareROIs);
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 22)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPackageColorDontCareROIs);
                    }
                    break;
                case "Gauge":
                    switch (m_smVisionInfo.g_strSelectedRectGauge)
                    {
                        case "Orient":
                        case "MarkOrient":
                        case "MOLi":
                            ClearDragHandle(m_smVisionInfo.g_arrOrientROIs);
                            break;
                        case "Mark":
                            ClearDragHandle(m_smVisionInfo.g_arrMarkROIs);
                            break;
                        case "Package":
                        case "Package1":
                        case "Package2":
                            ClearDragHandle(m_smVisionInfo.g_arrPackageROIs);
                            break;
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "Pad5S":
                    ModifyPadImage();
                    if (m_smVisionInfo.g_intLearnStepNo == 1)
                        ClearDragHandle(m_smVisionInfo.g_arrPositioningROIs);
                    if (m_smVisionInfo.g_intLearnStepNo < 3)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrPadOrientROIs);
                        m_smVisionInfo.g_objTopParentROI.ClearDragHandle();
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ClearDragHandle();
                        }
                    }
                    else if(m_smVisionInfo.g_intLearnStepNo == 14|| m_smVisionInfo.g_intLearnStepNo == 15)
                        ClearDragHandle(m_smVisionInfo.g_arrPadOrientROIs);
                    //if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 3)
                    //{
                    //    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    //    {
                    //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    //            break;

                    //        if (m_smVisionInfo.g_arrPolygon_Pad[i][0].ref_intFormMode != 2)
                    //        {
                    //            if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                    //            {
                    //                m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPoint(e.Location);
                    //                m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                m_blnDrawDontCareArea = true;
                    //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //                m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                    //            }
                    //            else
                    //            {
                    //                m_smVisionInfo.g_arrPolygon_Pad[i][0].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                m_blnDrawDontCareArea = true;
                    //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //            }
                    //        }
                    //    }
                    //}
                    if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrPadDontCareROIs);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 4)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);

                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                m_smVisionInfo.g_arrPin1[u].ref_objSearchROI.ClearDragHandle();
                                m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.ClearDragHandle();
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 16)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrPadColorDontCareROIs);
                    }
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        m_smVisionInfo.g_blnViewRotatedImage_AfterMouseUp = true;
                    }
                    break;
                case "PadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ClearDragHandle();
                        }
                    }

                    if (m_smVisionInfo.g_intLearnStepNo < 2)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 13)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrPadROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrPadPackageDontCareROIs);
                    }
                    //if (!m_blnDrawDontCareArea && m_smVisionInfo.g_intLearnStepNo == 11)
                    //{
                    //    for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                    //    {
                    //        if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    //            break;

                    //        if (m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].ref_intFormMode != 2)
                    //        {
                    //            if (m_smVisionInfo.g_arrPadROIs[i][2].VerifyROIArea(intPositionX, intPositionY))
                    //            {
                    //                if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                    //                {
                    //                    for (int j = 0; j < 2; j++)
                    //                    {
                    //                        m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPoint(e.Location);
                    //                        m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPoint(e.Location);
                    //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                }
                    //                m_blnDrawDontCareArea = true;
                    //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //                m_smVisionInfo.g_arrPadROIs[i][2].ClearDragHandle();
                    //            }
                    //            else
                    //            {
                    //                if (m_smVisionInfo.g_blnUseSameDontCareForBrightAndDark)
                    //                {
                    //                    for (int j = 0; j < 2; j++)
                    //                    {
                    //                        m_smVisionInfo.g_arrPolygon_PadPackage[i][j].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                    }
                    //                }
                    //                else
                    //                    m_smVisionInfo.g_arrPolygon_PadPackage[i][m_smVisionInfo.g_intSelectedType].AddPolygon((int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                    //                m_blnDrawDontCareArea = true;
                    //                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    //            }
                    //        }
                    //    }
                    //}
                    break;
                case "LeadPackage":
                    if (m_smVisionInfo.g_intLearnStepNo == 0)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                        {
                            if (i != 0)
                                break;
                            if (!m_smVisionInfo.g_arrLead3D[0].ref_blnMeasureCenterPkgSizeUsingCorner)
                                m_smVisionInfo.g_arrLead3D[i].ref_objRectGauge4L.ClearDragHandle();
                        }
                    }

                    if (m_smVisionInfo.g_intLearnStepNo < 2)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrLeadROIs);
                    }
                    break;
                case "Seal":
                    //if (((m_intVisionType & 0x02) > 0) && m_smVisionInfo.g_objUnitROI.GetROIHandle())
                    //{
                    //    //m_smVisionInfo.g_objUnitROI.ClearDragHandle();
                    //}
                    //else
                    ClearDragHandle(m_smVisionInfo.g_arrSealROIs);
                    ClearDragHandle(m_smVisionInfo.g_arrSealDontCareROIs);
                    break;
                case "Camera":
                    //m_smVisionInfo.g_objCameraROI.ClearDragHandle();
                    m_smVisionInfo.AT_VM_UpdateHistogram = true;
                    break;
                case "System":
                    m_smVisionInfo.g_arrSystemROI[0].ClearDragHandle();
                    m_smVisionInfo.AT_VM_UpdateHistogram = true;
                    break;
                case "Position":
                    ClearDragHandle(m_smVisionInfo.g_arrPositioningROIs);

                    if (!m_blnDrawDontCareArea && m_smVisionInfo.g_blnViewDontCareArea && m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].ref_intFormMode != 2)
                    {
                        for (int i = 0; i < m_smVisionInfo.g_arrPositioningROIs.Count; i++)
                        {
                            if (m_smVisionInfo.g_arrPositioningROIs[i].ref_strROIName == "Train ROI")
                            {
                                if (m_smVisionInfo.g_arrPositioningROIs[i].VerifyROIArea(intPositionX, intPositionY))
                                {
                                    m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPoint(e.Location);
                                    m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrPositioningROIs[i].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPositioningROIs[i].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                                    m_blnDrawDontCareArea = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPolygon[0][m_smVisionInfo.g_intSelectedTemplate].AddPolygon((int)(m_smVisionInfo.g_arrPositioningROIs[i].ref_ROITotalCenterX * m_smVisionInfo.g_fScaleX), (int)(m_smVisionInfo.g_arrPositioningROIs[i].ref_ROITotalCenterY * m_smVisionInfo.g_fScaleY));
                                    m_blnDrawDontCareArea = true;
                                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                                }

                            }
                        }
                    }
                    break; 
                case "PocketPosition":
                    ClearDragHandle(m_smVisionInfo.g_arrPocketPositionROIs);
                    break;
                case "Barcode":
                    ClearDragHandle(m_smVisionInfo.g_arrBarcodeROIs);
                    break;
                case "LeadPocketDontCareFix":
                    ClearDragHandle(m_smVisionInfo.g_arrLeadPocketDontCareROIsFix);
                    break;
                case "LeadPocketDontCareManual":
                    ClearDragHandle(m_smVisionInfo.g_arrLeadPocketDontCareROIsManual);
                    break;
                case "LeadPocketDontCareAuto":
                    ClearDragHandle(m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto);
                    break;
                case "LeadPocketDontCareBlob":
                    ClearDragHandle(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob);
                    break;
                case "UnitPresent":

                    if (m_smVisionInfo.g_objUnitPresent.ref_intDefineUnitMethod == 1)
                    {
                        if (!m_blnDrawRectDone)
                        {
                            m_blnDrawRectDone = true;
                            if (m_blnDrawRect)
                            {
                                if (m_smVisionInfo.g_intLearnStepNo == 1)
                                {
                                    m_smVisionInfo.g_objUnitPresent.SelectTemporaryObjects(new Point((int)((float)m_pRectStart.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStart.Y / m_smVisionInfo.g_fScaleY)),
                                                                                     new Point((int)((float)m_pRectStop.X / m_smVisionInfo.g_fScaleX), (int)((float)m_pRectStop.Y / m_smVisionInfo.g_fScaleY)),
                                                                                    m_smVisionInfo.g_arrPositioningROIs[0].ref_ROITotalX,
                                                                                    m_smVisionInfo.g_arrPositioningROIs[0].ref_ROITotalY);
                                }

                                m_blnDrawRect = false;
                                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            }
                        }
                    }
                    ClearDragHandle(m_smVisionInfo.g_arrPositioningROIs);

                    m_smVisionInfo.g_objUnitPresent.ClearDragHandle();

                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                    break;
                case "Lead":
                    ModifyLeadImage();
                    if (m_smVisionInfo.g_intLearnStepNo < 3)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrLeadROIs);
                        for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                        {
                            m_smVisionInfo.g_arrPackageGaugeM4L[i].ClearDragHandle();
                        }
                    }
                    break;
                case "Li3D":
                case "Lead3D":
                    ModifyLead3DImage();
                    if (m_smVisionInfo.g_intLearnStepNo < 2)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrLeadROIs);
                        //for (int i = 0; i < m_smVisionInfo.g_arrPackageGaugeM4L.Count; i++)
                        //{
                        //    m_smVisionInfo.g_arrPackageGaugeM4L[i].ClearDragHandle();
                        //}
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 2)
                    {
                        ClearDragHandle(m_smVisionInfo.g_arrLeadROIs);

                        if (m_smVisionInfo.g_blnViewPin1TrainROI)
                        {
                            for (int u = 0; u < m_smVisionInfo.g_intUnitsOnImage; u++)
                            {
                                m_smVisionInfo.g_arrPin1[u].ref_objSearchROI.ClearDragHandle();
                                m_smVisionInfo.g_arrPin1[u].ref_objPin1ROI.ClearDragHandle();
                            }
                        }
                    }
                    else if (m_smVisionInfo.g_intLearnStepNo == 3)
                    {
                        //ClearDragHandle(m_smVisionInfo.g_arrLeadROIs);
                        ClearDragHandle(m_smVisionInfo.g_arrLead3DDontCareROIs);
                    }
                    break;
                case "LineProfileGaugeSetting":
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        m_smVisionInfo.g_arrPad[0].ref_objPointGauge.ClearDragHandle();
                    }
                    break;
                case "Lead3DLineProfileGaugeSetting":
                    if (m_smVisionInfo.g_blnViewPointGauge)
                    {
                        m_smVisionInfo.g_arrLead3D[0].ref_objPointGauge.ClearDragHandle();
                    }
                    break;
                case "PH":
                    ClearDragHandle(m_smVisionInfo.g_arrPHROIs);
                    break;
                default:
                    if (m_smProductionInfo.g_blnView5SRuler)
                    {
                        m_objSubRulerROI.ClearDragHandle();
                        m_smVisionInfo.g_objCameraROI.ClearDragHandle();
                        m_smVisionInfo.AT_VM_UpdateHistogram = true;
                    }
                    break;
            }
        }

        private void AutoSizeForm()
        {
            // Set AutoForm size to fill in whole window screen
            Rectangle objScreenRect = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
            //if (objScreenRect.Width == 1920 && objScreenRect.Height == 1080)
            //{
            //    this.Size = new Size(objScreenRect.Width - 160, objScreenRect.Height - 193);
            //}
            //else
            {
                this.Size = new Size(objScreenRect.Width - 6, objScreenRect.Height - 193);
            }

            panel_Left.Size = new Size(objScreenRect.Width - 18 - 371, objScreenRect.Height - 193);
            tabCtrl_Production.Size = new Size(tabCtrl_Production.Size.Width, objScreenRect.Height - 186);
        }

        private void UpdateContextMenuStrip()
        {
            if (!m_smVisionInfo.g_blnWantCheckPocketPosition)
            {
                btn_PocketPositionMean.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
            {
                menuItem_5SRuler.Visible = false;
                toolStripSeparator1.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                menuItem_ViewPosCrosshair.Visible = false;

            if (((m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) == 0) && ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) == 0))
            {
                menuItem_ViewPadROIToleranceROI.Visible = false;
                menuItem_ViewPadInspectionArea.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
            {
                menuItem_ViewMarkROI.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
            {
                menuItem_ViewLeadDontCareROI.Visible = false;
            }

            if (((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
            {
                menuItem_ViewPadResult.Visible = true;
            }
            else
            {
                menuItem_ViewPadResult.Visible = false;
            }

            if ((m_smCustomizeInfo.g_intWantBarcode & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
            {
                menuItem_ViewBarcodePatternInspectionArea.Visible = false;
                menuItem_ViewBarcodeInspectionArea.Visible = false;
            }

            menuItem_ViewCrosshair.Checked = m_smProductionInfo.g_blnViewCrosshair;
            menuItem_ViewPosCrosshair.Checked = m_smProductionInfo.g_blnViewPosCrosshair;
            menuItem_Inspection.Checked = m_smProductionInfo.g_blnViewInspection;
            menuItem_ViewPadInspectionArea.Checked = m_smProductionInfo.g_blnViewPadInspectionArea;
            menuItem_ViewPadResult.Checked = m_smProductionInfo.g_blnViewPadResult;
            menuItem_ViewBarcodeInspectionArea.Checked = m_smProductionInfo.g_blnViewBarcodeInspectionArea;
            menuItem_ViewBarcodePatternInspectionArea.Checked = m_smProductionInfo.g_blnViewBarcodePatternInspectionArea;
            menuItem_ViewPackageResult.Checked = m_smProductionInfo.g_blnViewPackageResult;
            menuItem_ViewPackageTolerance.Checked = m_smProductionInfo.g_blnViewPackageTolerance;
            menuItem_ViewPocketPositionResult.Checked = m_smProductionInfo.g_blnViewPocketPositionResult;
            menuItem_ViewPadROIToleranceROI.Checked = m_smProductionInfo.g_blnViewPadROIToleranceROI;
            menuItem_ViewMarkROI.Checked = m_smProductionInfo.g_blnViewMarkROI;
            menuItem_ViewLeadDontCareROI.Checked = m_smProductionInfo.g_blnViewLeadDontCareROI;
            menuItem_ViewROI.Checked = m_smProductionInfo.g_blnViewSearchROI;
            menuItem_ViewROITool.Checked = m_smProductionInfo.g_blnViewROITool;
            SubMenuItem_ViewROIDetails.Checked = m_smProductionInfo.g_blnViewROIDetails;
            menuItem_5SRuler.Checked = m_smProductionInfo.g_blnView5SRuler;

            // Tracking part
            saveImageAfterGrabToolStripMenuItem.Checked = m_smVisionInfo.g_blnSaveImageAfterGrab;
            mOIOToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackIO;
            saveImageFileNameToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackSaveImageFile;
        }

        private void UpdateVisionPageCounterGUI()
        {
            STTrackLog.WriteLine("After --" + m_smVisionInfo.g_strVisionName + "a");

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "Package":
                    m_objVision1Page.CustomizeGUI();
                    break;
                case "UnitPresent":
                    m_objVision2Page.CustomizeGUI();
                    break;
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    m_objVision3Page.CustomizeGUI();
                    break;
                case "Li3D":
                case "Li3DPkg":
                    m_objVision3Lead3DPage.CustomizeGUI();
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    m_objVision4Page.CustomizeGUI();
                    break;
                case "Seal":
                    m_objVision6Page.CustomizeGUI();
                    break;
                case "Barcode":
                    m_objVision7Page.CustomizeGUI();
                    break;
                default:
                    SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            STTrackLog.WriteLine("After --" + m_smVisionInfo.g_strVisionName + "b");
        }

        private void VisionPage_Load(object sender, EventArgs e)
        {
            UpdateContextMenuStrip();

            AutoSizeForm();

            tabCtrl_Production.SelectedTab = tabPage_General;

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_smVisionInfo.g_intCameraResolutionWidth >= 1500 || m_smVisionInfo.g_intCameraResolutionHeight >= 1500)
                        timer_Live.Interval = 1;
                    break;
            }
                    m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

            Cursor.Current = Cursors.Default;
        }



        private void timer_Live_Tick(object sender, EventArgs e)
        {
            if (m_smCustomizeInfo.g_blnShowSubLearnButton)
            {
                CustomizeButtonGUI();
            }
            else
            {
                if (btn_ToleranceReference.Visible != (m_smVisionInfo.g_strVisionName == "PadPkg" || m_smVisionInfo.g_strVisionName == "Pad5SPkg"))
                    btn_ToleranceReference.Visible = (m_smVisionInfo.g_strVisionName == "PadPkg" || m_smVisionInfo.g_strVisionName == "Pad5SPkg");

                btn_RecipeVerification.Visible = m_smProductionInfo.g_blnWantRecipeVerification;
                menuItem_ViewPocketPositionResult.Visible = m_smVisionInfo.g_blnWantCheckPocketPosition;
                btn_LearnPocketPosition.Visible = btn_LearnPocketPosition.Enabled && m_smVisionInfo.g_blnWantCheckPocketPosition;
                btn_LearnEmptyUnit.Visible = btn_LearnEmptyUnit.Enabled && m_smVisionInfo.g_blnWantCheckEmpty;
                btn_LearnPH.Visible = btn_LearnPH.Enabled && m_smVisionInfo.g_blnWantCheckPH;

                if (btn_LearnOCR.Visible != ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_blnUseOCR || m_smVisionInfo.g_blnUseOCRandOCV)))
                    btn_LearnOCR.Visible = ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_blnUseOCR || m_smVisionInfo.g_blnUseOCRandOCV));

                if (m_smVisionInfo.g_strVisionName == "BottomOrientPad" || m_smVisionInfo.g_strVisionName == "BottomOPadPkg")
                {
                    if (!btn_LearnPadOrient.Visible)
                        btn_LearnPadOrient.Visible = true;

                    if (btn_RecipeLearn.Text != "Learn Pad")
                        btn_RecipeLearn.Text = "Learn Pad";

                }
                else
                {
                    if (btn_LearnPadOrient.Visible)
                        btn_LearnPadOrient.Visible = false;

                }

                if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0 && (m_smVisionInfo.g_strVisionName.Contains("BottomPosition") || m_smVisionInfo.g_strVisionName.Contains("BottomOrient")))
                {
                    if (m_smVisionInfo.g_blnOrientWantPackage)
                        btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = true;
                    else
                        btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled = false;
                }

                if (((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && m_smVisionInfo.g_strVisionName.Contains("Pad"))
                {
                    if (!btn_LearnPadColor.Visible)
                        btn_LearnPadColor.Visible = true;
                }
                else
                {
                    if (btn_LearnPadColor.Visible)
                        btn_LearnPadColor.Visible = false;
                }

                if (((m_smCustomizeInfo.g_intUseColorCamera & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && !m_smVisionInfo.g_strVisionName.Contains("Pad"))
                {
                    if (!btn_LearnPackageColor.Visible)
                        btn_LearnPackageColor.Visible = true;
                }
                else
                {
                    if (btn_LearnPackageColor.Visible)
                        btn_LearnPackageColor.Visible = false;
                }

                if (m_smVisionInfo.g_strVisionName == "Barcode")
                {
                    if (btn_Yield.Visible)
                        btn_Yield.Visible = false;

                    if (m_smVisionInfo.g_objBarcode != null)
                        if (btn_LearnReferenceImage.Visible != m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage)
                            btn_LearnReferenceImage.Visible = m_smVisionInfo.g_objBarcode.ref_blnWantUseReferenceImage;
                }

                if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                {
                    if (btn_LearnLeadPocketDontCareAreaFix.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead)
                        btn_LearnLeadPocketDontCareAreaFix.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead;

                    if (btn_LearnLeadPocketDontCareAreaManual.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead)
                        btn_LearnLeadPocketDontCareAreaManual.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead;

                    if (btn_LearnLeadPocketDontCareAreaAuto.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead)
                        btn_LearnLeadPocketDontCareAreaAuto.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead;

                    if (btn_LearnLeadPocketDontCareAreaBlob.Visible != m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead)
                        btn_LearnLeadPocketDontCareAreaBlob.Visible = m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead;
                }
                else
                {
                    if (btn_LearnLeadPocketDontCareAreaFix.Visible != false)
                        btn_LearnLeadPocketDontCareAreaFix.Visible = false;

                    if (btn_LearnLeadPocketDontCareAreaManual.Visible != false)
                        btn_LearnLeadPocketDontCareAreaManual.Visible = false;

                    if (btn_LearnLeadPocketDontCareAreaAuto.Visible != false)
                        btn_LearnLeadPocketDontCareAreaAuto.Visible = false;

                    if (btn_LearnLeadPocketDontCareAreaBlob.Visible != false)
                        btn_LearnLeadPocketDontCareAreaBlob.Visible = false;
                }

            }

            if (m_smVisionInfo.g_intMachineStatus != m_intMachineStatus)
            {
                m_intMachineStatus = m_smVisionInfo.g_intMachineStatus;
                switch (m_intMachineStatus)
                {
                    case 1:
                    case 3:
                        EnableMenuItem(true);
                        break;
                    case 2:
                        EnableMenuItem(false);
                        break;
                }
            }

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "MOPkg":
                case "MOLiPkg":
                case "MarkPkg":
                    if (m_smVisionInfo.g_blnGRRON)
                    {
                        if (!m_blnViewGRR)
                        {
                            if (!m_objVisionGRRPage.CheckGRRFileExist(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime))
                            {
                                m_blnViewGRR = true;

                                // View GRR Form
                                pnl_Production.Controls["VisionGRRPage"].BringToFront();
                                pnl_Production.Controls["VisionGRRPage"].Show();

                                m_objVisionGRRPage.InitPkg();
                                m_objVisionGRRPage.EnableSetting(true);
                            }
                            else
                            {
                                m_smVisionInfo.g_blnGRRON = false;
                                SRMMessageBox.Show("Only one GRR test allowed per lot.\nPlease create new lot to perform GRR test.", "GRR");

                            }
                        }
                    }
                    else if (m_blnViewGRR)
                    {
                        m_blnViewGRR = false;
                        pnl_Production.Controls["Vision1Page"].BringToFront();
                        pnl_Production.Controls["Vision1Page"].Show();

                        if (m_smVisionInfo.g_blnViewOfflinePage)
                        {
                            if (m_objVision1OfflinePage != null)
                            {
                                m_smVisionInfo.VM_AT_OfflinePageView = false;
                                m_smVisionInfo.g_blnViewOfflinePage = false;
                                m_smVisionInfo.VM_AT_SettingInDialog = false;
                                m_smVisionInfo.AT_VM_ManualTestMode = false;
                                m_objVision1OfflinePage.Hide();
                            }
                        }
                    }
                    break;
                case "InPocketPkg":
                case "IPMLiPkg":
                    if (m_smVisionInfo.g_blnGRRON)
                    {
                        if (!m_blnViewGRR)
                        {
                            if (!m_objVisionGRRPage.CheckGRRFileExist(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime))
                            {
                                m_blnViewGRR = true;

                                // View GRR Form
                                pnl_Production.Controls["VisionGRRPage"].BringToFront();
                                pnl_Production.Controls["VisionGRRPage"].Show();

                                m_objVisionGRRPage.InitInPocketPkg();
                                m_objVisionGRRPage.EnableSetting(true);
                            }
                            else
                            {
                                m_smVisionInfo.g_blnGRRON = false;
                                SRMMessageBox.Show("Only one GRR test allowed per lot.\nPlease create new lot to perform GRR test.", "GRR");

                            }
                        }
                    }
                    else if (m_blnViewGRR)
                    {
                        m_blnViewGRR = false;
                        pnl_Production.Controls["Vision4Page"].BringToFront();
                        pnl_Production.Controls["Vision4Page"].Show();

                        if (m_smVisionInfo.g_blnViewOfflinePage)
                        {
                            if (m_objVision4OfflinePage != null)
                            {
                                m_smVisionInfo.VM_AT_OfflinePageView = false;
                                m_smVisionInfo.g_blnViewOfflinePage = false;
                                m_smVisionInfo.VM_AT_SettingInDialog = false;
                                m_smVisionInfo.AT_VM_ManualTestMode = false;
                                m_objVision4OfflinePage.Hide();
                            }
                        }
                    }
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_smVisionInfo.g_blnGRRON)
                    {
                        if (!m_blnViewGRR)
                        {
                            if (!m_objVisionGRRPage.CheckGRRFileExist(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime))
                            {
                                m_blnViewGRR = true;

                                // View GRR Form
                                pnl_Production.Controls["VisionGRRPage"].BringToFront();
                                pnl_Production.Controls["VisionGRRPage"].Show();

                                m_objVisionGRRPage.Init();
                                m_objVisionGRRPage.EnableSetting(true);
                            }
                            else
                            {
                                m_smVisionInfo.g_blnGRRON = false;
                                SRMMessageBox.Show("Only one GRR test allowed per lot.\nPlease create new lot to perform GRR test.", "GRR");
                                
                            }
                        }
                    }
                    else if (m_blnViewGRR)
                    {
                        m_blnViewGRR = false;
                        pnl_Production.Controls["Vision3Page"].BringToFront();
                        pnl_Production.Controls["Vision3Page"].Show();

                        if (m_smVisionInfo.g_blnViewOfflinePage)
                        {
                            if (m_objVision3OfflinePage != null)
                            {
                                m_smVisionInfo.VM_AT_OfflinePageView = false;
                                m_smVisionInfo.g_blnViewOfflinePage = false;
                                m_smVisionInfo.VM_AT_SettingInDialog = false;
                                m_smVisionInfo.AT_VM_ManualTestMode = false;
                                m_objVision3OfflinePage.Hide();
                            }
                        }
                    }

                    if (m_intTopParentPositionXPrev != m_intTopParentPositionXCurr || m_intTopParentPositionYPrev != m_intTopParentPositionYCurr)
                    {
                        m_intTopParentOffsetX = m_intTopParentPositionXCurr - m_intTopParentPositionXPrev;
                        m_intTopParentOffsetY = m_intTopParentPositionYCurr - m_intTopParentPositionYPrev;
                        m_intTopParentPositionXPrev = m_intTopParentPositionXCurr;
                        m_intTopParentPositionYPrev = m_intTopParentPositionYCurr;

                        // Set RectGauge4L Placement
                        for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
                        {
                            if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                                break;

                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.SetEdgeROIPlacement(m_intTopParentOffsetX, m_intTopParentOffsetY);
                            m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.SetGaugePlace_BasedOnEdgeROI();
                        }
                    }
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_smVisionInfo.g_blnGRRON)
                    {
                        if (!m_blnViewGRR)
                        {
                            if (!m_objVisionGRRPage.CheckGRRFileExist(m_smProductionInfo.g_strLotID + "_" + m_smProductionInfo.g_strLotStartTime))
                            {
                                m_blnViewGRR = true;

                                // View GRR Form
                                pnl_Production.Controls["VisionGRRPage"].BringToFront();
                                pnl_Production.Controls["VisionGRRPage"].Show();

                                m_objVisionGRRPage.InitLead3D();
                                m_objVisionGRRPage.EnableSetting(true);
                            }
                            else
                            {
                                m_smVisionInfo.g_blnGRRON = false;
                                SRMMessageBox.Show("Only one GRR test allowed per lot.\nPlease create new lot to perform GRR test.", "GRR");

                            }
                        }
                    }
                    else if (m_blnViewGRR)
                    {
                        m_blnViewGRR = false;
                        pnl_Production.Controls["Vision3Lead3DPage"].BringToFront();
                        pnl_Production.Controls["Vision3Lead3DPage"].Show();

                        if (m_smVisionInfo.g_blnViewOfflinePage)
                        {
                            if (m_objVision3Lead3DOfflinePage != null)
                            {
                                m_smVisionInfo.VM_AT_OfflinePageView = false;
                                m_smVisionInfo.g_blnViewOfflinePage = false;
                                m_smVisionInfo.VM_AT_SettingInDialog = false;
                                m_smVisionInfo.AT_VM_ManualTestMode = false;
                                m_objVision3Lead3DOfflinePage.Hide();
                            }
                        }
                    }
                    break;
            }

            //if (m_smVisionInfo.VM_AT_UpdateErrorMessage)
            //{
            //    m_smVisionInfo.VM_AT_UpdateErrorMessage = false;

            //    if (m_smVisionInfo.g_strErrorMessage != "" && m_smVisionInfo.g_strErrorMessage != null)
            //    {
            //        //Translate here
            //        string strErrorMessage = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, m_smVisionInfo.g_strErrorMessage);
            //        if (lst_ErrorMessage.Items.Count < 1000)
            //            lst_ErrorMessage.Items.Insert(0, "");
            //        else
            //        {
            //            lst_ErrorMessage.Items.Insert(0, "");   // 2019 07 05 - insert first row and remove last row
            //            lst_ErrorMessage.Items.RemoveAt(1000);
            //        }

            //        m_arrRowErrorMessage.Insert(0, "");
            //        m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColor);

            //        string[] strResult = strErrorMessage.Split('*');
            //        for (int i = Math.Min(100, strResult.Length - 1); i >= 0; i--)
            //        {
            //            if (strResult[i] != "")
            //            {
            //                // 2019 09 25 - CCENG: Cannot use g_intMachineStatus to check offline test or not, because during production in last test, once user press STOP, the g_intMachineStatus has been changed to 1 but the last error message is not under offline test yet.
            //                //if (m_smVisionInfo.g_intMachineStatus == 2)
            //                m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + ": " + strResult[i]);
            //                //else
            //                //    m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + " Offline Test: " + strResult[i]);

            //                m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColor);

            //                if (lst_ErrorMessage.Items.Count < 1000)
            //                    lst_ErrorMessage.Items.Insert(0, "");
            //                else
            //                {
            //                    lst_ErrorMessage.Items.Insert(0, "");   // 2019 07 05 - insert first row and remove last row
            //                    lst_ErrorMessage.Items.RemoveAt(1000);
            //                }

            //                if (m_arrRowErrorMessage.Count > 1000)
            //                {
            //                    m_arrRowErrorMessage.RemoveRange(1000, m_arrRowErrorMessage.Count - 1000);
            //                    m_arrRowColor.RemoveRange(1000, m_arrRowColor.Count - 1000);
            //                }
            //            }
            //        }

            //        //lst_ErrorMessage.SelectionMode = SelectionMode.One;  // Set to Mode.One temporary first so that selectedIndex can set to 0    // 2018 09 18 - CCENG: Keep changing the SelectionMode will cause listbox keep blinking.
            //        lst_ErrorMessage.SelectedIndex = 0;                              // Listbox will scroll to top when selectedIndex set to 0      // 2018 12 31 - CCENG: Make sure the lstbox properties SelectionMode is set to One.
            //        //lst_ErrorMessage.SelectionMode = SelectionMode.None; // Set the mode to None the error list is not highlighted.               // 2018 12 31 - CCENG: Not need set SelectionMode to None anymore because the listbox data is viewed using DrawItem event.
            //        m_smVisionInfo.g_strErrorMessage = "";

            //        m_smVisionInfo.g_cErrorMessageColor = Color.Red;
            //    }
            //}

            if (m_smVisionInfo.ALL_VM_UpdatePictureBox)
            {
                m_smVisionInfo.ALL_VM_UpdatePictureBox = false;
                UpdatePictureBox();
            }

            if (m_smVisionInfo.VM_AT_SettingInDialog && m_smVisionInfo.g_strSelectedPage != "Camera" && m_smVisionInfo.g_strSelectedPage != "Barcode" && m_smVisionInfo.g_strSelectedPage != "System" && m_smVisionInfo.AT_PR_StartLiveImage && m_smVisionInfo.g_strSelectedPage != "Calibrate" && m_smVisionInfo.g_strSelectedPage != "Calibrate5S" && m_smVisionInfo.g_strSelectedPage != "CalibrateLead3D" && m_smVisionInfo.g_strSelectedPage != "TestLightning")
            {
                m_smVisionInfo.AT_PR_StartLiveImage = false;
                m_smVisionInfo.AT_PR_TriggerLiveImage = true;
            }

            if (m_smVisionInfo.AT_VP_NewLot)
            {
                m_smVisionInfo.AT_VP_NewLot = false;
                //ReadFromXML(m_smProductionInfo.g_strRecipeID, false);     // 2019 02 03 - CCENG: not necessary to call ReadFromXML().
                m_strSelectedRecipe = m_smProductionInfo.g_arrSingleRecipeID[m_smVisionInfo.g_intVisionIndex];
                m_smVisionInfo.AT_VM_UpdateProduction = true;
                if (!tls_Function.Enabled)
                    tls_Function.Enabled = true;
            }

            if (tabCtrl_Production.SelectedTab == tabPage_Settings && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                STTrackLog.WriteLine("After1-" + m_smVisionInfo.g_strVisionName);
                SetTabControl();
                UpdateVisionPageCounterGUI();
            }

            if (m_blnFormOpen && !m_smVisionInfo.VM_AT_SettingInDialog)
            {
                m_blnFormOpen = false;

                STTrackLog.WriteLine("After2-" + m_smVisionInfo.g_strVisionName);

                SetTabControl();
                UpdateVisionPageCounterGUI();
            }

            // 2019 08 24 - CCENG: This "IF" will become true when no other setting page is opening and offline form is closing.
            //                     g_strSelectedPage will be set to empty after call SetTabControl()
            if (!m_smVisionInfo.VM_AT_SettingInDialog && !m_smVisionInfo.g_blnViewOfflinePage && m_smVisionInfo.g_strSelectedPage.Length != 0)
            {
                STTrackLog.WriteLine("After3-" + m_smVisionInfo.g_strVisionName);
                SetTabControl();
                UpdateVisionPageCounterGUI();
            }

            if (m_smVisionInfo.g_blnUpdateContextMenu)
            {
                m_smVisionInfo.g_blnUpdateContextMenu = false;

                switch (m_smVisionInfo.g_strContextMenuType)
                {
                    case "Empty":
                        {
                            pic_Image.ContextMenuStrip = null;
                        }
                        break;
                    case "Production":
                        {
                            pic_Image.ContextMenuStrip = ContextMenuStrip_ImageTools;
                        }
                        break;
                    case "Pad Setting":
                        {
                            pic_Image.ContextMenuStrip = contextMenuStrip_Setting;
                        }
                        break;
                    case "Mark Setting":
                        {
                            pic_Image.ContextMenuStrip = contextMenuStrip_ModifyPad;
                            toolStripComboBox_MarkType.SelectedIndex = 0;
                            ToolStripMenuItem_Enable.Visible = true;
                            toolStripMenuItem_MarkType.Visible = m_smVisionInfo.g_blnWantUseMarkTypeInspectionSetting;
                            ToolStripMenuItem_Select.Visible = true;
                            ToolStripMenuItem_Deselect.Visible = true;
                            ToolStripMenuItem_Merge.Visible = true;
                            ToolStripMenuItem_SplitHor.Visible = true;
                            toolStripMenuItem_SplitVer.Visible = true;
                            toolStripMenuItem_Done.Visible = false;
                            toolStripMenuItem_Cancel.Visible = false;
                            toolStripMenuItem_EditTextShiftTol.Visible = (m_smVisionInfo.g_intMarkTextShiftMethod == 2);
                            zoomInOutForModifyPad.Visible = true;
                            pic_Image.ContextMenuStrip.Enabled = m_smVisionInfo.g_blnEnableMarkContextMenu;
                        }
                        break;
                }
            }

            if (tabCtrl_Production.SelectedTab != tabPage_General)
            {
                if (m_objVision1OfflinePage != null)
                {
                    if (m_objVision1OfflinePage.GetTimerStatus())
                        m_objVision1OfflinePage.OnOffTimer(false);
                }

                if (m_objVision2OfflinePage != null)
                {
                    if (m_objVision2OfflinePage.GetTimerStatus())
                        m_objVision2OfflinePage.OnOffTimer(false);
                }

                if (m_objVision3OfflinePage != null)
                {
                    if (m_objVision3OfflinePage.GetTimerStatus())
                        m_objVision3OfflinePage.OnOffTimer(false);
                }

                if (m_objVision3Lead3DOfflinePage != null)
                {
                    if (m_objVision3Lead3DOfflinePage.GetTimerStatus())
                        m_objVision3Lead3DOfflinePage.OnOffTimer(false);
                }

                if (m_objVision4OfflinePage != null)
                {
                    if (m_objVision4OfflinePage.GetTimerStatus())
                        m_objVision4OfflinePage.OnOffTimer(false);
                }
                if (m_objVision6OfflinePage != null)
                {
                    if (m_objVision6OfflinePage.GetTimerStatus())
                        m_objVision6OfflinePage.OnOffTimer(false);
                }
                if (m_objVision7OfflinePage != null)
                {
                    if (m_objVision7OfflinePage.GetTimerStatus())
                        m_objVision7OfflinePage.OnOffTimer(false);
                }
            }
            else
            {
                if (m_objVision1OfflinePage != null)
                {
                    if (!m_objVision1OfflinePage.GetTimerStatus())
                        m_objVision1OfflinePage.OnOffTimer(true);
                }

                if (m_objVision2OfflinePage != null)
                {
                    if (!m_objVision2OfflinePage.GetTimerStatus())
                        m_objVision2OfflinePage.OnOffTimer(true);
                }

                if (m_objVision3OfflinePage != null)
                {
                    if (!m_objVision3OfflinePage.GetTimerStatus())
                        m_objVision3OfflinePage.OnOffTimer(true);
                }

                if (m_objVision3Lead3DOfflinePage != null)
                {
                    if (!m_objVision3Lead3DOfflinePage.GetTimerStatus())
                        m_objVision3Lead3DOfflinePage.OnOffTimer(true);
                }

                if (m_objVision4OfflinePage != null)
                {
                    if (!m_objVision4OfflinePage.GetTimerStatus())
                        m_objVision4OfflinePage.OnOffTimer(true);
                }
                if (m_objVision6OfflinePage != null)
                {
                    if (!m_objVision6OfflinePage.GetTimerStatus())
                        m_objVision6OfflinePage.OnOffTimer(true);
                }
                if (m_objVision7OfflinePage != null)
                {
                    if (!m_objVision7OfflinePage.GetTimerStatus())
                        m_objVision7OfflinePage.OnOffTimer(true);
                }
            }

            if (m_smVisionInfo.VM_AT_OfflinePageView || m_blnMultipleImageView)
            {
                btn_ManualTest.Enabled = false;
            }
            else
            {
                if (m_smVisionInfo.g_intMachineStatus == 2)
                    btn_ManualTest.Enabled = false;
                else
                    btn_ManualTest.Enabled = true;
            }

            if (m_smVisionInfo.g_blnSetMultipleImageViewOnOff)
            {
                m_smVisionInfo.g_blnSetMultipleImageViewOnOff = false;

                //Dont have to switch to multiple view if there is only 1 image
                if (m_smVisionInfo.g_arrImages.Count < 2)
                    return;

                if (m_blnMultipleImageView)
                {
                    //m_fMultiOffStatus = 1;
                    m_blnMultipleImageView = false;
                    SetMultipleImageViewGUI();
                    SetScaleToComponents(false, true, false);
                }
                else
                {
                    //m_fMultiOffStatus = 0;
                    m_blnMultipleImageView = true;
                    SetMultipleImageViewGUI();
                    SetScaleToComponents(false, false, true);
                }
                m_blnUpdatedMultiOffStatus = true; // 2020-12-30 ZJYEOH : need use local boolean 
                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            }

            if (m_smVisionInfo.g_blnSetMultipleImageViewOff)
            {
                m_smVisionInfo.g_blnSetMultipleImageViewOff = false;

                //Dont have to switch to multiple view if there is only 1 image
                if (m_smVisionInfo.g_arrImages.Count < 2)
                    return;

                if (m_blnMultipleImageView)
                {
                    m_blnMultipleImageView = false;
                    SetMultipleImageViewGUI();
                    SetScaleToComponents(false, true, false);
                }

                m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
            }
        }



        private void pic_Image_Paint(object sender, PaintEventArgs e)
        {
            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void btn_Position_Click(object sender, EventArgs e)
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "BottomPosition":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                case "InPocketPkgPos":
                case "InPocketPkg":
                case "IPMLiPkg":
                    
                    STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Position Form", "Pressed Learn Position Button", "", "", m_smProductionInfo.g_strLotID);
                    
                    OpenPositioningSetup();
                    break;
                default:
                    SRMMessageBox.Show("btn_Learn_Click -> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void menuItem_ViewTools_Click(object sender, EventArgs e)
        {
            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey1 = key.CreateSubKey("SVG\\AutoMode");
            
            //bool blnViewCrosshair = (bool)subKey1.GetValue("ViewCrosshair", true).Equals("True");
            //bool blnViewPosCrosshair = (bool)subKey1.GetValue("ViewPosCrosshair", true).Equals("True");
            //bool blnViewInspection = (bool)subKey1.GetValue("ViewInspection", true).Equals("True");
            //bool blnViewPadResult = (bool)subKey1.GetValue("ViewPadResult", true).Equals("True");
            //bool blnViewPackageResult = (bool)subKey1.GetValue("ViewPackageResult", true).Equals("True");
            //bool blnViewPackageTolerance = (bool)subKey1.GetValue("ViewPackageTolerance", true).Equals("True");
            //bool blnViewPocketPositionResult = (bool)subKey1.GetValue("ViewPocketPositionResult", true).Equals("True");
            //bool blnViewROI = (bool)subKey1.GetValue("ViewROI", true).Equals("True");
            //bool blnViewROITool = (bool)subKey1.GetValue("ViewROITool", true).Equals("True");
            //bool blnViewROIDetails = (bool)subKey1.GetValue("ViewROIDetails", false).Equals("True");
            //bool blnView5SRuler = (bool)subKey1.GetValue("View5SRuler", true).Equals("True");

            if (sender == menuItem_ViewCrosshair)
            {
                m_smProductionInfo.g_blnViewCrosshair = menuItem_ViewCrosshair.Checked;
                subKey1.SetValue("ViewCrosshair", menuItem_ViewCrosshair.Checked);
            }
            else if (sender == menuItem_ViewPosCrosshair)
            {
                m_smProductionInfo.g_blnViewPosCrosshair = menuItem_ViewPosCrosshair.Checked;
                subKey1.SetValue("ViewPosCrosshair", menuItem_ViewPosCrosshair.Checked);
            }
            else if (sender == menuItem_Inspection)
            {
                m_smProductionInfo.g_blnViewInspection = menuItem_Inspection.Checked;
                subKey1.SetValue("ViewInspection", menuItem_Inspection.Checked);
            }
            else if (sender == menuItem_ViewPadResult)
            {
                m_smProductionInfo.g_blnViewPadResult = menuItem_ViewPadResult.Checked;
                subKey1.SetValue("ViewPadResult", menuItem_ViewPadResult.Checked);
            }
            else if (sender == menuItem_ViewPackageResult)
            {
                m_smProductionInfo.g_blnViewPackageResult = menuItem_ViewPackageResult.Checked;
                subKey1.SetValue("ViewPackageResult", menuItem_ViewPackageResult.Checked);
            }
            else if (sender == menuItem_ViewPackageTolerance)
            {
                m_smProductionInfo.g_blnViewPackageTolerance = menuItem_ViewPackageTolerance.Checked;
                subKey1.SetValue("ViewPackageTolerance", menuItem_ViewPackageTolerance.Checked);
            }
            else if (sender == menuItem_ViewPadROIToleranceROI)
            {
                m_smProductionInfo.g_blnViewPadROIToleranceROI = menuItem_ViewPadROIToleranceROI.Checked;
                subKey1.SetValue("ViewPadROIToleranceROI", menuItem_ViewPadROIToleranceROI.Checked);
            }
            else if (sender == menuItem_ViewMarkROI)
            {
                m_smProductionInfo.g_blnViewMarkROI = menuItem_ViewMarkROI.Checked;
                subKey1.SetValue("ViewMarkROI", menuItem_ViewMarkROI.Checked);
            }
            else if (sender == menuItem_ViewLeadDontCareROI)
            {
                m_smProductionInfo.g_blnViewLeadDontCareROI = menuItem_ViewLeadDontCareROI.Checked;
                subKey1.SetValue("ViewLeadDontCareROI", menuItem_ViewLeadDontCareROI.Checked);
            }
            else if (sender == menuItem_ViewPocketPositionResult)
            {
                m_smProductionInfo.g_blnViewPocketPositionResult = menuItem_ViewPocketPositionResult.Checked;
                subKey1.SetValue("ViewPocketPositionResult", menuItem_ViewPocketPositionResult.Checked);
            }
            else if (sender == menuItem_ViewPadInspectionArea)
            {
                m_smProductionInfo.g_blnViewPadInspectionArea = menuItem_ViewPadInspectionArea.Checked;
                subKey1.SetValue("ViewPadInspectionArea", menuItem_ViewPadInspectionArea.Checked);
            }
            else if (sender == menuItem_ViewBarcodeInspectionArea)
            {
                m_smProductionInfo.g_blnViewBarcodeInspectionArea = menuItem_ViewBarcodeInspectionArea.Checked;
                subKey1.SetValue("ViewBarcodeInspectionArea", menuItem_ViewBarcodeInspectionArea.Checked);
            }
            else if (sender == menuItem_ViewBarcodePatternInspectionArea)
            {
                m_smProductionInfo.g_blnViewBarcodePatternInspectionArea = menuItem_ViewBarcodePatternInspectionArea.Checked;
                subKey1.SetValue("ViewBarcodePatternInspectionArea", menuItem_ViewBarcodePatternInspectionArea.Checked);
            }
            else if (sender == menuItem_ViewROI)
            {
                m_smProductionInfo.g_blnViewSearchROI = menuItem_ViewROI.Checked;
                subKey1.SetValue("ViewROI", menuItem_ViewROI.Checked);
            }
            else if (sender == menuItem_ViewROITool)
            {
                m_smProductionInfo.g_blnViewROITool = menuItem_ViewROITool.Checked;
                subKey1.SetValue("ViewROITool", menuItem_ViewROITool.Checked);
            }
            else if (sender == SubMenuItem_ViewROIDetails)
            {
                m_smProductionInfo.g_blnViewROIDetails = SubMenuItem_ViewROIDetails.Checked;
                subKey1.SetValue("ViewROIDetails", SubMenuItem_ViewROIDetails.Checked);
            }
            else if (sender == menuItem_UnSelectAll)
            {
                menuItem_ViewCrosshair.Checked = false;
                m_smProductionInfo.g_blnViewCrosshair = menuItem_ViewCrosshair.Checked;
                subKey1.SetValue("ViewCrosshair", menuItem_ViewCrosshair.Checked);

                menuItem_ViewPosCrosshair.Checked = false;
                m_smProductionInfo.g_blnViewPosCrosshair = menuItem_ViewPosCrosshair.Checked;
                subKey1.SetValue("ViewPosCrosshair", menuItem_ViewPosCrosshair.Checked);

                menuItem_Inspection.Checked = false;
                m_smProductionInfo.g_blnViewInspection = menuItem_Inspection.Checked;
                subKey1.SetValue("ViewInspection", menuItem_Inspection.Checked);

                menuItem_ViewPadResult.Checked = false;
                m_smProductionInfo.g_blnViewPadResult = menuItem_ViewPadResult.Checked;
                subKey1.SetValue("ViewPadResult", menuItem_ViewPadResult.Checked);

                menuItem_ViewPackageResult.Checked = false;
                m_smProductionInfo.g_blnViewPackageResult = menuItem_ViewPackageResult.Checked;
                subKey1.SetValue("ViewPackageResult", menuItem_ViewPackageResult.Checked);

                menuItem_ViewPackageTolerance.Checked = false;
                m_smProductionInfo.g_blnViewPackageTolerance = menuItem_ViewPackageTolerance.Checked;
                subKey1.SetValue("ViewPackageTolerance", menuItem_ViewPackageTolerance.Checked);

                menuItem_ViewPocketPositionResult.Checked = false;
                m_smProductionInfo.g_blnViewPocketPositionResult = menuItem_ViewPocketPositionResult.Checked;
                subKey1.SetValue("ViewPocketPositionResult", menuItem_ViewPocketPositionResult.Checked);

                menuItem_ViewPadROIToleranceROI.Checked = false;
                m_smProductionInfo.g_blnViewPadROIToleranceROI = menuItem_ViewPadROIToleranceROI.Checked;
                subKey1.SetValue("ViewPadROIToleranceROI", menuItem_ViewPadROIToleranceROI.Checked);

                menuItem_ViewMarkROI.Checked = false;
                m_smProductionInfo.g_blnViewMarkROI = menuItem_ViewMarkROI.Checked;
                subKey1.SetValue("ViewMarkROI", menuItem_ViewMarkROI.Checked);

                menuItem_ViewLeadDontCareROI.Checked = false;
                m_smProductionInfo.g_blnViewLeadDontCareROI = menuItem_ViewLeadDontCareROI.Checked;
                subKey1.SetValue("ViewLeadDontCareROI", menuItem_ViewLeadDontCareROI.Checked);

                menuItem_ViewPadInspectionArea.Checked = false;
                m_smProductionInfo.g_blnViewPadInspectionArea = menuItem_ViewPadInspectionArea.Checked;
                subKey1.SetValue("ViewPadInspectionArea", menuItem_ViewPadInspectionArea.Checked);

                menuItem_ViewBarcodeInspectionArea.Checked = false;
                m_smProductionInfo.g_blnViewBarcodeInspectionArea = menuItem_ViewBarcodeInspectionArea.Checked;
                subKey1.SetValue("ViewBarcodeInspectionArea", menuItem_ViewBarcodeInspectionArea.Checked);

                menuItem_ViewBarcodePatternInspectionArea.Checked = false;
                m_smProductionInfo.g_blnViewBarcodePatternInspectionArea = menuItem_ViewBarcodePatternInspectionArea.Checked;
                subKey1.SetValue("ViewBarcodePatternInspectionArea", menuItem_ViewBarcodePatternInspectionArea.Checked);

                menuItem_ViewROI.Checked = false;
                m_smProductionInfo.g_blnViewSearchROI = menuItem_ViewROI.Checked;
                subKey1.SetValue("ViewROI", menuItem_ViewROI.Checked);

                menuItem_ViewROITool.Checked = false;
                m_smProductionInfo.g_blnViewROITool = menuItem_ViewROITool.Checked;
                subKey1.SetValue("ViewROITool", menuItem_ViewROITool.Checked);

                SubMenuItem_ViewROIDetails.Checked = false;
                m_smProductionInfo.g_blnViewROIDetails = SubMenuItem_ViewROIDetails.Checked;
                subKey1.SetValue("ViewROIDetails", SubMenuItem_ViewROIDetails.Checked);
            }
            else if (sender == menuItem_5SRuler)
            {
                m_smProductionInfo.g_blnView5SRuler = menuItem_5SRuler.Checked;
                subKey1.SetValue("View5SRuler", menuItem_5SRuler.Checked);
            }
            //
            //if (blnViewCrosshair != menuItem_ViewCrosshair.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewCrosshair", blnViewCrosshair.ToString(), menuItem_ViewCrosshair.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewPosCrosshair != menuItem_ViewPosCrosshair.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewPosCrosshair", blnViewPosCrosshair.ToString(), menuItem_ViewPosCrosshair.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewInspection != menuItem_Inspection.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewInspection", blnViewInspection.ToString(), menuItem_Inspection.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewPadResult != menuItem_ViewPadResult.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewPadResult", blnViewPadResult.ToString(), menuItem_ViewPadResult.Checked.ToString(), m_smProductionInfo.g_strLotID); 
            //if (blnViewPackageResult != menuItem_ViewPackageResult.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewPackageResult", blnViewPackageResult.ToString(), menuItem_ViewPackageResult.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewPackageTolerance != menuItem_ViewPackageTolerance.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewPackageTolerance", blnViewPackageTolerance.ToString(), menuItem_ViewPackageTolerance.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewPocketPositionResult != menuItem_ViewPocketPositionResult.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewPocketPositionResult", blnViewPocketPositionResult.ToString(), menuItem_ViewPocketPositionResult.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewROI != menuItem_ViewROI.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewROI", blnViewROI.ToString(), menuItem_ViewROI.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewROITool != menuItem_ViewROITool.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewROITool", blnViewROITool.ToString(), menuItem_ViewROITool.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnViewROIDetails != SubMenuItem_ViewROIDetails.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "ViewROIDetails", blnViewROIDetails.ToString(), SubMenuItem_ViewROIDetails.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //if (blnView5SRuler != menuItem_5SRuler.Checked)
            //    STDeviceEdit.SaveDeviceEditLog("Vision Page", "View5SRuler", blnView5SRuler.ToString(), menuItem_5SRuler.Checked.ToString(), m_smProductionInfo.g_strLotID);
            //

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

            ContextMenuStrip_ImageTools.Close(); // 2020-09-28 ZJYEOH: Close the menu items after clicked because if got sub menu item, it will not close after click
        }

        private void menuItem_SaveErrorMsg_Click(object sender, EventArgs e)
        {
            if (dlg_SaveTextFile.ShowDialog() == DialogResult.OK)
            {
                //
                SaveErrorMessage(dlg_SaveTextFile.FileName);
                //STDeviceEdit.SaveDeviceEditLog("Vision Page", "Save Error Message>File Name", "", dlg_SaveTextFile.FileName, m_smProductionInfo.g_strLotID);
                //
            }
            Directory.SetCurrentDirectory(AppDomain.CurrentDomain.BaseDirectory);
        }

        private void menuItem_ClearErrorMsg_Click(object sender, EventArgs e)
        {
            //
            ClearErrorMessage();
            //STDeviceEdit.SaveDeviceEditLog("Vision Page", "Clear Error Message", "", "", m_smProductionInfo.g_strLotID);
            //
            //m_smVisionInfo.g_blnStopAfterFail = !m_smVisionInfo.g_blnStopAfterFail;

            //SRMMessageBox.Show("Stop after Fail set to " + m_smVisionInfo.g_blnStopAfterFail.ToString());
        }

        private void panel_Left_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btn_LeadLearn_Click(object sender, EventArgs e)
        {
            if (((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0))
            {
                if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                {
                    SRMMessageBox.Show("Please learn Orient/Mark before learn Lead.");
                    return;
                }

                if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                {
                    SRMMessageBox.Show("Please learn Orient/Mark before learn Lead.");
                    return;
                }
            }

            m_smVisionInfo.g_strSelectedPage = "Lead";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">", "Open Learn Lead Form", "", "", m_smProductionInfo.g_strLotID);
            
            LearnLeadForm objLearnLeadForm = new LearnLeadForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup);

            objLearnLeadForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objLearnLeadForm);
            tabPage_Settings.Controls["LearnLeadForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_StatisticAnalysis_Click(object sender, EventArgs e)
        {
            //
            //STDeviceEdit.SaveDeviceEditLog("Vision Page", "Open Image Statistic Analisys Form", "", "", m_smProductionInfo.g_strLotID);
            //
            m_objImageStatisticAnalisysForm = new ImageStatisticAnalisysForm(m_smVisionInfo, m_smProductionInfo);

            m_objImageStatisticAnalisysForm.Show();
        }

        private void pnl_PictureBox_Scroll(object sender, ScrollEventArgs e)
        {
            if (e.ScrollOrientation == ScrollOrientation.HorizontalScroll)
            {
                int intScollValue = e.NewValue;
                m_intScollValueXPrev = intScollValue;
                m_fStrFileNamePointX = intScollValue;
            }

            if (e.ScrollOrientation == ScrollOrientation.VerticalScroll)
            {
                int intScollValue = e.NewValue;
                m_intScollValueYPrev = intScollValue;
                m_fStrFileNamePointY = intScollValue;
            }
        }

        private void btn_Zoom_Click(object sender, EventArgs e)
        {
            //ZoomImageForm objZoomImageForm = new ZoomImageForm(m_fZoomCount);
            //objZoomImageForm.Location = new Point((int)((float)pnl_PictureBox.Width / 2), (int)((float)pnl_PictureBox.Height / 2));
            //if (objZoomImageForm.ShowDialog() == DialogResult.OK)
            //    m_fZoomCount = objZoomImageForm.ref_fZoomValue;

            //objZoomImageForm.Dispose();

            STTrackLog.WriteLine("Zoom 1 = " + sender.ToString());
            switch (sender.ToString())
            {
                case "25%":
                    m_fZoomCount = 0.25f;
                    break;
                case "50%":
                    m_fZoomCount = 0.5f;
                    break;
                case "75%":
                    m_fZoomCount = 0.75f;
                    break;
                case "100%":
                    m_fZoomCount = 1f;
                    break;
                case "125%":
                    m_fZoomCount = 1.25f;
                    break;
                case "150%":
                    m_fZoomCount = 1.5f;
                    break;
                case "175%":
                    m_fZoomCount = 1.75f;
                    break;
                case "200%":
                    m_fZoomCount = 2f;
                    break;
                case "225%":
                    m_fZoomCount = 2.25f;
                    break;
                case "250%":
                    m_fZoomCount = 2.5f;
                    break;
                case "275%":
                    m_fZoomCount = 2.75f;
                    break;
                case "300%":
                    m_fZoomCount = 3f;
                    break;
                case "325%":
                    m_fZoomCount = 3.25f;
                    break;
                case "350%":
                    m_fZoomCount = 3.5f;
                    break;
                case "375%":
                    m_fZoomCount = 3.75f;
                    break;
                case "400%":
                    m_fZoomCount = 4f;
                    break;
                case "425%":
                    m_fZoomCount = 4.25f;
                    break;
                case "450%":
                    m_fZoomCount = 4.5f;
                    break;
                case "475%":
                    m_fZoomCount = 4.75f;
                    break;
                case "500%":
                    m_fZoomCount = 5f;
                    break;
                default:
                    m_fZoomCount = 1f;
                    break;
            }
            //
            //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Zoom Image", "Pressed Zoom In/Out Button", (m_smVisionInfo.g_fZoomScale * 100).ToString() + "%", sender.ToString(), m_smProductionInfo.g_strLotID);
            //
            m_smVisionInfo.g_fZoomScale = m_fZoomCount;
            STTrackLog.WriteLine("Zoom 2");
            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;

            STTrackLog.WriteLine("Zoom 3");
        }

        private void btn_System_Click(object sender, EventArgs e)
        {
            
            m_smVisionInfo.g_strSelectedPage = "System";
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Set Front View Form", "Pressed Set Front View Button", "", "", m_smProductionInfo.g_strLotID);
            
            SystemForm objSystemForm = new SystemForm(m_smVisionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo, m_smCustomizeInfo);

            objSystemForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objSystemForm);
            tabPage_Settings.Controls["SystemForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
        }

        private void btn_Recipe_MouseEnter(object sender, EventArgs e)
        {
            btn_Recipe.DropDownButtonWidth = 40;
        }

        private void btn_Recipe_MouseLeave(object sender, EventArgs e)
        {
            btn_Recipe.DropDownButtonWidth = 10;
        }
        private void btn_LearnEmptyUnit_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Empty Form", "Pressed Learn Empty Button", "", "", m_smProductionInfo.g_strLotID);
            
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantCheckEmpty)
                OpenPositioningSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void btn_LearnPH_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_blnWantCheckPH)
            {
                
                m_smVisionInfo.g_strSelectedPage = "PH";
                STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn PH Form", "Pressed Learn PH Button", "", "", m_smProductionInfo.g_strLotID);
                
                LearnPHForm objLearnForm = new LearnPHForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);

                objLearnForm.TopLevel = false;
                tabPage_Settings.Controls.Clear();
                tabPage_Settings.Controls.Add(objLearnForm);
                tabPage_Settings.Controls["LearnPHForm"].Show();

                tabCtrl_Production.SelectedTab = tabPage_Settings;
            }
        }
        private void btn_RecipeLearn_Click(object sender, EventArgs e)
        {
            btn_Recipe.DropDown.Close();

            DisableInspectionDrawingEvent();

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Barcode":
                    m_intVisionType = 0;
                    OpenBarcodeSetup();
                    break;
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    OpenMarkOrientSetup(0);
                    break;
                case "Package":
                    OpenColorPackageSetup();
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    m_intVisionType = 0;
                    OpenPadSetup(0);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    OpenLead3DSetup();
                    break;
                case "Seal":
                    m_intVisionType = 0;
                    OpenSealSetup(0);
                    break;
                case "UnitPresent":
                    OpenCheckPresentSetup();
                    break;
                default:
                    SRMMessageBox.Show("btn_Learn_Click -> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_OtherSetting_Click(object sender, EventArgs e)
        {
            if (sender == btn_OtherSetting)
                m_intSelectedTabPage = 0;           // btn_OtherSetting
            else if (sender == btn_PkgOtherSetting)
                m_intSelectedTabPage = 1;           // btn_PkgOtherSetting
            else if (sender == btn_LeadOtherSetting)
                m_intSelectedTabPage = 2;           // btn_LeadOtherSetting
            
            string strParentName = ((ToolStripMenuItem)sender).OwnerItem.Text;
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open " + strParentName + ((ToolStripMenuItem)sender).Text, "Pressed " + ((ToolStripMenuItem)sender).Text + " Button", "", "", m_smProductionInfo.g_strLotID);
            

            OpenOtherSettingPage();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_AdvanceSetting_Click(object sender, EventArgs e)
        {
            m_intSelectedTabPage = 0;

            if (sender == btn_PkgAdvanceSetting && (m_smVisionInfo.g_strVisionName == "Li3DPkg"))
                m_intSelectedTabPage = 3;
            else if (sender == btn_PkgAdvanceSetting)
                m_intSelectedTabPage = 1;
            else if (sender == btn_LeadAdvanceSetting)
                m_intSelectedTabPage = 2;
            
            string strParentName = ((ToolStripMenuItem)sender).OwnerItem.Text;
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open " + strParentName + ((ToolStripMenuItem)sender).Text, "Pressed " + ((ToolStripMenuItem)sender).Text + " Button", "", "", m_smProductionInfo.g_strLotID);
            

            m_smVisionInfo.g_strSelectedPage = "AdvanceSettingForm";
            AdvanceSettingForm2 objAdvanceSettingForm = new AdvanceSettingForm2(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup, m_intSelectedTabPage);

            objAdvanceSettingForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objAdvanceSettingForm);
            tabPage_Settings.Controls["AdvanceSettingForm2"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;

        }

        public void DisplayOfflinePage()
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "Package":
                    if (m_objVision1OfflinePage == null)
                    {
                        m_objVision1OfflinePage = new Vision1OfflinePage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_intUserGroup);
                        m_objVision1OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision1OfflinePage);
                    }
                    else
                    {
                        m_objVision1OfflinePage.CustomizeGUI();
                    }

                    m_objVision1OfflinePage.Location = new Point(0, 0);
                    m_strSelectedPagePrev = m_smVisionInfo.g_strSelectedPage = "MNMarkOrient";
                    pnl_Production.Controls["Vision1OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision1OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision1OfflinePage.LoadEvent();
                    break;
                case "UnitPresent":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    if (m_objVision2OfflinePage == null)
                    {
                        m_objVision2OfflinePage = new Vision2OfflinePage(m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup);
                        m_objVision2OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision2OfflinePage);

                    }
                    else
                    {
                        m_objVision2OfflinePage.CustomizeGUI();
                    }
                    m_objVision2OfflinePage.Location = new Point(0, 0);
                    m_smVisionInfo.g_strSelectedPage = "MNUnitPresent";
                    pnl_Production.Controls["Vision2OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision2OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision2OfflinePage.LoadEvent();
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_objVision3OfflinePage == null)
                    {
                        m_objVision3OfflinePage = new Vision3OfflinePage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_intUserGroup);
                        m_objVision3OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision3OfflinePage);
                    }
                    else
                    {
                        m_objVision3OfflinePage.CustomizeGUI();
                    }

                    m_strSelectedPagePrev = m_smVisionInfo.g_strSelectedPage = "MNPad";
                    pnl_Production.Controls["Vision3OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision3OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision3OfflinePage.LoadEvent();
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_objVision3Lead3DOfflinePage == null)
                    {
                        m_objVision3Lead3DOfflinePage = new Vision3Lead3DOfflinePage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_intUserGroup);
                        m_objVision3Lead3DOfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision3Lead3DOfflinePage);
                    }
                    else
                    {
                        m_objVision3Lead3DOfflinePage.CustomizeGUI();
                    }

                    m_strSelectedPagePrev = m_smVisionInfo.g_strSelectedPage = "MNLead3D";
                    pnl_Production.Controls["Vision3Lead3DOfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision3Lead3DOfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision3Lead3DOfflinePage.LoadEvent();
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    if (m_objVision4OfflinePage == null)
                    {
                        m_objVision4OfflinePage = new Vision4OfflinePage(m_smCustomizeInfo, m_smProductionInfo, m_smVisionInfo, m_intUserGroup);
                        m_objVision4OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision4OfflinePage);
                    }
                    else
                    {
                        m_objVision4OfflinePage.CustomizeGUI();
                    }

                    m_objVision4OfflinePage.Location = new Point(0, 0);
                    m_strSelectedPagePrev = m_smVisionInfo.g_strSelectedPage = "MNMarkOrient";
                    pnl_Production.Controls["Vision4OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision4OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision4OfflinePage.LoadEvent();
                    break;
                case "Seal":
                    if (m_objVision6OfflinePage == null)
                    {
                        m_objVision6OfflinePage = new Vision6OfflinePage(m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup);
                        m_objVision6OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision6OfflinePage);

                    }
                    else
                    {
                        m_objVision6OfflinePage.CustomizeGUI();
                    }
                    m_objVision6OfflinePage.Location = new Point(0, 0);
                    m_smVisionInfo.g_strSelectedPage = "MNSeal";
                    pnl_Production.Controls["Vision6OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision6OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision6OfflinePage.LoadEvent();
                    break;
                case "Barcode":
                    if (m_objVision7OfflinePage == null)
                    {
                        m_objVision7OfflinePage = new Vision7OfflinePage(m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup);
                        m_objVision7OfflinePage.TopLevel = false;
                        pnl_Production.Controls.Add(m_objVision7OfflinePage);

                    }
                    else
                    {
                        m_objVision7OfflinePage.CustomizeGUI();
                    }
                    m_objVision7OfflinePage.Location = new Point(0, 0);
                    m_smVisionInfo.g_strSelectedPage = "MNBarcode";
                    pnl_Production.Controls["Vision7OfflinePage"].BringToFront();
                    pnl_Production.Controls["Vision7OfflinePage"].Show();
                    m_smVisionInfo.VM_AT_OfflinePageView = true;
                    m_objVision7OfflinePage.LoadEvent();
                    break;
                default:
                    SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            //btn_SystemCalibration.Visible = false;
            //btn_Gauge.Visible = false;
            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Recipe.Text = "Mark";
                //btn_Gauge.Visible = true;
                //btn_Gauge.Enabled = true;
            }
            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                if (m_smVisionInfo.g_strVisionName.Contains("BottomPosition") && (m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    btn_Recipe.Text = "Position";
                else if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                    btn_Recipe.Text = "Orient";

                //if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                //    btn_Gauge.Enabled = true;// btn_Gauge.Visible = true;

                if ((m_smCustomizeInfo.g_intWantBottom & (1 << m_smVisionInfo.g_intVisionPos)) == 0)
                    btn_SystemCalibration.Enabled = true;
            }
            if ((m_smCustomizeInfo.g_intWantPad & (1 << m_smVisionInfo.g_intVisionPos)) > 0 || (m_smCustomizeInfo.g_intWantPad5S & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_Recipe.Text = "Pad";
                //btn_Gauge.Enabled = true; //btn_Gauge.Visible = false;
                btn_SystemCalibration.Enabled = true; //btn_SystemCalibration.Visible = true;
            }

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "Package":
                    case "PadPkgPos":
                    case "PadPkg":
                    case "Pad5SPkg":
                    case "Pad5SPkgPos":
                        btn_PackageSetUp.Visible = btn_PackageSetUp.Enabled;
                        break;
                    default:
                        btn_SystemCalibration.Enabled = true;// btn_SystemCalibration.Visible = true;
                        break;

                }
            }
            else
                btn_PackageSetUp.Visible = false;

            if ((m_smCustomizeInfo.g_intWantPositioning & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                switch (m_smVisionInfo.g_strVisionName)
                {
                    case "UnitPresent":
                    case "BottomPositionOrient":
                    case "TapePocketPosition":
                        btn_SystemCalibration.Enabled = true; //btn_SystemCalibration.Visible = true;
                        btn_Recipe.Visible = false;
                        break;
                    case "PadPkgPos":
                        btn_Position.Visible = false;
                        break;
                }
            }
            else btn_Position.Visible = false;

            if ((m_smCustomizeInfo.g_intWantSeal & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
            {
                btn_SystemCalibration.Enabled = btn_SystemCalibration.Enabled; // true; //btn_SystemCalibration.Visible = true;
                btn_Recipe.Text = "Seal";
            }

            m_smVisionInfo.g_blnViewOfflinePage = true;
        }
        public void HideOfflinePage()
        {
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "Package":
                    if (m_objVision1OfflinePage != null)
                        m_objVision1OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "UnitPresent":
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    if (m_objVision2OfflinePage != null)
                        m_objVision2OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    if (m_objVision3OfflinePage != null)
                        m_objVision3OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "Li3D":
                case "Li3DPkg":
                    if (m_objVision3Lead3DOfflinePage != null)
                        m_objVision3Lead3DOfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    if (m_objVision4OfflinePage != null)
                        m_objVision4OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "Seal":
                    if (m_objVision6OfflinePage != null)
                        m_objVision6OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                case "Barcode":
                    if (m_objVision7OfflinePage != null)
                        m_objVision7OfflinePage.CloseOfflinePage();

                    m_smVisionInfo.VM_AT_OfflinePageView = false;
                    break;
                default:
                    SRMMessageBox.Show("There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }
        }
        private void btn_Tolerance_Click(object sender, EventArgs e)
        {
            STTrackLog.WriteLine("Tolerance 1");
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Barcode":
                    //STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Barcode Tolerance Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    m_objBarcodeToleranceSettingForm = new BarcodeToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo,
                      m_strSelectedRecipe, m_intUserGroup, m_smProductionInfo);
                    m_objBarcodeToleranceSettingForm.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(m_objBarcodeToleranceSettingForm);
                    tabPage_Settings.Controls["BarcodeToleranceSettingForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    STTrackLog.WriteLine("Tolerance 2");
                    int intVisionType = 0;
                    m_smVisionInfo.g_strSelectedPage = "Tolerance";

                    if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x02;

                    if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x01;

                    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x08;

                    if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x10;

                    if ((m_smCustomizeInfo.g_intWantOrient0Deg & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x20;

                    if ((m_smCustomizeInfo.g_intWantOCR2 & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        intVisionType |= 0x40;

                    STTrackLog.WriteLine("Tolerance 3");
                    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Package Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    else
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Mark Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);

                    STTrackLog.WriteLine("Tolerance 4");

                    MarkOrientToleranceSettingForm objMarkOrientToleranceSettingForm = new MarkOrientToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo,
                       m_strSelectedRecipe, m_intUserGroup, intVisionType);
                    objMarkOrientToleranceSettingForm.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(objMarkOrientToleranceSettingForm);
                    tabPage_Settings.Controls["MarkOrientToleranceSettingForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;

                    STTrackLog.WriteLine("Tolerance 5");

                    break;
                case "Package":
                    break;
                case "UnitPresent":
                    STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Unit Present Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    if ((m_objCheckPresentToleranceSettingForm == null) || (!m_objCheckPresentToleranceSettingForm.ref_blnFormOpen))
                    {
                        m_objCheckPresentToleranceSettingForm = new CheckPresentToleranceSettingForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup);
                        m_objCheckPresentToleranceSettingForm.Show();
                        Rectangle objScreenRect = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                        m_objCheckPresentToleranceSettingForm.Location = new Point(objScreenRect.Width - m_objCheckPresentToleranceSettingForm.Width - 10,
                            objScreenRect.Height - m_objCheckPresentToleranceSettingForm.Height - 10);
                        m_objCheckPresentToleranceSettingForm.TopMost = true;
                    }
                    else
                        m_objCheckPresentToleranceSettingForm.TopMost = true;

                    m_blnFormOpen = true;
                    break;
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Pad Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    if ((m_objPadToleranceSettingForm == null) || (!m_objPadToleranceSettingForm.ref_blnFormOpen))
                    {
                        m_objPadToleranceSettingForm = new PadToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo,
                        m_strSelectedRecipe, m_intUserGroup, m_smProductionInfo);
                        m_objPadToleranceSettingForm.Show();
                        Rectangle objScreenRect = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                        m_objPadToleranceSettingForm.Location = new Point(objScreenRect.Width - m_objPadToleranceSettingForm.Width - 10,
                            objScreenRect.Height - m_objPadToleranceSettingForm.Height - 10);
                        m_objPadToleranceSettingForm.TopMost = true;
                    }
                    else
                        m_objPadToleranceSettingForm.TopMost = true;

                    m_blnFormOpen = true;
                    break;

                case "Li3D":
                case "Li3DPkg":
                    STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Lead3D Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    if ((m_objLead3DToleranceSettingForm == null) || (!m_objLead3DToleranceSettingForm.ref_blnFormOpen))
                    {
                        int intLeadSelectedMask = 0;
                        for (int i = 0; i < m_smVisionInfo.g_arrLead3D.Length; i++)
                        {
                            if (!m_smVisionInfo.g_arrLead3D[i].ref_blnSelected)
                                continue;

                            intLeadSelectedMask |= (1 << i);
                        }

                        m_objLead3DToleranceSettingForm = new Lead3DToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo,
                        m_strSelectedRecipe, m_intUserGroup, intLeadSelectedMask, m_smProductionInfo);
                        m_objLead3DToleranceSettingForm.Show();
                        m_objLead3DToleranceSettingForm.TopMost = true;
                    }
                    else
                        m_objLead3DToleranceSettingForm.TopMost = true;

                    m_blnFormOpen = true;
                    break;
                case "Seal":
                    STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Seal Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                    m_objSealToleranceSettingForm = new SealToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo,
                      m_strSelectedRecipe, m_intUserGroup, m_smProductionInfo);
                    m_objSealToleranceSettingForm.TopLevel = false;
                    tabPage_Settings.Controls.Clear();
                    tabPage_Settings.Controls.Add(m_objSealToleranceSettingForm);
                    tabPage_Settings.Controls["SealToleranceSettingForm"].Show();
                    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    break;
                default:
                    break;
            }

            STTrackLog.WriteLine("Tolerance 6");

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_Options_Click(object sender, EventArgs e)
        {
            int intVisionType = 0;
            m_smVisionInfo.g_strSelectedPage = "InspectionOptionForm";

            if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                intVisionType |= 0x02;

            if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                intVisionType |= 0x01;

            if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                intVisionType |= 0x08;

            if ((m_smCustomizeInfo.g_intWantLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                intVisionType |= 0x10;

            if ((m_smCustomizeInfo.g_intWant3DLead & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                intVisionType |= 0x10;
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Inspection Option Form", "Pressed Inspection Option Button", "", "", m_smProductionInfo.g_strLotID);
            
            InspectionOptionForm2 objInspectionOptionForm = new InspectionOptionForm2(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo, m_strSelectedRecipe, m_intUserGroup, intVisionType);

            objInspectionOptionForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(objInspectionOptionForm);
            tabPage_Settings.Controls["InspectionOptionForm2"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;

            //DisableInspectionDrawingEvent();
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void DisableInspectionDrawingEvent()
        {
            m_smVisionInfo.g_blnDrawMarkResult = false;
            m_smVisionInfo.g_blnDrawPin1Result = false;
            m_smVisionInfo.g_blnDrawMark2DCodeResult = false;
            m_smVisionInfo.g_blnDrawPkgResult = false;
            m_smVisionInfo.g_blnPackageInspected = false;
            m_smVisionInfo.g_blnViewOrientObject = false;

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }
        private void btn_System_MouseEnter(object sender, EventArgs e)
        {
            btn_System.DropDownButtonWidth = 40;
        }

        private void btn_System_MouseLeave(object sender, EventArgs e)
        {
            btn_System.DropDownButtonWidth = 10;
        }

        private void btn_TolerancePackage_Click(object sender, EventArgs e)
        {
            
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    //{
                    //    int intVisionType = 0;
                    //    m_smVisionInfo.g_strSelectedPage = "InspectionOption";

                    //    if ((m_smCustomizeInfo.g_intWantMark & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    //    {
                    //        intVisionType |= 0x02;
                    //        m_smVisionInfo.g_strSelectedPage += "Mark";
                    //    }
                    //    if ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    //    {
                    //        intVisionType |= 0x01;
                    //        m_smVisionInfo.g_strSelectedPage += "Orient";
                    //    }
                    //    if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                    //        intVisionType |= 0x08;

                    //    MarkOrientPackageToleranceSettingForm objMarkOrientPackageToleranceSettingForm = new MarkOrientPackageToleranceSettingForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo,
                    //       m_strSelectedRecipe, m_intUserGroup, intVisionType);
                    //    objMarkOrientPackageToleranceSettingForm.TopLevel = false;
                    //    tabPage_Settings.Controls.Add(objMarkOrientPackageToleranceSettingForm);
                    //    tabPage_Settings.Controls["MarkOrientPackageToleranceSettingForm"].Show();
                    //    tabCtrl_Production.SelectedTab = tabPage_Settings;
                    //}
                    break;
                case "Package":
                    break;
                case "UnitPresent":
                    break;
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    {
                        int intVisionType = 0;
                        m_smVisionInfo.g_strSelectedPage = "PadPackageToleranceForm";

                        if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            intVisionType |= 0x08;
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Pad Package Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                        PadPackageToleranceSettingForm objPadPackageToleranceSettingForm = new PadPackageToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo,
                           m_strSelectedRecipe, m_intUserGroup);
                        objPadPackageToleranceSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objPadPackageToleranceSettingForm);
                        tabPage_Settings.Controls["PadPackageToleranceSettingForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                        break;
                    }
                case "Seal":
                    break;
                case "Li3D":
                case "Li3DPkg":
                    {
                        int intVisionType = 0;
                        m_smVisionInfo.g_strSelectedPage = "Lead3DPackageToleranceForm";
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Lead3D Package Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                        if ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) > 0)
                            intVisionType |= 0x01;

                        Lead3DPkgToleranceForm objLead3DPackageToleranceSettingForm = new Lead3DPkgToleranceForm(m_smCustomizeInfo, m_smVisionInfo, m_smProductionInfo,
                           m_strSelectedRecipe, m_intUserGroup, intVisionType);
                        objLead3DPackageToleranceSettingForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLead3DPackageToleranceSettingForm);
                        tabPage_Settings.Controls["Lead3DPkgToleranceForm"].Show();
                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                        break;
                    }
                default:
                    break;
            }

            
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_ToleranceLead_Click(object sender, EventArgs e)
        {
            if ((m_objLeadToleranceSettingForm == null) || (!m_objLeadToleranceSettingForm.ref_blnFormOpen))
            {
                int intLeadSelectedMask = 0;
                for (int i = 0; i < m_smVisionInfo.g_arrLead.Length; i++)
                {
                    if (!m_smVisionInfo.g_arrLead[i].ref_blnSelected)
                        continue;

                    intLeadSelectedMask |= (1 << i);
                }
                
                STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Lead Tolerance Setting Form", "Pressed Tolerance Button", "", "", m_smProductionInfo.g_strLotID);
                
                m_objLeadToleranceSettingForm = new LeadToleranceSettingForm(m_smCustomizeInfo, m_smVisionInfo,
                m_strSelectedRecipe, m_intUserGroup, intLeadSelectedMask, m_smProductionInfo);
                m_objLeadToleranceSettingForm.Show();
                m_objLeadToleranceSettingForm.TopMost = true;
            }
            else
                m_objLeadToleranceSettingForm.TopMost = true;

            m_blnFormOpen = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_PackageSetUp_MouseEnter(object sender, EventArgs e)
        {
            btn_PackageSetUp.DropDownButtonWidth = 40;
        }

        private void btn_PackageSetUp_MouseLeave(object sender, EventArgs e)
        {
            btn_PackageSetUp.DropDownButtonWidth = 10;
        }
        private void btn_PkgSubLearn_Click(object sender, EventArgs e)
        {
            int intLearnType = 0;
            switch (sender.ToString())
            {
                case "Package Size Gauge ROI":
                    intLearnType = 1;
                    break;
                case "Package Direct Light Gauge ROI":
                    intLearnType = 2;
                    break;
                case "Package ROI Tolerance":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 3;
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 2;
                            break;
                    }
                    break;
                case "Package Chipped Off ROI Tolerance":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 4;
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 3;
                            break;
                    }
                    break;
                case "Package Mold Flash ROI Tolerance":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 5;
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 4;
                            break;
                    }
                    break;
                case "Package Dark Field 2 ROI Tolerance":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 7;
                            break;
                        //case "Pad":
                        //case "PadPos":
                        //case "PadPkg":
                        //case "PadPkgPos":
                        //case "Pad5S":
                        //case "Pad5SPos":
                        //case "Pad5SPkg":
                        //case "Pad5SPkgPos":
                        //    intLearnType = 4;
                        //    break;
                    }
                    break;
                case "Package Dont Care ROI":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 6;
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 5;
                            break;
                    }
                    break;
                default:
                    intLearnType = 0;
                    break;
            }

            DisableInspectionDrawingEvent();

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    {
                        if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient/Mark before learn Package.");
                            return;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient/Mark before learn Package.");
                            return;
                        }

                        m_smVisionInfo.g_strSelectedPage = "Package";
                        LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, intLearnType, 0);
                        objLearnPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPackageForm);
                        tabPage_Settings.Controls["LearnPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Package":
                    break;
                case "UnitPresent":
                    break;
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    {
                        if (m_smVisionInfo.g_arrPadROIs.Count == 0 || m_smVisionInfo.g_arrPadROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Pad before learn Pad Package.");
                            return;
                        }

                        m_smVisionInfo.g_strSelectedPage = "PadPackage";
                        LearnPadPackageForm objLearnPadPackageForm = new LearnPadPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo, intLearnType);
                        objLearnPadPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPadPackageForm);
                        tabPage_Settings.Controls["LearnPadPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Li3DPkg":
                    {
                        if (m_smVisionInfo.g_arrLeadROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Lead before learn Lead Package.");
                            return;
                        }

                        m_smVisionInfo.g_strSelectedPage = "LeadPackage";
                        LearnLead3DPackageForm objLearnLead3DPackageForm = new LearnLead3DPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);
                        objLearnLead3DPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnLead3DPackageForm);
                        tabPage_Settings.Controls["LearnLead3DPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Seal":
                    break;
                default:
                    break;
            }

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void btn_PkgLearn_Click(object sender, EventArgs e)
        {
            btn_PackageSetUp.DropDown.Close();

            DisableInspectionDrawingEvent();
            
            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                    {
                        if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient before learn Package.");
                            return;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient before learn Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Package Form", "Pressed Learn Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "Package";
                        LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, 0, 0);
                        objLearnPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPackageForm);
                        tabPage_Settings.Controls["LearnPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "BottomPosition":
                    {
                        if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Position before learn Package.");
                            return;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Position before learn Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Package Form", "Pressed Learn Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "Package";
                        LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, 0, 0);
                        objLearnPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPackageForm);
                        tabPage_Settings.Controls["LearnPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Mark":
                case "MarkPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    {
                        if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Mark before learn Package.");
                            return;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Mark before learn Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Package Form", "Pressed Learn Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "Package";
                        LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, 0, 0);
                        objLearnPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPackageForm);
                        tabPage_Settings.Controls["LearnPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "MarkOrient":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                    {
                        if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient/Mark before learn Package.");
                            return;
                        }

                        if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Orient/Mark before learn Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Package Form", "Pressed Learn Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "Package";
                        LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, 0, 0);
                        objLearnPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPackageForm);
                        tabPage_Settings.Controls["LearnPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Package":
                    break;
                case "UnitPresent":
                    break;
                case "BottomPositionOrient":
                case "TapePocketPosition":
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    {
                        if (m_smVisionInfo.g_arrPadROIs.Count == 0 || m_smVisionInfo.g_arrPadROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Pad before learn Pad Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Pad Package Form", "Pressed Learn Pad Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "PadPackage";
                        LearnPadPackageForm objLearnPadPackageForm = new LearnPadPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo, 0);
                        objLearnPadPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnPadPackageForm);
                        tabPage_Settings.Controls["LearnPadPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Li3DPkg":
                    {
                        if (m_smVisionInfo.g_arrLeadROIs[0].Count == 0)
                        {
                            SRMMessageBox.Show("Please learn Lead before learn Lead Package.");
                            return;
                        }
                        STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Lead3D Package Form", "Pressed Learn Lead3D Package Button", "", "", m_smProductionInfo.g_strLotID);
                        m_smVisionInfo.g_strSelectedPage = "LeadPackage";
                        LearnLead3DPackageForm objLearnLead3DPackageForm = new LearnLead3DPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, m_smProductionInfo);
                        objLearnLead3DPackageForm.TopLevel = false;
                        tabPage_Settings.Controls.Clear();
                        tabPage_Settings.Controls.Add(objLearnLead3DPackageForm);
                        tabPage_Settings.Controls["LearnLead3DPackageForm"].Show();

                        tabCtrl_Production.SelectedTab = tabPage_Settings;
                    }
                    break;
                case "Seal":
                    break;
                default:
                    break;
            }

            
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_Lead_MouseEnter(object sender, EventArgs e)
        {
            btn_Lead.DropDownButtonWidth = 40;
        }

        private void btn_Lead_MouseLeave(object sender, EventArgs e)
        {
            btn_Lead.DropDownButtonWidth = 10;
        }

        private void lst_ErrorMessage_DrawItem(object sender, DrawItemEventArgs e)
        {
            try
            {
                e.DrawBackground();

                int intFirstRowIndex = 0;
                if (lst_ErrorMessage.Items.Count > 0)
                {
                    intFirstRowIndex = lst_ErrorMessage.IndexFromPoint(0, 0);
                }


                int r = 0;
                int intWordSize;
                if (m_smCustomizeInfo.g_intLanguageCulture == 1) // English
                    intWordSize = 5;
                else
                    intWordSize = 9;    // Chinese char has bigger size compare to english char
                int intMaxLengthText = e.Bounds.Width / intWordSize;

                for (int i = 0; i < m_arrRowErrorMessage.Count; i++)
                {
                    Rectangle rect = new Rectangle(0, e.Bounds.Height * r, e.Bounds.Width, e.Bounds.Height);

                    if ((rect.Y + rect.Height) > lst_ErrorMessage.Height)
                        return;

                    SolidBrush backgroundBrush = new SolidBrush(Color.White);
                    // Text color brush
                    SolidBrush textBrush = new SolidBrush(m_arrRowColor[intFirstRowIndex]);

                    // Draw the background
                    e.Graphics.FillRectangle(backgroundBrush, rect);


                    if (m_arrRowErrorMessage[intFirstRowIndex].Length > intMaxLengthText)
                    {
                        List<string> arrSubRowErrorMessage = new List<string>();
                        for (int s = 0; s < m_arrRowErrorMessage[intFirstRowIndex].Length; s += intMaxLengthText)
                        {
                            if (s != 0)
                            {
                                r++;

                                rect = new Rectangle(0, e.Bounds.Height * r, e.Bounds.Width, e.Bounds.Height);

                                if ((rect.Y + rect.Height) > lst_ErrorMessage.Height)
                                    return;

                                e.Graphics.FillRectangle(backgroundBrush, rect);
                            }
                            int intMaxLength = Math.Min(m_arrRowErrorMessage[intFirstRowIndex].Length - (s), intMaxLengthText);
                            arrSubRowErrorMessage.Add(m_arrRowErrorMessage[intFirstRowIndex].Substring(s, intMaxLength));
                            e.Graphics.DrawString(m_arrRowErrorMessage[intFirstRowIndex].Substring(s, intMaxLength), e.Font, textBrush, rect, StringFormat.GenericDefault);

                        }
                    }
                    else
                    {
                        e.Graphics.DrawString(m_arrRowErrorMessage[intFirstRowIndex], e.Font, textBrush, rect, StringFormat.GenericDefault);
                    }
                    //float fff = m_arrRowErrorMessage[intFirstRowIndex].Length;
                    //// Draw the text
                    //e.Graphics.DrawString(m_arrRowErrorMessage[intFirstRowIndex].Substring(0, Math.Min(rect.Width, m_arrRowErrorMessage[intFirstRowIndex].Length)), e.Font, textBrush, rect, StringFormat.GenericDefault);

                    //
                    backgroundBrush.Dispose();
                    textBrush.Dispose();

                    intFirstRowIndex++;
                    r++;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void ToolStripMenuItem_Merge_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() <= 1)
            {
                SRMMessageBox.Show("Please select more than 1 character to merge.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Merge Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].MergeBuildOcvChar();

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void ToolStripMenuItem_SplitHor_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() != 1)
            {
                SRMMessageBox.Show("Please select 1 char only to split character.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Split Horizontal Button", "", "", m_smProductionInfo.g_strLotID);
            
            if (!m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SplitBuildOcvChar(true))
            {
                ToolStripMenuItem_Enable.Visible = false;
                toolStripMenuItem_MarkType.Visible = false;
                ToolStripMenuItem_Select.Visible = false;
                ToolStripMenuItem_Deselect.Visible = false;
                ToolStripMenuItem_Merge.Visible = false;
                ToolStripMenuItem_SplitHor.Visible = false;
                toolStripMenuItem_SplitVer.Visible = false;
                toolStripMenuItem_Done.Visible = true;
                toolStripMenuItem_Cancel.Visible = true;
            }
        }

        private void toolStripMenuItem_SplitVer_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() != 1)
            {
                SRMMessageBox.Show("Please select 1 char only to split character.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Split Vertical Button", "", "", m_smProductionInfo.g_strLotID);
            
            if (!m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SplitBuildOcvChar(false))
            {
                ToolStripMenuItem_Enable.Visible = false;
                toolStripMenuItem_MarkType.Visible = false;
                ToolStripMenuItem_Select.Visible = false;
                ToolStripMenuItem_Deselect.Visible = false;
                ToolStripMenuItem_Merge.Visible = false;
                ToolStripMenuItem_SplitHor.Visible = false;
                toolStripMenuItem_SplitVer.Visible = false;
                toolStripMenuItem_Done.Visible = true;
                toolStripMenuItem_Cancel.Visible = true;
            }
        }

        private void splitCancelToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Split Cancel Button", "", "", m_smProductionInfo.g_strLotID);
            
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].IsSplitLineDisplaying())
            {
                ToolStripMenuItem_Enable.Visible = true;
                toolStripMenuItem_MarkType.Visible = m_smVisionInfo.g_blnWantUseMarkTypeInspectionSetting;
                ToolStripMenuItem_Select.Visible = true;
                ToolStripMenuItem_Deselect.Visible = true;
                ToolStripMenuItem_Merge.Visible = true;
                ToolStripMenuItem_SplitHor.Visible = true;
                toolStripMenuItem_SplitVer.Visible = true;
                toolStripMenuItem_Done.Visible = false;
                toolStripMenuItem_Cancel.Visible = false;
                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetSplitLineCancel();
            }
        }

        private void btn_LearnPocketPosition_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantCheckPocketPosition)
                OpenPocketPositionSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_LearnSealMark_Click(object sender, EventArgs e)
        {
            m_intVisionType = 2;
            TriggerOfflineTest();
            OpenSealSetup(-1);
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_LearnSealEmpty_Click(object sender, EventArgs e)
        {
            m_intVisionType = 1;
            TriggerOfflineTest();
            OpenSealSetup(-1);
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void timer_ErrorMsg_Tick(object sender, EventArgs e)
        {
            if (m_smVisionInfo.VM_AT_UpdateErrorMessage)
            {
                m_smVisionInfo.VM_AT_UpdateErrorMessage = false;

                if (m_smVisionInfo.g_strErrorMessage != "" && m_smVisionInfo.g_strErrorMessage != null)
                {
                    //Translate here
                    string strErrorMessage = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, m_smVisionInfo.g_strErrorMessage);
                    string strErrorMessage2 = "";

                    if (!m_smVisionInfo.g_strErrorMessage.Contains("Pass"))
                        m_smVisionInfo.g_cErrorMessageColor = Color.Red;

                    if (m_smVisionInfo.g_strErrorMessageForSecondUnit != "" && m_smVisionInfo.g_strErrorMessageForSecondUnit != null)
                    { 
                        strErrorMessage2 = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, m_smVisionInfo.g_strErrorMessageForSecondUnit);

                        if (!m_smVisionInfo.g_strErrorMessageForSecondUnit.Contains("Pass"))
                            m_smVisionInfo.g_cErrorMessageColorForSecondUnit = Color.Red;
                    }

                    if (lst_ErrorMessage.Items.Count < 1000)
                        lst_ErrorMessage.Items.Insert(0, "");
                    else
                    {
                        lst_ErrorMessage.Items.Insert(0, "");   // 2019 07 05 - insert first row and remove last row
                        lst_ErrorMessage.Items.RemoveAt(1000);
                    }

                    m_arrRowErrorMessage.Insert(0, "");
                    m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColor);

                    string[] strResult = strErrorMessage.Split('*');
                    string[] strResult2 = strErrorMessage2.Split('*');

                    for (int i = Math.Min(100, strResult.Length - 1); i >= 0; i--)
                    {
                        if (strResult[i] != "")
                        {
                            // 2019 09 25 - CCENG: Cannot use g_intMachineStatus to check offline test or not, because during production in last test, once user press STOP, the g_intMachineStatus has been changed to 1 but the last error message is not under offline test yet.
                            //if (m_smVisionInfo.g_intMachineStatus == 2)
                            m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + ": " + strResult[i]);
                            //else
                            //    m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + " Offline Test: " + strResult[i]);

                            m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColor);

                            if (lst_ErrorMessage.Items.Count < 1000)
                                lst_ErrorMessage.Items.Insert(0, "");
                            else
                            {
                                lst_ErrorMessage.Items.Insert(0, "");   // 2019 07 05 - insert first row and remove last row
                                lst_ErrorMessage.Items.RemoveAt(1000);
                            }

                            if (m_arrRowErrorMessage.Count > 1000)
                            {
                                m_arrRowErrorMessage.RemoveRange(1000, m_arrRowErrorMessage.Count - 1000);
                                m_arrRowColor.RemoveRange(1000, m_arrRowColor.Count - 1000);
                            }
                        }
                    }

                    for (int i = Math.Min(100, strResult2.Length - 1); i >= 0; i--)
                    {
                        if (strResult2[i] != "")
                        {
                            m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + ": " + strResult2[i]);
                            //m_smVisionInfo.g_cErrorMessageColorForSecondUnit = Color.Red;
                            m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColorForSecondUnit);

                            if (lst_ErrorMessage.Items.Count < 1000)
                                lst_ErrorMessage.Items.Insert(0, "");
                            else
                            {
                                lst_ErrorMessage.Items.Insert(0, "");
                                lst_ErrorMessage.Items.RemoveAt(1000);
                            }

                            if (m_arrRowErrorMessage.Count > 1000)
                            {
                                m_arrRowErrorMessage.RemoveRange(1000, m_arrRowErrorMessage.Count - 1000);
                                m_arrRowColor.RemoveRange(1000, m_arrRowColor.Count - 1000);
                            }
                        }
                    }

                    //lst_ErrorMessage.SelectionMode = SelectionMode.One;  // Set to Mode.One temporary first so that selectedIndex can set to 0    // 2018 09 18 - CCENG: Keep changing the SelectionMode will cause listbox keep blinking.
                    lst_ErrorMessage.SelectedIndex = 0;                              // Listbox will scroll to top when selectedIndex set to 0      // 2018 12 31 - CCENG: Make sure the lstbox properties SelectionMode is set to One.
                    //lst_ErrorMessage.SelectionMode = SelectionMode.None; // Set the mode to None the error list is not highlighted.               // 2018 12 31 - CCENG: Not need set SelectionMode to None anymore because the listbox data is viewed using DrawItem event.
                    m_smVisionInfo.g_strErrorMessage = "";
                    m_smVisionInfo.g_strErrorMessageForSecondUnit = "";
                    m_smVisionInfo.g_cErrorMessageColor = Color.Red;
                    m_smVisionInfo.g_cErrorMessageColorForSecondUnit = Color.Red;
                }
            }
            else if (m_smVisionInfo.g_strErrorMessageForSecondUnit != null && m_smVisionInfo.g_strErrorMessageForSecondUnit != "")
            {
                //Translate here
                string strErrorMessage2 = "";

                if (m_smVisionInfo.g_strErrorMessageForSecondUnit != "" && m_smVisionInfo.g_strErrorMessageForSecondUnit != null)
                {
                    strErrorMessage2 = LanguageLibrary.Convert(m_smCustomizeInfo.g_intLanguageCulture, m_smVisionInfo.g_strErrorMessageForSecondUnit);

                    if (!m_smVisionInfo.g_strErrorMessageForSecondUnit.Contains("Pass"))
                        m_smVisionInfo.g_cErrorMessageColorForSecondUnit = Color.Red;
                }

                if (lst_ErrorMessage.Items.Count < 1000)
                    lst_ErrorMessage.Items.Insert(0, "");
                else
                {
                    lst_ErrorMessage.Items.Insert(0, "");   // 2019 07 05 - insert first row and remove last row
                    lst_ErrorMessage.Items.RemoveAt(1000);
                }

                m_arrRowErrorMessage.Insert(0, "");
                m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColor);

                string[] strResult2 = strErrorMessage2.Split('*');

                for (int i = Math.Min(100, strResult2.Length - 1); i >= 0; i--)
                {
                    if (strResult2[i] != "")
                    {
                        m_arrRowErrorMessage.Insert(0, DateTime.Now.ToString() + ": " + strResult2[i]);
                        m_arrRowColor.Insert(0, m_smVisionInfo.g_cErrorMessageColorForSecondUnit);

                        if (lst_ErrorMessage.Items.Count < 1000)
                            lst_ErrorMessage.Items.Insert(0, "");
                        else
                        {
                            lst_ErrorMessage.Items.Insert(0, "");
                            lst_ErrorMessage.Items.RemoveAt(1000);
                        }

                        if (m_arrRowErrorMessage.Count > 1000)
                        {
                            m_arrRowErrorMessage.RemoveRange(1000, m_arrRowErrorMessage.Count - 1000);
                            m_arrRowColor.RemoveRange(1000, m_arrRowColor.Count - 1000);
                        }
                    }
                }

                //lst_ErrorMessage.SelectionMode = SelectionMode.One;  // Set to Mode.One temporary first so that selectedIndex can set to 0    // 2018 09 18 - CCENG: Keep changing the SelectionMode will cause listbox keep blinking.
                lst_ErrorMessage.SelectedIndex = 0;                              // Listbox will scroll to top when selectedIndex set to 0      // 2018 12 31 - CCENG: Make sure the lstbox properties SelectionMode is set to One.
                                                                                 //lst_ErrorMessage.SelectionMode = SelectionMode.None; // Set the mode to None the error list is not highlighted.               // 2018 12 31 - CCENG: Not need set SelectionMode to None anymore because the listbox data is viewed using DrawItem event.
                m_smVisionInfo.g_strErrorMessageForSecondUnit = "";
                m_smVisionInfo.g_cErrorMessageColorForSecondUnit = Color.Red;
            }
        }

        private void btn_TrackingONOFF_Click(object sender, EventArgs e)
        {
        }

        private void basicToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackBasic = !m_smVisionInfo.g_blnTrackBasic;

            basicToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackBasic;

            SRMMessageBox.Show("Track Basic Data On/Off = " + m_smVisionInfo.g_blnTrackBasic.ToString());

        }

        private void centerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackCenter = !m_smVisionInfo.g_blnTrackCenter;

            centerToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackCenter;

            SRMMessageBox.Show("Track Center Data On/Off = " + m_smVisionInfo.g_blnTrackCenter.ToString());

        }

        private void topLeftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackTL = !m_smVisionInfo.g_blnTrackTL;

            topLeftToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackTL;

            SRMMessageBox.Show("Track Top Left Data On/Off = " + m_smVisionInfo.g_blnTrackTL.ToString());

        }

        private void bottomRightToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackBR = !m_smVisionInfo.g_blnTrackBR;

            bottomRightToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackBR;

            SRMMessageBox.Show("Track Bottom Right Data On/Off = " + m_smVisionInfo.g_blnTrackBR.ToString());

        }

        private void AlltoolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void PocketPosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackPocketPosition = !m_smVisionInfo.g_blnTrackPocketPosition;

            PocketPosToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackPocketPosition;

            SRMMessageBox.Show("Track Pocket Position Data On/Off = " + m_smVisionInfo.g_blnTrackPocketPosition.ToString());
        }

        private void btn_PocketPositionMean_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Pocket Position Statistic Form", "Pressed Pocket Position Statistic Button", "", "", m_smProductionInfo.g_strLotID);
            
            if (m_objPocketPositionMeanStatisticForm == null)
            {
                m_objPocketPositionMeanStatisticForm = new PocketPositionMeanStatisticForm(m_smVisionInfo, m_smProductionInfo);

                m_objPocketPositionMeanStatisticForm.Show();
            }
            else
            {
                if(!m_objPocketPositionMeanStatisticForm.Created)
                {
                    m_objPocketPositionMeanStatisticForm = new PocketPositionMeanStatisticForm(m_smVisionInfo, m_smProductionInfo);

                    m_objPocketPositionMeanStatisticForm.Show();
                }
            }
        }

        private void iPMEdgeROIToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackIPMEdgeROI = !m_smVisionInfo.g_blnTrackIPMEdgeROI;

            iPMEdgeROIToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackIPMEdgeROI;

            SRMMessageBox.Show("Track IPMEdgeROI On/Off = " + m_smVisionInfo.g_blnTrackIPMEdgeROI.ToString());
        }

        private void sealImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackSealImage = !m_smVisionInfo.g_blnTrackSealImage;

            sealImageToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackSealImage;

            SRMMessageBox.Show("Track SealImage On/Off = " + m_smVisionInfo.g_blnTrackSealImage.ToString());
        }

        private void sealOptionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackSealOption = !m_smVisionInfo.g_blnTrackSealOption;

            sealOptionToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackSealOption;

            SRMMessageBox.Show("Track SealOption On/Off = " + m_smVisionInfo.g_blnTrackSealOption.ToString());
        }
        private void btn_SubLearn_Click(object sender, EventArgs e)
        {
            int intLearnType = 0;
            switch (sender.ToString())
            {
                case "Search ROI":
                    intLearnType = 1;
                    break;
                case "Orientation ROI":
                case "Unit ROI":
                    intLearnType = 2;
                    if (m_smVisionInfo.g_intTotalTemplates > 1)
                    {
                        MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                     m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                     m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                     m_smVisionInfo.g_intSelectedTemplate,
                     m_smVisionInfo.g_strVisionFolderName,
                     m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                        if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                        {
                            m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_intSelectedTemplate = 0;
                    }
                    break;
                case "Gauge ROI":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 3;
                            if (m_smVisionInfo.g_intTotalTemplates > 1)
                            {
                                MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                             m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                             m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                             m_smVisionInfo.g_intSelectedTemplate,
                             m_smVisionInfo.g_strVisionFolderName,
                             m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                                if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                                {
                                    m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                                }
                            }
                            else
                            {
                                m_smVisionInfo.g_intSelectedTemplate = 0;
                            }
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 2;
                            break;
                    }

                    break; 
                case "Mark ROI":
                    intLearnType = 4;
                    if (m_smVisionInfo.g_intTotalTemplates > 1)
                    {
                        MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                     m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                     m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                     m_smVisionInfo.g_intSelectedTemplate,
                     m_smVisionInfo.g_strVisionFolderName,
                     m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                        if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                        {
                            m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_intSelectedTemplate = 0;
                    }
                    break;
                case "Unit PR ROI":
                    intLearnType = 8;
                    if (m_smVisionInfo.g_intTotalTemplates > 1)
                    {
                        MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                     m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                     m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                     m_smVisionInfo.g_intSelectedTemplate,
                     m_smVisionInfo.g_strVisionFolderName,
                     m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                        if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                        {
                            m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_intSelectedTemplate = 0;
                    }
                    break;
                case "Dont Care ROI":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 5;
                            if (m_smVisionInfo.g_intTotalTemplates > 1)
                            {
                                MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                             m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                             m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                             m_smVisionInfo.g_intSelectedTemplate,
                             m_smVisionInfo.g_strVisionFolderName,
                             m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                                if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                                {
                                    m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                                }
                            }
                            else
                            {
                                m_smVisionInfo.g_intSelectedTemplate = 0;
                            }
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 4;
                            break;
                    }
                    break;
                case "Mark Segmentation":
                    intLearnType = 9;
                    break;
                case "Char ROI":
                    intLearnType = 6;
                    if (m_smVisionInfo.g_intTotalTemplates > 1)
                    {
                        MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                     m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                     m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                     m_smVisionInfo.g_intSelectedTemplate,
                     m_smVisionInfo.g_strVisionFolderName,
                     m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, false);

                        if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                        {
                            m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                        }
                    }
                    else
                    {
                        m_smVisionInfo.g_intSelectedTemplate = 0;
                    }
                    break;
                case "Pin 1 ROI":
                    switch (m_smVisionInfo.g_strVisionName)
                    {
                        case "Orient":
                        case "BottomOrient":
                        case "BottomPosition":
                        case "Mark":
                        case "MarkOrient":
                        case "MarkPkg":
                        case "MOPkg":
                        case "MOLi":
                        case "MOLiPkg":
                        case "InPocket":
                        case "InPocketPkg":
                        case "InPocketPkgPos":
                        case "IPMLi":
                        case "IPMLiPkg":
                            intLearnType = 7;
                            if (m_smVisionInfo.g_intTotalTemplates > 1)
                            {
                                MarkSelectTemplateForm objMarkTemplateSelection = new MarkSelectTemplateForm(
                             m_smVisionInfo.g_arrMarks[0].ref_intGroupIndex,
                             m_smVisionInfo.g_arrMarks[0].GetNumTemplates(),
                             m_smVisionInfo.g_intSelectedTemplate,
                             m_smVisionInfo.g_strVisionFolderName,
                             m_strSelectedRecipe, m_smProductionInfo.g_strRecipePath, true);

                                if (objMarkTemplateSelection.ShowDialog() == DialogResult.OK)
                                {
                                    m_smVisionInfo.g_intSelectedTemplate = objMarkTemplateSelection.ref_intSelectedTemplate;
                                }
                            }
                            else
                            {
                                m_smVisionInfo.g_intSelectedTemplate = 0;
                            }
                            break;
                        case "BottomOrientPad":
                        case "BottomOPadPkg":
                        case "Pad":
                        case "PadPos":
                        case "PadPkg":
                        case "PadPkgPos":
                        case "Pad5S":
                        case "Pad5SPos":
                        case "Pad5SPkg":
                        case "Pad5SPkgPos":
                            intLearnType = 5;
                            break;
                    }
                    break;
                case "Pad ROI":
                    intLearnType = 3;
                    break;
                case "Identify Pad":
                    intLearnType = 6;
                    break;
                case "Identify Pitch Gap":
                    intLearnType = 7;
                    break;
                case "Position Search ROI":
                    intLearnType = 1;
                    break;
                case "Position Pattern ROI":
                    intLearnType = 2;
                    break;
                case "Seal ROI":
                    intLearnType = 3;
                    break;
                case "Seal Segmentation":
                    intLearnType = 4;
                    break;
                case "Distance ROI":
                    intLearnType = 5;
                    break;
                case "Circle Gauge ROI":
                    intLearnType = 6;
                    break;
                case "Sprocket Hole Defect":
                    intLearnType = 9;
                    break;
                case "Sprocket Hole Broken":
                    intLearnType = 10;
                    break;
                case "Sprocket Hole Roundness":
                    intLearnType = 11;
                    break;
                case "Seal Edge Straightness":
                    intLearnType = 12;
                    break;
                case "Over Heat ROI":
                    intLearnType = 7;
                    break;
                case "Test ROI":
                    intLearnType = 8;
                    break;
                default:
                    intLearnType = 0;
                    break;
            }

            DisableInspectionDrawingEvent();

            switch (m_smVisionInfo.g_strVisionName)
            {
                case "Orient":
                case "BottomOrient":
                case "BottomPosition":
                case "Mark":
                case "MarkOrient":
                case "MarkPkg":
                case "MOPkg":
                case "MOLi":
                case "MOLiPkg":
                case "InPocket":
                case "InPocketPkg":
                case "InPocketPkgPos":
                case "IPMLi":
                case "IPMLiPkg":
                    OpenMarkOrientSetup(intLearnType);
                    break;
                case "Package":
                    OpenColorPackageSetup();
                    break;
                case "BottomOrientPad":
                case "BottomOPadPkg":
                case "Pad":
                case "PadPos":
                case "PadPkg":
                case "PadPkgPos":
                case "Pad5S":
                case "Pad5SPos":
                case "Pad5SPkg":
                case "Pad5SPkgPos":
                    OpenPadSetup(intLearnType);
                    break;
                case "Li3D":
                case "Li3DPkg":
                    OpenLead3DSetup();
                    break;
                case "Seal":
                    m_intVisionType = 0;
                    OpenSealSetup(intLearnType);
                    break;
                case "UnitPresent":
                    OpenCheckPresentSetup();
                    break;
                default:
                    SRMMessageBox.Show("btn_Learn_Click -> There is no such vision module name " + m_smVisionInfo.g_strVisionName + " in this SRMVision software version.");
                    break;
            }

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void btn_ResultLog_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Result Log Form", "Pressed Result Log Button", "", "", m_smProductionInfo.g_strLotID);
            
            ResultLogForm objForm = new ResultLogForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            objForm.ShowDialog();
            objForm.Dispose();
        }

        private void iPMCounterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackPocketCounter = !m_smVisionInfo.g_blnTrackPocketCounter;

            iPMCounterToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackPocketCounter;

            SRMMessageBox.Show("Track Pocket Counter Data On/Off = " + m_smVisionInfo.g_blnTrackPocketCounter.ToString());
        }

        private void toolStripMenuItem_Done_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Split Done Button", "", "", m_smProductionInfo.g_strLotID);
            
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].IsSplitLineDisplaying())
            {
                ToolStripMenuItem_Enable.Visible = true;
                toolStripMenuItem_MarkType.Visible = m_smVisionInfo.g_blnWantUseMarkTypeInspectionSetting;
                ToolStripMenuItem_Select.Visible = true;
                ToolStripMenuItem_Deselect.Visible = true;
                ToolStripMenuItem_Merge.Visible = true;
                ToolStripMenuItem_SplitHor.Visible = true;
                toolStripMenuItem_SplitVer.Visible = true;
                toolStripMenuItem_Done.Visible = false;
                toolStripMenuItem_Cancel.Visible = false;
                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetSplitLineDone();
            }
        }

        private void ToolStripMenuItem_Select_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() < 1)
            {
                SRMMessageBox.Show("Please select at least 1 character.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Select Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].EnableOcvChar();

            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectBuildOcvChar();

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void markInspectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks != null &&
               m_smVisionInfo.g_arrMarks.Count > 0)
            {
                m_smVisionInfo.g_arrMarks[0].ref_blnTrackOcvInspect = !m_smVisionInfo.g_arrMarks[0].ref_blnTrackOcvInspect;

                markInspectToolStripMenuItem.Checked = m_smVisionInfo.g_arrMarks[0].ref_blnTrackOcvInspect;

                SRMMessageBox.Show("Track Mark Inspect On/Off = " + m_smVisionInfo.g_arrMarks[0].ref_blnTrackOcvInspect.ToString());
            }
        }

        private void btn_RecipeLearn_MouseEnter(object sender, EventArgs e)
        {
            btn_RecipeLearn.ShowDropDown();
        }
        
        private void btn_PkgLearn_MouseEnter(object sender, EventArgs e)
        {
            btn_PkgLearn.ShowDropDown();
        }

        private void ToolStripMenuItem_Deselect_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() < 1)
            {
                SRMMessageBox.Show("Please select at least 1 character.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Filter Mark Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DeselectBuildOcvChar();

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void btn_LearnLeadPocketDontCareAreaManual_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead)
                OpenLeadPocketDontCareAreaManualSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_LearnLeadPocketDontCareAreaAuto_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead)
                OpenLeadPocketDontCareAreaAutoSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void btn_LearnLeadPocketDontCareAreaBlob_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead)
                OpenLeadPocketDontCareAreaBlobSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void btn_LearnLeadPocketDontCareAreaFix_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            if (m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead)
                OpenLeadPocketDontCareAreaFixSetup();

            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }
        private void ToolStripMenuItem_Enable_Click(object sender, EventArgs e)
        {
            //if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() < 1)
            //{
            //    SRMMessageBox.Show("Please Keep at least 1 character.");
            //    return;
            //}

            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].EnableOcvChar();

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void btn_LearnPadOrient_Click(object sender, EventArgs e)
        {
            m_intVisionType = 1;
            OpenPadSetup(-1);
        }

        private void toolStripComboBox_MarkType_DropDownClosed(object sender, EventArgs e)
        {
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetOcvType(toolStripComboBox_MarkType.SelectedIndex);
            pic_Image.ContextMenuStrip.Close();
            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void ToolStripMenuItem_Disable_Click(object sender, EventArgs e)
        {
            //if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() < 1)
            //{
            //    SRMMessageBox.Show("Please Keep at least 1 character.");
            //    return;
            //}
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Ignore Mark Button", "", "", m_smProductionInfo.g_strLotID);
            
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].DisableOcvChar();

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void toolStripMenuItem_EditTextShiftTol_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Edit Text Shift Tol Button", "", "", m_smProductionInfo.g_strLotID);
            
            string strTextShiftedX = m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetSelectedTextShiftedXSetting(m_smVisionInfo.g_intSelectedUnit, m_smVisionInfo.g_intSelectedTemplate);
            string strTextShiftedY = m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetSelectedTextShiftedYSetting(m_smVisionInfo.g_intSelectedUnit, m_smVisionInfo.g_intSelectedTemplate);

            SetTextShiftToleranceForm objForm = new SetTextShiftToleranceForm(m_smCustomizeInfo, strTextShiftedX, strTextShiftedY);
            if (objForm.ShowDialog() == DialogResult.OK)
            {
                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetTextShiftedSeting(objForm.GetTextShiftedX(), objForm.GetTextShiftedY(), m_smVisionInfo.g_intSelectedUnit, m_smVisionInfo.g_intSelectedTemplate);
            }

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void btn_LearnReferenceImage_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            m_intVisionType = 1;
            OpenBarcodeSetup();
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void saveImageAfterGrabToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnSaveImageAfterGrab = !m_smVisionInfo.g_blnSaveImageAfterGrab;

             saveImageAfterGrabToolStripMenuItem.Checked = m_smVisionInfo.g_blnSaveImageAfterGrab;

            SRMMessageBox.Show("Save Image After Grab On/Off = " + m_smVisionInfo.g_blnSaveImageAfterGrab.ToString());

            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey1 = key.CreateSubKey("SVG\\AutoMode");
            subKey1.SetValue("VS" + (m_smVisionInfo.g_intVisionIndex + 1).ToString() + "Tracking_SaveImageAfterGrab", saveImageAfterGrabToolStripMenuItem.Checked);
        }

        private void ToolStripMenuItem_SelectAll_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectAll(true);
            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void ToolStripMenuItem_UnselectAll_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SelectAll(false);
            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }

        private void btn_LearnPadColor_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrPadROIs[0].Count > 2)
            {
                m_intVisionType = 2;
                OpenPadSetup(-1);
                m_smVisionInfo.VM_AT_DisableImageLoad = true;
                m_smProductionInfo.g_blnViewMultipleImageOff = true;
            }
            else
            {
                SRMMessageBox.Show("Pad ROI not exist.\nPlease learn Pad first.");
            }
        }

        private void pic_Image1_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrImages.Count > 0)
            {
                m_smVisionInfo.g_blnSetMultipleImageViewOnOff = true;
                m_smVisionInfo.g_intSelectedImage = m_smVisionInfo.g_intProductionViewImage = 0;
                m_smVisionInfo.g_blnUpdateImageNoComboBox = true;
            }
        }

        private void pic_Image2_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrImages.Count > 1)
            {
                m_smVisionInfo.g_blnSetMultipleImageViewOnOff = true;
                m_smVisionInfo.g_intSelectedImage = m_smVisionInfo.g_intProductionViewImage = ImageDrawing.GetArrayImageIndex(1, m_smVisionInfo.g_intVisionIndex);
                m_smVisionInfo.g_blnUpdateImageNoComboBox = true;
            }
        }
        private void timingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackTiming = !m_smVisionInfo.g_blnTrackTiming;

            timingToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackTiming;

            SRMMessageBox.Show("Track Timing On/Off = " + m_smVisionInfo.g_blnTrackTiming.ToString());
        }
        private void btn_ROIColor_Click(object sender, EventArgs e)
        {

            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open ROI COlor Form", "Pressed ROI Color Button", "", "", m_smProductionInfo.g_strLotID);

            ROIColorForm objForm = new ROIColorForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            objForm.ShowDialog();
            objForm.Dispose();
            objForm.Close();
        }

        private void btn_LearnOCR_Click(object sender, EventArgs e)
        {
            DisableInspectionDrawingEvent();
            OpenMarkOrientOCRSetup(0);
            m_smVisionInfo.VM_AT_DisableImageLoad = true;
            m_smProductionInfo.g_blnViewMultipleImageOff = true;
        }

        private void btn_LearnPackageColor_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrOrientROIs.Count == 0)
            {
                SRMMessageBox.Show("Please learn Orient/Mark before learn Package Color.");
                return;
            }

            if (m_smVisionInfo.g_arrOrientROIs[0].Count == 0)
            {
                SRMMessageBox.Show("Please learn Orient/Mark before learn Package Color.");
                return;
            }
        
            if (m_smVisionInfo.g_arrPackageROIs[0].Count > 2)
            {
                STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Learn Package Color Form", "Pressed Learn Package Color Button", "", "", m_smProductionInfo.g_strLotID);
                m_smVisionInfo.g_strSelectedPage = "Package";
                LearnPackageForm objLearnPackageForm = new LearnPackageForm(m_smVisionInfo, m_smCustomizeInfo, m_smProductionInfo, m_strSelectedRecipe, m_smProductionInfo.g_intUserGroup, 0, 1);
                objLearnPackageForm.TopLevel = false;
                tabPage_Settings.Controls.Clear();
                tabPage_Settings.Controls.Add(objLearnPackageForm);
                tabPage_Settings.Controls["LearnPackageForm"].Show();

                tabCtrl_Production.SelectedTab = tabPage_Settings;

                m_smVisionInfo.VM_AT_DisableImageLoad = true;
                m_smProductionInfo.g_blnViewMultipleImageOff = true;
            }
            else
            {
                SRMMessageBox.Show("Package ROI not exist.\nPlease learn Package first.");
            }
        }
        
        private void btn_TestLighting_Click(object sender, EventArgs e)
        {
            //DeviceEdit objDeviceEdit = new DeviceEdit(m_smProductionInfo);
            m_smVisionInfo.g_strSelectedPage = "TestLightning";
            //objDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + "-Open Test Lightning Form", "Pressed Test Lightning Button", "", "", m_smProductionInfo.g_strLotID);
            //objDeviceEdit.Dispose();
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Test Lightning Form", "Pressed Test Lightning Button", "", "", m_smProductionInfo.g_strLotID);
            TestLightningForm TestLightningForm = new TestLightningForm(m_smVisionInfo, m_smCustomizeInfo.g_blnLEDiControl, m_smCustomizeInfo.g_blnVTControl,
            m_strSelectedRecipe, m_objAVTFireGrab, m_objIDSCamera, m_objTeliCamera, m_smProductionInfo, m_smCustomizeInfo);

            TestLightningForm.TopLevel = false;
            tabPage_Settings.Controls.Clear();
            tabPage_Settings.Controls.Add(TestLightningForm);
            tabPage_Settings.Controls["TestLightningForm"].Show();
            tabCtrl_Production.SelectedTab = tabPage_Settings;
        }

        private void btn_RecipeVerification_Click(object sender, EventArgs e)
        {
            RecipeVerificationSettingForm objForm = new RecipeVerificationSettingForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            objForm.ShowDialog();
            objForm.Dispose();
            objForm.Close();
        }
        
        private void pic_Image3_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrImages.Count > 2)
            {
                m_smVisionInfo.g_blnSetMultipleImageViewOnOff = true;
                m_smVisionInfo.g_intSelectedImage = m_smVisionInfo.g_intProductionViewImage = ImageDrawing.GetArrayImageIndex(2, m_smVisionInfo.g_intVisionIndex);
                m_smVisionInfo.g_blnUpdateImageNoComboBox = true;
            }
        }

        private void mOIOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackIO = !m_smVisionInfo.g_blnTrackIO;

            mOIOToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackIO;

            SRMMessageBox.Show("Track IO On/Off = " + m_smVisionInfo.g_blnTrackIO.ToString());

            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey1 = key.CreateSubKey("SVG\\AutoMode");
            subKey1.SetValue("VS" + (m_smVisionInfo.g_intVisionIndex + 1).ToString() + "Tracking_IO", mOIOToolStripMenuItem.Checked);
        }

        private void saveImageFileNameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackSaveImageFile = !m_smVisionInfo.g_blnTrackSaveImageFile;

            saveImageFileNameToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackSaveImageFile;

            SRMMessageBox.Show("Track Save Image File On/Off = " + m_smVisionInfo.g_blnTrackSaveImageFile.ToString());

            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey1 = key.CreateSubKey("SVG\\AutoMode");
            subKey1.SetValue("VS" + (m_smVisionInfo.g_intVisionIndex + 1).ToString() + "Tracking_saveImageFileName", saveImageFileNameToolStripMenuItem.Checked);
        }

        private void savePassLastImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            m_smVisionInfo.g_blnTrackSavePassLastImage = !m_smVisionInfo.g_blnTrackSavePassLastImage;

            savePassLastImageToolStripMenuItem.Checked = m_smVisionInfo.g_blnTrackSavePassLastImage;

            SRMMessageBox.Show("Track Save Pass Last Image On/Off = " + m_smVisionInfo.g_blnTrackSavePassLastImage.ToString());

            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey subKey1 = key.CreateSubKey("SVG\\AutoMode");
            subKey1.SetValue("VS" + (m_smVisionInfo.g_intVisionIndex + 1).ToString() + "Tracking_SavePassLastImage", savePassLastImageToolStripMenuItem.Checked);
        }

        private void DragROI(List<List<ROI>> arrROIs, List<RectGaugeM4L> arrGauges, int intPositionX, int intPositionY)
        {
            ROI objROI;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                for (int j = 0; j < arrROIs[i].Count; j++)
                {
                    objROI = arrROIs[i][j];
                    if (objROI.GetROIHandle())
                    {
                        objROI.DragROI(intPositionX, intPositionY);
                        if (objROI.ref_intType == 1)
                        {
                            if (i < arrGauges.Count)
                            {
                                arrGauges[i].SetGaugePlace_BasedOnEdgeROI();
                            }
                        }

                        arrROIs[i][j] = objROI;
                        m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                        break;
                    }
                }
            }
        }

        private void deleteSaveImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // This boolean will auto reset to false after tracking for 10 seconds.

            m_smProductionInfo.g_blnTrackDeleteImage = !m_smProductionInfo.g_blnTrackDeleteImage;

            SRMMessageBox.Show("Track Delete Image On/Off for 10s");  
        }

        private void btn_ToleranceReference_Click(object sender, EventArgs e)
        {
            //ToleranceReferenceForm objToleranceReferenceForm = new ToleranceReferenceForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            LoadPadToleranceNewLotForm objToleranceReferenceForm = new LoadPadToleranceNewLotForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            objToleranceReferenceForm.ShowDialog();
            objToleranceReferenceForm.Dispose();
            objToleranceReferenceForm.Close();
        }

        private void DragROI_With2SearchROI(List<List<ROI>> arrROIs, List<RectGaugeM4L> arrGauges, int intPositionX, int intPositionY)
        {
            ROI objROI;
            for (int i = 0; i < arrROIs.Count; i++)
            {
                if (arrROIs.Count > 1)
                {
                    if (m_smVisionInfo.g_intSelectedUnit == 0)
                    {
                        if (intPositionX - m_intClickedX < (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth))
                        {
                            // if(intPositionX > (arrROIs[0][0].ref_ROITotalX - 1))
                            intPositionX = (arrROIs[1][0].ref_ROITotalX + arrROIs[1][0].ref_ROIWidth) + m_intClickedX;

                        }
                    }
                    else if (m_smVisionInfo.g_intSelectedUnit == 1)
                    {
                        if ((intPositionX + m_intClickedXRe) > arrROIs[0][0].ref_ROITotalX)
                        {
                            intPositionX = arrROIs[0][0].ref_ROITotalX - m_intClickedXRe;
                        }
                    }
                    for (int j = 0; j < arrROIs[i].Count; j++)
                    {
                        objROI = arrROIs[i][j];
                        if (objROI.GetROIHandle())
                        {
                            objROI.DragROI(intPositionX, intPositionY);
                            if (objROI.ref_intType == 1)
                            {
                                //if(arrGauges.Count>i)
                                //arrGauges[i].SetGaugePlace_BasedOnEdgeROI();
                            }

                            arrROIs[i][j] = objROI;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }

                }
                else
                {
                    for (int j = 0; j < arrROIs[i].Count; j++)
                    {
                        objROI = arrROIs[i][j];
                        if (objROI.GetROIHandle())
                        {
                            objROI.DragROI(intPositionX, intPositionY);
                            if (objROI.ref_intType == 1)
                            {
                                //if (arrGauges.Count > i)
                                //    arrGauges[i].SetGaugePlace_BasedOnEdgeROI();
                            }
                            arrROIs[i][j] = objROI;
                            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
                            break;
                        }
                    }
                }
            }
        }

        private void LoadGaugeM4LSetting(string strPath, List<RectGaugeM4L> arrGauge)
        {
            // 2019 09 03 - Proper way to dispose unwanted object.
            for (int i = m_smVisionInfo.g_intUnitsOnImage; i < arrGauge.Count; i++)
            {
                arrGauge[i].Dispose();
                arrGauge.RemoveAt(i);
            }

            XmlParser objFile = new XmlParser(strPath);
            RectGaugeM4L objRectGauge;
            //int intCount = Math.Min(m_smVisionInfo.g_intUnitsOnImage, objFile.GetFirstSectionCount());

            for (int j = 0; j < m_smVisionInfo.g_intUnitsOnImage; j++)
            {
                //create new ROI base on file read out
                if (j >= arrGauge.Count)
                {
                    //add Rect Gauge into shared memory's Rect Gauge array list 
                    objRectGauge = new RectGaugeM4L(m_smVisionInfo.g_WorldShape, 0, m_smVisionInfo.g_intVisionIndex);
                    arrGauge.Add(objRectGauge);
                }

                arrGauge[j].LoadRectGauge4L(strPath, "RectG" + j);
            }

            objRectGauge = null;

        }
        private void btn_Yield_Click(object sender, EventArgs e)
        {
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Open Yield Form", "Pressed Yield Button", "", "", m_smProductionInfo.g_strLotID);
            
            YieldSettingForm objForm = new YieldSettingForm(m_smProductionInfo, m_smVisionInfo, m_smCustomizeInfo, m_strSelectedRecipe);
            objForm.ShowDialog();
            objForm.Dispose();
        }

        private void toolStripMenuItem_EditROI_Click(object sender, EventArgs e)
        {
            if (m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetBuildOcvCharSelectedCount() == 0)
            {
                SRMMessageBox.Show("Please select at least 1 character.");
                return;
            }
            
            STDeviceEdit.SaveDeviceEditLog(m_smVisionInfo.g_strVisionFolderName + ">Learn Mark Form", "Pressed Edit Char ROI Button", "", "", m_smProductionInfo.g_strLotID);
            
            string strCharShiftedX = m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetSelectedCharShiftedXSetting();
            string strCharShiftedY = m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].GetSelectedCharShiftedYSetting();

            SetCharShiftToleranceForm objForm = new SetCharShiftToleranceForm(m_smCustomizeInfo, strCharShiftedX, strCharShiftedY);
            if (objForm.ShowDialog() == DialogResult.OK)
            {
                m_smVisionInfo.g_arrMarks[m_smVisionInfo.g_intSelectedUnit].SetCharShiftedSeting(objForm.GetCharShiftedX(), objForm.GetCharShiftedY());
            }

            m_smVisionInfo.ALL_VM_UpdatePictureBox = true;
        }
        private void UpdatePackageImage_ForRectGaugeM4L()
        {
            RectGaugeM4L RGaugeM4L = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit];
            if (m_smVisionInfo.g_intLearnStepNo == 1 && m_smVisionInfo.g_strSelectedPage != "Lead")
            {
                RGaugeM4L = m_smVisionInfo.g_arrPackageGauge2M4L[m_smVisionInfo.g_intSelectedUnit];
            }
            else if (m_smVisionInfo.g_blnViewMOGauge)
            {
                RGaugeM4L = m_smVisionInfo.g_arrOrientGaugeM4L[m_smVisionInfo.g_intSelectedUnit];
            }

            if (m_smVisionInfo.g_blnViewRotatedImage)
            {
                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].CopyTo(ref m_smVisionInfo.g_objPackageImage);
            }
            else
            {
                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].CopyTo(ref m_smVisionInfo.g_objPackageImage);
            }

            if (m_smVisionInfo.g_blnViewRotatedImage)
            {
                //if (m_blnSetToAll)
                {
                    ImageDrawing objSourceImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                    for (int j = 0; j < 4; j++)
                    {
                        if ((RGaugeM4L.ref_intSelectedGaugeEdgeMask & (0x01 << j)) > 0)
                        {
                            if (RGaugeM4L.GetGaugeImageMode(j) == 0)
                            {
                                RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                if (RGaugeM4L.GetGaugeWantImageThreshold(j))
                                    RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                            }
                            else
                            {
                                //m_RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, j);
                                //m_RGaugeM4L.AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, j);

                                RGaugeM4L.AddHighPassForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                RGaugeM4L.AddGainForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                if (RGaugeM4L.GetGaugeWantImageThreshold(j))
                                    RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                            }
                        }
                    }
                }
                //else
                //{
                //    int intLineGaugeSelectedIndex = GetLineGaugeSelectedIndex(0);
                //    ImageDrawing objSourceImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                //    if (RGaugeM4L.GetGaugeImageMode(intLineGaugeSelectedIndex) == 0)
                //    {
                //        RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                //        if (RGaugeM4L.GetGaugeWantImageThreshold(intLineGaugeSelectedIndex))
                //            RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);

                //    }
                //    //else
                //    //{
                //    //    m_RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, intLineGaugeSelectedIndex);
                //    //    m_RGaugeM4L.AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);

                //    //}
                //}
            }
            else
            {
                //if (m_blnSetToAll)
                {
                    ImageDrawing objSourceImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                    for (int j = 0; j < 4; j++)
                    {
                        if ((RGaugeM4L.ref_intSelectedGaugeEdgeMask & (0x01 << j)) > 0)
                        {
                            if (RGaugeM4L.GetGaugeImageMode(j) == 0)
                            {
                                RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                if (RGaugeM4L.GetGaugeWantImageThreshold(j))
                                    RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                            }
                            else
                            {
                                //m_RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, j);
                                //m_RGaugeM4L.AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, j);
                                
                                RGaugeM4L.AddHighPassForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                RGaugeM4L.AddGainForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                if (RGaugeM4L.GetGaugeWantImageThreshold(j))
                                    RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                            }
                        }

                    }
                }
                //else
                //{
                //    int intLineGaugeSelectedIndex = GetLineGaugeSelectedIndex(0);
                //    ImageDrawing objSourceImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                //    if (RGaugeM4L.GetGaugeImageMode(intLineGaugeSelectedIndex) == 0)
                //    {
                //        RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                //        if (RGaugeM4L.GetGaugeWantImageThreshold(intLineGaugeSelectedIndex))
                //            RGaugeM4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);

                //    }
                //    //else
                //    //{
                //    //    m_RGaugeM4L.AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, intLineGaugeSelectedIndex);
                //    //    m_RGaugeM4L.AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                //    //}
                //}
            }
            
        }
        private void UpdatePackageImage_ForRectGauge4LPad()
        {
            if (m_smVisionInfo.g_blnViewRotatedImage || (m_intVisionType == 0 && ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos))== 0)))
            {
                m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage].CopyTo(ref m_smVisionInfo.g_objPackageImage);
            }
            else
            {
                m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage].CopyTo(ref m_smVisionInfo.g_objPackageImage);
            }

            int intPadSelectedIndex = 0;
            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                    continue;

                if (m_smVisionInfo.g_intSelectedROI != i)
                    continue;

                    intPadSelectedIndex = i;
                //if (m_intPadSelectedIndex == 0)
                //{
                //    intPadSelectedIndex = m_intPadSelectedIndex;
                //}
                //else
                //{
                //    if (i == 0)
                //        continue;

                //    if (chk_ApplyToAllSideROI.Checked)
                //    {
                //        intPadSelectedIndex = i;
                //    }
                //    else
                //    {
                //        intPadSelectedIndex = m_intPadSelectedIndex;
                //    }
                //}

                if (m_smVisionInfo.g_blnViewRotatedImage || (m_intVisionType == 0 && ((m_smCustomizeInfo.g_intWantOrient & (1 << m_smVisionInfo.g_intVisionPos)) > 0) && ((m_smCustomizeInfo.g_intWantPackage & (1 << m_smVisionInfo.g_intVisionPos)) == 0)))
                {
                    //if (m_blnSetToAll)
                    {
                        ImageDrawing objSourceImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                        for (int j = 0; j < 4; j++)
                        {
                            if ((m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_intSelectedGaugeEdgeMask & (0x01 << j)) > 0)
                            {
                                if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeImageMode(j) == 0)
                                {

                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                    if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeWantImageThreshold(j))
                                        m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddOpenCloseForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, j);
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, j);
                                }
                            }
                        }
                    }
                    //else
                    //{
                    //    int intLineGaugeSelectedIndex = GetLineGaugeSelectedIndex(intPadSelectedIndex);
                    //    ImageDrawing objSourceImage = m_smVisionInfo.g_arrRotatedImages[m_smVisionInfo.g_intSelectedImage];
                    //    if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeImageMode(intLineGaugeSelectedIndex) == 0)
                    //    {
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //        if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeWantImageThreshold(intLineGaugeSelectedIndex))
                    //            m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddOpenCloseForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //    }
                    //    else
                    //    {
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, intLineGaugeSelectedIndex);
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);

                    //    }
                    //}
                }
                else
                {
                    //if (m_blnSetToAll)
                    {
                        ImageDrawing objSourceImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                        for (int j = 0; j < 4; j++)
                        {
                            if ((m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_intSelectedGaugeEdgeMask & (0x01 << j)) > 0)
                            {
                                if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeImageMode(j) == 0)
                                {
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, j);
                                    if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeWantImageThreshold(j))
                                        m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddOpenCloseForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, j);
                                }
                                else
                                {
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, j);
                                    m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, j);
                                }
                            }

                        }
                    }
                    //else
                    //{
                    //    int intLineGaugeSelectedIndex = GetLineGaugeSelectedIndex(intPadSelectedIndex);
                    //    ImageDrawing objSourceImage = m_smVisionInfo.g_arrImages[m_smVisionInfo.g_intSelectedImage];
                    //    if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeImageMode(intLineGaugeSelectedIndex) == 0)
                    //    {
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //        if (m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.GetGaugeWantImageThreshold(intLineGaugeSelectedIndex))
                    //            m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddThresholdForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].ref_objRectGauge4L.AddOpenCloseForEdgeROI(ref m_smVisionInfo.g_objPackageImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //    }
                    //    else
                    //    {
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddGainForEdgeROI(ref objSourceImage, ref m_smVisionInfo.g_objPkgProcessImage, intLineGaugeSelectedIndex);
                    //        m_smVisionInfo.g_arrPad[intPadSelectedIndex].AddPrewittForEdgeROI(ref m_smVisionInfo.g_objPkgProcessImage, ref m_smVisionInfo.g_objPackageImage, intLineGaugeSelectedIndex);
                    //    }
                    //}
                }

                //if (!chk_ApplyToAllSideROI.Checked)
                //    break;
            }
        }

        private void DrawPadROITolerance()
        {
            float fLengthTop = 0;
            float fLengthRight = 0;
            float fLengthBottom = 0;
            float fLengthLeft = 0;
            int intStartX = 0;
            int intStartY = 0;
            int intEndX = 0;
            int intEndY = 0;
            int intExtendX = 0;
            int intExtendX2 = 0;
            int intExtendY = 0;
            int intExtendY2 = 0;

            float newX1 = 0, newY1 = 0;  // new point 1
            float newX2 = 0, newY2 = 0; // new point 2
            float newX3 = 0, newY3 = 0; // new point 3
            float newX4 = 0, newY4 = 0; // new point 4
            PointF[] CornerPoints = new PointF[4];

            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                /*
                 * 2020 02 23 - CCENG: when is blnMeasureCenterPkgSizeUsingSidePkg, no need purposely get corner points from side pad. 
                 *                   : during gauge measurement at steps 2, the function MeasureEdge_UsingSidePkgCornerPoint have been called and the corner points from side pad have been transfer to center gauge.
                 */
                //if (i == 0 && m_smVisionInfo.g_arrPad.Length == 5 && m_smVisionInfo.g_arrPad[0].ref_blnMeasureCenterPkgSizeUsingSidePkg && m_smVisionInfo.g_blnCheck4Sides)
                //{
                //    fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                //    fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                //    fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                //    fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                //    PointF p1 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[0].X - fLengthLeft, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[0].Y - fLengthTop);
                //    PointF p2 = new PointF(m_smVisionInfo.g_arrPad[1].ref_objRectGauge4L.ref_arrRectCornerPoints[1].X + fLengthRight, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[1].Y - fLengthTop);
                //    PointF p3 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[2].X + fLengthLeft, m_smVisionInfo.g_arrPad[2].ref_objRectGauge4L.ref_arrRectCornerPoints[2].Y + fLengthBottom);
                //    PointF p4 = new PointF(m_smVisionInfo.g_arrPad[3].ref_objRectGauge4L.ref_arrRectCornerPoints[3].X - fLengthRight, m_smVisionInfo.g_arrPad[4].ref_objRectGauge4L.ref_arrRectCornerPoints[3].Y + fLengthBottom);
                //    m_Graphic.DrawLine(new Pen(Color.Yellow), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY);
                //    m_Graphic.DrawLine(new Pen(Color.Yellow), p2.X * m_smVisionInfo.g_fScaleX, p2.Y * m_smVisionInfo.g_fScaleY, p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY);
                //    m_Graphic.DrawLine(new Pen(Color.Yellow), p3.X * m_smVisionInfo.g_fScaleX, p3.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                //    m_Graphic.DrawLine(new Pen(Color.Yellow), p1.X * m_smVisionInfo.g_fScaleX, p1.Y * m_smVisionInfo.g_fScaleY, p4.X * m_smVisionInfo.g_fScaleX, p4.Y * m_smVisionInfo.g_fScaleY);
                //}
                //else
                {

                    fLengthTop = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop;
                    fLengthRight = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight;
                    fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom;
                    fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft;

                    intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X - fLengthLeft -
                                                 (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);

                    intEndX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X + fLengthRight +
                                                 (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX);

                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y - fLengthTop -
                                                (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    intEndY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y + fLengthBottom +
                                               (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    {

                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), intStartX, intStartY, intEndX - intStartX, intEndY - intStartY);

                    }
                    else
                    {
                        //CornerPoints = m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_arrRectCornerPoints;
                        //newX1 = CornerPoints[0].X;
                        //newX2 = CornerPoints[1].X;
                        //newX3 = CornerPoints[2].X;
                        //newX4 = CornerPoints[3].X;
                        //newY1 = CornerPoints[0].Y;
                        //newY2 = CornerPoints[1].Y;
                        //newY3 = CornerPoints[2].Y;
                        //newY4 = CornerPoints[3].Y;
                        //if (m_smVisionInfo.g_blnViewRotatedImage)
                        //{
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X, CornerPoints[0].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X, CornerPoints[1].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X, CornerPoints[2].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X, CornerPoints[3].Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);

                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X - fLengthLeft, CornerPoints[0].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X + fLengthRight, CornerPoints[1].Y - fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X + fLengthRight, CornerPoints[2].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //    Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X - fLengthLeft, CornerPoints[3].Y + fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                        //}
                        //else
                        //{
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //    //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[0].X + fLengthLeft, CornerPoints[0].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX1, ref newY1);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[1].X - fLengthRight, CornerPoints[1].Y + fLengthTop, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX2, ref newY2);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[2].X - fLengthRight, CornerPoints[2].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX3, ref newY3);
                        //    //Math2.RotateWithAngleAccordingToReferencePoint(m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y, CornerPoints[3].X + fLengthLeft, CornerPoints[3].Y - fLengthBottom, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_fRectAngle, ref newX4, ref newY4);
                        //    newX1 = CornerPoints[0].X - fLengthLeft;
                        //    newX2 = CornerPoints[1].X + fLengthRight;
                        //    newX3 = CornerPoints[2].X + fLengthRight;
                        //    newX4 = CornerPoints[3].X - fLengthLeft;
                        //    newY1 = CornerPoints[0].Y - fLengthTop;
                        //    newY2 = CornerPoints[1].Y - fLengthTop;
                        //    newY3 = CornerPoints[2].Y + fLengthBottom;
                        //    newY4 = CornerPoints[3].Y + fLengthBottom;
                        //}
                        //m_Graphic.DrawLine(new Pen(Color.Yellow), newX1 * m_smVisionInfo.g_fScaleX, newY1 * m_smVisionInfo.g_fScaleY, (newX2) * m_smVisionInfo.g_fScaleX, (newY2) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Yellow), newX2 * m_smVisionInfo.g_fScaleX, newY2 * m_smVisionInfo.g_fScaleY, (newX3) * m_smVisionInfo.g_fScaleX, (newY3) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Yellow), newX3 * m_smVisionInfo.g_fScaleX, newY3 * m_smVisionInfo.g_fScaleY, (newX4) * m_smVisionInfo.g_fScaleX, (newY4) * m_smVisionInfo.g_fScaleY);
                        //m_Graphic.DrawLine(new Pen(Color.Yellow), newX4 * m_smVisionInfo.g_fScaleX, newY4 * m_smVisionInfo.g_fScaleY, (newX1) * m_smVisionInfo.g_fScaleX, (newY1) * m_smVisionInfo.g_fScaleY);

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                            m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                        PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) - fLengthTop);

                        PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) - fLengthLeft,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                        PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) + fLengthRight,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) + fLengthBottom);

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[3][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                    }
                }
            }
        }
        private void DrawPadColorROITolerance()
        {
            float fLengthTop = 0;
            float fLengthRight = 0;
            float fLengthBottom = 0;
            float fLengthLeft = 0;
            int intStartX = 0;
            int intStartY = 0;
            int intEndX = 0;
            int intEndY = 0;
            int intExtendX = 0;
            int intExtendX2 = 0;
            int intExtendY = 0;
            int intExtendY2 = 0;

            float newX1 = 0, newY1 = 0;  // new point 1
            float newX2 = 0, newY2 = 0; // new point 2
            float newX3 = 0, newY3 = 0; // new point 3
            float newX4 = 0, newY4 = 0; // new point 4
            PointF[] CornerPoints = new PointF[4];

            for (int i = 0; i < m_smVisionInfo.g_arrPad.Length; i++)
            {
                if (m_smVisionInfo.g_intSelectedColorThresholdIndex == -1)
                    break;

                if (i > 0 && !m_smVisionInfo.g_blnCheck4Sides)
                    break;

                if ((i == 0) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x01) == 0))
                    continue;
                else if ((i == 1) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x02) == 0))
                    continue;
                else if ((i == 2) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x04) == 0))
                    continue;
                else if ((i == 3) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x08) == 0))
                    continue;
                else if ((i == 4) && ((m_smVisionInfo.g_arrPad[m_smVisionInfo.g_intSelectedROI].ref_intColorPadGroupIndex & 0x10) == 0))
                    continue;

                fLengthTop = m_smVisionInfo.g_arrPad[i].ref_arrDefectColorInspection_Top[m_smVisionInfo.g_intSelectedColorThresholdIndex];
                fLengthRight = m_smVisionInfo.g_arrPad[i].ref_arrDefectColorInspection_Right[m_smVisionInfo.g_intSelectedColorThresholdIndex];
                fLengthBottom = m_smVisionInfo.g_arrPad[i].ref_arrDefectColorInspection_Bottom[m_smVisionInfo.g_intSelectedColorThresholdIndex];
                fLengthLeft = m_smVisionInfo.g_arrPad[i].ref_arrDefectColorInspection_Left[m_smVisionInfo.g_intSelectedColorThresholdIndex];

                if (m_smVisionInfo.g_arrPad[0].GetOverallWantGaugeMeasurePkgSize(false))
                {
                    intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X + fLengthLeft - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft -
                                             (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);

                    intEndX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.X - fLengthRight + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight +
                                                 (m_smVisionInfo.g_arrPad[i].GetResultMaxWidth_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleX);

                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y + fLengthTop - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop -
                                                (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    intEndY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.ref_pRectCenterPoint.Y - fLengthBottom + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom +
                                               (m_smVisionInfo.g_arrPad[i].GetResultMaxHeight_RectGauge4L(0) / 2)) * m_smVisionInfo.g_fScaleY);

                    if (m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle() == 0)
                    {

                        m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), intStartX, intStartY, intEndX - intStartX, intEndY - intStartY);

                    }
                    else
                    {

                        float fPkgSizeWidth = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultUpWidth_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultDownWidth_RectGauge4L(0));
                        float fPkgSizeHeight = Math.Max(m_smVisionInfo.g_arrPad[i].GetResultLeftHeight_RectGauge4L(0), m_smVisionInfo.g_arrPad[i].GetResultRightHeight_RectGauge4L(0));

                        PointF pTL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft,
                            m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop);

                        PointF pTR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y - (fPkgSizeHeight / 2) + fLengthTop - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop);

                        PointF pBL = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X - (fPkgSizeWidth / 2) + fLengthLeft - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom);

                        PointF pBR = new PointF(m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().X + (fPkgSizeWidth / 2) - fLengthRight + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight,
                           m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_RectGauge4L().Y + (fPkgSizeHeight / 2) - fLengthBottom + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom);

                        if (i == 1)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pBL.X, pBL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pBR.X, pBR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pBL = new PointF(newX1, pBL.Y);
                            pBR = new PointF(newX2, pBR.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 2)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTR.X, pTR.Y, pTL.X, pTL.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pBL.X, pBL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(pTL.X, newY1);
                            pBL = new PointF(pBL.X, newY2);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 3)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pTL.X, pTL.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBR.X, pBR.Y, pTR.X, pTR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTL = new PointF(newX1, pTL.Y);
                            pTR = new PointF(newX2, pTR.Y);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                        else if (i == 4)
                        {
                            Math2.RotateWithAngleAccordingToReferencePoint(pTL.X, pTL.Y, pTR.X, pTR.Y, m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX1, ref newY1);
                            Math2.RotateWithAngleAccordingToReferencePoint(pBL.X, pBL.Y, pBR.X, pBR.Y, -m_smVisionInfo.g_arrPad[i].ref_objRectGauge4L.GetGaugeTiltAngle(), ref newX2, ref newY2);
                            pTR = new PointF(pTR.X, newY1);
                            pBR = new PointF(pBR.X, newY2);

                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTR.X * m_smVisionInfo.g_fScaleX, pTR.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY, pBR.X * m_smVisionInfo.g_fScaleX, pBR.Y * m_smVisionInfo.g_fScaleY);
                            m_Graphic.DrawLine(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), pTL.X * m_smVisionInfo.g_fScaleX, pTL.Y * m_smVisionInfo.g_fScaleY, pBL.X * m_smVisionInfo.g_fScaleX, pBL.Y * m_smVisionInfo.g_fScaleY);

                        }
                    }
                }
                else
                {
                    intStartX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().X + fLengthLeft - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromLeft -
                                             (m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Width / 2)) * m_smVisionInfo.g_fScaleX); // (int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalX * m_smVisionInfo.g_fScaleX);
                    intExtendX = (int)(fLengthLeft * m_smVisionInfo.g_fScaleX);

                    intEndX = (int)Math.Round((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().X - fLengthRight + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromRight +
                                                 (m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Width / 2)) * m_smVisionInfo.g_fScaleX);

                    intExtendX2 = (int)(fLengthRight * m_smVisionInfo.g_fScaleX);

                    intStartY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().Y + fLengthTop - m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromTop -
                                                (m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Height / 2)) * m_smVisionInfo.g_fScaleY); //(int)(m_smVisionInfo.g_arrPadROIs[i][2].ref_ROITotalY * m_smVisionInfo.g_fScaleY);
                    intExtendY = (int)(fLengthTop * m_smVisionInfo.g_fScaleY);
                    intExtendY2 = (int)(fLengthBottom * m_smVisionInfo.g_fScaleY);

                    intEndY = (int)Math.Round((m_smVisionInfo.g_arrPad[i].GetResultCenterPoint_UnitMatcher().Y - fLengthBottom + m_smVisionInfo.g_arrPad[i].ref_intPadROIStartPixelFromBottom +
                                               (m_smVisionInfo.g_arrPad[i].GetPatternSize_UnitMatcher().Height / 2)) * m_smVisionInfo.g_fScaleY);

                    m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPadROIColor[8][0]), intStartX, intStartY, intEndX - intStartX, intEndY - intStartY);
                }
            }
        }
        private void DrawPackageColorROITolerance()
        {
            if (m_smVisionInfo.g_intSelectedColorThresholdIndex == -1)
                return;
            
            float fLengthTop = 0;
            float fLengthRight = 0;
            float fLengthBottom = 0;
            float fLengthLeft = 0;
            float intStartX = 0;
            float intStartY = 0;
            int intExtendX = 0;
            int intExtendX2 = 0;
            int intExtendY = 0;
            int intExtendY2 = 0;
            //Pen pen = new Pen(Color.Red);
            //if (m_smVisionInfo.g_intLearnStepNo == 3)
            //    pen = new Pen(Color.Cyan);
            float fCenterX = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X;
            float fCenterY = m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y;

            float UnitWidth = (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth);
            float UnitHeight = (m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight);
            intStartX = (fCenterX - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX ;
            intStartY = (fCenterY - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2);// - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY ;

            fLengthTop = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectColorInspection_Top[m_smVisionInfo.g_intSelectedColorThresholdIndex];
            fLengthRight = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectColorInspection_Right[m_smVisionInfo.g_intSelectedColorThresholdIndex];
            fLengthBottom = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectColorInspection_Bottom[m_smVisionInfo.g_intSelectedColorThresholdIndex];
            fLengthLeft = m_smVisionInfo.g_arrPackage[m_smVisionInfo.g_intSelectedUnit].ref_arrDefectColorInspection_Left[m_smVisionInfo.g_intSelectedColorThresholdIndex];

            //  intStartX = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterX - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIWidth / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleX);
            intExtendX = (int)(fLengthLeft);
            intExtendX2 = (int)(fLengthRight);

            // intStartY = (int)((int)Math.Round(m_smVisionInfo.g_arrPackageGauge[0].ref_ObjectCenterY - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY - (float)m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIHeight / 2, 0, MidpointRounding.AwayFromZero) * m_smVisionInfo.g_fScaleY);
            intExtendY = (int)(fLengthTop);
            intExtendY2 = (int)(fLengthBottom);



            m_Graphic.DrawRectangle(new Pen(m_smVisionInfo.g_arrPackageROIColor[0][2]),
                (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalX + intExtendX) * m_smVisionInfo.g_fScaleX,
                (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROITotalY + intExtendY) * m_smVisionInfo.g_fScaleY,
                (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIWidth - intExtendX - intExtendX2) * m_smVisionInfo.g_fScaleX,
                (m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].ref_ROIHeight - intExtendY - intExtendY2) * m_smVisionInfo.g_fScaleY);

            //ROI objROI = new ROI();
            //objROI.AttachImage(m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0]);
            //objROI.LoadROISetting((int)Math.Round((m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.X - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth / 2) - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionX, 0, MidpointRounding.AwayFromZero) + intExtendX,
            //                                     (int)Math.Round((m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_pRectCenterPoint.Y - m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight / 2) - m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][0].ref_ROIPositionY, 0, MidpointRounding.AwayFromZero) + intExtendY,
            //                                     (int)Math.Round(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectWidth, 0, MidpointRounding.AwayFromZero) - intExtendX - intExtendX2,
            //                                     (int)Math.Round(m_smVisionInfo.g_arrPackageGaugeM4L[m_smVisionInfo.g_intSelectedUnit].ref_fRectHeight, 0, MidpointRounding.AwayFromZero) - intExtendY - intExtendY2);
            //objROI.DrawROI(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrPackageROIs[m_smVisionInfo.g_intSelectedUnit][1].GetROIHandle(), 5, m_smVisionInfo.g_arrPackageROIColor[0][0]);

            //objROI.Dispose();
        }
        private void UpdatePocketEdgeDontCareImage()
        {
            if (m_smVisionInfo.g_intLearnStepNo != 3)
                return;

            m_smVisionInfo.g_arrImages[m_smVisionInfo.g_arrLead[0].ref_intImageViewNo].CopyTo(ref m_smVisionInfo.g_objPackageImage);

            //int intPadSelectedIndex = 0;

            ImageDrawing objSourceImage = m_smVisionInfo.g_objPackageImage;
            for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
            {
                if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) == 0))
                    continue;
                if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) == 0))
                    continue;
                if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) == 0))
                    continue;
                if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) == 0))
                    continue;

                if (m_smVisionInfo.g_objPackageImage.ref_intImageWidth != objSourceImage.ref_intImageWidth || m_smVisionInfo.g_objPackageImage.ref_intImageHeight != objSourceImage.ref_intImageHeight)
                {
                    m_smVisionInfo.g_objPackageImage.SetImageSize(objSourceImage.ref_intImageWidth, objSourceImage.ref_intImageHeight);
                }
                m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].AttachImage(objSourceImage);
                m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].GainTo_ROIToROISamePosition(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.ref_fGaugeImageGain);
                m_smVisionInfo.g_arrLeadPocketDontCareROIsAuto[i][0].ThresholdTo_ROIToROISamePosition(ref m_smVisionInfo.g_objPackageImage, m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.ref_intGaugeImageThreshold);

            }
        }
        private void TriggerOfflineTest()
        {
            // 29-07-2019 ZJYEOH : If user pressed test button, then Image should stop live
            if (m_smVisionInfo.AT_PR_StartLiveImage)
            {
                m_smVisionInfo.AT_PR_StartLiveImage = false;
                m_smVisionInfo.AT_PR_TriggerLiveImage = true;
            }

            m_smVisionInfo.AT_VM_OfflineTestForSetting = true;
            m_smVisionInfo.PR_MN_TestDone = false;
            m_smVisionInfo.MN_PR_StartTest = true;

            HiPerfTimer timeout = new HiPerfTimer();
            timeout.Start();
            while (true)
            {
                if (m_smVisionInfo.PR_MN_TestDone)
                {
                    break;
                }

                if (timeout.Timing > 3000)
                {
                    break;
                }

                System.Threading.Thread.Sleep(1);
            }
        }

        private void DrawRectangle()
        {
            // 2020 02 18 - Drawing retangle with dashed shape line during select char ROI, or pad object or lead object
            //            - Need to keep drawwing under UpdatePictureBox bcos the rectangle will disappear if draw under mouse move only.
            if (m_blnDrawRect)
            {
                // Draw the reversible frame.
                ControlPaint.DrawReversibleFrame(rc,
                                Color.White, FrameStyle.Dashed);

               //m_blnDrawRect = false;    // 2020 02 19 - CCENG: cannot set the DrawRect false here bcos the selection will have no effect if set DrawRect to false too early.
            }
        }
        private float FindPocketShadowBlob(int intLeadIndex)
        {
            if (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[0].Count > 0)
            {
                m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[0][0].AttachImage(m_smVisionInfo.g_objPackageImage);
            }

            for (int i = 0; i < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob.Count; i++)
            {
                for (int j = 0; j < m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i].Count; j++)
                {
                    m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][j].AttachImage(m_smVisionInfo.g_objPackageImage);
                }
            }

            ROI objROI = new ROI();
            objROI.AttachImage(m_smVisionInfo.g_objPackageImage);
            switch (intLeadIndex)
            {
                case 1:
                    objROI.LoadROISetting(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalX,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalY,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIWidth,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIHeight + m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward);
                    break;
                case 2:
                    objROI.LoadROISetting(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalX - m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalY,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIWidth + m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIHeight);
                    break;
                case 3:
                    objROI.LoadROISetting(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalX,
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalY - m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward,
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIWidth,
                                    m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIHeight + m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward);
                    break;
                case 4:
                    objROI.LoadROISetting(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalX,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROITotalY,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIWidth + m_smVisionInfo.g_arrLead[intLeadIndex].ref_intDontCareBlobROIInward,
                            m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[intLeadIndex][0].ref_ROIHeight);
                    break;
            }

            float fInwardDontCareROILimit = m_smVisionInfo.g_arrLead[intLeadIndex].BuildDontCareArea(objROI, true);
            //objROI.SaveImage("D:\\TS\\objROI.bmp");
            //objDontCareROI.Dispose();
            objROI.Dispose();
            return fInwardDontCareROILimit;

        }

        private void DrawLeadDontCareROI()
        {
            if (m_smVisionInfo.g_intSelectedImage != m_smVisionInfo.g_arrLead[0].ref_intImageViewNo && m_smVisionInfo.g_intSelectedImage != 0)
                return;

            if (m_smVisionInfo.g_blnWantPocketDontCareAreaAuto_Lead && m_smVisionInfo.g_pLeadDontCareRotateCenter.X != -1 && m_smVisionInfo.g_pLeadDontCareRotateCenter.Y != -1)
            {
                for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                {
                    if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x01) == 0))
                        continue;
                    if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x02) == 0))
                        continue;
                    if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x04) == 0))
                        continue;
                    if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIAutoMask & 0x08) == 0))
                        continue;

                    PointF pCenter = m_smVisionInfo.g_pLeadDontCareRotateCenter;

                    float fAngle = 0;
                    if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intImageViewNo)
                        fAngle = m_smVisionInfo.g_fPreciseAngle;
                    else
                    {
                        int intOrientAngle = 0;
                        switch (m_smVisionInfo.g_intOrientResult[0])
                        {
                            default:
                            case 0:
                                intOrientAngle = 0;
                                break;
                            case 1:
                                intOrientAngle = 90;
                                break;
                            case 2:
                                intOrientAngle = 180;
                                break;
                            case 3:
                                intOrientAngle = -90;
                                break;
                        }
                        fAngle = intOrientAngle + m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing;
                    }

                    m_smVisionInfo.g_arrLead[i].ref_objPocketEdgeGauge.DrawPGauge(m_Graphic, m_smVisionInfo.g_fScaleX, m_smVisionInfo.g_fScaleY, m_smVisionInfo.g_arrLead[i].ref_intLineOffset, m_smVisionInfo.g_arrLead[i].ref_intMaskThickness, fAngle, pCenter);
                }
            }
            else if (m_smVisionInfo.g_blnWantPocketDontCareAreaManual_Lead && m_smVisionInfo.g_pLeadDontCareRotateCenter.X != -1 && m_smVisionInfo.g_pLeadDontCareRotateCenter.Y != -1)
            {
                for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                {

                    if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x01) == 0))
                        continue;
                    else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x02) == 0))
                        continue;
                    else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x04) == 0))
                        continue;
                    else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIManualMask & 0x08) == 0))
                        continue;

                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsManual[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                    PointF pCenter = m_smVisionInfo.g_pLeadDontCareRotateCenter;

                    float fAngle = 0;
                    if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intImageViewNo)
                        fAngle = m_smVisionInfo.g_fPreciseAngle;
                    else
                    {
                        int intOrientAngle = 0;
                        switch (m_smVisionInfo.g_intOrientResult[0])
                        {
                            default:
                            case 0:
                                intOrientAngle = 0;
                                break;
                            case 1:
                                intOrientAngle = 90;
                                break;
                            case 2:
                                intOrientAngle = 180;
                                break;
                            case 3:
                                intOrientAngle = -90;
                                break;
                        }
                        fAngle = intOrientAngle + m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing;
                    }

                    PointF pTemp = new PointF();
                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[0],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[0] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[1],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[1] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[2],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[2] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[3],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[3] = pTemp;

                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[0], arrPoints[1]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[1], arrPoints[2]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[2], arrPoints[3]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[3], arrPoints[0]);

                }
            }
            else if (m_smVisionInfo.g_blnWantPocketDontCareAreaBlob_Lead && m_smVisionInfo.g_pLeadDontCareRotateCenter.X != -1 && m_smVisionInfo.g_pLeadDontCareRotateCenter.Y != -1)
            {
                for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                {

                    if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x01) == 0))
                        continue;
                    else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x02) == 0))
                        continue;
                    else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x04) == 0))
                        continue;
                    else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIBlobMask & 0x08) == 0))
                        continue;

                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);

                    int intOffset = 0;

                    switch (i)
                    {
                        case 1:
                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] == -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] != -1)
                            {
                                intOffset = (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward;

                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[3][0].ref_ROITotalY - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 ((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[3][0].ref_ROITotalY - m_smVisionInfo.g_arrLead[3].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                            {
                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleY);
                            }
                            else
                                continue;
                            break;
                        case 2:
                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] == -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] != -1)
                            {
                                intOffset = m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROIWidth - (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4];

                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX + intOffset) * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF(((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[4][0].ref_ROITotalX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX + intOffset) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                            {
                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else
                                continue;
                            break;
                        case 3:
                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] != -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[3] == -1)
                            {
                                intOffset = m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROIHeight - (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1];

                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY + intOffset) * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 ((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[1][0].ref_ROITotalY + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[1] + m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceY + intOffset) + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                            {
                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY - m_smVisionInfo.g_arrLead[i].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else
                                continue;
                            break;
                        case 4:
                            if (m_smVisionInfo.g_arrLead[0].ref_blnFlipToOppositeFunction && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] != -1 && m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[4] == -1)
                            {
                                intOffset = (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward;

                                pStart = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[2][0].ref_ROITotalX - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF(((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[2][0].ref_ROITotalX - m_smVisionInfo.g_arrLead[2].ref_intDontCareBlobROIInward + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[2] - m_smVisionInfo.g_intLeadPocketDontCareROIBlobDistanceX - intOffset - m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIWidth) + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else if (m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i] != -1)
                            {
                                pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);

                                pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionX + (int)m_smVisionInfo.g_arrInwardDontCareROIBlobLimit[i]) * m_smVisionInfo.g_fScaleX,
                                                 (m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsBlob[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                            }
                            else
                                continue;
                            break;
                    }

                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                    PointF pCenter = m_smVisionInfo.g_pLeadDontCareRotateCenter;

                    float fAngle = 0;
                    if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intImageViewNo)
                        fAngle = m_smVisionInfo.g_fPreciseAngle;
                    else
                    {
                        int intOrientAngle = 0;
                        switch (m_smVisionInfo.g_intOrientResult[0])
                        {
                            default:
                            case 0:
                                intOrientAngle = 0;
                                break;
                            case 1:
                                intOrientAngle = 90;
                                break;
                            case 2:
                                intOrientAngle = 180;
                                break;
                            case 3:
                                intOrientAngle = -90;
                                break;
                        }
                        fAngle = intOrientAngle + m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing;
                    }

                    PointF pTemp = new PointF();
                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[0],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[0] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[1],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[1] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[2],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[2] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[3],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[3] = pTemp;

                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[0], arrPoints[1]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[1], arrPoints[2]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[2], arrPoints[3]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[3], arrPoints[0]);

                }
            }
            else if (m_smVisionInfo.g_blnWantPocketDontCareAreaFix_Lead && m_smVisionInfo.g_pLeadDontCareRotateCenter.X != -1 && m_smVisionInfo.g_pLeadDontCareRotateCenter.Y != -1)
            {
                for (int i = 1; i < m_smVisionInfo.g_arrLead.Length; i++)
                {

                    if ((i == 1) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x01) == 0))
                        continue;
                    else if ((i == 2) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x02) == 0))
                        continue;
                    else if ((i == 3) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x04) == 0))
                        continue;
                    else if ((i == 4) && ((m_smVisionInfo.g_intLeadPocketDontCareROIFixMask & 0x08) == 0))
                        continue;

                    PointF pStart = new PointF(m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionX * m_smVisionInfo.g_fScaleX,
                                               m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionY * m_smVisionInfo.g_fScaleY);
                    PointF pEnd = new PointF((m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionX + m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIWidth) * m_smVisionInfo.g_fScaleX,
                                             (m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIPositionY + m_smVisionInfo.g_arrLeadPocketDontCareROIsFix[i][0].ref_ROIHeight) * m_smVisionInfo.g_fScaleY);
                    List<PointF> arrPoints = new List<PointF>(); // 0:Top Left, 1: Top Right, 2:Bottom Right, 3:Bottom Left
                    arrPoints.Add(new PointF(pStart.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pStart.Y));
                    arrPoints.Add(new PointF(pEnd.X, pEnd.Y));
                    arrPoints.Add(new PointF(pStart.X, pEnd.Y));

                    PointF pCenter = m_smVisionInfo.g_pLeadDontCareRotateCenter;

                    float fAngle = 0;
                    if (m_smVisionInfo.g_intSelectedImage == m_smVisionInfo.g_arrLead[0].ref_intImageViewNo)
                        fAngle = m_smVisionInfo.g_fPreciseAngle;
                    else
                    {
                        int intOrientAngle = 0;
                        switch (m_smVisionInfo.g_intOrientResult[0])
                        {
                            default:
                            case 0:
                                intOrientAngle = 0;
                                break;
                            case 1:
                                intOrientAngle = 90;
                                break;
                            case 2:
                                intOrientAngle = 180;
                                break;
                            case 3:
                                intOrientAngle = -90;
                                break;
                        }
                        fAngle = intOrientAngle + m_smVisionInfo.g_arrLead[0].ref_fCenterUnitCompensateAngle_ForDrawing;
                    }

                    PointF pTemp = new PointF();
                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[0],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[0] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[1],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[1] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[2],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[2] = pTemp;

                    Math2.GetNewXYAfterRotate_360deg(pCenter.X * m_smVisionInfo.g_fScaleX, //(pEnd.X + pStart.X) / 2,
                                                     pCenter.Y * m_smVisionInfo.g_fScaleY, //(pEnd.Y + pStart.Y) / 2,
                                                     arrPoints[3],
                                                     fAngle,
                                                     ref pTemp);
                    arrPoints[3] = pTemp;

                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[0], arrPoints[1]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[1], arrPoints[2]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[2], arrPoints[3]);
                    m_Graphic.DrawLine(new Pen(Color.LightGray), arrPoints[3], arrPoints[0]);

                }
            }
        }
    }
}